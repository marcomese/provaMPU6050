
provaMPU6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012678  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000017e0  08012818  08012818  00022818  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013ff8  08013ff8  0003021c  2**0
                  CONTENTS
  4 .ARM          00000008  08013ff8  08013ff8  00023ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014000  08014000  0003021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014000  08014000  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014004  08014004  00024004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000021c  20000000  08014008  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d48  20000220  08014224  00030220  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000f68  08014224  00030f68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003021c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020d12  00000000  00000000  0003024c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004cef  00000000  00000000  00050f5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001440  00000000  00000000  00055c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001678  00000000  00000000  00057090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b040  00000000  00000000  00058708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000193f6  00000000  00000000  00073748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094473  00000000  00000000  0008cb3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c3  00000000  00000000  00120fb1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000076a0  00000000  00000000  00121074  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000382a  00000000  00000000  00128714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000220 	.word	0x20000220
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08012800 	.word	0x08012800

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000224 	.word	0x20000224
 80001dc:	08012800 	.word	0x08012800

080001e0 <inv_fast_nomot_parameter.part.3>:
 80001e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80001e4:	2100      	movs	r1, #0
 80001e6:	b089      	sub	sp, #36	; 0x24
 80001e8:	4680      	mov	r8, r0
 80001ea:	2000      	movs	r0, #0
 80001ec:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80001f0:	2303      	movs	r3, #3
 80001f2:	469c      	mov	ip, r3
 80001f4:	f8cd 8004 	str.w	r8, [sp, #4]
 80001f8:	9b01      	ldr	r3, [sp, #4]
 80001fa:	e893 00c0 	ldmia.w	r3, {r6, r7}
 80001fe:	e9d3 ab06 	ldrd	sl, fp, [r3, #24]
 8000202:	fba6 0106 	umull	r0, r1, r6, r6
 8000206:	4604      	mov	r4, r0
 8000208:	fb06 f307 	mul.w	r3, r6, r7
 800020c:	ebba 0204 	subs.w	r2, sl, r4
 8000210:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8000214:	46a0      	mov	r8, r4
 8000216:	4699      	mov	r9, r3
 8000218:	eb6b 0303 	sbc.w	r3, fp, r3
 800021c:	1894      	adds	r4, r2, r2
 800021e:	eb43 0503 	adc.w	r5, r3, r3
 8000222:	18a2      	adds	r2, r4, r2
 8000224:	eb45 0303 	adc.w	r3, r5, r3
 8000228:	eb18 0402 	adds.w	r4, r8, r2
 800022c:	eb49 0503 	adc.w	r5, r9, r3
 8000230:	fb06 f105 	mul.w	r1, r6, r5
 8000234:	fb07 1104 	mla	r1, r7, r4, r1
 8000238:	fba6 2304 	umull	r2, r3, r6, r4
 800023c:	fbaa 450a 	umull	r4, r5, sl, sl
 8000240:	fb0a f00b 	mul.w	r0, sl, fp
 8000244:	46ab      	mov	fp, r5
 8000246:	46a2      	mov	sl, r4
 8000248:	440b      	add	r3, r1
 800024a:	eb0b 0140 	add.w	r1, fp, r0, lsl #1
 800024e:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8000252:	9103      	str	r1, [sp, #12]
 8000254:	9901      	ldr	r1, [sp, #4]
 8000256:	e9d1 010c 	ldrd	r0, r1, [r1, #48]	; 0x30
 800025a:	eb18 0408 	adds.w	r4, r8, r8
 800025e:	eb49 0509 	adc.w	r5, r9, r9
 8000262:	1a80      	subs	r0, r0, r2
 8000264:	eb61 0103 	sbc.w	r1, r1, r3
 8000268:	4689      	mov	r9, r1
 800026a:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 800026e:	fb06 f105 	mul.w	r1, r6, r5
 8000272:	464b      	mov	r3, r9
 8000274:	4680      	mov	r8, r0
 8000276:	0098      	lsls	r0, r3, #2
 8000278:	fb07 1304 	mla	r3, r7, r4, r1
 800027c:	fba6 4504 	umull	r4, r5, r6, r4
 8000280:	f1da 0a00 	rsbs	sl, sl, #0
 8000284:	441d      	add	r5, r3
 8000286:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800028a:	eb6b 0b4b 	sbc.w	fp, fp, fp, lsl #1
 800028e:	ea4f 0e88 	mov.w	lr, r8, lsl #2
 8000292:	ea4f 018b 	mov.w	r1, fp, lsl #2
 8000296:	f8cd e010 	str.w	lr, [sp, #16]
 800029a:	ea4f 0e8a 	mov.w	lr, sl, lsl #2
 800029e:	eb12 020e 	adds.w	r2, r2, lr
 80002a2:	ea40 7098 	orr.w	r0, r0, r8, lsr #30
 80002a6:	ea41 719a 	orr.w	r1, r1, sl, lsr #30
 80002aa:	414b      	adcs	r3, r1
 80002ac:	9005      	str	r0, [sp, #20]
 80002ae:	fb06 f105 	mul.w	r1, r6, r5
 80002b2:	fb07 1104 	mla	r1, r7, r4, r1
 80002b6:	4692      	mov	sl, r2
 80002b8:	469b      	mov	fp, r3
 80002ba:	fba6 2304 	umull	r2, r3, r6, r4
 80002be:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80002c2:	9801      	ldr	r0, [sp, #4]
 80002c4:	4699      	mov	r9, r3
 80002c6:	462b      	mov	r3, r5
 80002c8:	fb06 f303 	mul.w	r3, r6, r3
 80002cc:	fb07 3704 	mla	r7, r7, r4, r3
 80002d0:	4690      	mov	r8, r2
 80002d2:	fba6 2304 	umull	r2, r3, r6, r4
 80002d6:	e9d0 4512 	ldrd	r4, r5, [r0, #72]	; 0x48
 80002da:	eb14 040a 	adds.w	r4, r4, sl
 80002de:	eb45 050b 	adc.w	r5, r5, fp
 80002e2:	46a2      	mov	sl, r4
 80002e4:	4648      	mov	r0, r9
 80002e6:	4408      	add	r0, r1
 80002e8:	eb18 040a 	adds.w	r4, r8, sl
 80002ec:	46ab      	mov	fp, r5
 80002ee:	443b      	add	r3, r7
 80002f0:	eb40 050b 	adc.w	r5, r0, fp
 80002f4:	1910      	adds	r0, r2, r4
 80002f6:	eb43 0105 	adc.w	r1, r3, r5
 80002fa:	2800      	cmp	r0, #0
 80002fc:	f171 0300 	sbcs.w	r3, r1, #0
 8000300:	9b01      	ldr	r3, [sp, #4]
 8000302:	f103 0308 	add.w	r3, r3, #8
 8000306:	9301      	str	r3, [sp, #4]
 8000308:	db2f      	blt.n	800036a <inv_fast_nomot_parameter.part.3+0x18a>
 800030a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800030e:	4282      	cmp	r2, r0
 8000310:	418b      	sbcs	r3, r1
 8000312:	da01      	bge.n	8000318 <inv_fast_nomot_parameter.part.3+0x138>
 8000314:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8000318:	f1bc 0c01 	subs.w	ip, ip, #1
 800031c:	f47f af6c 	bne.w	80001f8 <inv_fast_nomot_parameter.part.3+0x18>
 8000320:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8000324:	f003 fb30 	bl	8003988 <__aeabi_l2f>
 8000328:	4b12      	ldr	r3, [pc, #72]	; (8000374 <inv_fast_nomot_parameter.part.3+0x194>)
 800032a:	ee07 0a10 	vmov	s14, r0
 800032e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8000332:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8000336:	ee17 0a90 	vmov	r0, s15
 800033a:	f003 fbcb 	bl	8003ad4 <__aeabi_f2lz>
 800033e:	4b0e      	ldr	r3, [pc, #56]	; (8000378 <inv_fast_nomot_parameter.part.3+0x198>)
 8000340:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8000344:	009b      	lsls	r3, r3, #2
 8000346:	f1c3 0220 	rsb	r2, r3, #32
 800034a:	fa01 f202 	lsl.w	r2, r1, r2
 800034e:	f1b3 0420 	subs.w	r4, r3, #32
 8000352:	fa20 f003 	lsr.w	r0, r0, r3
 8000356:	ea40 0002 	orr.w	r0, r0, r2
 800035a:	bf5c      	itt	pl
 800035c:	fa41 f404 	asrpl.w	r4, r1, r4
 8000360:	4320      	orrpl	r0, r4
 8000362:	4119      	asrs	r1, r3
 8000364:	b009      	add	sp, #36	; 0x24
 8000366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	e7cb      	b.n	800030a <inv_fast_nomot_parameter.part.3+0x12a>
 8000372:	bf00      	nop
 8000374:	20000240 	.word	0x20000240
 8000378:	20000bc0 	.word	0x20000bc0

0800037c <inv_init_maxmin>:
 800037c:	07c1      	lsls	r1, r0, #31
 800037e:	d50a      	bpl.n	8000396 <inv_init_maxmin+0x1a>
 8000380:	4b18      	ldr	r3, [pc, #96]	; (80003e4 <inv_init_maxmin+0x68>)
 8000382:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000386:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800038a:	6699      	str	r1, [r3, #104]	; 0x68
 800038c:	66d9      	str	r1, [r3, #108]	; 0x6c
 800038e:	6719      	str	r1, [r3, #112]	; 0x70
 8000390:	675a      	str	r2, [r3, #116]	; 0x74
 8000392:	679a      	str	r2, [r3, #120]	; 0x78
 8000394:	67da      	str	r2, [r3, #124]	; 0x7c
 8000396:	0782      	lsls	r2, r0, #30
 8000398:	d510      	bpl.n	80003bc <inv_init_maxmin+0x40>
 800039a:	4b12      	ldr	r3, [pc, #72]	; (80003e4 <inv_init_maxmin+0x68>)
 800039c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80003a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003a4:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
 80003a8:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
 80003ac:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
 80003b0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 80003b4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 80003b8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 80003bc:	0743      	lsls	r3, r0, #29
 80003be:	d510      	bpl.n	80003e2 <inv_init_maxmin+0x66>
 80003c0:	4b08      	ldr	r3, [pc, #32]	; (80003e4 <inv_init_maxmin+0x68>)
 80003c2:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80003c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003ca:	f8c3 1198 	str.w	r1, [r3, #408]	; 0x198
 80003ce:	f8c3 119c 	str.w	r1, [r3, #412]	; 0x19c
 80003d2:	f8c3 11a0 	str.w	r1, [r3, #416]	; 0x1a0
 80003d6:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
 80003da:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
 80003de:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
 80003e2:	4770      	bx	lr
 80003e4:	20000bc0 	.word	0x20000bc0

080003e8 <inv_reset_packet>:
 80003e8:	b538      	push	{r3, r4, r5, lr}
 80003ea:	4d09      	ldr	r5, [pc, #36]	; (8000410 <inv_reset_packet+0x28>)
 80003ec:	2498      	movs	r4, #152	; 0x98
 80003ee:	4622      	mov	r2, r4
 80003f0:	4628      	mov	r0, r5
 80003f2:	2100      	movs	r1, #0
 80003f4:	f00c fe9c 	bl	800d130 <memset>
 80003f8:	f505 7098 	add.w	r0, r5, #304	; 0x130
 80003fc:	4622      	mov	r2, r4
 80003fe:	2100      	movs	r1, #0
 8000400:	f00c fe96 	bl	800d130 <memset>
 8000404:	2005      	movs	r0, #5
 8000406:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800040a:	f7ff bfb7 	b.w	800037c <inv_init_maxmin>
 800040e:	bf00      	nop
 8000410:	20000bc8 	.word	0x20000bc8

08000414 <inv_start_fast_nomot>:
 8000414:	b510      	push	{r4, lr}
 8000416:	4c0d      	ldr	r4, [pc, #52]	; (800044c <inv_start_fast_nomot+0x38>)
 8000418:	2100      	movs	r1, #0
 800041a:	f44f 7218 	mov.w	r2, #608	; 0x260
 800041e:	4620      	mov	r0, r4
 8000420:	f00c fe86 	bl	800d130 <memset>
 8000424:	2007      	movs	r0, #7
 8000426:	f7ff ffa9 	bl	800037c <inv_init_maxmin>
 800042a:	2301      	movs	r3, #1
 800042c:	4618      	mov	r0, r3
 800042e:	2103      	movs	r1, #3
 8000430:	2200      	movs	r2, #0
 8000432:	f8c4 31e4 	str.w	r3, [r4, #484]	; 0x1e4
 8000436:	f884 31e8 	strb.w	r3, [r4, #488]	; 0x1e8
 800043a:	f00b fb7d 	bl	800bb38 <inv_set_message>
 800043e:	4804      	ldr	r0, [pc, #16]	; (8000450 <inv_start_fast_nomot+0x3c>)
 8000440:	2164      	movs	r1, #100	; 0x64
 8000442:	2207      	movs	r2, #7
 8000444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000448:	f00b b8c6 	b.w	800b5d8 <inv_register_data_cb>
 800044c:	20000bc0 	.word	0x20000bc0
 8000450:	08000b19 	.word	0x08000b19

08000454 <inv_fast_nomot_parameter>:
 8000454:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8000456:	b103      	cbz	r3, 800045a <inv_fast_nomot_parameter+0x6>
 8000458:	e6c2      	b.n	80001e0 <inv_fast_nomot_parameter.part.3>
 800045a:	2000      	movs	r0, #0
 800045c:	2100      	movs	r1, #0
 800045e:	4770      	bx	lr

08000460 <inv_fast_nomot_parameter_3rd>:
 8000460:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000464:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8000466:	2b00      	cmp	r3, #0
 8000468:	d05d      	beq.n	8000526 <inv_fast_nomot_parameter_3rd+0xc6>
 800046a:	f1a0 0108 	sub.w	r1, r0, #8
 800046e:	f100 0e10 	add.w	lr, r0, #16
 8000472:	2600      	movs	r6, #0
 8000474:	2700      	movs	r7, #0
 8000476:	f851 0f08 	ldr.w	r0, [r1, #8]!
 800047a:	f8d1 c004 	ldr.w	ip, [r1, #4]
 800047e:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 8000482:	fb00 f80c 	mul.w	r8, r0, ip
 8000486:	fba0 4500 	umull	r4, r5, r0, r0
 800048a:	eb05 0548 	add.w	r5, r5, r8, lsl #1
 800048e:	1b12      	subs	r2, r2, r4
 8000490:	eb63 0305 	sbc.w	r3, r3, r5
 8000494:	eb12 0802 	adds.w	r8, r2, r2
 8000498:	eb43 0903 	adc.w	r9, r3, r3
 800049c:	eb12 0208 	adds.w	r2, r2, r8
 80004a0:	eb43 0309 	adc.w	r3, r3, r9
 80004a4:	e9d1 ab0c 	ldrd	sl, fp, [r1, #48]	; 0x30
 80004a8:	1912      	adds	r2, r2, r4
 80004aa:	416b      	adcs	r3, r5
 80004ac:	fb02 fc0c 	mul.w	ip, r2, ip
 80004b0:	fb00 cc03 	mla	ip, r0, r3, ip
 80004b4:	fba2 2300 	umull	r2, r3, r2, r0
 80004b8:	ebb2 020a 	subs.w	r2, r2, sl
 80004bc:	4463      	add	r3, ip
 80004be:	eb63 030b 	sbc.w	r3, r3, fp
 80004c2:	2a00      	cmp	r2, #0
 80004c4:	f173 0000 	sbcs.w	r0, r3, #0
 80004c8:	db31      	blt.n	800052e <inv_fast_nomot_parameter_3rd+0xce>
 80004ca:	4296      	cmp	r6, r2
 80004cc:	eb77 0003 	sbcs.w	r0, r7, r3
 80004d0:	bfbc      	itt	lt
 80004d2:	4616      	movlt	r6, r2
 80004d4:	461f      	movlt	r7, r3
 80004d6:	4571      	cmp	r1, lr
 80004d8:	d1cd      	bne.n	8000476 <inv_fast_nomot_parameter_3rd+0x16>
 80004da:	4639      	mov	r1, r7
 80004dc:	4630      	mov	r0, r6
 80004de:	f003 fa53 	bl	8003988 <__aeabi_l2f>
 80004e2:	4b15      	ldr	r3, [pc, #84]	; (8000538 <inv_fast_nomot_parameter_3rd+0xd8>)
 80004e4:	ee07 0a10 	vmov	s14, r0
 80004e8:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80004ec:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80004f0:	ee17 0a90 	vmov	r0, s15
 80004f4:	f003 faee 	bl	8003ad4 <__aeabi_f2lz>
 80004f8:	4b10      	ldr	r3, [pc, #64]	; (800053c <inv_fast_nomot_parameter_3rd+0xdc>)
 80004fa:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80004fe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000502:	f1c3 0220 	rsb	r2, r3, #32
 8000506:	fa01 f202 	lsl.w	r2, r1, r2
 800050a:	f1b3 0420 	subs.w	r4, r3, #32
 800050e:	fa20 f003 	lsr.w	r0, r0, r3
 8000512:	bf58      	it	pl
 8000514:	fa41 f404 	asrpl.w	r4, r1, r4
 8000518:	ea40 0002 	orr.w	r0, r0, r2
 800051c:	bf58      	it	pl
 800051e:	4320      	orrpl	r0, r4
 8000520:	4119      	asrs	r1, r3
 8000522:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000526:	4618      	mov	r0, r3
 8000528:	4619      	mov	r1, r3
 800052a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800052e:	4252      	negs	r2, r2
 8000530:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000534:	e7c9      	b.n	80004ca <inv_fast_nomot_parameter_3rd+0x6a>
 8000536:	bf00      	nop
 8000538:	20000240 	.word	0x20000240
 800053c:	20000bc0 	.word	0x20000bc0

08000540 <inv_fast_nomot_set_gyro_bias>:
 8000540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000544:	4b2f      	ldr	r3, [pc, #188]	; (8000604 <inv_fast_nomot_set_gyro_bias+0xc4>)
 8000546:	b084      	sub	sp, #16
 8000548:	f8d3 7210 	ldr.w	r7, [r3, #528]	; 0x210
 800054c:	4680      	mov	r8, r0
 800054e:	461c      	mov	r4, r3
 8000550:	461a      	mov	r2, r3
 8000552:	f103 0080 	add.w	r0, r3, #128	; 0x80
 8000556:	f103 0618 	add.w	r6, r3, #24
 800055a:	a901      	add	r1, sp, #4
 800055c:	f852 3f08 	ldr.w	r3, [r2, #8]!
 8000560:	f850 5f04 	ldr.w	r5, [r0, #4]!
 8000564:	40bb      	lsls	r3, r7
 8000566:	eb03 4305 	add.w	r3, r3, r5, lsl #16
 800056a:	42b2      	cmp	r2, r6
 800056c:	f841 3b04 	str.w	r3, [r1], #4
 8000570:	d1f4      	bne.n	800055c <inv_fast_nomot_set_gyro_bias+0x1c>
 8000572:	2298      	movs	r2, #152	; 0x98
 8000574:	2100      	movs	r1, #0
 8000576:	4824      	ldr	r0, [pc, #144]	; (8000608 <inv_fast_nomot_set_gyro_bias+0xc8>)
 8000578:	f00c fdda 	bl	800d130 <memset>
 800057c:	2001      	movs	r0, #1
 800057e:	f7ff fefd 	bl	800037c <inv_init_maxmin>
 8000582:	f894 31e8 	ldrb.w	r3, [r4, #488]	; 0x1e8
 8000586:	4a1f      	ldr	r2, [pc, #124]	; (8000604 <inv_fast_nomot_set_gyro_bias+0xc4>)
 8000588:	2b04      	cmp	r3, #4
 800058a:	d032      	beq.n	80005f2 <inv_fast_nomot_set_gyro_bias+0xb2>
 800058c:	4d1f      	ldr	r5, [pc, #124]	; (800060c <inv_fast_nomot_set_gyro_bias+0xcc>)
 800058e:	9b01      	ldr	r3, [sp, #4]
 8000590:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8000592:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 8000594:	6aee      	ldr	r6, [r5, #44]	; 0x2c
 8000596:	9a03      	ldr	r2, [sp, #12]
 8000598:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
 800059c:	1a18      	subs	r0, r3, r0
 800059e:	9b02      	ldr	r3, [sp, #8]
 80005a0:	1bdf      	subs	r7, r3, r7
 80005a2:	2800      	cmp	r0, #0
 80005a4:	ea87 73e7 	eor.w	r3, r7, r7, asr #31
 80005a8:	eba3 73e7 	sub.w	r3, r3, r7, asr #31
 80005ac:	bfb8      	it	lt
 80005ae:	4240      	neglt	r0, r0
 80005b0:	4283      	cmp	r3, r0
 80005b2:	eba2 0206 	sub.w	r2, r2, r6
 80005b6:	bfb8      	it	lt
 80005b8:	4603      	movlt	r3, r0
 80005ba:	ea82 70e2 	eor.w	r0, r2, r2, asr #31
 80005be:	eba0 70e2 	sub.w	r0, r0, r2, asr #31
 80005c2:	4298      	cmp	r0, r3
 80005c4:	bfb8      	it	lt
 80005c6:	4618      	movlt	r0, r3
 80005c8:	f00b fbcc 	bl	800bd64 <inv_q30_mult>
 80005cc:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 80005d0:	4298      	cmp	r0, r3
 80005d2:	da06      	bge.n	80005e2 <inv_fast_nomot_set_gyro_bias+0xa2>
 80005d4:	a801      	add	r0, sp, #4
 80005d6:	2103      	movs	r1, #3
 80005d8:	f00a ff58 	bl	800b48c <inv_set_gyro_bias>
 80005dc:	2002      	movs	r0, #2
 80005de:	f00c fa9b 	bl	800cb18 <inv_set_motion_state>
 80005e2:	a901      	add	r1, sp, #4
 80005e4:	c90e      	ldmia	r1, {r1, r2, r3}
 80005e6:	6269      	str	r1, [r5, #36]	; 0x24
 80005e8:	62aa      	str	r2, [r5, #40]	; 0x28
 80005ea:	62eb      	str	r3, [r5, #44]	; 0x2c
 80005ec:	b004      	add	sp, #16
 80005ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80005f2:	f8d2 3218 	ldr.w	r3, [r2, #536]	; 0x218
 80005f6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80005fa:	bfc4      	itt	gt
 80005fc:	2305      	movgt	r3, #5
 80005fe:	f882 31e8 	strbgt.w	r3, [r2, #488]	; 0x1e8
 8000602:	e7c3      	b.n	800058c <inv_fast_nomot_set_gyro_bias+0x4c>
 8000604:	20000bc0 	.word	0x20000bc0
 8000608:	20000bc8 	.word	0x20000bc8
 800060c:	20000240 	.word	0x20000240

08000610 <inv_set_fast_nomot_compass_threshold>:
 8000610:	4b01      	ldr	r3, [pc, #4]	; (8000618 <inv_set_fast_nomot_compass_threshold+0x8>)
 8000612:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8000616:	4770      	bx	lr
 8000618:	20000240 	.word	0x20000240

0800061c <int_set_fast_nomot_gyro_threshold>:
 800061c:	4b01      	ldr	r3, [pc, #4]	; (8000624 <int_set_fast_nomot_gyro_threshold+0x8>)
 800061e:	e9c3 0106 	strd	r0, r1, [r3, #24]
 8000622:	4770      	bx	lr
 8000624:	20000240 	.word	0x20000240

08000628 <inv_set_fast_nomot_accel_threshold>:
 8000628:	4b01      	ldr	r3, [pc, #4]	; (8000630 <inv_set_fast_nomot_accel_threshold+0x8>)
 800062a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800062e:	4770      	bx	lr
 8000630:	20000240 	.word	0x20000240

08000634 <inv_get_fast_nomot_compass_param>:
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <inv_get_fast_nomot_compass_param+0x1c>)
 8000636:	b430      	push	{r4, r5}
 8000638:	f503 72e8 	add.w	r2, r3, #464	; 0x1d0
 800063c:	e9d2 4500 	ldrd	r4, r5, [r2]
 8000640:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8000644:	6003      	str	r3, [r0, #0]
 8000646:	e9c1 4500 	strd	r4, r5, [r1]
 800064a:	bc30      	pop	{r4, r5}
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	20000bc0 	.word	0x20000bc0

08000654 <inv_get_fast_nomot_accel_param>:
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <inv_get_fast_nomot_accel_param+0x1c>)
 8000656:	b430      	push	{r4, r5}
 8000658:	f503 72ec 	add.w	r2, r3, #472	; 0x1d8
 800065c:	e9d2 4500 	ldrd	r4, r5, [r2]
 8000660:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8000664:	6003      	str	r3, [r0, #0]
 8000666:	e9c1 4500 	strd	r4, r5, [r1]
 800066a:	bc30      	pop	{r4, r5}
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	20000bc0 	.word	0x20000bc0

08000674 <inv_fast_nomot_store_data>:
 8000674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000678:	b083      	sub	sp, #12
 800067a:	f101 0318 	add.w	r3, r1, #24
 800067e:	f8d1 b078 	ldr.w	fp, [r1, #120]	; 0x78
 8000682:	9301      	str	r3, [sp, #4]
 8000684:	460d      	mov	r5, r1
 8000686:	f101 0c68 	add.w	ip, r1, #104	; 0x68
 800068a:	f101 0a5c 	add.w	sl, r1, #92	; 0x5c
 800068e:	f1bb 0f00 	cmp.w	fp, #0
 8000692:	d037      	beq.n	8000704 <inv_fast_nomot_store_data+0x90>
 8000694:	f9b0 2000 	ldrsh.w	r2, [r0]
 8000698:	f8dc 3014 	ldr.w	r3, [ip, #20]
 800069c:	1ad3      	subs	r3, r2, r3
 800069e:	461e      	mov	r6, r3
 80006a0:	17df      	asrs	r7, r3, #31
 80006a2:	f85a 2f04 	ldr.w	r2, [sl, #4]!
 80006a6:	429a      	cmp	r2, r3
 80006a8:	bfb8      	it	lt
 80006aa:	f8ca 3000 	strlt.w	r3, [sl]
 80006ae:	f85c 2f04 	ldr.w	r2, [ip, #4]!
 80006b2:	429a      	cmp	r2, r3
 80006b4:	bfc8      	it	gt
 80006b6:	f8cc 3000 	strgt.w	r3, [ip]
 80006ba:	f105 0e60 	add.w	lr, r5, #96	; 0x60
 80006be:	462c      	mov	r4, r5
 80006c0:	2201      	movs	r2, #1
 80006c2:	2300      	movs	r3, #0
 80006c4:	fb02 f807 	mul.w	r8, r2, r7
 80006c8:	fb06 8803 	mla	r8, r6, r3, r8
 80006cc:	fba2 2306 	umull	r2, r3, r2, r6
 80006d0:	4443      	add	r3, r8
 80006d2:	e9d4 8900 	ldrd	r8, r9, [r4]
 80006d6:	eb18 0802 	adds.w	r8, r8, r2
 80006da:	eb49 0903 	adc.w	r9, r9, r3
 80006de:	e8e4 8906 	strd	r8, r9, [r4], #24
 80006e2:	4574      	cmp	r4, lr
 80006e4:	d1ee      	bne.n	80006c4 <inv_fast_nomot_store_data+0x50>
 80006e6:	9b01      	ldr	r3, [sp, #4]
 80006e8:	3508      	adds	r5, #8
 80006ea:	429d      	cmp	r5, r3
 80006ec:	f100 0002 	add.w	r0, r0, #2
 80006f0:	d1cd      	bne.n	800068e <inv_fast_nomot_store_data+0x1a>
 80006f2:	f10b 0301 	add.w	r3, fp, #1
 80006f6:	2201      	movs	r2, #1
 80006f8:	678b      	str	r3, [r1, #120]	; 0x78
 80006fa:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
 80006fe:	b003      	add	sp, #12
 8000700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000704:	f9b0 3000 	ldrsh.w	r3, [r0]
 8000708:	f8cc 3014 	str.w	r3, [ip, #20]
 800070c:	2600      	movs	r6, #0
 800070e:	2700      	movs	r7, #0
 8000710:	465b      	mov	r3, fp
 8000712:	e7c6      	b.n	80006a2 <inv_fast_nomot_store_data+0x2e>

08000714 <inv_fast_nomot_store_data_compass>:
 8000714:	6803      	ldr	r3, [r0, #0]
 8000716:	66d3      	str	r3, [r2, #108]	; 0x6c
 8000718:	6843      	ldr	r3, [r0, #4]
 800071a:	6713      	str	r3, [r2, #112]	; 0x70
 800071c:	b4f0      	push	{r4, r5, r6, r7}
 800071e:	6f94      	ldr	r4, [r2, #120]	; 0x78
 8000720:	6883      	ldr	r3, [r0, #8]
 8000722:	6753      	str	r3, [r2, #116]	; 0x74
 8000724:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
 8000728:	b194      	cbz	r4, 8000750 <inv_fast_nomot_store_data_compass+0x3c>
 800072a:	3804      	subs	r0, #4
 800072c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
 8000730:	f102 0768 	add.w	r7, r2, #104	; 0x68
 8000734:	f850 3f04 	ldr.w	r3, [r0, #4]!
 8000738:	6a0e      	ldr	r6, [r1, #32]
 800073a:	f851 5f04 	ldr.w	r5, [r1, #4]!
 800073e:	1b9b      	subs	r3, r3, r6
 8000740:	2b00      	cmp	r3, #0
 8000742:	bfb8      	it	lt
 8000744:	425b      	neglt	r3, r3
 8000746:	42ab      	cmp	r3, r5
 8000748:	bfc8      	it	gt
 800074a:	600b      	strgt	r3, [r1, #0]
 800074c:	42b9      	cmp	r1, r7
 800074e:	d1f1      	bne.n	8000734 <inv_fast_nomot_store_data_compass+0x20>
 8000750:	3401      	adds	r4, #1
 8000752:	2301      	movs	r3, #1
 8000754:	6794      	str	r4, [r2, #120]	; 0x78
 8000756:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800075a:	bcf0      	pop	{r4, r5, r6, r7}
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop

08000760 <inv_fast_nomot_reset_data_compass>:
 8000760:	b430      	push	{r4, r5}
 8000762:	2300      	movs	r3, #0
 8000764:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
 8000766:	6f04      	ldr	r4, [r0, #112]	; 0x70
 8000768:	6f41      	ldr	r1, [r0, #116]	; 0x74
 800076a:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800076e:	67c5      	str	r5, [r0, #124]	; 0x7c
 8000770:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
 8000774:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
 8000778:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
 800077c:	6603      	str	r3, [r0, #96]	; 0x60
 800077e:	6643      	str	r3, [r0, #100]	; 0x64
 8000780:	6683      	str	r3, [r0, #104]	; 0x68
 8000782:	6783      	str	r3, [r0, #120]	; 0x78
 8000784:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
 8000788:	bc30      	pop	{r4, r5}
 800078a:	4770      	bx	lr

0800078c <inv_fast_nomot_get_time_elaps>:
 800078c:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8000790:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
 8000794:	1a10      	subs	r0, r2, r0
 8000796:	4770      	bx	lr

08000798 <inv_fast_nomot_parameter_compass>:
 8000798:	6e01      	ldr	r1, [r0, #96]	; 0x60
 800079a:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800079c:	6e82      	ldr	r2, [r0, #104]	; 0x68
 800079e:	4299      	cmp	r1, r3
 80007a0:	bfb8      	it	lt
 80007a2:	4619      	movlt	r1, r3
 80007a4:	4291      	cmp	r1, r2
 80007a6:	4608      	mov	r0, r1
 80007a8:	bfb8      	it	lt
 80007aa:	4610      	movlt	r0, r2
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop

080007b0 <inv_get_right_shift_by_rounding>:
 80007b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007b2:	4603      	mov	r3, r0
 80007b4:	f1c2 0420 	rsb	r4, r2, #32
 80007b8:	468e      	mov	lr, r1
 80007ba:	f1b2 0720 	subs.w	r7, r2, #32
 80007be:	fa0e fc04 	lsl.w	ip, lr, r4
 80007c2:	fa23 f002 	lsr.w	r0, r3, r2
 80007c6:	f102 35ff 	add.w	r5, r2, #4294967295
 80007ca:	f04f 0601 	mov.w	r6, #1
 80007ce:	bf58      	it	pl
 80007d0:	fa4e f707 	asrpl.w	r7, lr, r7
 80007d4:	fa06 f605 	lsl.w	r6, r6, r5
 80007d8:	ea4c 0000 	orr.w	r0, ip, r0
 80007dc:	f1a4 0520 	sub.w	r5, r4, #32
 80007e0:	bf58      	it	pl
 80007e2:	4338      	orrpl	r0, r7
 80007e4:	fa03 f505 	lsl.w	r5, r3, r5
 80007e8:	f1c4 0720 	rsb	r7, r4, #32
 80007ec:	fa23 f707 	lsr.w	r7, r3, r7
 80007f0:	ea4c 0505 	orr.w	r5, ip, r5
 80007f4:	433d      	orrs	r5, r7
 80007f6:	40a3      	lsls	r3, r4
 80007f8:	f1c4 0720 	rsb	r7, r4, #32
 80007fc:	40e3      	lsrs	r3, r4
 80007fe:	fa05 f707 	lsl.w	r7, r5, r7
 8000802:	3c20      	subs	r4, #32
 8000804:	ea43 0307 	orr.w	r3, r3, r7
 8000808:	bf5c      	itt	pl
 800080a:	fa45 f404 	asrpl.w	r4, r5, r4
 800080e:	4323      	orrpl	r3, r4
 8000810:	429e      	cmp	r6, r3
 8000812:	fa4e f102 	asr.w	r1, lr, r2
 8000816:	db07      	blt.n	8000828 <inv_get_right_shift_by_rounding+0x78>
 8000818:	4276      	negs	r6, r6
 800081a:	42b3      	cmp	r3, r6
 800081c:	da03      	bge.n	8000826 <inv_get_right_shift_by_rounding+0x76>
 800081e:	f110 30ff 	adds.w	r0, r0, #4294967295
 8000822:	f141 31ff 	adc.w	r1, r1, #4294967295
 8000826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000828:	3001      	adds	r0, #1
 800082a:	f141 0100 	adc.w	r1, r1, #0
 800082e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000830 <inv_reset_min_max_gyro_accel_statistics>:
 8000830:	4a0b      	ldr	r2, [pc, #44]	; (8000860 <inv_reset_min_max_gyro_accel_statistics+0x30>)
 8000832:	4611      	mov	r1, r2
 8000834:	2300      	movs	r3, #0
 8000836:	f841 3b04 	str.w	r3, [r1], #4
 800083a:	3104      	adds	r1, #4
 800083c:	6053      	str	r3, [r2, #4]
 800083e:	f841 3b04 	str.w	r3, [r1], #4
 8000842:	6213      	str	r3, [r2, #32]
 8000844:	600b      	str	r3, [r1, #0]
 8000846:	6253      	str	r3, [r2, #36]	; 0x24
 8000848:	6293      	str	r3, [r2, #40]	; 0x28
 800084a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800084c:	6113      	str	r3, [r2, #16]
 800084e:	6153      	str	r3, [r2, #20]
 8000850:	6193      	str	r3, [r2, #24]
 8000852:	61d3      	str	r3, [r2, #28]
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	6353      	str	r3, [r2, #52]	; 0x34
 8000858:	6393      	str	r3, [r2, #56]	; 0x38
 800085a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	20000de0 	.word	0x20000de0

08000864 <inv_record_max_moment_in_no_motion_gyro>:
 8000864:	4a0b      	ldr	r2, [pc, #44]	; (8000894 <inv_record_max_moment_in_no_motion_gyro+0x30>)
 8000866:	f8d2 3248 	ldr.w	r3, [r2, #584]	; 0x248
 800086a:	b4f0      	push	{r4, r5, r6, r7}
 800086c:	4604      	mov	r4, r0
 800086e:	460d      	mov	r5, r1
 8000870:	b16b      	cbz	r3, 800088e <inv_record_max_moment_in_no_motion_gyro+0x2a>
 8000872:	4611      	mov	r1, r2
 8000874:	e9f1 6790 	ldrd	r6, r7, [r1, #576]!	; 0x240
 8000878:	4286      	cmp	r6, r0
 800087a:	eb77 0005 	sbcs.w	r0, r7, r5
 800087e:	da01      	bge.n	8000884 <inv_record_max_moment_in_no_motion_gyro+0x20>
 8000880:	e9c1 4500 	strd	r4, r5, [r1]
 8000884:	3301      	adds	r3, #1
 8000886:	f8c2 3248 	str.w	r3, [r2, #584]	; 0x248
 800088a:	bcf0      	pop	{r4, r5, r6, r7}
 800088c:	4770      	bx	lr
 800088e:	f502 7110 	add.w	r1, r2, #576	; 0x240
 8000892:	e7f5      	b.n	8000880 <inv_record_max_moment_in_no_motion_gyro+0x1c>
 8000894:	20000bc0 	.word	0x20000bc0

08000898 <inv_record_max_moment_in_no_motion_accel>:
 8000898:	4a0b      	ldr	r2, [pc, #44]	; (80008c8 <inv_record_max_moment_in_no_motion_accel+0x30>)
 800089a:	f8d2 3258 	ldr.w	r3, [r2, #600]	; 0x258
 800089e:	b4f0      	push	{r4, r5, r6, r7}
 80008a0:	4604      	mov	r4, r0
 80008a2:	460d      	mov	r5, r1
 80008a4:	b16b      	cbz	r3, 80008c2 <inv_record_max_moment_in_no_motion_accel+0x2a>
 80008a6:	4611      	mov	r1, r2
 80008a8:	e9f1 6794 	ldrd	r6, r7, [r1, #592]!	; 0x250
 80008ac:	4286      	cmp	r6, r0
 80008ae:	eb77 0005 	sbcs.w	r0, r7, r5
 80008b2:	da01      	bge.n	80008b8 <inv_record_max_moment_in_no_motion_accel+0x20>
 80008b4:	e9c1 4500 	strd	r4, r5, [r1]
 80008b8:	3301      	adds	r3, #1
 80008ba:	f8c2 3258 	str.w	r3, [r2, #600]	; 0x258
 80008be:	bcf0      	pop	{r4, r5, r6, r7}
 80008c0:	4770      	bx	lr
 80008c2:	f502 7114 	add.w	r1, r2, #592	; 0x250
 80008c6:	e7f5      	b.n	80008b4 <inv_record_max_moment_in_no_motion_accel+0x1c>
 80008c8:	20000bc0 	.word	0x20000bc0

080008cc <inv_record_min_moment_in_motion_gyro>:
 80008cc:	4a0b      	ldr	r2, [pc, #44]	; (80008fc <inv_record_min_moment_in_motion_gyro+0x30>)
 80008ce:	f8d2 3228 	ldr.w	r3, [r2, #552]	; 0x228
 80008d2:	b4f0      	push	{r4, r5, r6, r7}
 80008d4:	4604      	mov	r4, r0
 80008d6:	460d      	mov	r5, r1
 80008d8:	b16b      	cbz	r3, 80008f6 <inv_record_min_moment_in_motion_gyro+0x2a>
 80008da:	4611      	mov	r1, r2
 80008dc:	e9f1 6788 	ldrd	r6, r7, [r1, #544]!	; 0x220
 80008e0:	42b0      	cmp	r0, r6
 80008e2:	eb75 0007 	sbcs.w	r0, r5, r7
 80008e6:	da01      	bge.n	80008ec <inv_record_min_moment_in_motion_gyro+0x20>
 80008e8:	e9c1 4500 	strd	r4, r5, [r1]
 80008ec:	3301      	adds	r3, #1
 80008ee:	f8c2 3228 	str.w	r3, [r2, #552]	; 0x228
 80008f2:	bcf0      	pop	{r4, r5, r6, r7}
 80008f4:	4770      	bx	lr
 80008f6:	f502 7108 	add.w	r1, r2, #544	; 0x220
 80008fa:	e7f5      	b.n	80008e8 <inv_record_min_moment_in_motion_gyro+0x1c>
 80008fc:	20000bc0 	.word	0x20000bc0

08000900 <inv_record_min_moment_in_motion_accel>:
 8000900:	4a0b      	ldr	r2, [pc, #44]	; (8000930 <inv_record_min_moment_in_motion_accel+0x30>)
 8000902:	f8d2 3238 	ldr.w	r3, [r2, #568]	; 0x238
 8000906:	b4f0      	push	{r4, r5, r6, r7}
 8000908:	4604      	mov	r4, r0
 800090a:	460d      	mov	r5, r1
 800090c:	b16b      	cbz	r3, 800092a <inv_record_min_moment_in_motion_accel+0x2a>
 800090e:	4611      	mov	r1, r2
 8000910:	e9f1 678c 	ldrd	r6, r7, [r1, #560]!	; 0x230
 8000914:	42b0      	cmp	r0, r6
 8000916:	eb75 0007 	sbcs.w	r0, r5, r7
 800091a:	da01      	bge.n	8000920 <inv_record_min_moment_in_motion_accel+0x20>
 800091c:	e9c1 4500 	strd	r4, r5, [r1]
 8000920:	3301      	adds	r3, #1
 8000922:	f8c2 3238 	str.w	r3, [r2, #568]	; 0x238
 8000926:	bcf0      	pop	{r4, r5, r6, r7}
 8000928:	4770      	bx	lr
 800092a:	f502 710c 	add.w	r1, r2, #560	; 0x230
 800092e:	e7f5      	b.n	800091c <inv_record_min_moment_in_motion_accel+0x1c>
 8000930:	20000bc0 	.word	0x20000bc0

08000934 <inv_detect_motion_by_gyro_accel>:
 8000934:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
 8000938:	f8df 8130 	ldr.w	r8, [pc, #304]	; 8000a6c <inv_detect_motion_by_gyro_accel+0x138>
 800093c:	4e4a      	ldr	r6, [pc, #296]	; (8000a68 <inv_detect_motion_by_gyro_accel+0x134>)
 800093e:	f8d8 2068 	ldr.w	r2, [r8, #104]	; 0x68
 8000942:	f8d8 507c 	ldr.w	r5, [r8, #124]	; 0x7c
 8000946:	6bf4      	ldr	r4, [r6, #60]	; 0x3c
 8000948:	f108 016c 	add.w	r1, r8, #108	; 0x6c
 800094c:	c98a      	ldmia	r1, {r1, r3, r7}
 800094e:	1bd2      	subs	r2, r2, r7
 8000950:	f8d8 7078 	ldr.w	r7, [r8, #120]	; 0x78
 8000954:	1bc9      	subs	r1, r1, r7
 8000956:	4291      	cmp	r1, r2
 8000958:	eba3 0505 	sub.w	r5, r3, r5
 800095c:	bfb8      	it	lt
 800095e:	4611      	movlt	r1, r2
 8000960:	42a9      	cmp	r1, r5
 8000962:	460b      	mov	r3, r1
 8000964:	bfb8      	it	lt
 8000966:	462b      	movlt	r3, r5
 8000968:	429c      	cmp	r4, r3
 800096a:	db56      	blt.n	8000a1a <inv_detect_motion_by_gyro_accel+0xe6>
 800096c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800096e:	05dc      	lsls	r4, r3, #23
 8000970:	d402      	bmi.n	8000978 <inv_detect_motion_by_gyro_accel+0x44>
 8000972:	2002      	movs	r0, #2
 8000974:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
 8000978:	f8d8 3080 	ldr.w	r3, [r8, #128]	; 0x80
 800097c:	f8d8 2000 	ldr.w	r2, [r8]
 8000980:	4293      	cmp	r3, r2
 8000982:	dbf6      	blt.n	8000972 <inv_detect_motion_by_gyro_accel+0x3e>
 8000984:	6f41      	ldr	r1, [r0, #116]	; 0x74
 8000986:	05c9      	lsls	r1, r1, #23
 8000988:	d54c      	bpl.n	8000a24 <inv_detect_motion_by_gyro_accel+0xf0>
 800098a:	f8d8 31b0 	ldr.w	r3, [r8, #432]	; 0x1b0
 800098e:	429a      	cmp	r2, r3
 8000990:	dcef      	bgt.n	8000972 <inv_detect_motion_by_gyro_accel+0x3e>
 8000992:	2b00      	cmp	r3, #0
 8000994:	d156      	bne.n	8000a44 <inv_detect_motion_by_gyro_accel+0x110>
 8000996:	2400      	movs	r4, #0
 8000998:	2500      	movs	r5, #0
 800099a:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 800099e:	4933      	ldr	r1, [pc, #204]	; (8000a6c <inv_detect_motion_by_gyro_accel+0x138>)
 80009a0:	42a2      	cmp	r2, r4
 80009a2:	f501 70ec 	add.w	r0, r1, #472	; 0x1d8
 80009a6:	41ab      	sbcs	r3, r5
 80009a8:	e9c0 4500 	strd	r4, r5, [r0]
 80009ac:	da48      	bge.n	8000a40 <inv_detect_motion_by_gyro_accel+0x10c>
 80009ae:	f8d1 3238 	ldr.w	r3, [r1, #568]	; 0x238
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d14f      	bne.n	8000a56 <inv_detect_motion_by_gyro_accel+0x122>
 80009b6:	f501 710c 	add.w	r1, r1, #560	; 0x230
 80009ba:	e9c1 4500 	strd	r4, r5, [r1]
 80009be:	3301      	adds	r3, #1
 80009c0:	f8c8 3238 	str.w	r3, [r8, #568]	; 0x238
 80009c4:	2400      	movs	r4, #0
 80009c6:	2100      	movs	r1, #0
 80009c8:	2298      	movs	r2, #152	; 0x98
 80009ca:	4829      	ldr	r0, [pc, #164]	; (8000a70 <inv_detect_motion_by_gyro_accel+0x13c>)
 80009cc:	f00c fbb0 	bl	800d130 <memset>
 80009d0:	2004      	movs	r0, #4
 80009d2:	f7ff fcd3 	bl	800037c <inv_init_maxmin>
 80009d6:	f8d8 3080 	ldr.w	r3, [r8, #128]	; 0x80
 80009da:	b333      	cbz	r3, 8000a2a <inv_detect_motion_by_gyro_accel+0xf6>
 80009dc:	4825      	ldr	r0, [pc, #148]	; (8000a74 <inv_detect_motion_by_gyro_accel+0x140>)
 80009de:	f7ff fbff 	bl	80001e0 <inv_fast_nomot_parameter.part.3>
 80009e2:	e9d6 6706 	ldrd	r6, r7, [r6, #24]
 80009e6:	4b21      	ldr	r3, [pc, #132]	; (8000a6c <inv_detect_motion_by_gyro_accel+0x138>)
 80009e8:	4286      	cmp	r6, r0
 80009ea:	f503 72f8 	add.w	r2, r3, #496	; 0x1f0
 80009ee:	e9c2 0100 	strd	r0, r1, [r2]
 80009f2:	eb77 0201 	sbcs.w	r2, r7, r1
 80009f6:	da1b      	bge.n	8000a30 <inv_detect_motion_by_gyro_accel+0xfc>
 80009f8:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
 80009fc:	b1da      	cbz	r2, 8000a36 <inv_detect_motion_by_gyro_accel+0x102>
 80009fe:	e9f3 4588 	ldrd	r4, r5, [r3, #544]!	; 0x220
 8000a02:	42a0      	cmp	r0, r4
 8000a04:	eb71 0405 	sbcs.w	r4, r1, r5
 8000a08:	da01      	bge.n	8000a0e <inv_detect_motion_by_gyro_accel+0xda>
 8000a0a:	e9c3 0100 	strd	r0, r1, [r3]
 8000a0e:	3201      	adds	r2, #1
 8000a10:	f8c8 2228 	str.w	r2, [r8, #552]	; 0x228
 8000a14:	2000      	movs	r0, #0
 8000a16:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
 8000a1a:	f7ff fce5 	bl	80003e8 <inv_reset_packet>
 8000a1e:	2000      	movs	r0, #0
 8000a20:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
 8000a24:	2401      	movs	r4, #1
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d1d8      	bne.n	80009dc <inv_detect_motion_by_gyro_accel+0xa8>
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	e7d8      	b.n	80009e2 <inv_detect_motion_by_gyro_accel+0xae>
 8000a30:	4620      	mov	r0, r4
 8000a32:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
 8000a36:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8000a3a:	e9c3 0100 	strd	r0, r1, [r3]
 8000a3e:	e7e6      	b.n	8000a0e <inv_detect_motion_by_gyro_accel+0xda>
 8000a40:	2401      	movs	r4, #1
 8000a42:	e7c0      	b.n	80009c6 <inv_detect_motion_by_gyro_accel+0x92>
 8000a44:	f508 709c 	add.w	r0, r8, #312	; 0x138
 8000a48:	f7ff fbca 	bl	80001e0 <inv_fast_nomot_parameter.part.3>
 8000a4c:	0d04      	lsrs	r4, r0, #20
 8000a4e:	ea44 3401 	orr.w	r4, r4, r1, lsl #12
 8000a52:	150d      	asrs	r5, r1, #20
 8000a54:	e7a1      	b.n	800099a <inv_detect_motion_by_gyro_accel+0x66>
 8000a56:	e9f1 ab8c 	ldrd	sl, fp, [r1, #560]!	; 0x230
 8000a5a:	4554      	cmp	r4, sl
 8000a5c:	eb75 020b 	sbcs.w	r2, r5, fp
 8000a60:	daad      	bge.n	80009be <inv_detect_motion_by_gyro_accel+0x8a>
 8000a62:	e9c1 4500 	strd	r4, r5, [r1]
 8000a66:	e7aa      	b.n	80009be <inv_detect_motion_by_gyro_accel+0x8a>
 8000a68:	20000240 	.word	0x20000240
 8000a6c:	20000bc0 	.word	0x20000bc0
 8000a70:	20000cf8 	.word	0x20000cf8
 8000a74:	20000bc8 	.word	0x20000bc8

08000a78 <inv_sensor_data_preprocess>:
 8000a78:	b530      	push	{r4, r5, lr}
 8000a7a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000a7c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8000a80:	2bc0      	cmp	r3, #192	; 0xc0
 8000a82:	b085      	sub	sp, #20
 8000a84:	4604      	mov	r4, r0
 8000a86:	d03b      	beq.n	8000b00 <inv_sensor_data_preprocess+0x88>
 8000a88:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8000a8a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8000a8e:	2bc0      	cmp	r3, #192	; 0xc0
 8000a90:	d030      	beq.n	8000af4 <inv_sensor_data_preprocess+0x7c>
 8000a92:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 8000a96:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 8000a9a:	2ac0      	cmp	r2, #192	; 0xc0
 8000a9c:	d019      	beq.n	8000ad2 <inv_sensor_data_preprocess+0x5a>
 8000a9e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8000aa2:	2b60      	cmp	r3, #96	; 0x60
 8000aa4:	d001      	beq.n	8000aaa <inv_sensor_data_preprocess+0x32>
 8000aa6:	b005      	add	sp, #20
 8000aa8:	bd30      	pop	{r4, r5, pc}
 8000aaa:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
 8000aae:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 8000ab2:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8000ab6:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
 8000aba:	4a14      	ldr	r2, [pc, #80]	; (8000b0c <inv_sensor_data_preprocess+0x94>)
 8000abc:	1384      	asrs	r4, r0, #14
 8000abe:	139b      	asrs	r3, r3, #14
 8000ac0:	13ad      	asrs	r5, r5, #14
 8000ac2:	a801      	add	r0, sp, #4
 8000ac4:	9501      	str	r5, [sp, #4]
 8000ac6:	9402      	str	r4, [sp, #8]
 8000ac8:	9303      	str	r3, [sp, #12]
 8000aca:	f7ff fe23 	bl	8000714 <inv_fast_nomot_store_data_compass>
 8000ace:	b005      	add	sp, #20
 8000ad0:	bd30      	pop	{r4, r5, pc}
 8000ad2:	f9b4 008c 	ldrsh.w	r0, [r4, #140]	; 0x8c
 8000ad6:	f9b4 508e 	ldrsh.w	r5, [r4, #142]	; 0x8e
 8000ada:	f9b4 3090 	ldrsh.w	r3, [r4, #144]	; 0x90
 8000ade:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
 8000ae2:	9001      	str	r0, [sp, #4]
 8000ae4:	4a09      	ldr	r2, [pc, #36]	; (8000b0c <inv_sensor_data_preprocess+0x94>)
 8000ae6:	9502      	str	r5, [sp, #8]
 8000ae8:	a801      	add	r0, sp, #4
 8000aea:	9303      	str	r3, [sp, #12]
 8000aec:	f7ff fe12 	bl	8000714 <inv_fast_nomot_store_data_compass>
 8000af0:	b005      	add	sp, #20
 8000af2:	bd30      	pop	{r4, r5, pc}
 8000af4:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8000af8:	4905      	ldr	r1, [pc, #20]	; (8000b10 <inv_sensor_data_preprocess+0x98>)
 8000afa:	f7ff fdbb 	bl	8000674 <inv_fast_nomot_store_data>
 8000afe:	e7c8      	b.n	8000a92 <inv_sensor_data_preprocess+0x1a>
 8000b00:	3004      	adds	r0, #4
 8000b02:	4904      	ldr	r1, [pc, #16]	; (8000b14 <inv_sensor_data_preprocess+0x9c>)
 8000b04:	f7ff fdb6 	bl	8000674 <inv_fast_nomot_store_data>
 8000b08:	e7be      	b.n	8000a88 <inv_sensor_data_preprocess+0x10>
 8000b0a:	bf00      	nop
 8000b0c:	20000c60 	.word	0x20000c60
 8000b10:	20000cf8 	.word	0x20000cf8
 8000b14:	20000bc8 	.word	0x20000bc8

08000b18 <inv_generate_fast_nomot>:
 8000b18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b1c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000b1e:	05d9      	lsls	r1, r3, #23
 8000b20:	f140 8087 	bpl.w	8000c32 <inv_generate_fast_nomot+0x11a>
 8000b24:	6f42      	ldr	r2, [r0, #116]	; 0x74
 8000b26:	f002 0250 	and.w	r2, r2, #80	; 0x50
 8000b2a:	2a40      	cmp	r2, #64	; 0x40
 8000b2c:	4604      	mov	r4, r0
 8000b2e:	f000 8083 	beq.w	8000c38 <inv_generate_fast_nomot+0x120>
 8000b32:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
 8000b36:	f002 0250 	and.w	r2, r2, #80	; 0x50
 8000b3a:	2a40      	cmp	r2, #64	; 0x40
 8000b3c:	d07c      	beq.n	8000c38 <inv_generate_fast_nomot+0x120>
 8000b3e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000b42:	2b40      	cmp	r3, #64	; 0x40
 8000b44:	d078      	beq.n	8000c38 <inv_generate_fast_nomot+0x120>
 8000b46:	4dc2      	ldr	r5, [pc, #776]	; (8000e50 <inv_generate_fast_nomot+0x338>)
 8000b48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000b4a:	f8d5 1208 	ldr.w	r1, [r5, #520]	; 0x208
 8000b4e:	4ac0      	ldr	r2, [pc, #768]	; (8000e50 <inv_generate_fast_nomot+0x338>)
 8000b50:	4299      	cmp	r1, r3
 8000b52:	d019      	beq.n	8000b88 <inv_generate_fast_nomot+0x70>
 8000b54:	2b09      	cmp	r3, #9
 8000b56:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
 8000b5a:	4ebe      	ldr	r6, [pc, #760]	; (8000e54 <inv_generate_fast_nomot+0x33c>)
 8000b5c:	f340 812c 	ble.w	8000db8 <inv_generate_fast_nomot+0x2a0>
 8000b60:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8000b62:	6bb7      	ldr	r7, [r6, #56]	; 0x38
 8000b64:	6b30      	ldr	r0, [r6, #48]	; 0x30
 8000b66:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	f8c2 7214 	str.w	r7, [r2, #532]	; 0x214
 8000b70:	6010      	str	r0, [r2, #0]
 8000b72:	2219      	movs	r2, #25
 8000b74:	408a      	lsls	r2, r1
 8000b76:	f1c3 0310 	rsb	r3, r3, #16
 8000b7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b7e:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
 8000b82:	63f2      	str	r2, [r6, #60]	; 0x3c
 8000b84:	f8c5 1218 	str.w	r1, [r5, #536]	; 0x218
 8000b88:	4620      	mov	r0, r4
 8000b8a:	f7ff ff75 	bl	8000a78 <inv_sensor_data_preprocess>
 8000b8e:	f895 31e8 	ldrb.w	r3, [r5, #488]	; 0x1e8
 8000b92:	2b06      	cmp	r3, #6
 8000b94:	d84d      	bhi.n	8000c32 <inv_generate_fast_nomot+0x11a>
 8000b96:	e8df f013 	tbh	[pc, r3, lsl #1]
 8000b9a:	00fc      	.short	0x00fc
 8000b9c:	00c700d0 	.word	0x00c700d0
 8000ba0:	009f0007 	.word	0x009f0007
 8000ba4:	0058007b 	.word	0x0058007b
 8000ba8:	4620      	mov	r0, r4
 8000baa:	f7ff fec3 	bl	8000934 <inv_detect_motion_by_gyro_accel>
 8000bae:	2800      	cmp	r0, #0
 8000bb0:	f000 80fe 	beq.w	8000db0 <inv_generate_fast_nomot+0x298>
 8000bb4:	2801      	cmp	r0, #1
 8000bb6:	d13c      	bne.n	8000c32 <inv_generate_fast_nomot+0x11a>
 8000bb8:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 8000bbc:	05da      	lsls	r2, r3, #23
 8000bbe:	f140 813a 	bpl.w	8000e36 <inv_generate_fast_nomot+0x31e>
 8000bc2:	f8d5 0100 	ldr.w	r0, [r5, #256]	; 0x100
 8000bc6:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
 8000bca:	f8d5 1108 	ldr.w	r1, [r5, #264]	; 0x108
 8000bce:	4fa1      	ldr	r7, [pc, #644]	; (8000e54 <inv_generate_fast_nomot+0x33c>)
 8000bd0:	4e9f      	ldr	r6, [pc, #636]	; (8000e50 <inv_generate_fast_nomot+0x338>)
 8000bd2:	4298      	cmp	r0, r3
 8000bd4:	bfb8      	it	lt
 8000bd6:	4618      	movlt	r0, r3
 8000bd8:	4281      	cmp	r1, r0
 8000bda:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000bde:	bfb8      	it	lt
 8000be0:	4601      	movlt	r1, r0
 8000be2:	4608      	mov	r0, r1
 8000be4:	4282      	cmp	r2, r0
 8000be6:	ea4f 71e1 	mov.w	r1, r1, asr #31
 8000bea:	f506 7ee8 	add.w	lr, r6, #464	; 0x1d0
 8000bee:	418b      	sbcs	r3, r1
 8000bf0:	e9ce 0100 	strd	r0, r1, [lr]
 8000bf4:	f280 8116 	bge.w	8000e24 <inv_generate_fast_nomot+0x30c>
 8000bf8:	2305      	movs	r3, #5
 8000bfa:	f886 31e8 	strb.w	r3, [r6, #488]	; 0x1e8
 8000bfe:	4b96      	ldr	r3, [pc, #600]	; (8000e58 <inv_generate_fast_nomot+0x340>)
 8000c00:	f8d5 2258 	ldr.w	r2, [r5, #600]	; 0x258
 8000c04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c08:	2a00      	cmp	r2, #0
 8000c0a:	f040 80fb 	bne.w	8000e04 <inv_generate_fast_nomot+0x2ec>
 8000c0e:	e9c3 011e 	strd	r0, r1, [r3, #120]	; 0x78
 8000c12:	4992      	ldr	r1, [pc, #584]	; (8000e5c <inv_generate_fast_nomot+0x344>)
 8000c14:	f8d5 3248 	ldr.w	r3, [r5, #584]	; 0x248
 8000c18:	3201      	adds	r2, #1
 8000c1a:	f8c5 2258 	str.w	r2, [r5, #600]	; 0x258
 8000c1e:	e9d1 6700 	ldrd	r6, r7, [r1]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 80e4 	bne.w	8000df0 <inv_generate_fast_nomot+0x2d8>
 8000c28:	e9c1 6714 	strd	r6, r7, [r1, #80]	; 0x50
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	f8c5 3248 	str.w	r3, [r5, #584]	; 0x248
 8000c32:	2000      	movs	r0, #0
 8000c34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c38:	4d85      	ldr	r5, [pc, #532]	; (8000e50 <inv_generate_fast_nomot+0x338>)
 8000c3a:	f7ff fbd5 	bl	80003e8 <inv_reset_packet>
 8000c3e:	2300      	movs	r3, #0
 8000c40:	f8c5 31e0 	str.w	r3, [r5, #480]	; 0x1e0
 8000c44:	f885 31e8 	strb.w	r3, [r5, #488]	; 0x1e8
 8000c48:	e77e      	b.n	8000b48 <inv_generate_fast_nomot+0x30>
 8000c4a:	4620      	mov	r0, r4
 8000c4c:	f7ff fe72 	bl	8000934 <inv_detect_motion_by_gyro_accel>
 8000c50:	2801      	cmp	r0, #1
 8000c52:	4604      	mov	r4, r0
 8000c54:	f000 80c8 	beq.w	8000de8 <inv_generate_fast_nomot+0x2d0>
 8000c58:	2800      	cmp	r0, #0
 8000c5a:	d1ea      	bne.n	8000c32 <inv_generate_fast_nomot+0x11a>
 8000c5c:	f7ff fbc4 	bl	80003e8 <inv_reset_packet>
 8000c60:	f505 7086 	add.w	r0, r5, #268	; 0x10c
 8000c64:	c807      	ldmia	r0, {r0, r1, r2}
 8000c66:	f8d5 3128 	ldr.w	r3, [r5, #296]	; 0x128
 8000c6a:	f8c5 4100 	str.w	r4, [r5, #256]	; 0x100
 8000c6e:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
 8000c72:	f8c5 4108 	str.w	r4, [r5, #264]	; 0x108
 8000c76:	f8c5 4118 	str.w	r4, [r5, #280]	; 0x118
 8000c7a:	f8c5 4130 	str.w	r4, [r5, #304]	; 0x130
 8000c7e:	f8c5 011c 	str.w	r0, [r5, #284]	; 0x11c
 8000c82:	f8c5 1120 	str.w	r1, [r5, #288]	; 0x120
 8000c86:	f8c5 2124 	str.w	r2, [r5, #292]	; 0x124
 8000c8a:	f8c5 312c 	str.w	r3, [r5, #300]	; 0x12c
 8000c8e:	e7d0      	b.n	8000c32 <inv_generate_fast_nomot+0x11a>
 8000c90:	2306      	movs	r3, #6
 8000c92:	2001      	movs	r0, #1
 8000c94:	f885 31e8 	strb.w	r3, [r5, #488]	; 0x1e8
 8000c98:	f00b ff3e 	bl	800cb18 <inv_set_motion_state>
 8000c9c:	f7ff fba4 	bl	80003e8 <inv_reset_packet>
 8000ca0:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
 8000ca4:	f8d5 0110 	ldr.w	r0, [r5, #272]	; 0x110
 8000ca8:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
 8000cac:	f8d5 2128 	ldr.w	r2, [r5, #296]	; 0x128
 8000cb0:	f8c5 311c 	str.w	r3, [r5, #284]	; 0x11c
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
 8000cba:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
 8000cbe:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
 8000cc2:	f8c5 3118 	str.w	r3, [r5, #280]	; 0x118
 8000cc6:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
 8000cca:	f8c5 0120 	str.w	r0, [r5, #288]	; 0x120
 8000cce:	f8c5 1124 	str.w	r1, [r5, #292]	; 0x124
 8000cd2:	f8c5 212c 	str.w	r2, [r5, #300]	; 0x12c
 8000cd6:	e7ac      	b.n	8000c32 <inv_generate_fast_nomot+0x11a>
 8000cd8:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 8000cdc:	05db      	lsls	r3, r3, #23
 8000cde:	d518      	bpl.n	8000d12 <inv_generate_fast_nomot+0x1fa>
 8000ce0:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
 8000ce4:	f8d5 0100 	ldr.w	r0, [r5, #256]	; 0x100
 8000ce8:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8000cec:	4959      	ldr	r1, [pc, #356]	; (8000e54 <inv_generate_fast_nomot+0x33c>)
 8000cee:	4e5c      	ldr	r6, [pc, #368]	; (8000e60 <inv_generate_fast_nomot+0x348>)
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	bfb8      	it	lt
 8000cf4:	4602      	movlt	r2, r0
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 8000cfc:	bfb8      	it	lt
 8000cfe:	4613      	movlt	r3, r2
 8000d00:	461a      	mov	r2, r3
 8000d02:	4290      	cmp	r0, r2
 8000d04:	ea4f 73e3 	mov.w	r3, r3, asr #31
 8000d08:	e9c6 2300 	strd	r2, r3, [r6]
 8000d0c:	eb71 0303 	sbcs.w	r3, r1, r3
 8000d10:	db4e      	blt.n	8000db0 <inv_generate_fast_nomot+0x298>
 8000d12:	4620      	mov	r0, r4
 8000d14:	f7ff fe0e 	bl	8000934 <inv_detect_motion_by_gyro_accel>
 8000d18:	2800      	cmp	r0, #0
 8000d1a:	d049      	beq.n	8000db0 <inv_generate_fast_nomot+0x298>
 8000d1c:	2801      	cmp	r0, #1
 8000d1e:	d188      	bne.n	8000c32 <inv_generate_fast_nomot+0x11a>
 8000d20:	4620      	mov	r0, r4
 8000d22:	f7ff fc0d 	bl	8000540 <inv_fast_nomot_set_gyro_bias>
 8000d26:	e76a      	b.n	8000bfe <inv_generate_fast_nomot+0xe6>
 8000d28:	2303      	movs	r3, #3
 8000d2a:	4620      	mov	r0, r4
 8000d2c:	f885 31e8 	strb.w	r3, [r5, #488]	; 0x1e8
 8000d30:	f7ff fc06 	bl	8000540 <inv_fast_nomot_set_gyro_bias>
 8000d34:	f7ff fb58 	bl	80003e8 <inv_reset_packet>
 8000d38:	e77b      	b.n	8000c32 <inv_generate_fast_nomot+0x11a>
 8000d3a:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8000d3e:	4e44      	ldr	r6, [pc, #272]	; (8000e50 <inv_generate_fast_nomot+0x338>)
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	f47f af76 	bne.w	8000c32 <inv_generate_fast_nomot+0x11a>
 8000d46:	4620      	mov	r0, r4
 8000d48:	f7ff fdf4 	bl	8000934 <inv_detect_motion_by_gyro_accel>
 8000d4c:	2800      	cmp	r0, #0
 8000d4e:	d163      	bne.n	8000e18 <inv_generate_fast_nomot+0x300>
 8000d50:	2305      	movs	r3, #5
 8000d52:	f886 31e8 	strb.w	r3, [r6, #488]	; 0x1e8
 8000d56:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
 8000d5a:	f8d5 0110 	ldr.w	r0, [r5, #272]	; 0x110
 8000d5e:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
 8000d62:	f8d5 2128 	ldr.w	r2, [r5, #296]	; 0x128
 8000d66:	f8c5 311c 	str.w	r3, [r5, #284]	; 0x11c
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
 8000d70:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
 8000d74:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
 8000d78:	f8c5 3118 	str.w	r3, [r5, #280]	; 0x118
 8000d7c:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
 8000d80:	f8c5 0120 	str.w	r0, [r5, #288]	; 0x120
 8000d84:	f8c5 1124 	str.w	r1, [r5, #292]	; 0x124
 8000d88:	f8c5 212c 	str.w	r2, [r5, #300]	; 0x12c
 8000d8c:	f7ff fd50 	bl	8000830 <inv_reset_min_max_gyro_accel_statistics>
 8000d90:	e74f      	b.n	8000c32 <inv_generate_fast_nomot+0x11a>
 8000d92:	f8d5 31e0 	ldr.w	r3, [r5, #480]	; 0x1e0
 8000d96:	4c2e      	ldr	r4, [pc, #184]	; (8000e50 <inv_generate_fast_nomot+0x338>)
 8000d98:	1c5a      	adds	r2, r3, #1
 8000d9a:	2b09      	cmp	r3, #9
 8000d9c:	f8c5 21e0 	str.w	r2, [r5, #480]	; 0x1e0
 8000da0:	f77f af47 	ble.w	8000c32 <inv_generate_fast_nomot+0x11a>
 8000da4:	f7ff fb20 	bl	80003e8 <inv_reset_packet>
 8000da8:	2301      	movs	r3, #1
 8000daa:	f884 31e8 	strb.w	r3, [r4, #488]	; 0x1e8
 8000dae:	e740      	b.n	8000c32 <inv_generate_fast_nomot+0x11a>
 8000db0:	2305      	movs	r3, #5
 8000db2:	f885 31e8 	strb.w	r3, [r5, #488]	; 0x1e8
 8000db6:	e73c      	b.n	8000c32 <inv_generate_fast_nomot+0x11a>
 8000db8:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8000dba:	6b71      	ldr	r1, [r6, #52]	; 0x34
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	ee07 3a90 	vmov	s15, r3
 8000dc2:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8000dc6:	3101      	adds	r1, #1
 8000dc8:	eef1 7ac0 	vsqrt.f32	s15, s0
 8000dcc:	6013      	str	r3, [r2, #0]
 8000dce:	f8c2 120c 	str.w	r1, [r2, #524]	; 0x20c
 8000dd2:	eef4 7a67 	vcmp.f32	s15, s15
 8000dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dda:	d133      	bne.n	8000e44 <inv_generate_fast_nomot+0x32c>
 8000ddc:	edc5 7a85 	vstr	s15, [r5, #532]	; 0x214
 8000de0:	f8d5 320c 	ldr.w	r3, [r5, #524]	; 0x20c
 8000de4:	6b71      	ldr	r1, [r6, #52]	; 0x34
 8000de6:	e6c4      	b.n	8000b72 <inv_generate_fast_nomot+0x5a>
 8000de8:	2302      	movs	r3, #2
 8000dea:	f885 31e8 	strb.w	r3, [r5, #488]	; 0x1e8
 8000dee:	e720      	b.n	8000c32 <inv_generate_fast_nomot+0x11a>
 8000df0:	e9f1 8914 	ldrd	r8, r9, [r1, #80]!	; 0x50
 8000df4:	45b0      	cmp	r8, r6
 8000df6:	eb79 0207 	sbcs.w	r2, r9, r7
 8000dfa:	f6bf af17 	bge.w	8000c2c <inv_generate_fast_nomot+0x114>
 8000dfe:	e9c1 6700 	strd	r6, r7, [r1]
 8000e02:	e713      	b.n	8000c2c <inv_generate_fast_nomot+0x114>
 8000e04:	e9f3 671e 	ldrd	r6, r7, [r3, #120]!	; 0x78
 8000e08:	4286      	cmp	r6, r0
 8000e0a:	eb77 0401 	sbcs.w	r4, r7, r1
 8000e0e:	f6bf af00 	bge.w	8000c12 <inv_generate_fast_nomot+0xfa>
 8000e12:	e9c3 0100 	strd	r0, r1, [r3]
 8000e16:	e6fc      	b.n	8000c12 <inv_generate_fast_nomot+0xfa>
 8000e18:	2801      	cmp	r0, #1
 8000e1a:	bf04      	itt	eq
 8000e1c:	2302      	moveq	r3, #2
 8000e1e:	f886 31e8 	strbeq.w	r3, [r6, #488]	; 0x1e8
 8000e22:	e798      	b.n	8000d56 <inv_generate_fast_nomot+0x23e>
 8000e24:	f8d6 3128 	ldr.w	r3, [r6, #296]	; 0x128
 8000e28:	f8d6 112c 	ldr.w	r1, [r6, #300]	; 0x12c
 8000e2c:	6a3a      	ldr	r2, [r7, #32]
 8000e2e:	1a5b      	subs	r3, r3, r1
 8000e30:	4293      	cmp	r3, r2
 8000e32:	f4ff aee4 	bcc.w	8000bfe <inv_generate_fast_nomot+0xe6>
 8000e36:	2304      	movs	r3, #4
 8000e38:	4620      	mov	r0, r4
 8000e3a:	f885 31e8 	strb.w	r3, [r5, #488]	; 0x1e8
 8000e3e:	f7ff fb7f 	bl	8000540 <inv_fast_nomot_set_gyro_bias>
 8000e42:	e6dc      	b.n	8000bfe <inv_generate_fast_nomot+0xe6>
 8000e44:	f00f fb36 	bl	80104b4 <sqrtf>
 8000e48:	eef0 7a40 	vmov.f32	s15, s0
 8000e4c:	e7c6      	b.n	8000ddc <inv_generate_fast_nomot+0x2c4>
 8000e4e:	bf00      	nop
 8000e50:	20000bc0 	.word	0x20000bc0
 8000e54:	20000240 	.word	0x20000240
 8000e58:	20000d98 	.word	0x20000d98
 8000e5c:	20000db0 	.word	0x20000db0
 8000e60:	20000d90 	.word	0x20000d90

08000e64 <inv_set_default_number_of_samples>:
 8000e64:	b510      	push	{r4, lr}
 8000e66:	2300      	movs	r3, #0
 8000e68:	1040      	asrs	r0, r0, #1
 8000e6a:	2800      	cmp	r0, #0
 8000e6c:	d117      	bne.n	8000e9e <inv_set_default_number_of_samples+0x3a>
 8000e6e:	3301      	adds	r3, #1
 8000e70:	2201      	movs	r2, #1
 8000e72:	409a      	lsls	r2, r3
 8000e74:	ee07 2a90 	vmov	s15, r2
 8000e78:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8000e7c:	4c0c      	ldr	r4, [pc, #48]	; (8000eb0 <inv_set_default_number_of_samples+0x4c>)
 8000e7e:	eef1 7ac0 	vsqrt.f32	s15, s0
 8000e82:	6363      	str	r3, [r4, #52]	; 0x34
 8000e84:	6322      	str	r2, [r4, #48]	; 0x30
 8000e86:	eef4 7a67 	vcmp.f32	s15, s15
 8000e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e8e:	d10a      	bne.n	8000ea6 <inv_set_default_number_of_samples+0x42>
 8000e90:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000e92:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 8000e96:	2319      	movs	r3, #25
 8000e98:	4093      	lsls	r3, r2
 8000e9a:	63e3      	str	r3, [r4, #60]	; 0x3c
 8000e9c:	bd10      	pop	{r4, pc}
 8000e9e:	f103 0301 	add.w	r3, r3, #1
 8000ea2:	dce1      	bgt.n	8000e68 <inv_set_default_number_of_samples+0x4>
 8000ea4:	e7e3      	b.n	8000e6e <inv_set_default_number_of_samples+0xa>
 8000ea6:	f00f fb05 	bl	80104b4 <sqrtf>
 8000eaa:	eef0 7a40 	vmov.f32	s15, s0
 8000eae:	e7ef      	b.n	8000e90 <inv_set_default_number_of_samples+0x2c>
 8000eb0:	20000240 	.word	0x20000240

08000eb4 <inv_init_fast_nomot>:
 8000eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000eb8:	4d15      	ldr	r5, [pc, #84]	; (8000f10 <inv_init_fast_nomot+0x5c>)
 8000eba:	4c16      	ldr	r4, [pc, #88]	; (8000f14 <inv_init_fast_nomot+0x60>)
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	f44f 7218 	mov.w	r2, #608	; 0x260
 8000ec4:	f00c f934 	bl	800d130 <memset>
 8000ec8:	2100      	movs	r1, #0
 8000eca:	2240      	movs	r2, #64	; 0x40
 8000ecc:	4620      	mov	r0, r4
 8000ece:	f00c f92f 	bl	800d130 <memset>
 8000ed2:	2007      	movs	r0, #7
 8000ed4:	f7ff fa52 	bl	800037c <inv_init_maxmin>
 8000ed8:	2001      	movs	r0, #1
 8000eda:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000ede:	2300      	movs	r3, #0
 8000ee0:	490d      	ldr	r1, [pc, #52]	; (8000f18 <inv_init_fast_nomot+0x64>)
 8000ee2:	f8c5 01e4 	str.w	r0, [r5, #484]	; 0x1e4
 8000ee6:	f240 58dc 	movw	r8, #1500	; 0x5dc
 8000eea:	f04f 0900 	mov.w	r9, #0
 8000eee:	2614      	movs	r6, #20
 8000ef0:	2700      	movs	r7, #0
 8000ef2:	2019      	movs	r0, #25
 8000ef4:	e9c4 8906 	strd	r8, r9, [r4, #24]
 8000ef8:	e9c4 6702 	strd	r6, r7, [r4, #8]
 8000efc:	e9c4 2304 	strd	r2, r3, [r4, #16]
 8000f00:	6221      	str	r1, [r4, #32]
 8000f02:	f7ff ffaf 	bl	8000e64 <inv_set_default_number_of_samples>
 8000f06:	2000      	movs	r0, #0
 8000f08:	f8c5 0208 	str.w	r0, [r5, #520]	; 0x208
 8000f0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000f10:	20000bc0 	.word	0x20000bc0
 8000f14:	20000240 	.word	0x20000240
 8000f18:	2faf0800 	.word	0x2faf0800

08000f1c <inv_stop_fast_nomot>:
 8000f1c:	b508      	push	{r3, lr}
 8000f1e:	2001      	movs	r0, #1
 8000f20:	f00b fdfa 	bl	800cb18 <inv_set_motion_state>
 8000f24:	4802      	ldr	r0, [pc, #8]	; (8000f30 <inv_stop_fast_nomot+0x14>)
 8000f26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000f2a:	f00a bbfb 	b.w	800b724 <inv_unregister_data_cb>
 8000f2e:	bf00      	nop
 8000f30:	08000b19 	.word	0x08000b19

08000f34 <inv_enable_fast_nomot>:
 8000f34:	b508      	push	{r3, lr}
 8000f36:	f7ff ffbd 	bl	8000eb4 <inv_init_fast_nomot>
 8000f3a:	b100      	cbz	r0, 8000f3e <inv_enable_fast_nomot+0xa>
 8000f3c:	bd08      	pop	{r3, pc}
 8000f3e:	4802      	ldr	r0, [pc, #8]	; (8000f48 <inv_enable_fast_nomot+0x14>)
 8000f40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000f44:	f00b bfde 	b.w	800cf04 <inv_register_mpl_start_notification>
 8000f48:	08000415 	.word	0x08000415

08000f4c <inv_disable_fast_nomot>:
 8000f4c:	b508      	push	{r3, lr}
 8000f4e:	f7ff ffe5 	bl	8000f1c <inv_stop_fast_nomot>
 8000f52:	4802      	ldr	r0, [pc, #8]	; (8000f5c <inv_disable_fast_nomot+0x10>)
 8000f54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000f58:	f00b bf94 	b.w	800ce84 <inv_unregister_mpl_start_notification>
 8000f5c:	08000415 	.word	0x08000415

08000f60 <inv_get_fnm_gyro_no_motion_param>:
 8000f60:	4b01      	ldr	r3, [pc, #4]	; (8000f68 <inv_get_fnm_gyro_no_motion_param+0x8>)
 8000f62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f66:	4770      	bx	lr
 8000f68:	20000db0 	.word	0x20000db0

08000f6c <inv_fnm_debug_print>:
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop

08000f70 <inv_start_9x_sensor_fusion>:
 8000f70:	4802      	ldr	r0, [pc, #8]	; (8000f7c <inv_start_9x_sensor_fusion+0xc>)
 8000f72:	f44f 7116 	mov.w	r1, #600	; 0x258
 8000f76:	2204      	movs	r2, #4
 8000f78:	f00a bb2e 	b.w	800b5d8 <inv_register_data_cb>
 8000f7c:	0800158d 	.word	0x0800158d

08000f80 <inv_filter_correction_angle>:
 8000f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f82:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	ed2d 8b02 	vpush	{d8}
 8000f8a:	460f      	mov	r7, r1
 8000f8c:	eef0 8a40 	vmov.f32	s17, s0
 8000f90:	4615      	mov	r5, r2
 8000f92:	f2c0 8094 	blt.w	80010be <inv_filter_correction_angle+0x13e>
 8000f96:	f8d0 60bc 	ldr.w	r6, [r0, #188]	; 0xbc
 8000f9a:	f1a6 0603 	sub.w	r6, r6, #3
 8000f9e:	fab6 f686 	clz	r6, r6
 8000fa2:	0976      	lsrs	r6, r6, #5
 8000fa4:	4868      	ldr	r0, [pc, #416]	; (8001148 <inv_filter_correction_angle+0x1c8>)
 8000fa6:	2224      	movs	r2, #36	; 0x24
 8000fa8:	1d01      	adds	r1, r0, #4
 8000faa:	f1a0 04bc 	sub.w	r4, r0, #188	; 0xbc
 8000fae:	f00c f8a5 	bl	800d0fc <memmove>
 8000fb2:	eddf 7a66 	vldr	s15, [pc, #408]	; 800114c <inv_filter_correction_angle+0x1cc>
 8000fb6:	edc4 8a38 	vstr	s17, [r4, #224]	; 0xe0
 8000fba:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
 8000fbe:	f104 02e4 	add.w	r2, r4, #228	; 0xe4
 8000fc2:	ecb3 7a01 	vldmia	r3!, {s14}
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000fcc:	d1f9      	bne.n	8000fc2 <inv_filter_correction_angle+0x42>
 8000fce:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000fd2:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8000fd6:	2f31      	cmp	r7, #49	; 0x31
 8000fd8:	495d      	ldr	r1, [pc, #372]	; (8001150 <inv_filter_correction_angle+0x1d0>)
 8000fda:	edc4 7a39 	vstr	s15, [r4, #228]	; 0xe4
 8000fde:	dd47      	ble.n	8001070 <inv_filter_correction_angle+0xf0>
 8000fe0:	f5b7 7f7a 	cmp.w	r7, #1000	; 0x3e8
 8000fe4:	bfb4      	ite	lt
 8000fe6:	ed9f 8a5b 	vldrlt	s16, [pc, #364]	; 8001154 <inv_filter_correction_angle+0x1d4>
 8000fea:	ed9f 8a5b 	vldrge	s16, [pc, #364]	; 8001158 <inv_filter_correction_angle+0x1d8>
 8000fee:	eddf 6a5b 	vldr	s13, [pc, #364]	; 800115c <inv_filter_correction_angle+0x1dc>
 8000ff2:	ee88 8a88 	vdiv.f32	s16, s17, s16
 8000ff6:	23c8      	movs	r3, #200	; 0xc8
 8000ff8:	f8c1 311c 	str.w	r3, [r1, #284]	; 0x11c
 8000ffc:	ee07 5a10 	vmov	s14, r5
 8001000:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001004:	ee27 7a08 	vmul.f32	s14, s14, s16
 8001008:	ee87 8a26 	vdiv.f32	s16, s14, s13
 800100c:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 8001010:	4b53      	ldr	r3, [pc, #332]	; (8001160 <inv_filter_correction_angle+0x1e0>)
 8001012:	2a00      	cmp	r2, #0
 8001014:	bf18      	it	ne
 8001016:	eeb0 8a68 	vmovne.f32	s16, s17
 800101a:	429d      	cmp	r5, r3
 800101c:	bf08      	it	eq
 800101e:	eeb0 8a68 	vmoveq.f32	s16, s17
 8001022:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8001026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800102a:	bf0e      	itee	eq
 800102c:	ed94 7a3a 	vldreq	s14, [r4, #232]	; 0xe8
 8001030:	edc4 7a3a 	vstrne	s15, [r4, #232]	; 0xe8
 8001034:	eeb0 7a67 	vmovne.f32	s14, s15
 8001038:	ee77 7a67 	vsub.f32	s15, s14, s15
 800103c:	eef0 7ae7 	vabs.f32	s15, s15
 8001040:	ee17 0a90 	vmov	r0, s15
 8001044:	f002 f850 	bl	80030e8 <__aeabi_f2d>
 8001048:	a33b      	add	r3, pc, #236	; (adr r3, 8001138 <inv_filter_correction_angle+0x1b8>)
 800104a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800104e:	f002 fb33 	bl	80036b8 <__aeabi_dcmpgt>
 8001052:	b140      	cbz	r0, 8001066 <inv_filter_correction_angle+0xe6>
 8001054:	edd4 7a2e 	vldr	s15, [r4, #184]	; 0xb8
 8001058:	4b3d      	ldr	r3, [pc, #244]	; (8001150 <inv_filter_correction_angle+0x1d0>)
 800105a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800105e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001062:	d100      	bne.n	8001066 <inv_filter_correction_angle+0xe6>
 8001064:	bb6e      	cbnz	r6, 80010c2 <inv_filter_correction_angle+0x142>
 8001066:	eeb0 0a48 	vmov.f32	s0, s16
 800106a:	ecbd 8b02 	vpop	{d8}
 800106e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001070:	4b3c      	ldr	r3, [pc, #240]	; (8001164 <inv_filter_correction_angle+0x1e4>)
 8001072:	f8d1 011c 	ldr.w	r0, [r1, #284]	; 0x11c
 8001076:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8001168 <inv_filter_correction_angle+0x1e8>
 800107a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800115c <inv_filter_correction_angle+0x1dc>
 800107e:	fb83 2305 	smull	r2, r3, r3, r5
 8001082:	17ea      	asrs	r2, r5, #31
 8001084:	eba2 23e3 	sub.w	r3, r2, r3, asr #11
 8001088:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800108c:	4403      	add	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	f8c1 311c 	str.w	r3, [r1, #284]	; 0x11c
 8001094:	ee88 7a87 	vdiv.f32	s14, s17, s14
 8001098:	db37      	blt.n	800110a <inv_filter_correction_angle+0x18a>
 800109a:	ee06 5a10 	vmov	s12, r5
 800109e:	eeb8 8ac6 	vcvt.f32.s32	s16, s12
 80010a2:	ee27 7a08 	vmul.f32	s14, s14, s16
 80010a6:	ee87 8a26 	vdiv.f32	s16, s14, s13
 80010aa:	d1af      	bne.n	800100c <inv_filter_correction_angle+0x8c>
 80010ac:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800114c <inv_filter_correction_angle+0x1cc>
 80010b6:	bf08      	it	eq
 80010b8:	eeb0 8a47 	vmoveq.f32	s16, s14
 80010bc:	e7a6      	b.n	800100c <inv_filter_correction_angle+0x8c>
 80010be:	2600      	movs	r6, #0
 80010c0:	e770      	b.n	8000fa4 <inv_filter_correction_angle+0x24>
 80010c2:	22c8      	movs	r2, #200	; 0xc8
 80010c4:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
 80010c8:	ee18 0a90 	vmov	r0, s17
 80010cc:	f002 f80c 	bl	80030e8 <__aeabi_f2d>
 80010d0:	2200      	movs	r2, #0
 80010d2:	4b26      	ldr	r3, [pc, #152]	; (800116c <inv_filter_correction_angle+0x1ec>)
 80010d4:	f002 f98a 	bl	80033ec <__aeabi_ddiv>
 80010d8:	4606      	mov	r6, r0
 80010da:	4628      	mov	r0, r5
 80010dc:	460f      	mov	r7, r1
 80010de:	f001 fff1 	bl	80030c4 <__aeabi_i2d>
 80010e2:	4602      	mov	r2, r0
 80010e4:	460b      	mov	r3, r1
 80010e6:	4630      	mov	r0, r6
 80010e8:	4639      	mov	r1, r7
 80010ea:	f002 f855 	bl	8003198 <__aeabi_dmul>
 80010ee:	a314      	add	r3, pc, #80	; (adr r3, 8001140 <inv_filter_correction_angle+0x1c0>)
 80010f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f4:	f002 f97a 	bl	80033ec <__aeabi_ddiv>
 80010f8:	f002 fb26 	bl	8003748 <__aeabi_d2f>
 80010fc:	ee08 0a10 	vmov	s16, r0
 8001100:	eeb0 0a48 	vmov.f32	s0, s16
 8001104:	ecbd 8b02 	vpop	{d8}
 8001108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800110a:	ee06 5a10 	vmov	s12, r5
 800110e:	eeb8 8ac6 	vcvt.f32.s32	s16, s12
 8001112:	2300      	movs	r3, #0
 8001114:	ee27 7a08 	vmul.f32	s14, s14, s16
 8001118:	f8c1 311c 	str.w	r3, [r1, #284]	; 0x11c
 800111c:	ee87 8a26 	vdiv.f32	s16, s14, s13
 8001120:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8001124:	2b01      	cmp	r3, #1
 8001126:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800114c <inv_filter_correction_angle+0x1cc>
 800112a:	bf08      	it	eq
 800112c:	eeb0 8a47 	vmoveq.f32	s16, s14
 8001130:	e76c      	b.n	800100c <inv_filter_correction_angle+0x8c>
 8001132:	bf00      	nop
 8001134:	f3af 8000 	nop.w
 8001138:	cac08312 	.word	0xcac08312
 800113c:	3fb645a1 	.word	0x3fb645a1
 8001140:	00000000 	.word	0x00000000
 8001144:	40b38800 	.word	0x40b38800
 8001148:	20000edc 	.word	0x20000edc
 800114c:	00000000 	.word	0x00000000
 8001150:	20000e20 	.word	0x20000e20
 8001154:	43480000 	.word	0x43480000
 8001158:	42480000 	.word	0x42480000
 800115c:	459c4000 	.word	0x459c4000
 8001160:	000f4240 	.word	0x000f4240
 8001164:	68db8bad 	.word	0x68db8bad
 8001168:	43c80000 	.word	0x43c80000
 800116c:	40790000 	.word	0x40790000

08001170 <inv_perform_9x_fusion>:
 8001170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001174:	4ddd      	ldr	r5, [pc, #884]	; (80014ec <inv_perform_9x_fusion+0x37c>)
 8001176:	ed2d 8b02 	vpush	{d8}
 800117a:	f8d5 2120 	ldr.w	r2, [r5, #288]	; 0x120
 800117e:	b0ad      	sub	sp, #180	; 0xb4
 8001180:	2300      	movs	r3, #0
 8001182:	2a03      	cmp	r2, #3
 8001184:	9305      	str	r3, [sp, #20]
 8001186:	9306      	str	r3, [sp, #24]
 8001188:	9307      	str	r3, [sp, #28]
 800118a:	f000 81a7 	beq.w	80014dc <inv_perform_9x_fusion+0x36c>
 800118e:	f105 03a4 	add.w	r3, r5, #164	; 0xa4
 8001192:	9303      	str	r3, [sp, #12]
 8001194:	461a      	mov	r2, r3
 8001196:	ed9f 7ad6 	vldr	s14, [pc, #856]	; 80014f0 <inv_perform_9x_fusion+0x380>
 800119a:	ab0b      	add	r3, sp, #44	; 0x2c
 800119c:	9302      	str	r3, [sp, #8]
 800119e:	af0f      	add	r7, sp, #60	; 0x3c
 80011a0:	f852 1f04 	ldr.w	r1, [r2, #4]!
 80011a4:	ee07 1a90 	vmov	s15, r1
 80011a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011b0:	ece3 7a01 	vstmia	r3!, {s15}
 80011b4:	42bb      	cmp	r3, r7
 80011b6:	d1f3      	bne.n	80011a0 <inv_perform_9x_fusion+0x30>
 80011b8:	ae1f      	add	r6, sp, #124	; 0x7c
 80011ba:	4ccc      	ldr	r4, [pc, #816]	; (80014ec <inv_perform_9x_fusion+0x37c>)
 80011bc:	9001      	str	r0, [sp, #4]
 80011be:	f10d 0920 	add.w	r9, sp, #32
 80011c2:	4630      	mov	r0, r6
 80011c4:	f00b fd38 	bl	800cc38 <inv_get_6axis_quaternion>
 80011c8:	4648      	mov	r0, r9
 80011ca:	f00b fce7 	bl	800cb9c <inv_get_gravity>
 80011ce:	f104 010c 	add.w	r1, r4, #12
 80011d2:	223c      	movs	r2, #60	; 0x3c
 80011d4:	4620      	mov	r0, r4
 80011d6:	f00b ff91 	bl	800d0fc <memmove>
 80011da:	f104 0158 	add.w	r1, r4, #88	; 0x58
 80011de:	2250      	movs	r2, #80	; 0x50
 80011e0:	f104 0048 	add.w	r0, r4, #72	; 0x48
 80011e4:	f00b ff8a 	bl	800d0fc <memmove>
 80011e8:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 80011ec:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 80011f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80011f4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80011f8:	f8d5 b124 	ldr.w	fp, [r5, #292]	; 0x124
 80011fc:	f104 0e98 	add.w	lr, r4, #152	; 0x98
 8001200:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8001204:	f10b 0301 	add.w	r3, fp, #1
 8001208:	2b06      	cmp	r3, #6
 800120a:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 800120e:	f340 811f 	ble.w	8001450 <inv_perform_9x_fusion+0x2e0>
 8001212:	2306      	movs	r3, #6
 8001214:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8001218:	f04f 0b00 	mov.w	fp, #0
 800121c:	eb05 130b 	add.w	r3, r5, fp, lsl #4
 8001220:	f103 0848 	add.w	r8, r3, #72	; 0x48
 8001224:	9b01      	ldr	r3, [sp, #4]
 8001226:	ed9f 8ab3 	vldr	s16, [pc, #716]	; 80014f4 <inv_perform_9x_fusion+0x384>
 800122a:	eb0b 094b 	add.w	r9, fp, fp, lsl #1
 800122e:	eb05 0989 	add.w	r9, r5, r9, lsl #2
 8001232:	f103 0aa0 	add.w	sl, r3, #160	; 0xa0
 8001236:	ac23      	add	r4, sp, #140	; 0x8c
 8001238:	4641      	mov	r1, r8
 800123a:	48af      	ldr	r0, [pc, #700]	; (80014f8 <inv_perform_9x_fusion+0x388>)
 800123c:	4622      	mov	r2, r4
 800123e:	f00a fdbd 	bl	800bdbc <inv_q_mult>
 8001242:	4649      	mov	r1, r9
 8001244:	4650      	mov	r0, sl
 8001246:	4622      	mov	r2, r4
 8001248:	f00a fcac 	bl	800bba4 <inv_compass_angle>
 800124c:	eef0 7ac8 	vabs.f32	s15, s16
 8001250:	eeb0 7ac0 	vabs.f32	s14, s0
 8001254:	eeb4 7a67 	vcmp.f32	s14, s15
 8001258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800125c:	f10b 0b01 	add.w	fp, fp, #1
 8001260:	bf48      	it	mi
 8001262:	eeb0 8a40 	vmovmi.f32	s16, s0
 8001266:	f1bb 0f06 	cmp.w	fp, #6
 800126a:	f108 0810 	add.w	r8, r8, #16
 800126e:	f109 090c 	add.w	r9, r9, #12
 8001272:	d1e1      	bne.n	8001238 <inv_perform_9x_fusion+0xc8>
 8001274:	9b01      	ldr	r3, [sp, #4]
 8001276:	f103 0018 	add.w	r0, r3, #24
 800127a:	f00a fd23 	bl	800bcc4 <inv_get_gyro_sum_of_sqr>
 800127e:	4b9f      	ldr	r3, [pc, #636]	; (80014fc <inv_perform_9x_fusion+0x38c>)
 8001280:	f8d5 2130 	ldr.w	r2, [r5, #304]	; 0x130
 8001284:	429a      	cmp	r2, r3
 8001286:	bfa8      	it	ge
 8001288:	461a      	movge	r2, r3
 800128a:	0981      	lsrs	r1, r0, #6
 800128c:	eeb0 0a48 	vmov.f32	s0, s16
 8001290:	9801      	ldr	r0, [sp, #4]
 8001292:	f7ff fe75 	bl	8000f80 <inv_filter_correction_angle>
 8001296:	edd5 7a3b 	vldr	s15, [r5, #236]	; 0xec
 800129a:	ee20 0a27 	vmul.f32	s0, s0, s15
 800129e:	a81b      	add	r0, sp, #108	; 0x6c
 80012a0:	ed85 0a2e 	vstr	s0, [r5, #184]	; 0xb8
 80012a4:	f00b fcc8 	bl	800cc38 <inv_get_6axis_quaternion>
 80012a8:	a81b      	add	r0, sp, #108	; 0x6c
 80012aa:	4621      	mov	r1, r4
 80012ac:	f00b f9a3 	bl	800c5f6 <inv_quaternion_to_rotation>
 80012b0:	a91b      	add	r1, sp, #108	; 0x6c
 80012b2:	4893      	ldr	r0, [pc, #588]	; (8001500 <inv_perform_9x_fusion+0x390>)
 80012b4:	4632      	mov	r2, r6
 80012b6:	f00a fd81 	bl	800bdbc <inv_q_mult>
 80012ba:	a81b      	add	r0, sp, #108	; 0x6c
 80012bc:	4990      	ldr	r1, [pc, #576]	; (8001500 <inv_perform_9x_fusion+0x390>)
 80012be:	f00a fe77 	bl	800bfb0 <inv_q_invert>
 80012c2:	f10d 0b14 	add.w	fp, sp, #20
 80012c6:	f04f 0900 	mov.w	r9, #0
 80012ca:	f10d 0a88 	add.w	sl, sp, #136	; 0x88
 80012ce:	46a4      	mov	ip, r4
 80012d0:	eb0c 0209 	add.w	r2, ip, r9
 80012d4:	4633      	mov	r3, r6
 80012d6:	2000      	movs	r0, #0
 80012d8:	2100      	movs	r1, #0
 80012da:	f853 4f04 	ldr.w	r4, [r3, #4]!
 80012de:	f852 eb04 	ldr.w	lr, [r2], #4
 80012e2:	4553      	cmp	r3, sl
 80012e4:	fbc4 010e 	smlal	r0, r1, r4, lr
 80012e8:	d1f7      	bne.n	80012da <inv_perform_9x_fusion+0x16a>
 80012ea:	0f83      	lsrs	r3, r0, #30
 80012ec:	f109 090c 	add.w	r9, r9, #12
 80012f0:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 80012f4:	f1b9 0f24 	cmp.w	r9, #36	; 0x24
 80012f8:	f84b 3b04 	str.w	r3, [fp], #4
 80012fc:	d1e8      	bne.n	80012d0 <inv_perform_9x_fusion+0x160>
 80012fe:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 8001302:	2b00      	cmp	r3, #0
 8001304:	f040 80ae 	bne.w	8001464 <inv_perform_9x_fusion+0x2f4>
 8001308:	9c07      	ldr	r4, [sp, #28]
 800130a:	4263      	negs	r3, r4
 800130c:	ee08 3a10 	vmov	s16, r3
 8001310:	eeba 8ac1 	vcvt.f32.s32	s16, s16, #30
 8001314:	eeb0 0a48 	vmov.f32	s0, s16
 8001318:	f00e ff2c 	bl	8010174 <cosf>
 800131c:	eef0 8a40 	vmov.f32	s17, s0
 8001320:	eeb0 0a48 	vmov.f32	s0, s16
 8001324:	f00e ff66 	bl	80101f4 <sinf>
 8001328:	ee07 4a90 	vmov	s15, r4
 800132c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001330:	eddf 7a74 	vldr	s15, [pc, #464]	; 8001504 <inv_perform_9x_fusion+0x394>
 8001334:	ee87 7a27 	vdiv.f32	s14, s14, s15
 8001338:	f8d5 3130 	ldr.w	r3, [r5, #304]	; 0x130
 800133c:	4a72      	ldr	r2, [pc, #456]	; (8001508 <inv_perform_9x_fusion+0x398>)
 800133e:	fb82 1203 	smull	r1, r2, r2, r3
 8001342:	17db      	asrs	r3, r3, #31
 8001344:	ebc3 23e2 	rsb	r3, r3, r2, asr #11
 8001348:	2600      	movs	r6, #0
 800134a:	9614      	str	r6, [sp, #80]	; 0x50
 800134c:	9615      	str	r6, [sp, #84]	; 0x54
 800134e:	ac17      	add	r4, sp, #92	; 0x5c
 8001350:	ee07 3a90 	vmov	s15, r3
 8001354:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001358:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800135c:	ee87 7a27 	vdiv.f32	s14, s14, s15
 8001360:	eddf 6a68 	vldr	s13, [pc, #416]	; 8001504 <inv_perform_9x_fusion+0x394>
 8001364:	ed8d 0a16 	vstr	s0, [sp, #88]	; 0x58
 8001368:	ee27 7a08 	vmul.f32	s14, s14, s16
 800136c:	edcd 8a13 	vstr	s17, [sp, #76]	; 0x4c
 8001370:	eebd 8ac7 	vcvt.s32.f32	s16, s14
 8001374:	ee18 3a10 	vmov	r3, s16
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	ee08 3a10 	vmov	s16, r3
 800137e:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8001382:	ee28 8a26 	vmul.f32	s16, s16, s13
 8001386:	ee27 8a88 	vmul.f32	s16, s15, s16
 800138a:	eebd 8ac8 	vcvt.s32.f32	s16, s16
 800138e:	eeba 8ac1 	vcvt.f32.s32	s16, s16, #30
 8001392:	eeb0 0a48 	vmov.f32	s0, s16
 8001396:	f00e feed 	bl	8010174 <cosf>
 800139a:	ed8d 0a17 	vstr	s0, [sp, #92]	; 0x5c
 800139e:	eeb0 0a48 	vmov.f32	s0, s16
 80013a2:	9618      	str	r6, [sp, #96]	; 0x60
 80013a4:	9619      	str	r6, [sp, #100]	; 0x64
 80013a6:	f00e ff25 	bl	80101f4 <sinf>
 80013aa:	a913      	add	r1, sp, #76	; 0x4c
 80013ac:	a80b      	add	r0, sp, #44	; 0x2c
 80013ae:	463a      	mov	r2, r7
 80013b0:	ed8d 0a1a 	vstr	s0, [sp, #104]	; 0x68
 80013b4:	f00a fe53 	bl	800c05e <inv_q_multf>
 80013b8:	4621      	mov	r1, r4
 80013ba:	4638      	mov	r0, r7
 80013bc:	aa13      	add	r2, sp, #76	; 0x4c
 80013be:	f00a fe4e 	bl	800c05e <inv_q_multf>
 80013c2:	9b01      	ldr	r3, [sp, #4]
 80013c4:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 80013c8:	2900      	cmp	r1, #0
 80013ca:	dd16      	ble.n	80013fa <inv_perform_9x_fusion+0x28a>
 80013cc:	ae13      	add	r6, sp, #76	; 0x4c
 80013ce:	4a4f      	ldr	r2, [pc, #316]	; (800150c <inv_perform_9x_fusion+0x39c>)
 80013d0:	eddf 6a50 	vldr	s13, [pc, #320]	; 8001514 <inv_perform_9x_fusion+0x3a4>
 80013d4:	9802      	ldr	r0, [sp, #8]
 80013d6:	4633      	mov	r3, r6
 80013d8:	ecb3 7a01 	vldmia	r3!, {s14}
 80013dc:	ee67 7a26 	vmul.f32	s15, s14, s13
 80013e0:	42a3      	cmp	r3, r4
 80013e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013e6:	eca0 7a01 	vstmia	r0!, {s14}
 80013ea:	ee17 7a90 	vmov	r7, s15
 80013ee:	f842 7f04 	str.w	r7, [r2, #4]!
 80013f2:	d1f1      	bne.n	80013d8 <inv_perform_9x_fusion+0x268>
 80013f4:	2903      	cmp	r1, #3
 80013f6:	f000 808f 	beq.w	8001518 <inv_perform_9x_fusion+0x3a8>
 80013fa:	edd5 7a2a 	vldr	s15, [r5, #168]	; 0xa8
 80013fe:	eddf 5a3c 	vldr	s11, [pc, #240]	; 80014f0 <inv_perform_9x_fusion+0x380>
 8001402:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 8001406:	4c39      	ldr	r4, [pc, #228]	; (80014ec <inv_perform_9x_fusion+0x37c>)
 8001408:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800140c:	edd5 7a2b 	vldr	s15, [r5, #172]	; 0xac
 8001410:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001414:	edd5 7a2c 	vldr	s15, [r5, #176]	; 0xb0
 8001418:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800141c:	edd5 7a2d 	vldr	s15, [r5, #180]	; 0xb4
 8001420:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001424:	ee26 6a25 	vmul.f32	s12, s12, s11
 8001428:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800142c:	ee27 7a25 	vmul.f32	s14, s14, s11
 8001430:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8001434:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8001438:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 800143c:	ed8d 7a11 	vstr	s14, [sp, #68]	; 0x44
 8001440:	edcd 7a12 	vstr	s15, [sp, #72]	; 0x48
 8001444:	b9ab      	cbnz	r3, 8001472 <inv_perform_9x_fusion+0x302>
 8001446:	b02d      	add	sp, #180	; 0xb4
 8001448:	ecbd 8b02 	vpop	{d8}
 800144c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001450:	f1cb 0b05 	rsb	fp, fp, #5
 8001454:	f1bb 0f05 	cmp.w	fp, #5
 8001458:	f77f aee0 	ble.w	800121c <inv_perform_9x_fusion+0xac>
 800145c:	ed9f 8a25 	vldr	s16, [pc, #148]	; 80014f4 <inv_perform_9x_fusion+0x384>
 8001460:	ac23      	add	r4, sp, #140	; 0x8c
 8001462:	e707      	b.n	8001274 <inv_perform_9x_fusion+0x104>
 8001464:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001510 <inv_perform_9x_fusion+0x3a0>
 8001468:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800146c:	eeb0 0a47 	vmov.f32	s0, s14
 8001470:	e762      	b.n	8001338 <inv_perform_9x_fusion+0x1c8>
 8001472:	edd4 7a2e 	vldr	s15, [r4, #184]	; 0xb8
 8001476:	ed9f 8a27 	vldr	s16, [pc, #156]	; 8001514 <inv_perform_9x_fusion+0x3a4>
 800147a:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 800147e:	ee67 8aa8 	vmul.f32	s17, s15, s17
 8001482:	eeb0 0a68 	vmov.f32	s0, s17
 8001486:	f00e fe75 	bl	8010174 <cosf>
 800148a:	ee20 0a08 	vmul.f32	s0, s0, s16
 800148e:	2200      	movs	r2, #0
 8001490:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8001494:	eeb0 0a68 	vmov.f32	s0, s17
 8001498:	edc4 7a2a 	vstr	s15, [r4, #168]	; 0xa8
 800149c:	f8c4 20ac 	str.w	r2, [r4, #172]	; 0xac
 80014a0:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
 80014a4:	f00e fea6 	bl	80101f4 <sinf>
 80014a8:	ee20 0a08 	vmul.f32	s0, s0, s16
 80014ac:	9b01      	ldr	r3, [sp, #4]
 80014ae:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80014b2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80014b6:	ed84 0a2d 	vstr	s0, [r4, #180]	; 0xb4
 80014ba:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 80014be:	f00b fad9 	bl	800ca74 <inv_set_compass_correction>
 80014c2:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 80014c6:	4a09      	ldr	r2, [pc, #36]	; (80014ec <inv_perform_9x_fusion+0x37c>)
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d0bc      	beq.n	8001446 <inv_perform_9x_fusion+0x2d6>
 80014cc:	3b01      	subs	r3, #1
 80014ce:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
 80014d2:	b02d      	add	sp, #180	; 0xb4
 80014d4:	ecbd 8b02 	vpop	{d8}
 80014d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014dc:	2302      	movs	r3, #2
 80014de:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
 80014e2:	b02d      	add	sp, #180	; 0xb4
 80014e4:	ecbd 8b02 	vpop	{d8}
 80014e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014ec:	20000e20 	.word	0x20000e20
 80014f0:	30800000 	.word	0x30800000
 80014f4:	49742400 	.word	0x49742400
 80014f8:	20000ec8 	.word	0x20000ec8
 80014fc:	000f4240 	.word	0x000f4240
 8001500:	20000f1c 	.word	0x20000f1c
 8001504:	473702e1 	.word	0x473702e1
 8001508:	68db8bad 	.word	0x68db8bad
 800150c:	20000ec4 	.word	0x20000ec4
 8001510:	00000000 	.word	0x00000000
 8001514:	4e800000 	.word	0x4e800000
 8001518:	f000 fee4 	bl	80022e4 <inv_get_magnetic_disturbance_state>
 800151c:	2800      	cmp	r0, #0
 800151e:	f47f af6c 	bne.w	80013fa <inv_perform_9x_fusion+0x28a>
 8001522:	edd5 7a2e 	vldr	s15, [r5, #184]	; 0xb8
 8001526:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800152a:	ee27 8a88 	vmul.f32	s16, s15, s16
 800152e:	eeb0 0a48 	vmov.f32	s0, s16
 8001532:	f00e fe1f 	bl	8010174 <cosf>
 8001536:	2300      	movs	r3, #0
 8001538:	ed8d 0a17 	vstr	s0, [sp, #92]	; 0x5c
 800153c:	eeb0 0a48 	vmov.f32	s0, s16
 8001540:	9318      	str	r3, [sp, #96]	; 0x60
 8001542:	9319      	str	r3, [sp, #100]	; 0x64
 8001544:	f00e fe56 	bl	80101f4 <sinf>
 8001548:	a80b      	add	r0, sp, #44	; 0x2c
 800154a:	4621      	mov	r1, r4
 800154c:	aa13      	add	r2, sp, #76	; 0x4c
 800154e:	ed8d 0a1a 	vstr	s0, [sp, #104]	; 0x68
 8001552:	f00a fd84 	bl	800c05e <inv_q_multf>
 8001556:	a813      	add	r0, sp, #76	; 0x4c
 8001558:	f00a fe8d 	bl	800c276 <inv_q_normalizef>
 800155c:	ed1f 7a13 	vldr	s14, [pc, #-76]	; 8001514 <inv_perform_9x_fusion+0x3a4>
 8001560:	9b03      	ldr	r3, [sp, #12]
 8001562:	ecf6 7a01 	vldmia	r6!, {s15}
 8001566:	ee67 7a87 	vmul.f32	s15, s15, s14
 800156a:	42a6      	cmp	r6, r4
 800156c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001570:	ee17 2a90 	vmov	r2, s15
 8001574:	f843 2f04 	str.w	r2, [r3, #4]!
 8001578:	d1f3      	bne.n	8001562 <inv_perform_9x_fusion+0x3f2>
 800157a:	9b01      	ldr	r3, [sp, #4]
 800157c:	4802      	ldr	r0, [pc, #8]	; (8001588 <inv_perform_9x_fusion+0x418>)
 800157e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001582:	f00b fa77 	bl	800ca74 <inv_set_compass_correction>
 8001586:	e79c      	b.n	80014c2 <inv_perform_9x_fusion+0x352>
 8001588:	20000ec8 	.word	0x20000ec8

0800158c <inv_process_9x_sensor_fusion_cb>:
 800158c:	b538      	push	{r3, r4, r5, lr}
 800158e:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
 8001592:	4a22      	ldr	r2, [pc, #136]	; (800161c <inv_process_9x_sensor_fusion_cb+0x90>)
 8001594:	f013 0310 	ands.w	r3, r3, #16
 8001598:	bf08      	it	eq
 800159a:	f8c2 3124 	streq.w	r3, [r2, #292]	; 0x124
 800159e:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
 80015a2:	bf04      	itt	eq
 80015a4:	2103      	moveq	r1, #3
 80015a6:	f8c2 1120 	streq.w	r1, [r2, #288]	; 0x120
 80015aa:	05dc      	lsls	r4, r3, #23
 80015ac:	d405      	bmi.n	80015ba <inv_process_9x_sensor_fusion_cb+0x2e>
 80015ae:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80015b0:	05d9      	lsls	r1, r3, #23
 80015b2:	d527      	bpl.n	8001604 <inv_process_9x_sensor_fusion_cb+0x78>
 80015b4:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80015b6:	05db      	lsls	r3, r3, #23
 80015b8:	d524      	bpl.n	8001604 <inv_process_9x_sensor_fusion_cb+0x78>
 80015ba:	f8d2 3134 	ldr.w	r3, [r2, #308]	; 0x134
 80015be:	4a17      	ldr	r2, [pc, #92]	; (800161c <inv_process_9x_sensor_fusion_cb+0x90>)
 80015c0:	b173      	cbz	r3, 80015e0 <inv_process_9x_sensor_fusion_cb+0x54>
 80015c2:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
 80015c6:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
 80015ca:	4915      	ldr	r1, [pc, #84]	; (8001620 <inv_process_9x_sensor_fusion_cb+0x94>)
 80015cc:	1b1b      	subs	r3, r3, r4
 80015ce:	fba1 1303 	umull	r1, r3, r1, r3
 80015d2:	099b      	lsrs	r3, r3, #6
 80015d4:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130
 80015d8:	f7ff fdca 	bl	8001170 <inv_perform_9x_fusion>
 80015dc:	2000      	movs	r0, #0
 80015de:	bd38      	pop	{r3, r4, r5, pc}
 80015e0:	f8d0 10b0 	ldr.w	r1, [r0, #176]	; 0xb0
 80015e4:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80015e8:	42a9      	cmp	r1, r5
 80015ea:	dc13      	bgt.n	8001614 <inv_process_9x_sensor_fusion_cb+0x88>
 80015ec:	f8d2 412c 	ldr.w	r4, [r2, #300]	; 0x12c
 80015f0:	4421      	add	r1, r4
 80015f2:	42a9      	cmp	r1, r5
 80015f4:	f8c2 112c 	str.w	r1, [r2, #300]	; 0x12c
 80015f8:	ddf0      	ble.n	80015dc <inv_process_9x_sensor_fusion_cb+0x50>
 80015fa:	f8c2 1130 	str.w	r1, [r2, #304]	; 0x130
 80015fe:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
 8001602:	e7e9      	b.n	80015d8 <inv_process_9x_sensor_fusion_cb+0x4c>
 8001604:	2103      	movs	r1, #3
 8001606:	2300      	movs	r3, #0
 8001608:	f8c2 1120 	str.w	r1, [r2, #288]	; 0x120
 800160c:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
 8001610:	2000      	movs	r0, #0
 8001612:	bd38      	pop	{r3, r4, r5, pc}
 8001614:	f8c2 1130 	str.w	r1, [r2, #304]	; 0x130
 8001618:	e7de      	b.n	80015d8 <inv_process_9x_sensor_fusion_cb+0x4c>
 800161a:	bf00      	nop
 800161c:	20000e20 	.word	0x20000e20
 8001620:	10624dd3 	.word	0x10624dd3

08001624 <inv_init_9x_fusion>:
 8001624:	b510      	push	{r4, lr}
 8001626:	4c0d      	ldr	r4, [pc, #52]	; (800165c <inv_init_9x_fusion+0x38>)
 8001628:	f44f 729c 	mov.w	r2, #312	; 0x138
 800162c:	2100      	movs	r1, #0
 800162e:	4620      	mov	r0, r4
 8001630:	f00b fd7e 	bl	800d130 <memset>
 8001634:	4620      	mov	r0, r4
 8001636:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800163a:	f840 3fa8 	str.w	r3, [r0, #168]!
 800163e:	2100      	movs	r1, #0
 8001640:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
 8001644:	f00b fa16 	bl	800ca74 <inv_set_compass_correction>
 8001648:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800164c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001650:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
 8001654:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
 8001658:	bd10      	pop	{r4, pc}
 800165a:	bf00      	nop
 800165c:	20000e20 	.word	0x20000e20

08001660 <inv_9x_fusion_set_mag_fb>:
 8001660:	4b02      	ldr	r3, [pc, #8]	; (800166c <inv_9x_fusion_set_mag_fb+0xc>)
 8001662:	2000      	movs	r0, #0
 8001664:	ed83 0a3b 	vstr	s0, [r3, #236]	; 0xec
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	20000e20 	.word	0x20000e20

08001670 <inv_9x_fusion_enable_jitter_reduction>:
 8001670:	4b02      	ldr	r3, [pc, #8]	; (800167c <inv_9x_fusion_enable_jitter_reduction+0xc>)
 8001672:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
 8001676:	2000      	movs	r0, #0
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	20000e20 	.word	0x20000e20

08001680 <inv_9x_fusion_use_timestamps>:
 8001680:	4b02      	ldr	r3, [pc, #8]	; (800168c <inv_9x_fusion_use_timestamps+0xc>)
 8001682:	f8c3 0134 	str.w	r0, [r3, #308]	; 0x134
 8001686:	2000      	movs	r0, #0
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	20000e20 	.word	0x20000e20

08001690 <inv_stop_9x_sensor_fusion>:
 8001690:	4801      	ldr	r0, [pc, #4]	; (8001698 <inv_stop_9x_sensor_fusion+0x8>)
 8001692:	f00a b847 	b.w	800b724 <inv_unregister_data_cb>
 8001696:	bf00      	nop
 8001698:	0800158d 	.word	0x0800158d

0800169c <inv_enable_9x_sensor_fusion>:
 800169c:	b508      	push	{r3, lr}
 800169e:	f7ff ffc1 	bl	8001624 <inv_init_9x_fusion>
 80016a2:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <inv_enable_9x_sensor_fusion+0x1c>)
 80016a4:	4805      	ldr	r0, [pc, #20]	; (80016bc <inv_enable_9x_sensor_fusion+0x20>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
 80016ac:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 80016b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80016b4:	f00b bc26 	b.w	800cf04 <inv_register_mpl_start_notification>
 80016b8:	20000e20 	.word	0x20000e20
 80016bc:	08000f71 	.word	0x08000f71

080016c0 <inv_disable_9x_sensor_fusion>:
 80016c0:	4801      	ldr	r0, [pc, #4]	; (80016c8 <inv_disable_9x_sensor_fusion+0x8>)
 80016c2:	f00b bbdf 	b.w	800ce84 <inv_unregister_mpl_start_notification>
 80016c6:	bf00      	nop
 80016c8:	08000f71 	.word	0x08000f71
 80016cc:	f3af 8000 	nop.w

080016d0 <inv_start_gyro_tc>:
 80016d0:	4802      	ldr	r0, [pc, #8]	; (80016dc <inv_start_gyro_tc+0xc>)
 80016d2:	2196      	movs	r1, #150	; 0x96
 80016d4:	2208      	movs	r2, #8
 80016d6:	f009 bf7f 	b.w	800b5d8 <inv_register_data_cb>
 80016da:	bf00      	nop
 80016dc:	080016e1 	.word	0x080016e1

080016e0 <inv_gtc_data_cb>:
 80016e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016e4:	b0ad      	sub	sp, #180	; 0xb4
 80016e6:	a91b      	add	r1, sp, #108	; 0x6c
 80016e8:	4604      	mov	r4, r0
 80016ea:	a81d      	add	r0, sp, #116	; 0x74
 80016ec:	f009 ff2c 	bl	800b548 <inv_get_gyro_bias>
 80016f0:	a81c      	add	r0, sp, #112	; 0x70
 80016f2:	f00b f9fd 	bl	800caf0 <inv_get_motion_state>
 80016f6:	2802      	cmp	r0, #2
 80016f8:	d00d      	beq.n	8001716 <inv_gtc_data_cb+0x36>
 80016fa:	4994      	ldr	r1, [pc, #592]	; (800194c <inv_gtc_data_cb+0x26c>)
 80016fc:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
 8001700:	f891 01b0 	ldrb.w	r0, [r1, #432]	; 0x1b0
 8001704:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8001706:	b110      	cbz	r0, 800170e <inv_gtc_data_cb+0x2e>
 8001708:	1a9b      	subs	r3, r3, r2
 800170a:	f040 80f7 	bne.w	80018fc <inv_gtc_data_cb+0x21c>
 800170e:	2000      	movs	r0, #0
 8001710:	b02d      	add	sp, #180	; 0xb4
 8001712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001716:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001718:	2b03      	cmp	r3, #3
 800171a:	d1f8      	bne.n	800170e <inv_gtc_data_cb+0x2e>
 800171c:	f009 fefa 	bl	800b514 <inv_get_gyro_bias_tc_set>
 8001720:	2800      	cmp	r0, #0
 8001722:	d0f4      	beq.n	800170e <inv_gtc_data_cb+0x2e>
 8001724:	f8df 8224 	ldr.w	r8, [pc, #548]	; 800194c <inv_gtc_data_cb+0x26c>
 8001728:	4c89      	ldr	r4, [pc, #548]	; (8001950 <inv_gtc_data_cb+0x270>)
 800172a:	f8d8 21b4 	ldr.w	r2, [r8, #436]	; 0x1b4
 800172e:	f8d8 31b8 	ldr.w	r3, [r8, #440]	; 0x1b8
 8001732:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8001734:	1a9b      	subs	r3, r3, r2
 8001736:	fb84 1403 	smull	r1, r4, r4, r3
 800173a:	17db      	asrs	r3, r3, #31
 800173c:	ebc3 0364 	rsb	r3, r3, r4, asr #1
 8001740:	1aaa      	subs	r2, r5, r2
 8001742:	fb92 f3f3 	sdiv	r3, r2, r3
 8001746:	b2dc      	uxtb	r4, r3
 8001748:	2c04      	cmp	r4, #4
 800174a:	d8e0      	bhi.n	800170e <inv_gtc_data_cb+0x2e>
 800174c:	2354      	movs	r3, #84	; 0x54
 800174e:	fb03 f904 	mul.w	r9, r3, r4
 8001752:	eb08 0c09 	add.w	ip, r8, r9
 8001756:	f89c 3050 	ldrb.w	r3, [ip, #80]	; 0x50
 800175a:	2b05      	cmp	r3, #5
 800175c:	f000 819a 	beq.w	8001a94 <inv_gtc_data_cb+0x3b4>
 8001760:	1c5a      	adds	r2, r3, #1
 8001762:	f88c 2050 	strb.w	r2, [ip, #80]	; 0x50
 8001766:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800176a:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 800176e:	4423      	add	r3, r4
 8001770:	eb08 0483 	add.w	r4, r8, r3, lsl #2
 8001774:	4620      	mov	r0, r4
 8001776:	f898 11c0 	ldrb.w	r1, [r8, #448]	; 0x1c0
 800177a:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800177c:	63e5      	str	r5, [r4, #60]	; 0x3c
 800177e:	f103 020a 	add.w	r2, r3, #10
 8001782:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8001784:	f848 6023 	str.w	r6, [r8, r3, lsl #2]
 8001788:	6144      	str	r4, [r0, #20]
 800178a:	2300      	movs	r3, #0
 800178c:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800178e:	f848 0022 	str.w	r0, [r8, r2, lsl #2]
 8001792:	2901      	cmp	r1, #1
 8001794:	9320      	str	r3, [sp, #128]	; 0x80
 8001796:	9321      	str	r3, [sp, #132]	; 0x84
 8001798:	9322      	str	r3, [sp, #136]	; 0x88
 800179a:	9323      	str	r3, [sp, #140]	; 0x8c
 800179c:	9324      	str	r3, [sp, #144]	; 0x90
 800179e:	9325      	str	r3, [sp, #148]	; 0x94
 80017a0:	9326      	str	r3, [sp, #152]	; 0x98
 80017a2:	9327      	str	r3, [sp, #156]	; 0x9c
 80017a4:	9328      	str	r3, [sp, #160]	; 0xa0
 80017a6:	9329      	str	r3, [sp, #164]	; 0xa4
 80017a8:	932a      	str	r3, [sp, #168]	; 0xa8
 80017aa:	932b      	str	r3, [sp, #172]	; 0xac
 80017ac:	4a67      	ldr	r2, [pc, #412]	; (800194c <inv_gtc_data_cb+0x26c>)
 80017ae:	d1ae      	bne.n	800170e <inv_gtc_data_cb+0x2e>
 80017b0:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 80017b4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80017b8:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 80017bc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80017c0:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
 80017c4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80017c8:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 80017cc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80017d0:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
 80017d4:	469c      	mov	ip, r3
 80017d6:	f8d2 31b4 	ldr.w	r3, [r2, #436]	; 0x1b4
 80017da:	f8d2 e1b8 	ldr.w	lr, [r2, #440]	; 0x1b8
 80017de:	9316      	str	r3, [sp, #88]	; 0x58
 80017e0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80017e4:	4691      	mov	r9, r2
 80017e6:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 80017ea:	2200      	movs	r2, #0
 80017ec:	2300      	movs	r3, #0
 80017ee:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80017f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80017f6:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 80017fa:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
 80017fe:	4671      	mov	r1, lr
 8001800:	4654      	mov	r4, sl
 8001802:	465d      	mov	r5, fp
 8001804:	f899 e050 	ldrb.w	lr, [r9, #80]	; 0x50
 8001808:	f1be 0f00 	cmp.w	lr, #0
 800180c:	f000 80ac 	beq.w	8001968 <inv_gtc_data_cb+0x288>
 8001810:	464a      	mov	r2, r9
 8001812:	f8cd 9060 	str.w	r9, [sp, #96]	; 0x60
 8001816:	f04f 0c00 	mov.w	ip, #0
 800181a:	4689      	mov	r9, r1
 800181c:	e9cd 4500 	strd	r4, r5, [sp]
 8001820:	e00b      	b.n	800183a <inv_gtc_data_cb+0x15a>
 8001822:	9916      	ldr	r1, [sp, #88]	; 0x58
 8001824:	4299      	cmp	r1, r3
 8001826:	bfb8      	it	lt
 8001828:	4619      	movlt	r1, r3
 800182a:	9116      	str	r1, [sp, #88]	; 0x58
 800182c:	f10c 0c01 	add.w	ip, ip, #1
 8001830:	45f4      	cmp	ip, lr
 8001832:	f102 0204 	add.w	r2, r2, #4
 8001836:	f000 808d 	beq.w	8001954 <inv_gtc_data_cb+0x274>
 800183a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800183c:	6811      	ldr	r1, [r2, #0]
 800183e:	fb81 0103 	smull	r0, r1, r1, r3
 8001842:	0c04      	lsrs	r4, r0, #16
 8001844:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8001848:	1409      	asrs	r1, r1, #16
 800184a:	9101      	str	r1, [sp, #4]
 800184c:	6951      	ldr	r1, [r2, #20]
 800184e:	9400      	str	r4, [sp, #0]
 8001850:	fb81 0103 	smull	r0, r1, r1, r3
 8001854:	0c06      	lsrs	r6, r0, #16
 8001856:	ea46 4601 	orr.w	r6, r6, r1, lsl #16
 800185a:	140f      	asrs	r7, r1, #16
 800185c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800185e:	fb81 0103 	smull	r0, r1, r1, r3
 8001862:	ea4f 4a10 	mov.w	sl, r0, lsr #16
 8001866:	ea4a 4a01 	orr.w	sl, sl, r1, lsl #16
 800186a:	ea4f 4b21 	mov.w	fp, r1, asr #16
 800186e:	fb83 0103 	smull	r0, r1, r3, r3
 8001872:	0c04      	lsrs	r4, r0, #16
 8001874:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8001878:	9402      	str	r4, [sp, #8]
 800187a:	1409      	asrs	r1, r1, #16
 800187c:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
 8001880:	9103      	str	r1, [sp, #12]
 8001882:	6811      	ldr	r1, [r2, #0]
 8001884:	1864      	adds	r4, r4, r1
 8001886:	eb45 75e1 	adc.w	r5, r5, r1, asr #31
 800188a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800188c:	4419      	add	r1, r3
 800188e:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
 8001892:	9111      	str	r1, [sp, #68]	; 0x44
 8001894:	e9dd 4500 	ldrd	r4, r5, [sp]
 8001898:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800189c:	1824      	adds	r4, r4, r0
 800189e:	414d      	adcs	r5, r1
 80018a0:	4620      	mov	r0, r4
 80018a2:	4629      	mov	r1, r5
 80018a4:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 80018a8:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80018ac:	6951      	ldr	r1, [r2, #20]
 80018ae:	1864      	adds	r4, r4, r1
 80018b0:	eb45 75e1 	adc.w	r5, r5, r1, asr #31
 80018b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80018b8:	1980      	adds	r0, r0, r6
 80018ba:	4179      	adcs	r1, r7
 80018bc:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 80018c0:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 80018c4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80018c8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80018ca:	1864      	adds	r4, r4, r1
 80018cc:	eb45 75e1 	adc.w	r5, r5, r1, asr #31
 80018d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80018d4:	eb10 000a 	adds.w	r0, r0, sl
 80018d8:	eb41 010b 	adc.w	r1, r1, fp
 80018dc:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80018e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80018e4:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
 80018e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80018ec:	1900      	adds	r0, r0, r4
 80018ee:	4169      	adcs	r1, r5
 80018f0:	454b      	cmp	r3, r9
 80018f2:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 80018f6:	da94      	bge.n	8001822 <inv_gtc_data_cb+0x142>
 80018f8:	4699      	mov	r9, r3
 80018fa:	e797      	b.n	800182c <inv_gtc_data_cb+0x14c>
 80018fc:	f8d1 71a4 	ldr.w	r7, [r1, #420]	; 0x1a4
 8001900:	f8d1 21ac 	ldr.w	r2, [r1, #428]	; 0x1ac
 8001904:	f8d1 01a8 	ldr.w	r0, [r1, #424]	; 0x1a8
 8001908:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800190a:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 800190c:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 800190e:	fb83 0100 	smull	r0, r1, r3, r0
 8001912:	fb83 8907 	smull	r8, r9, r3, r7
 8001916:	fb83 ab02 	smull	sl, fp, r3, r2
 800191a:	ea4f 4e18 	mov.w	lr, r8, lsr #16
 800191e:	0c07      	lsrs	r7, r0, #16
 8001920:	ea4f 421a 	mov.w	r2, sl, lsr #16
 8001924:	ea4e 4e09 	orr.w	lr, lr, r9, lsl #16
 8001928:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800192c:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 8001930:	a81d      	add	r0, sp, #116	; 0x74
 8001932:	4476      	add	r6, lr
 8001934:	4414      	add	r4, r2
 8001936:	443d      	add	r5, r7
 8001938:	2103      	movs	r1, #3
 800193a:	961d      	str	r6, [sp, #116]	; 0x74
 800193c:	951e      	str	r5, [sp, #120]	; 0x78
 800193e:	941f      	str	r4, [sp, #124]	; 0x7c
 8001940:	f009 fda4 	bl	800b48c <inv_set_gyro_bias>
 8001944:	2000      	movs	r0, #0
 8001946:	b02d      	add	sp, #180	; 0xb4
 8001948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800194c:	20000280 	.word	0x20000280
 8001950:	66666667 	.word	0x66666667
 8001954:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8001956:	e9dd 4500 	ldrd	r4, r5, [sp]
 800195a:	4463      	add	r3, ip
 800195c:	4649      	mov	r1, r9
 800195e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8001962:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8001966:	9317      	str	r3, [sp, #92]	; 0x5c
 8001968:	4b5d      	ldr	r3, [pc, #372]	; (8001ae0 <inv_gtc_data_cb+0x400>)
 800196a:	f109 0954 	add.w	r9, r9, #84	; 0x54
 800196e:	4599      	cmp	r9, r3
 8001970:	f47f af48 	bne.w	8001804 <inv_gtc_data_cb+0x124>
 8001974:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8001976:	f8d8 31bc 	ldr.w	r3, [r8, #444]	; 0x1bc
 800197a:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 800197e:	ebc1 0a02 	rsb	sl, r1, r2
 8001982:	468e      	mov	lr, r1
 8001984:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8001988:	e9cd 0120 	strd	r0, r1, [sp, #128]	; 0x80
 800198c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8001990:	e9cd 0122 	strd	r0, r1, [sp, #136]	; 0x88
 8001994:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8001998:	e9cd 0124 	strd	r0, r1, [sp, #144]	; 0x90
 800199c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80019a0:	e9cd 0126 	strd	r0, r1, [sp, #152]	; 0x98
 80019a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80019a8:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
 80019ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80019b0:	459a      	cmp	sl, r3
 80019b2:	e9cd 012a 	strd	r0, r1, [sp, #168]	; 0xa8
 80019b6:	f6ff aeaa 	blt.w	800170e <inv_gtc_data_cb+0x2e>
 80019ba:	fb8c 230c 	smull	r2, r3, ip, ip
 80019be:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
 80019c2:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 80019c4:	f8df a118 	ldr.w	sl, [pc, #280]	; 8001ae0 <inv_gtc_data_cb+0x400>
 80019c8:	f8cd a008 	str.w	sl, [sp, #8]
 80019cc:	0c11      	lsrs	r1, r2, #16
 80019ce:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80019d2:	9100      	str	r1, [sp, #0]
 80019d4:	141b      	asrs	r3, r3, #16
 80019d6:	fba4 0107 	umull	r0, r1, r4, r7
 80019da:	9301      	str	r3, [sp, #4]
 80019dc:	fb07 1305 	mla	r3, r7, r5, r1
 80019e0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80019e4:	9309      	str	r3, [sp, #36]	; 0x24
 80019e6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80019ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80019ee:	1a82      	subs	r2, r0, r2
 80019f0:	eb61 0303 	sbc.w	r3, r1, r3
 80019f4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80019f8:	4662      	mov	r2, ip
 80019fa:	17d3      	asrs	r3, r2, #31
 80019fc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8001a00:	ae26      	add	r6, sp, #152	; 0x98
 8001a02:	f10d 0980 	add.w	r9, sp, #128	; 0x80
 8001a06:	9706      	str	r7, [sp, #24]
 8001a08:	e899 0030 	ldmia.w	r9, {r4, r5}
 8001a0c:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8001a10:	e896 0003 	ldmia.w	r6, {r0, r1}
 8001a14:	fb04 fe0b 	mul.w	lr, r4, fp
 8001a18:	fb05 ee0a 	mla	lr, r5, sl, lr
 8001a1c:	2700      	movs	r7, #0
 8001a1e:	fba4 450a 	umull	r4, r5, r4, sl
 8001a22:	4475      	add	r5, lr
 8001a24:	fb00 fe07 	mul.w	lr, r0, r7
 8001a28:	9f06      	ldr	r7, [sp, #24]
 8001a2a:	fb01 ee07 	mla	lr, r1, r7, lr
 8001a2e:	fba0 0107 	umull	r0, r1, r0, r7
 8001a32:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001a36:	4471      	add	r1, lr
 8001a38:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
 8001a3c:	9105      	str	r1, [sp, #20]
 8001a3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001a42:	458b      	cmp	fp, r1
 8001a44:	bf08      	it	eq
 8001a46:	4582      	cmpeq	sl, r0
 8001a48:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8001a4c:	f106 0608 	add.w	r6, r6, #8
 8001a50:	f109 0908 	add.w	r9, r9, #8
 8001a54:	d014      	beq.n	8001a80 <inv_gtc_data_cb+0x3a0>
 8001a56:	0c27      	lsrs	r7, r4, #16
 8001a58:	ea47 4705 	orr.w	r7, r7, r5, lsl #16
 8001a5c:	142c      	asrs	r4, r5, #16
 8001a5e:	9714      	str	r7, [sp, #80]	; 0x50
 8001a60:	9415      	str	r4, [sp, #84]	; 0x54
 8001a62:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
 8001a66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001a6a:	1b00      	subs	r0, r0, r4
 8001a6c:	eb61 0105 	sbc.w	r1, r1, r5
 8001a70:	0409      	lsls	r1, r1, #16
 8001a72:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
 8001a76:	0400      	lsls	r0, r0, #16
 8001a78:	f001 ffc4 	bl	8003a04 <__aeabi_ldivmod>
 8001a7c:	9b02      	ldr	r3, [sp, #8]
 8001a7e:	6018      	str	r0, [r3, #0]
 8001a80:	9b02      	ldr	r3, [sp, #8]
 8001a82:	3304      	adds	r3, #4
 8001a84:	9302      	str	r3, [sp, #8]
 8001a86:	ab2c      	add	r3, sp, #176	; 0xb0
 8001a88:	429e      	cmp	r6, r3
 8001a8a:	d1bd      	bne.n	8001a08 <inv_gtc_data_cb+0x328>
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	f888 31b0 	strb.w	r3, [r8, #432]	; 0x1b0
 8001a92:	e63c      	b.n	800170e <inv_gtc_data_cb+0x2e>
 8001a94:	eb08 0009 	add.w	r0, r8, r9
 8001a98:	4601      	mov	r1, r0
 8001a9a:	3140      	adds	r1, #64	; 0x40
 8001a9c:	2210      	movs	r2, #16
 8001a9e:	303c      	adds	r0, #60	; 0x3c
 8001aa0:	f8cd c010 	str.w	ip, [sp, #16]
 8001aa4:	f00b fb2a 	bl	800d0fc <memmove>
 8001aa8:	f8dd c010 	ldr.w	ip, [sp, #16]
 8001aac:	f109 0104 	add.w	r1, r9, #4
 8001ab0:	4660      	mov	r0, ip
 8001ab2:	4441      	add	r1, r8
 8001ab4:	2210      	movs	r2, #16
 8001ab6:	f00b fb21 	bl	800d0fc <memmove>
 8001aba:	eb08 0009 	add.w	r0, r8, r9
 8001abe:	4601      	mov	r1, r0
 8001ac0:	3118      	adds	r1, #24
 8001ac2:	2210      	movs	r2, #16
 8001ac4:	3014      	adds	r0, #20
 8001ac6:	f00b fb19 	bl	800d0fc <memmove>
 8001aca:	f109 0028 	add.w	r0, r9, #40	; 0x28
 8001ace:	f109 012c 	add.w	r1, r9, #44	; 0x2c
 8001ad2:	4440      	add	r0, r8
 8001ad4:	4441      	add	r1, r8
 8001ad6:	2210      	movs	r2, #16
 8001ad8:	f00b fb10 	bl	800d0fc <memmove>
 8001adc:	2304      	movs	r3, #4
 8001ade:	e642      	b.n	8001766 <inv_gtc_data_cb+0x86>
 8001ae0:	20000424 	.word	0x20000424

08001ae4 <inv_gtc_store>:
 8001ae4:	b470      	push	{r4, r5, r6}
 8001ae6:	4e0b      	ldr	r6, [pc, #44]	; (8001b14 <inv_gtc_store+0x30>)
 8001ae8:	f506 73d2 	add.w	r3, r6, #420	; 0x1a4
 8001aec:	4605      	mov	r5, r0
 8001aee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001af2:	b085      	sub	sp, #20
 8001af4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8001af8:	f896 31b0 	ldrb.w	r3, [r6, #432]	; 0x1b0
 8001afc:	f88d 300c 	strb.w	r3, [sp, #12]
 8001b00:	466c      	mov	r4, sp
 8001b02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b04:	6028      	str	r0, [r5, #0]
 8001b06:	2000      	movs	r0, #0
 8001b08:	6069      	str	r1, [r5, #4]
 8001b0a:	60aa      	str	r2, [r5, #8]
 8001b0c:	60eb      	str	r3, [r5, #12]
 8001b0e:	b005      	add	sp, #20
 8001b10:	bc70      	pop	{r4, r5, r6}
 8001b12:	4770      	bx	lr
 8001b14:	20000280 	.word	0x20000280

08001b18 <inv_gtc_load>:
 8001b18:	b470      	push	{r4, r5, r6}
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	b085      	sub	sp, #20
 8001b1e:	6800      	ldr	r0, [r0, #0]
 8001b20:	6859      	ldr	r1, [r3, #4]
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	4e07      	ldr	r6, [pc, #28]	; (8001b44 <inv_gtc_load+0x2c>)
 8001b28:	466c      	mov	r4, sp
 8001b2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b2c:	f506 73d2 	add.w	r3, r6, #420	; 0x1a4
 8001b30:	f89d 400c 	ldrb.w	r4, [sp, #12]
 8001b34:	f886 41b0 	strb.w	r4, [r6, #432]	; 0x1b0
 8001b38:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001b3c:	2000      	movs	r0, #0
 8001b3e:	b005      	add	sp, #20
 8001b40:	bc70      	pop	{r4, r5, r6}
 8001b42:	4770      	bx	lr
 8001b44:	20000280 	.word	0x20000280

08001b48 <inv_init_gyro_ts>:
 8001b48:	b510      	push	{r4, lr}
 8001b4a:	4c0b      	ldr	r4, [pc, #44]	; (8001b78 <inv_init_gyro_ts+0x30>)
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	4620      	mov	r0, r4
 8001b50:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
 8001b54:	f00b faec 	bl	800d130 <memset>
 8001b58:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <inv_init_gyro_ts+0x34>)
 8001b5a:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
 8001b5e:	2301      	movs	r3, #1
 8001b60:	f44f 01aa 	mov.w	r1, #5570560	; 0x550000
 8001b64:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8001b68:	f884 31c0 	strb.w	r3, [r4, #448]	; 0x1c0
 8001b6c:	f8c4 11b8 	str.w	r1, [r4, #440]	; 0x1b8
 8001b70:	f8c4 21bc 	str.w	r2, [r4, #444]	; 0x1bc
 8001b74:	2000      	movs	r0, #0
 8001b76:	bd10      	pop	{r4, pc}
 8001b78:	20000280 	.word	0x20000280
 8001b7c:	ffd80000 	.word	0xffd80000

08001b80 <inv_set_gtc_max_temp>:
 8001b80:	4b02      	ldr	r3, [pc, #8]	; (8001b8c <inv_set_gtc_max_temp+0xc>)
 8001b82:	f8c3 01b8 	str.w	r0, [r3, #440]	; 0x1b8
 8001b86:	2000      	movs	r0, #0
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	20000280 	.word	0x20000280

08001b90 <inv_set_gtc_min_temp>:
 8001b90:	4b02      	ldr	r3, [pc, #8]	; (8001b9c <inv_set_gtc_min_temp+0xc>)
 8001b92:	f8c3 01b4 	str.w	r0, [r3, #436]	; 0x1b4
 8001b96:	2000      	movs	r0, #0
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	20000280 	.word	0x20000280

08001ba0 <inv_set_gtc_min_diff>:
 8001ba0:	4b02      	ldr	r3, [pc, #8]	; (8001bac <inv_set_gtc_min_diff+0xc>)
 8001ba2:	f8c3 01bc 	str.w	r0, [r3, #444]	; 0x1bc
 8001ba6:	2000      	movs	r0, #0
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	20000280 	.word	0x20000280

08001bb0 <inv_get_gyro_ts>:
 8001bb0:	b158      	cbz	r0, 8001bca <inv_get_gyro_ts+0x1a>
 8001bb2:	4b07      	ldr	r3, [pc, #28]	; (8001bd0 <inv_get_gyro_ts+0x20>)
 8001bb4:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
 8001bb8:	6002      	str	r2, [r0, #0]
 8001bba:	f8d3 21a8 	ldr.w	r2, [r3, #424]	; 0x1a8
 8001bbe:	6042      	str	r2, [r0, #4]
 8001bc0:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8001bc4:	6083      	str	r3, [r0, #8]
 8001bc6:	2000      	movs	r0, #0
 8001bc8:	4770      	bx	lr
 8001bca:	2016      	movs	r0, #22
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	20000280 	.word	0x20000280

08001bd4 <inv_set_gyro_ts>:
 8001bd4:	2024      	movs	r0, #36	; 0x24
 8001bd6:	4770      	bx	lr

08001bd8 <inv_set_gtc_order>:
 8001bd8:	4603      	mov	r3, r0
 8001bda:	b908      	cbnz	r0, 8001be0 <inv_set_gtc_order+0x8>
 8001bdc:	2024      	movs	r0, #36	; 0x24
 8001bde:	4770      	bx	lr
 8001be0:	4a02      	ldr	r2, [pc, #8]	; (8001bec <inv_set_gtc_order+0x14>)
 8001be2:	2000      	movs	r0, #0
 8001be4:	f882 31c0 	strb.w	r3, [r2, #448]	; 0x1c0
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	20000280 	.word	0x20000280

08001bf0 <inv_print_gtc_data>:
 8001bf0:	2000      	movs	r0, #0
 8001bf2:	4770      	bx	lr

08001bf4 <inv_stop_gyro_tc>:
 8001bf4:	4801      	ldr	r0, [pc, #4]	; (8001bfc <inv_stop_gyro_tc+0x8>)
 8001bf6:	f009 bd95 	b.w	800b724 <inv_unregister_data_cb>
 8001bfa:	bf00      	nop
 8001bfc:	080016e1 	.word	0x080016e1

08001c00 <inv_enable_gyro_tc>:
 8001c00:	b508      	push	{r3, lr}
 8001c02:	f7ff ffa1 	bl	8001b48 <inv_init_gyro_ts>
 8001c06:	480a      	ldr	r0, [pc, #40]	; (8001c30 <inv_enable_gyro_tc+0x30>)
 8001c08:	490a      	ldr	r1, [pc, #40]	; (8001c34 <inv_enable_gyro_tc+0x34>)
 8001c0a:	2210      	movs	r2, #16
 8001c0c:	f44f 739a 	mov.w	r3, #308	; 0x134
 8001c10:	f00b f9ce 	bl	800cfb0 <inv_register_load_store>
 8001c14:	b108      	cbz	r0, 8001c1a <inv_enable_gyro_tc+0x1a>
 8001c16:	2001      	movs	r0, #1
 8001c18:	bd08      	pop	{r3, pc}
 8001c1a:	4807      	ldr	r0, [pc, #28]	; (8001c38 <inv_enable_gyro_tc+0x38>)
 8001c1c:	f00b f972 	bl	800cf04 <inv_register_mpl_start_notification>
 8001c20:	2800      	cmp	r0, #0
 8001c22:	d1f8      	bne.n	8001c16 <inv_enable_gyro_tc+0x16>
 8001c24:	4b05      	ldr	r3, [pc, #20]	; (8001c3c <inv_enable_gyro_tc+0x3c>)
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 21b1 	strb.w	r2, [r3, #433]	; 0x1b1
 8001c2c:	bd08      	pop	{r3, pc}
 8001c2e:	bf00      	nop
 8001c30:	08001b19 	.word	0x08001b19
 8001c34:	08001ae5 	.word	0x08001ae5
 8001c38:	080016d1 	.word	0x080016d1
 8001c3c:	20000280 	.word	0x20000280

08001c40 <inv_disable_gyro_tc>:
 8001c40:	b510      	push	{r4, lr}
 8001c42:	4c08      	ldr	r4, [pc, #32]	; (8001c64 <inv_disable_gyro_tc+0x24>)
 8001c44:	f894 01b1 	ldrb.w	r0, [r4, #433]	; 0x1b1
 8001c48:	b900      	cbnz	r0, 8001c4c <inv_disable_gyro_tc+0xc>
 8001c4a:	bd10      	pop	{r4, pc}
 8001c4c:	4806      	ldr	r0, [pc, #24]	; (8001c68 <inv_disable_gyro_tc+0x28>)
 8001c4e:	f009 fd69 	bl	800b724 <inv_unregister_data_cb>
 8001c52:	4806      	ldr	r0, [pc, #24]	; (8001c6c <inv_disable_gyro_tc+0x2c>)
 8001c54:	f00b f916 	bl	800ce84 <inv_unregister_mpl_start_notification>
 8001c58:	b910      	cbnz	r0, 8001c60 <inv_disable_gyro_tc+0x20>
 8001c5a:	f884 01b1 	strb.w	r0, [r4, #433]	; 0x1b1
 8001c5e:	bd10      	pop	{r4, pc}
 8001c60:	2001      	movs	r0, #1
 8001c62:	bd10      	pop	{r4, pc}
 8001c64:	20000280 	.word	0x20000280
 8001c68:	080016e1 	.word	0x080016e1
 8001c6c:	080016d1 	.word	0x080016d1

08001c70 <inv_start_magnetic_disturbance>:
 8001c70:	4802      	ldr	r0, [pc, #8]	; (8001c7c <inv_start_magnetic_disturbance+0xc>)
 8001c72:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001c76:	2204      	movs	r2, #4
 8001c78:	f009 bcae 	b.w	800b5d8 <inv_register_data_cb>
 8001c7c:	080022ad 	.word	0x080022ad

08001c80 <inv_set_magnetic_disturbance>:
 8001c80:	2800      	cmp	r0, #0
 8001c82:	dd05      	ble.n	8001c90 <inv_set_magnetic_disturbance+0x10>
 8001c84:	4b03      	ldr	r3, [pc, #12]	; (8001c94 <inv_set_magnetic_disturbance+0x14>)
 8001c86:	2201      	movs	r2, #1
 8001c88:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
 8001c8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001c90:	2000      	movs	r0, #0
 8001c92:	4770      	bx	lr
 8001c94:	20000444 	.word	0x20000444

08001c98 <inv_init_magnetic_disturbance>:
 8001c98:	b570      	push	{r4, r5, r6, lr}
 8001c9a:	4c0c      	ldr	r4, [pc, #48]	; (8001ccc <inv_init_magnetic_disturbance+0x34>)
 8001c9c:	4e0c      	ldr	r6, [pc, #48]	; (8001cd0 <inv_init_magnetic_disturbance+0x38>)
 8001c9e:	4d0d      	ldr	r5, [pc, #52]	; (8001cd4 <inv_init_magnetic_disturbance+0x3c>)
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	4620      	mov	r0, r4
 8001ca4:	22b8      	movs	r2, #184	; 0xb8
 8001ca6:	f00b fa43 	bl	800d130 <memset>
 8001caa:	4a0b      	ldr	r2, [pc, #44]	; (8001cd8 <inv_init_magnetic_disturbance+0x40>)
 8001cac:	4b0b      	ldr	r3, [pc, #44]	; (8001cdc <inv_init_magnetic_disturbance+0x44>)
 8001cae:	60e2      	str	r2, [r4, #12]
 8001cb0:	480b      	ldr	r0, [pc, #44]	; (8001ce0 <inv_init_magnetic_disturbance+0x48>)
 8001cb2:	6060      	str	r0, [r4, #4]
 8001cb4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001cb8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001cbc:	60a6      	str	r6, [r4, #8]
 8001cbe:	6025      	str	r5, [r4, #0]
 8001cc0:	6661      	str	r1, [r4, #100]	; 0x64
 8001cc2:	67e2      	str	r2, [r4, #124]	; 0x7c
 8001cc4:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
 8001cc8:	2000      	movs	r0, #0
 8001cca:	bd70      	pop	{r4, r5, r6, pc}
 8001ccc:	20000444 	.word	0x20000444
 8001cd0:	c2b40000 	.word	0xc2b40000
 8001cd4:	42700000 	.word	0x42700000
 8001cd8:	42b40000 	.word	0x42b40000
 8001cdc:	3e2e147b 	.word	0x3e2e147b
 8001ce0:	41f00000 	.word	0x41f00000

08001ce4 <inv_stop_magnetic_disturbance>:
 8001ce4:	4801      	ldr	r0, [pc, #4]	; (8001cec <inv_stop_magnetic_disturbance+0x8>)
 8001ce6:	f009 bd1d 	b.w	800b724 <inv_unregister_data_cb>
 8001cea:	bf00      	nop
 8001cec:	080022ad 	.word	0x080022ad

08001cf0 <inv_enable_magnetic_disturbance>:
 8001cf0:	b508      	push	{r3, lr}
 8001cf2:	f7ff ffd1 	bl	8001c98 <inv_init_magnetic_disturbance>
 8001cf6:	b100      	cbz	r0, 8001cfa <inv_enable_magnetic_disturbance+0xa>
 8001cf8:	bd08      	pop	{r3, pc}
 8001cfa:	4a06      	ldr	r2, [pc, #24]	; (8001d14 <inv_enable_magnetic_disturbance+0x24>)
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001d02:	2301      	movs	r3, #1
 8001d04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001d08:	4803      	ldr	r0, [pc, #12]	; (8001d18 <inv_enable_magnetic_disturbance+0x28>)
 8001d0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001d0e:	f00b b8f9 	b.w	800cf04 <inv_register_mpl_start_notification>
 8001d12:	bf00      	nop
 8001d14:	20000444 	.word	0x20000444
 8001d18:	08001c71 	.word	0x08001c71

08001d1c <inv_disable_magnetic_disturbance>:
 8001d1c:	b510      	push	{r4, lr}
 8001d1e:	4c04      	ldr	r4, [pc, #16]	; (8001d30 <inv_disable_magnetic_disturbance+0x14>)
 8001d20:	4620      	mov	r0, r4
 8001d22:	f009 fcff 	bl	800b724 <inv_unregister_data_cb>
 8001d26:	4620      	mov	r0, r4
 8001d28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001d2c:	f009 bcfa 	b.w	800b724 <inv_unregister_data_cb>
 8001d30:	080022ad 	.word	0x080022ad

08001d34 <inv_disable_dip_tracking>:
 8001d34:	4b02      	ldr	r3, [pc, #8]	; (8001d40 <inv_disable_dip_tracking+0xc>)
 8001d36:	2000      	movs	r0, #0
 8001d38:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	20000444 	.word	0x20000444

08001d44 <inv_enable_dip_tracking>:
 8001d44:	4b02      	ldr	r3, [pc, #8]	; (8001d50 <inv_enable_dip_tracking+0xc>)
 8001d46:	2201      	movs	r2, #1
 8001d48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8001d4c:	2000      	movs	r0, #0
 8001d4e:	4770      	bx	lr
 8001d50:	20000444 	.word	0x20000444

08001d54 <inv_track_dip_angle>:
 8001d54:	4b23      	ldr	r3, [pc, #140]	; (8001de4 <inv_track_dip_angle+0x90>)
 8001d56:	b150      	cbz	r0, 8001d6e <inv_track_dip_angle+0x1a>
 8001d58:	2801      	cmp	r0, #1
 8001d5a:	d017      	beq.n	8001d8c <inv_track_dip_angle+0x38>
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	2101      	movs	r1, #1
 8001d60:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
 8001d64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8001d68:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8001d6c:	4770      	bx	lr
 8001d6e:	2100      	movs	r1, #0
 8001d70:	2201      	movs	r2, #1
 8001d72:	ed83 0a28 	vstr	s0, [r3, #160]	; 0xa0
 8001d76:	ed83 0a29 	vstr	s0, [r3, #164]	; 0xa4
 8001d7a:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
 8001d7e:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
 8001d82:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
 8001d86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8001d8a:	4770      	bx	lr
 8001d8c:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8001d90:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 8001d94:	ee70 7a67 	vsub.f32	s15, s0, s15
 8001d98:	eef0 7ae7 	vabs.f32	s15, s15
 8001d9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da4:	d516      	bpl.n	8001dd4 <inv_track_dip_angle+0x80>
 8001da6:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8001daa:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8001dae:	ee30 0a27 	vadd.f32	s0, s0, s15
 8001db2:	3201      	adds	r2, #1
 8001db4:	2a31      	cmp	r2, #49	; 0x31
 8001db6:	ed83 0a29 	vstr	s0, [r3, #164]	; 0xa4
 8001dba:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8001dbe:	dd0f      	ble.n	8001de0 <inv_track_dip_angle+0x8c>
 8001dc0:	eddf 7a09 	vldr	s15, [pc, #36]	; 8001de8 <inv_track_dip_angle+0x94>
 8001dc4:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8001dc8:	2202      	movs	r2, #2
 8001dca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8001dce:	ed83 0a2a 	vstr	s0, [r3, #168]	; 0xa8
 8001dd2:	4770      	bx	lr
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8001dda:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8001dde:	4770      	bx	lr
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	20000444 	.word	0x20000444
 8001de8:	42480000 	.word	0x42480000

08001dec <ComputeAngleVelocity>:
 8001dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dee:	b08f      	sub	sp, #60	; 0x3c
 8001df0:	4606      	mov	r6, r0
 8001df2:	460d      	mov	r5, r1
 8001df4:	a905      	add	r1, sp, #20
 8001df6:	4614      	mov	r4, r2
 8001df8:	f00a fbfd 	bl	800c5f6 <inv_quaternion_to_rotation>
 8001dfc:	aa01      	add	r2, sp, #4
 8001dfe:	4628      	mov	r0, r5
 8001e00:	4631      	mov	r1, r6
 8001e02:	f009 ffdb 	bl	800bdbc <inv_q_mult>
 8001e06:	4630      	mov	r0, r6
 8001e08:	4629      	mov	r1, r5
 8001e0a:	f00a f8d1 	bl	800bfb0 <inv_q_invert>
 8001e0e:	af05      	add	r7, sp, #20
 8001e10:	f1a4 0c04 	sub.w	ip, r4, #4
 8001e14:	f104 0208 	add.w	r2, r4, #8
 8001e18:	f10d 0e10 	add.w	lr, sp, #16
 8001e1c:	ab01      	add	r3, sp, #4
 8001e1e:	463c      	mov	r4, r7
 8001e20:	2000      	movs	r0, #0
 8001e22:	2100      	movs	r1, #0
 8001e24:	f853 5f04 	ldr.w	r5, [r3, #4]!
 8001e28:	f854 6b04 	ldr.w	r6, [r4], #4
 8001e2c:	4573      	cmp	r3, lr
 8001e2e:	fbc5 0106 	smlal	r0, r1, r5, r6
 8001e32:	d1f7      	bne.n	8001e24 <ComputeAngleVelocity+0x38>
 8001e34:	0f83      	lsrs	r3, r0, #30
 8001e36:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 8001e3a:	f84c 3f04 	str.w	r3, [ip, #4]!
 8001e3e:	4594      	cmp	ip, r2
 8001e40:	f107 070c 	add.w	r7, r7, #12
 8001e44:	d1ea      	bne.n	8001e1c <ComputeAngleVelocity+0x30>
 8001e46:	b00f      	add	sp, #60	; 0x3c
 8001e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e4a:	bf00      	nop

08001e4c <Mag3ofNormalizedLong>:
 8001e4c:	ed90 0a01 	vldr	s0, [r0, #4]
 8001e50:	ed90 7a00 	vldr	s14, [r0]
 8001e54:	edd0 7a02 	vldr	s15, [r0, #8]
 8001e58:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8001e5c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001e60:	ee20 0a00 	vmul.f32	s0, s0, s0
 8001e64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e68:	eea7 0a07 	vfma.f32	s0, s14, s14
 8001e6c:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8001e70:	eef1 7ac0 	vsqrt.f32	s15, s0
 8001e74:	eef4 7a67 	vcmp.f32	s15, s15
 8001e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e7c:	d104      	bne.n	8001e88 <Mag3ofNormalizedLong+0x3c>
 8001e7e:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8001e9c <Mag3ofNormalizedLong+0x50>
 8001e82:	ee27 0a80 	vmul.f32	s0, s15, s0
 8001e86:	4770      	bx	lr
 8001e88:	b508      	push	{r3, lr}
 8001e8a:	f00e fb13 	bl	80104b4 <sqrtf>
 8001e8e:	eef0 7a40 	vmov.f32	s15, s0
 8001e92:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8001e9c <Mag3ofNormalizedLong+0x50>
 8001e96:	ee27 0a80 	vmul.f32	s0, s15, s0
 8001e9a:	bd08      	pop	{r3, pc}
 8001e9c:	37800000 	.word	0x37800000

08001ea0 <MagDisturbSetDisturbance>:
 8001ea0:	b510      	push	{r4, lr}
 8001ea2:	4c1e      	ldr	r4, [pc, #120]	; (8001f1c <MagDisturbSetDisturbance+0x7c>)
 8001ea4:	edd4 7a00 	vldr	s15, [r4]
 8001ea8:	eef4 7ac0 	vcmpe.f32	s15, s0
 8001eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb0:	d406      	bmi.n	8001ec0 <MagDisturbSetDisturbance+0x20>
 8001eb2:	edd4 7a01 	vldr	s15, [r4, #4]
 8001eb6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ebe:	d512      	bpl.n	8001ee6 <MagDisturbSetDisturbance+0x46>
 8001ec0:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8001ec2:	4a16      	ldr	r2, [pc, #88]	; (8001f1c <MagDisturbSetDisturbance+0x7c>)
 8001ec4:	b1a3      	cbz	r3, 8001ef0 <MagDisturbSetDisturbance+0x50>
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	2300      	movs	r3, #0
 8001eca:	6762      	str	r2, [r4, #116]	; 0x74
 8001ecc:	67a3      	str	r3, [r4, #120]	; 0x78
 8001ece:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8001ed0:	4912      	ldr	r1, [pc, #72]	; (8001f1c <MagDisturbSetDisturbance+0x7c>)
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	dc06      	bgt.n	8001ee4 <MagDisturbSetDisturbance+0x44>
 8001ed6:	6f4b      	ldr	r3, [r1, #116]	; 0x74
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	bf04      	itt	eq
 8001edc:	2300      	moveq	r3, #0
 8001ede:	65cb      	streq	r3, [r1, #92]	; 0x5c
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	6763      	str	r3, [r4, #116]	; 0x74
 8001ee4:	bd10      	pop	{r4, pc}
 8001ee6:	6923      	ldr	r3, [r4, #16]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d007      	beq.n	8001efc <MagDisturbSetDisturbance+0x5c>
 8001eec:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8001eee:	e7ee      	b.n	8001ece <MagDisturbSetDisturbance+0x2e>
 8001ef0:	f102 0018 	add.w	r0, r2, #24
 8001ef4:	6d91      	ldr	r1, [r2, #88]	; 0x58
 8001ef6:	f00a fdbd 	bl	800ca74 <inv_set_compass_correction>
 8001efa:	e7e4      	b.n	8001ec6 <MagDisturbSetDisturbance+0x26>
 8001efc:	edd4 7a03 	vldr	s15, [r4, #12]
 8001f00:	eef4 7ae0 	vcmpe.f32	s15, s1
 8001f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f08:	d4da      	bmi.n	8001ec0 <MagDisturbSetDisturbance+0x20>
 8001f0a:	edd4 7a02 	vldr	s15, [r4, #8]
 8001f0e:	eef4 0ae7 	vcmpe.f32	s1, s15
 8001f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f16:	d5e9      	bpl.n	8001eec <MagDisturbSetDisturbance+0x4c>
 8001f18:	e7d2      	b.n	8001ec0 <MagDisturbSetDisturbance+0x20>
 8001f1a:	bf00      	nop
 8001f1c:	20000444 	.word	0x20000444

08001f20 <MagDisturbCheckSettling>:
 8001f20:	b510      	push	{r4, lr}
 8001f22:	ed2d 8b02 	vpush	{d8}
 8001f26:	4604      	mov	r4, r0
 8001f28:	eeb0 8a40 	vmov.f32	s16, s0
 8001f2c:	f00a fdd4 	bl	800cad8 <inv_get_acc_state>
 8001f30:	4b0f      	ldr	r3, [pc, #60]	; (8001f70 <MagDisturbCheckSettling+0x50>)
 8001f32:	b930      	cbnz	r0, 8001f42 <MagDisturbCheckSettling+0x22>
 8001f34:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8001f74 <MagDisturbCheckSettling+0x54>
 8001f38:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8001f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f40:	dd10      	ble.n	8001f64 <MagDisturbCheckSettling+0x44>
 8001f42:	2200      	movs	r2, #0
 8001f44:	611a      	str	r2, [r3, #16]
 8001f46:	615a      	str	r2, [r3, #20]
 8001f48:	6958      	ldr	r0, [r3, #20]
 8001f4a:	4a09      	ldr	r2, [pc, #36]	; (8001f70 <MagDisturbCheckSettling+0x50>)
 8001f4c:	4420      	add	r0, r4
 8001f4e:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8001f52:	6158      	str	r0, [r3, #20]
 8001f54:	dd03      	ble.n	8001f5e <MagDisturbCheckSettling+0x3e>
 8001f56:	2101      	movs	r1, #1
 8001f58:	2300      	movs	r3, #0
 8001f5a:	6111      	str	r1, [r2, #16]
 8001f5c:	6153      	str	r3, [r2, #20]
 8001f5e:	ecbd 8b02 	vpop	{d8}
 8001f62:	bd10      	pop	{r4, pc}
 8001f64:	691a      	ldr	r2, [r3, #16]
 8001f66:	2a00      	cmp	r2, #0
 8001f68:	d0ee      	beq.n	8001f48 <MagDisturbCheckSettling+0x28>
 8001f6a:	ecbd 8b02 	vpop	{d8}
 8001f6e:	bd10      	pop	{r4, pc}
 8001f70:	20000444 	.word	0x20000444
 8001f74:	461c4000 	.word	0x461c4000

08001f78 <inv_check_magnetic_disturbance>:
 8001f78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f7c:	ed2d 8b04 	vpush	{d8-d9}
 8001f80:	4dc2      	ldr	r5, [pc, #776]	; (800228c <inv_check_magnetic_disturbance+0x314>)
 8001f82:	b08b      	sub	sp, #44	; 0x2c
 8001f84:	2400      	movs	r4, #0
 8001f86:	9404      	str	r4, [sp, #16]
 8001f88:	9405      	str	r4, [sp, #20]
 8001f8a:	9406      	str	r4, [sp, #24]
 8001f8c:	f8d5 4088 	ldr.w	r4, [r5, #136]	; 0x88
 8001f90:	b934      	cbnz	r4, 8001fa0 <inv_check_magnetic_disturbance+0x28>
 8001f92:	2300      	movs	r3, #0
 8001f94:	4618      	mov	r0, r3
 8001f96:	b00b      	add	sp, #44	; 0x2c
 8001f98:	ecbd 8b04 	vpop	{d8-d9}
 8001f9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001fa0:	461c      	mov	r4, r3
 8001fa2:	4616      	mov	r6, r2
 8001fa4:	4688      	mov	r8, r1
 8001fa6:	4607      	mov	r7, r0
 8001fa8:	f009 f968 	bl	800b27c <inv_get_gyro_on>
 8001fac:	2800      	cmp	r0, #0
 8001fae:	f040 8130 	bne.w	8002212 <inv_check_magnetic_disturbance+0x29a>
 8001fb2:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 8001fb6:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800228c <inv_check_magnetic_disturbance+0x314>
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	dd11      	ble.n	8001fe2 <inv_check_magnetic_disturbance+0x6a>
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	f8c9 3084 	str.w	r3, [r9, #132]	; 0x84
 8001fc4:	f009 f95a 	bl	800b27c <inv_get_gyro_on>
 8001fc8:	2800      	cmp	r0, #0
 8001fca:	f040 80aa 	bne.w	8002122 <inv_check_magnetic_disturbance+0x1aa>
 8001fce:	f8d9 3080 	ldr.w	r3, [r9, #128]	; 0x80
 8001fd2:	1bdb      	subs	r3, r3, r7
 8001fd4:	f8c9 3080 	str.w	r3, [r9, #128]	; 0x80
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	bfdc      	itt	le
 8001fdc:	2300      	movle	r3, #0
 8001fde:	f8c5 3084 	strle.w	r3, [r5, #132]	; 0x84
 8001fe2:	f00a fef5 	bl	800cdd0 <inv_got_compass_bias>
 8001fe6:	2800      	cmp	r0, #0
 8001fe8:	d0d3      	beq.n	8001f92 <inv_check_magnetic_disturbance+0x1a>
 8001fea:	ed9f 8aa9 	vldr	s16, [pc, #676]	; 8002290 <inv_check_magnetic_disturbance+0x318>
 8001fee:	eddf 6aa9 	vldr	s13, [pc, #676]	; 8002294 <inv_check_magnetic_disturbance+0x31c>
 8001ff2:	1f23      	subs	r3, r4, #4
 8001ff4:	f106 0208 	add.w	r2, r6, #8
 8001ff8:	1f34      	subs	r4, r6, #4
 8001ffa:	f854 1f04 	ldr.w	r1, [r4, #4]!
 8001ffe:	ee07 1a10 	vmov	s14, r1
 8002002:	f853 1f04 	ldr.w	r1, [r3, #4]!
 8002006:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800200a:	ee07 1a90 	vmov	s15, r1
 800200e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002012:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002016:	4294      	cmp	r4, r2
 8002018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800201c:	eea7 8aa6 	vfma.f32	s16, s15, s13
 8002020:	d1eb      	bne.n	8001ffa <inv_check_magnetic_disturbance+0x82>
 8002022:	4630      	mov	r0, r6
 8002024:	f7ff ff12 	bl	8001e4c <Mag3ofNormalizedLong>
 8002028:	eef0 8a40 	vmov.f32	s17, s0
 800202c:	ee88 0a00 	vdiv.f32	s0, s16, s0
 8002030:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002034:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800203c:	dd67      	ble.n	800210e <inv_check_magnetic_disturbance+0x196>
 800203e:	eeb0 0a67 	vmov.f32	s0, s15
 8002042:	f00e fa03 	bl	801044c <acosf>
 8002046:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 800204a:	4a90      	ldr	r2, [pc, #576]	; (800228c <inv_check_magnetic_disturbance+0x314>)
 800204c:	eeb0 8a40 	vmov.f32	s16, s0
 8002050:	b173      	cbz	r3, 8002070 <inv_check_magnetic_disturbance+0xf8>
 8002052:	edd2 7a00 	vldr	s15, [r2]
 8002056:	eef4 8ae7 	vcmpe.f32	s17, s15
 800205a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800205e:	d507      	bpl.n	8002070 <inv_check_magnetic_disturbance+0xf8>
 8002060:	edd2 7a01 	vldr	s15, [r2, #4]
 8002064:	eef4 8ae7 	vcmpe.f32	s17, s15
 8002068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800206c:	f300 80d5 	bgt.w	800221a <inv_check_magnetic_disturbance+0x2a2>
 8002070:	ac07      	add	r4, sp, #28
 8002072:	4e86      	ldr	r6, [pc, #536]	; (800228c <inv_check_magnetic_disturbance+0x314>)
 8002074:	4620      	mov	r0, r4
 8002076:	f00a fd81 	bl	800cb7c <inv_get_local_field>
 800207a:	4620      	mov	r0, r4
 800207c:	f106 01ac 	add.w	r1, r6, #172	; 0xac
 8002080:	220c      	movs	r2, #12
 8002082:	f00b f81f 	bl	800d0c4 <memcmp>
 8002086:	2800      	cmp	r0, #0
 8002088:	d155      	bne.n	8002136 <inv_check_magnetic_disturbance+0x1be>
 800208a:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 800208e:	2b01      	cmp	r3, #1
 8002090:	d051      	beq.n	8002136 <inv_check_magnetic_disturbance+0x1be>
 8002092:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8002094:	4e7d      	ldr	r6, [pc, #500]	; (800228c <inv_check_magnetic_disturbance+0x314>)
 8002096:	b95b      	cbnz	r3, 80020b0 <inv_check_magnetic_disturbance+0x138>
 8002098:	2301      	movs	r3, #1
 800209a:	65f3      	str	r3, [r6, #92]	; 0x5c
 800209c:	f106 0418 	add.w	r4, r6, #24
 80020a0:	3658      	adds	r6, #88	; 0x58
 80020a2:	4620      	mov	r0, r4
 80020a4:	497c      	ldr	r1, [pc, #496]	; (8002298 <inv_check_magnetic_disturbance+0x320>)
 80020a6:	3410      	adds	r4, #16
 80020a8:	f00a fd00 	bl	800caac <inv_get_compass_correction>
 80020ac:	42b4      	cmp	r4, r6
 80020ae:	d1f8      	bne.n	80020a2 <inv_check_magnetic_disturbance+0x12a>
 80020b0:	4c76      	ldr	r4, [pc, #472]	; (800228c <inv_check_magnetic_disturbance+0x314>)
 80020b2:	aa01      	add	r2, sp, #4
 80020b4:	4640      	mov	r0, r8
 80020b6:	f104 0164 	add.w	r1, r4, #100	; 0x64
 80020ba:	f7ff fe97 	bl	8001dec <ComputeAngleVelocity>
 80020be:	f104 0164 	add.w	r1, r4, #100	; 0x64
 80020c2:	4640      	mov	r0, r8
 80020c4:	f009 ff74 	bl	800bfb0 <inv_q_invert>
 80020c8:	a804      	add	r0, sp, #16
 80020ca:	f009 fdfb 	bl	800bcc4 <inv_get_gyro_sum_of_sqr>
 80020ce:	ee00 0a10 	vmov	s0, r0
 80020d2:	4638      	mov	r0, r7
 80020d4:	eebb 0acd 	vcvt.f32.u32	s0, s0, #6
 80020d8:	f7ff ff22 	bl	8001f20 <MagDisturbCheckSettling>
 80020dc:	eeb0 0a68 	vmov.f32	s0, s17
 80020e0:	eef0 0a48 	vmov.f32	s1, s16
 80020e4:	f7ff fedc 	bl	8001ea0 <MagDisturbSetDisturbance>
 80020e8:	6fab      	ldr	r3, [r5, #120]	; 0x78
 80020ea:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 80020ec:	4293      	cmp	r3, r2
 80020ee:	da01      	bge.n	80020f4 <inv_check_magnetic_disturbance+0x17c>
 80020f0:	443b      	add	r3, r7
 80020f2:	67a3      	str	r3, [r4, #120]	; 0x78
 80020f4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80020f6:	4c65      	ldr	r4, [pc, #404]	; (800228c <inv_check_magnetic_disturbance+0x314>)
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f47f af4b 	bne.w	8001f94 <inv_check_magnetic_disturbance+0x1c>
 80020fe:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002100:	4407      	add	r7, r0
 8002102:	f5b7 7f7a 	cmp.w	r7, #1000	; 0x3e8
 8002106:	f300 808d 	bgt.w	8002224 <inv_check_magnetic_disturbance+0x2ac>
 800210a:	6627      	str	r7, [r4, #96]	; 0x60
 800210c:	e742      	b.n	8001f94 <inv_check_magnetic_disturbance+0x1c>
 800210e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8002112:	eeb4 0a67 	vcmp.f32	s0, s15
 8002116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800211a:	bf48      	it	mi
 800211c:	eeb0 0a67 	vmovmi.f32	s0, s15
 8002120:	e78f      	b.n	8002042 <inv_check_magnetic_disturbance+0xca>
 8002122:	a804      	add	r0, sp, #16
 8002124:	f009 fdce 	bl	800bcc4 <inv_get_gyro_sum_of_sqr>
 8002128:	f5b0 4fc8 	cmp.w	r0, #25600	; 0x6400
 800212c:	f8d9 3080 	ldr.w	r3, [r9, #128]	; 0x80
 8002130:	f4bf af4f 	bcs.w	8001fd2 <inv_check_magnetic_disturbance+0x5a>
 8002134:	e750      	b.n	8001fd8 <inv_check_magnetic_disturbance+0x60>
 8002136:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800213a:	f8df e150 	ldr.w	lr, [pc, #336]	; 800228c <inv_check_magnetic_disturbance+0x314>
 800213e:	9b07      	ldr	r3, [sp, #28]
 8002140:	f10e 06ac 	add.w	r6, lr, #172	; 0xac
 8002144:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8002148:	b9a3      	cbnz	r3, 8002174 <inv_check_magnetic_disturbance+0x1fc>
 800214a:	9b08      	ldr	r3, [sp, #32]
 800214c:	b993      	cbnz	r3, 8002174 <inv_check_magnetic_disturbance+0x1fc>
 800214e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002150:	b983      	cbnz	r3, 8002174 <inv_check_magnetic_disturbance+0x1fc>
 8002152:	f8de 2098 	ldr.w	r2, [lr, #152]	; 0x98
 8002156:	4951      	ldr	r1, [pc, #324]	; (800229c <inv_check_magnetic_disturbance+0x324>)
 8002158:	f8ce 1000 	str.w	r1, [lr]
 800215c:	2a01      	cmp	r2, #1
 800215e:	4950      	ldr	r1, [pc, #320]	; (80022a0 <inv_check_magnetic_disturbance+0x328>)
 8002160:	f8ce 1004 	str.w	r1, [lr, #4]
 8002164:	d078      	beq.n	8002258 <inv_check_magnetic_disturbance+0x2e0>
 8002166:	4a4f      	ldr	r2, [pc, #316]	; (80022a4 <inv_check_magnetic_disturbance+0x32c>)
 8002168:	4b4f      	ldr	r3, [pc, #316]	; (80022a8 <inv_check_magnetic_disturbance+0x330>)
 800216a:	f8ce 2008 	str.w	r2, [lr, #8]
 800216e:	f8ce 300c 	str.w	r3, [lr, #12]
 8002172:	e78e      	b.n	8002092 <inv_check_magnetic_disturbance+0x11a>
 8002174:	4620      	mov	r0, r4
 8002176:	f7ff fe69 	bl	8001e4c <Mag3ofNormalizedLong>
 800217a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800217e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002182:	eeb0 9a40 	vmov.f32	s18, s0
 8002186:	d084      	beq.n	8002092 <inv_check_magnetic_disturbance+0x11a>
 8002188:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800218c:	ee39 0a40 	vsub.f32	s0, s18, s0
 8002190:	ee20 0a00 	vmul.f32	s0, s0, s0
 8002194:	eeb1 7ac0 	vsqrt.f32	s14, s0
 8002198:	eeb4 7a47 	vcmp.f32	s14, s14
 800219c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021a0:	d16e      	bne.n	8002280 <inv_check_magnetic_disturbance+0x308>
 80021a2:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80021a6:	ee79 7a27 	vadd.f32	s15, s18, s15
 80021aa:	ed85 7a01 	vstr	s14, [r5, #4]
 80021ae:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80021b2:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80021b6:	eeb4 0a40 	vcmp.f32	s0, s0
 80021ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021be:	d15a      	bne.n	8002276 <inv_check_magnetic_disturbance+0x2fe>
 80021c0:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 80021c4:	ed85 0a00 	vstr	s0, [r5]
 80021c8:	eefa 7ac8 	vcvt.f32.s32	s15, s15, #16
 80021cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80021d0:	ee87 9a89 	vdiv.f32	s18, s15, s18
 80021d4:	eeb4 9ac7 	vcmpe.f32	s18, s14
 80021d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021dc:	dd32      	ble.n	8002244 <inv_check_magnetic_disturbance+0x2cc>
 80021de:	eeb0 9a47 	vmov.f32	s18, s14
 80021e2:	eeb0 0a49 	vmov.f32	s0, s18
 80021e6:	f00e f931 	bl	801044c <acosf>
 80021ea:	edd5 7a27 	vldr	s15, [r5, #156]	; 0x9c
 80021ee:	ee70 7a67 	vsub.f32	s15, s0, s15
 80021f2:	eeb0 0a49 	vmov.f32	s0, s18
 80021f6:	edc5 7a02 	vstr	s15, [r5, #8]
 80021fa:	f00e f927 	bl	801044c <acosf>
 80021fe:	edd5 7a27 	vldr	s15, [r5, #156]	; 0x9c
 8002202:	ee30 0a27 	vadd.f32	s0, s0, s15
 8002206:	2300      	movs	r3, #0
 8002208:	ed85 0a03 	vstr	s0, [r5, #12]
 800220c:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
 8002210:	e73f      	b.n	8002092 <inv_check_magnetic_disturbance+0x11a>
 8002212:	a804      	add	r0, sp, #16
 8002214:	f009 fc04 	bl	800ba20 <inv_get_gyro>
 8002218:	e6cb      	b.n	8001fb2 <inv_check_magnetic_disturbance+0x3a>
 800221a:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
 800221e:	f7ff fd99 	bl	8001d54 <inv_track_dip_angle>
 8002222:	e725      	b.n	8002070 <inv_check_magnetic_disturbance+0xf8>
 8002224:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8002228:	2230      	movs	r2, #48	; 0x30
 800222a:	f104 0018 	add.w	r0, r4, #24
 800222e:	6623      	str	r3, [r4, #96]	; 0x60
 8002230:	f00a ff64 	bl	800d0fc <memmove>
 8002234:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8002238:	f104 0158 	add.w	r1, r4, #88	; 0x58
 800223c:	f00a fc36 	bl	800caac <inv_get_compass_correction>
 8002240:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8002242:	e6a7      	b.n	8001f94 <inv_check_magnetic_disturbance+0x1c>
 8002244:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8002248:	eeb4 9a67 	vcmp.f32	s18, s15
 800224c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002250:	bf48      	it	mi
 8002252:	eeb0 9a67 	vmovmi.f32	s18, s15
 8002256:	e7c4      	b.n	80021e2 <inv_check_magnetic_disturbance+0x26a>
 8002258:	edde 7a2a 	vldr	s15, [lr, #168]	; 0xa8
 800225c:	ed9e 7a27 	vldr	s14, [lr, #156]	; 0x9c
 8002260:	f8ce 3098 	str.w	r3, [lr, #152]	; 0x98
 8002264:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8002268:	ee77 7a87 	vadd.f32	s15, s15, s14
 800226c:	edce 6a02 	vstr	s13, [lr, #8]
 8002270:	edce 7a03 	vstr	s15, [lr, #12]
 8002274:	e70d      	b.n	8002092 <inv_check_magnetic_disturbance+0x11a>
 8002276:	eeb0 0a67 	vmov.f32	s0, s15
 800227a:	f00e f91b 	bl	80104b4 <sqrtf>
 800227e:	e79f      	b.n	80021c0 <inv_check_magnetic_disturbance+0x248>
 8002280:	f00e f918 	bl	80104b4 <sqrtf>
 8002284:	eeb0 7a40 	vmov.f32	s14, s0
 8002288:	e78b      	b.n	80021a2 <inv_check_magnetic_disturbance+0x22a>
 800228a:	bf00      	nop
 800228c:	20000444 	.word	0x20000444
 8002290:	00000000 	.word	0x00000000
 8002294:	37800000 	.word	0x37800000
 8002298:	2000049c 	.word	0x2000049c
 800229c:	42700000 	.word	0x42700000
 80022a0:	41f00000 	.word	0x41f00000
 80022a4:	c2b40000 	.word	0xc2b40000
 80022a8:	42b40000 	.word	0x42b40000

080022ac <inv_magnetic_disturbance_process>:
 80022ac:	b570      	push	{r4, r5, r6, lr}
 80022ae:	4604      	mov	r4, r0
 80022b0:	b088      	sub	sp, #32
 80022b2:	a801      	add	r0, sp, #4
 80022b4:	f00a fc72 	bl	800cb9c <inv_get_gravity>
 80022b8:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 80022bc:	f8d4 50c4 	ldr.w	r5, [r4, #196]	; 0xc4
 80022c0:	a804      	add	r0, sp, #16
 80022c2:	1b5d      	subs	r5, r3, r5
 80022c4:	f00a fcb8 	bl	800cc38 <inv_get_6axis_quaternion>
 80022c8:	a904      	add	r1, sp, #16
 80022ca:	4606      	mov	r6, r0
 80022cc:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
 80022d0:	ab01      	add	r3, sp, #4
 80022d2:	4628      	mov	r0, r5
 80022d4:	f7ff fe50 	bl	8001f78 <inv_check_magnetic_disturbance>
 80022d8:	f009 f896 	bl	800b408 <inv_set_compass_disturbance>
 80022dc:	4630      	mov	r0, r6
 80022de:	b008      	add	sp, #32
 80022e0:	bd70      	pop	{r4, r5, r6, pc}
 80022e2:	bf00      	nop

080022e4 <inv_get_magnetic_disturbance_state>:
 80022e4:	4b01      	ldr	r3, [pc, #4]	; (80022ec <inv_get_magnetic_disturbance_state+0x8>)
 80022e6:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	20000444 	.word	0x20000444

080022f0 <inv_normalize_quat>:
 80022f0:	ed90 7a01 	vldr	s14, [r0, #4]
 80022f4:	edd0 7a00 	vldr	s15, [r0]
 80022f8:	edd0 6a02 	vldr	s13, [r0, #8]
 80022fc:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 8002300:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002304:	ee20 0a00 	vmul.f32	s0, s0, s0
 8002308:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800230c:	eea7 0a07 	vfma.f32	s0, s14, s14
 8002310:	b538      	push	{r3, r4, r5, lr}
 8002312:	ed90 7a03 	vldr	s14, [r0, #12]
 8002316:	eea6 0aa6 	vfma.f32	s0, s13, s13
 800231a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800231e:	eea7 0a07 	vfma.f32	s0, s14, s14
 8002322:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800232a:	d937      	bls.n	800239c <inv_normalize_quat+0xac>
 800232c:	eef1 6ac0 	vsqrt.f32	s13, s0
 8002330:	460c      	mov	r4, r1
 8002332:	4605      	mov	r5, r0
 8002334:	eef4 6a66 	vcmp.f32	s13, s13
 8002338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800233c:	d136      	bne.n	80023ac <inv_normalize_quat+0xbc>
 800233e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002342:	ee87 0a26 	vdiv.f32	s0, s14, s13
 8002346:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 80023bc <inv_normalize_quat+0xcc>
 800234a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800234e:	ee20 0a06 	vmul.f32	s0, s0, s12
 8002352:	ee67 7a80 	vmul.f32	s15, s15, s0
 8002356:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800235a:	edc4 7a00 	vstr	s15, [r4]
 800235e:	edd5 7a01 	vldr	s15, [r5, #4]
 8002362:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002366:	ee67 7a80 	vmul.f32	s15, s15, s0
 800236a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800236e:	edc4 7a01 	vstr	s15, [r4, #4]
 8002372:	edd5 7a02 	vldr	s15, [r5, #8]
 8002376:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800237a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800237e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002382:	edc4 7a02 	vstr	s15, [r4, #8]
 8002386:	edd5 7a03 	vldr	s15, [r5, #12]
 800238a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800238e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002392:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002396:	ed84 0a03 	vstr	s0, [r4, #12]
 800239a:	bd38      	pop	{r3, r4, r5, pc}
 800239c:	2300      	movs	r3, #0
 800239e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023a2:	e881 000c 	stmia.w	r1, {r2, r3}
 80023a6:	608b      	str	r3, [r1, #8]
 80023a8:	60cb      	str	r3, [r1, #12]
 80023aa:	bd38      	pop	{r3, r4, r5, pc}
 80023ac:	f00e f882 	bl	80104b4 <sqrtf>
 80023b0:	edd5 7a00 	vldr	s15, [r5]
 80023b4:	eef0 6a40 	vmov.f32	s13, s0
 80023b8:	e7c1      	b.n	800233e <inv_normalize_quat+0x4e>
 80023ba:	bf00      	nop
 80023bc:	4e800000 	.word	0x4e800000

080023c0 <inv_start_quaternion>:
 80023c0:	b508      	push	{r3, lr}
 80023c2:	4b08      	ldr	r3, [pc, #32]	; (80023e4 <inv_start_quaternion+0x24>)
 80023c4:	4908      	ldr	r1, [pc, #32]	; (80023e8 <inv_start_quaternion+0x28>)
 80023c6:	6818      	ldr	r0, [r3, #0]
 80023c8:	2208      	movs	r2, #8
 80023ca:	f00a fe7b 	bl	800d0c4 <memcmp>
 80023ce:	b108      	cbz	r0, 80023d4 <inv_start_quaternion+0x14>
 80023d0:	2032      	movs	r0, #50	; 0x32
 80023d2:	bd08      	pop	{r3, pc}
 80023d4:	4805      	ldr	r0, [pc, #20]	; (80023ec <inv_start_quaternion+0x2c>)
 80023d6:	21c8      	movs	r1, #200	; 0xc8
 80023d8:	2213      	movs	r2, #19
 80023da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80023de:	f009 b8fb 	b.w	800b5d8 <inv_register_data_cb>
 80023e2:	bf00      	nop
 80023e4:	2000000c 	.word	0x2000000c
 80023e8:	0801374c 	.word	0x0801374c
 80023ec:	08002ca5 	.word	0x08002ca5

080023f0 <inv_generate_gyro_quaternion.part.1>:
 80023f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023f2:	6986      	ldr	r6, [r0, #24]
 80023f4:	ea86 73e6 	eor.w	r3, r6, r6, asr #31
 80023f8:	eba3 73e6 	sub.w	r3, r3, r6, asr #31
 80023fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002400:	b089      	sub	sp, #36	; 0x24
 8002402:	da60      	bge.n	80024c6 <inv_generate_gyro_quaternion.part.1+0xd6>
 8002404:	69c3      	ldr	r3, [r0, #28]
 8002406:	2b00      	cmp	r3, #0
 8002408:	bfb8      	it	lt
 800240a:	425b      	neglt	r3, r3
 800240c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002410:	db61      	blt.n	80024d6 <inv_generate_gyro_quaternion.part.1+0xe6>
 8002412:	f5b3 0fc8 	cmp.w	r3, #6553600	; 0x640000
 8002416:	dd75      	ble.n	8002504 <inv_generate_gyro_quaternion.part.1+0x114>
 8002418:	4d3f      	ldr	r5, [pc, #252]	; (8002518 <inv_generate_gyro_quaternion.part.1+0x128>)
 800241a:	2303      	movs	r3, #3
 800241c:	63ab      	str	r3, [r5, #56]	; 0x38
 800241e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002420:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002422:	4f3d      	ldr	r7, [pc, #244]	; (8002518 <inv_generate_gyro_quaternion.part.1+0x128>)
 8002424:	429a      	cmp	r2, r3
 8002426:	4604      	mov	r4, r0
 8002428:	d06e      	beq.n	8002508 <inv_generate_gyro_quaternion.part.1+0x118>
 800242a:	ee07 3a90 	vmov	s15, r3
 800242e:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800251c <inv_generate_gyro_quaternion.part.1+0x12c>
 8002432:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8002520 <inv_generate_gyro_quaternion.part.1+0x130>
 8002436:	637b      	str	r3, [r7, #52]	; 0x34
 8002438:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800243c:	eec7 7aa6 	vdiv.f32	s15, s15, s13
 8002440:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002444:	ee17 0a90 	vmov	r0, s15
 8002448:	f000 fe4e 	bl	80030e8 <__aeabi_f2d>
 800244c:	a330      	add	r3, pc, #192	; (adr r3, 8002510 <inv_generate_gyro_quaternion.part.1+0x120>)
 800244e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002452:	f000 fea1 	bl	8003198 <__aeabi_dmul>
 8002456:	2200      	movs	r2, #0
 8002458:	4b32      	ldr	r3, [pc, #200]	; (8002524 <inv_generate_gyro_quaternion.part.1+0x134>)
 800245a:	f000 fe9d 	bl	8003198 <__aeabi_dmul>
 800245e:	2200      	movs	r2, #0
 8002460:	4b31      	ldr	r3, [pc, #196]	; (8002528 <inv_generate_gyro_quaternion.part.1+0x138>)
 8002462:	f000 ffc3 	bl	80033ec <__aeabi_ddiv>
 8002466:	f001 f947 	bl	80036f8 <__aeabi_d2iz>
 800246a:	4601      	mov	r1, r0
 800246c:	6338      	str	r0, [r7, #48]	; 0x30
 800246e:	2300      	movs	r3, #0
 8002470:	4630      	mov	r0, r6
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	f009 fc76 	bl	800bd64 <inv_q30_mult>
 8002478:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800247a:	9001      	str	r0, [sp, #4]
 800247c:	69e0      	ldr	r0, [r4, #28]
 800247e:	f009 fc71 	bl	800bd64 <inv_q30_mult>
 8002482:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8002484:	9002      	str	r0, [sp, #8]
 8002486:	6a20      	ldr	r0, [r4, #32]
 8002488:	f009 fc6c 	bl	800bd64 <inv_q30_mult>
 800248c:	aa04      	add	r2, sp, #16
 800248e:	9003      	str	r0, [sp, #12]
 8002490:	4669      	mov	r1, sp
 8002492:	4821      	ldr	r0, [pc, #132]	; (8002518 <inv_generate_gyro_quaternion.part.1+0x128>)
 8002494:	f009 fc92 	bl	800bdbc <inv_q_mult>
 8002498:	9d04      	ldr	r5, [sp, #16]
 800249a:	9c05      	ldr	r4, [sp, #20]
 800249c:	9a06      	ldr	r2, [sp, #24]
 800249e:	9b07      	ldr	r3, [sp, #28]
 80024a0:	481d      	ldr	r0, [pc, #116]	; (8002518 <inv_generate_gyro_quaternion.part.1+0x128>)
 80024a2:	019b      	lsls	r3, r3, #6
 80024a4:	a904      	add	r1, sp, #16
 80024a6:	01ae      	lsls	r6, r5, #6
 80024a8:	01a5      	lsls	r5, r4, #6
 80024aa:	0194      	lsls	r4, r2, #6
 80024ac:	4602      	mov	r2, r0
 80024ae:	9307      	str	r3, [sp, #28]
 80024b0:	9604      	str	r6, [sp, #16]
 80024b2:	9505      	str	r5, [sp, #20]
 80024b4:	9406      	str	r4, [sp, #24]
 80024b6:	f009 fd4a 	bl	800bf4e <inv_q_add>
 80024ba:	4817      	ldr	r0, [pc, #92]	; (8002518 <inv_generate_gyro_quaternion.part.1+0x128>)
 80024bc:	4601      	mov	r1, r0
 80024be:	f7ff ff17 	bl	80022f0 <inv_normalize_quat>
 80024c2:	b009      	add	sp, #36	; 0x24
 80024c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024c6:	f5b3 0fc8 	cmp.w	r3, #6553600	; 0x640000
 80024ca:	dca5      	bgt.n	8002418 <inv_generate_gyro_quaternion.part.1+0x28>
 80024cc:	69c3      	ldr	r3, [r0, #28]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	bfb8      	it	lt
 80024d2:	425b      	neglt	r3, r3
 80024d4:	e79d      	b.n	8002412 <inv_generate_gyro_quaternion.part.1+0x22>
 80024d6:	6a03      	ldr	r3, [r0, #32]
 80024d8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80024dc:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80024e0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80024e4:	db09      	blt.n	80024fa <inv_generate_gyro_quaternion.part.1+0x10a>
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	bfb8      	it	lt
 80024ea:	425b      	neglt	r3, r3
 80024ec:	f5b3 0fc8 	cmp.w	r3, #6553600	; 0x640000
 80024f0:	dc92      	bgt.n	8002418 <inv_generate_gyro_quaternion.part.1+0x28>
 80024f2:	4d09      	ldr	r5, [pc, #36]	; (8002518 <inv_generate_gyro_quaternion.part.1+0x128>)
 80024f4:	2302      	movs	r3, #2
 80024f6:	63ab      	str	r3, [r5, #56]	; 0x38
 80024f8:	e791      	b.n	800241e <inv_generate_gyro_quaternion.part.1+0x2e>
 80024fa:	4b07      	ldr	r3, [pc, #28]	; (8002518 <inv_generate_gyro_quaternion.part.1+0x128>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	639a      	str	r2, [r3, #56]	; 0x38
 8002500:	b009      	add	sp, #36	; 0x24
 8002502:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002504:	6a03      	ldr	r3, [r0, #32]
 8002506:	e7ee      	b.n	80024e6 <inv_generate_gyro_quaternion.part.1+0xf6>
 8002508:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800250a:	e7b0      	b.n	800246e <inv_generate_gyro_quaternion.part.1+0x7e>
 800250c:	f3af 8000 	nop.w
 8002510:	54442d18 	.word	0x54442d18
 8002514:	400921fb 	.word	0x400921fb
 8002518:	200004fc 	.word	0x200004fc
 800251c:	49742400 	.word	0x49742400
 8002520:	4e000000 	.word	0x4e000000
 8002524:	40700000 	.word	0x40700000
 8002528:	40668000 	.word	0x40668000

0800252c <inv_generate_gyro_quaternion>:
 800252c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800252e:	065b      	lsls	r3, r3, #25
 8002530:	d500      	bpl.n	8002534 <inv_generate_gyro_quaternion+0x8>
 8002532:	e75d      	b.n	80023f0 <inv_generate_gyro_quaternion.part.1>
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop

08002538 <inv_set_quaternion>:
 8002538:	b530      	push	{r4, r5, lr}
 800253a:	4c0a      	ldr	r4, [pc, #40]	; (8002564 <inv_set_quaternion+0x2c>)
 800253c:	b085      	sub	sp, #20
 800253e:	4605      	mov	r5, r0
 8002540:	4669      	mov	r1, sp
 8002542:	4620      	mov	r0, r4
 8002544:	f009 fd34 	bl	800bfb0 <inv_q_invert>
 8002548:	4628      	mov	r0, r5
 800254a:	4669      	mov	r1, sp
 800254c:	f104 0220 	add.w	r2, r4, #32
 8002550:	f009 fc34 	bl	800bdbc <inv_q_mult>
 8002554:	6828      	ldr	r0, [r5, #0]
 8002556:	6869      	ldr	r1, [r5, #4]
 8002558:	68aa      	ldr	r2, [r5, #8]
 800255a:	68eb      	ldr	r3, [r5, #12]
 800255c:	3410      	adds	r4, #16
 800255e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002560:	b005      	add	sp, #20
 8002562:	bd30      	pop	{r4, r5, pc}
 8002564:	200004fc 	.word	0x200004fc

08002568 <inv_generate_accel_gyro_quaternion>:
 8002568:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800256c:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800256e:	ed2d 8b04 	vpush	{d8-d9}
 8002572:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002576:	2b40      	cmp	r3, #64	; 0x40
 8002578:	b09d      	sub	sp, #116	; 0x74
 800257a:	4604      	mov	r4, r0
 800257c:	f000 8243 	beq.w	8002a06 <inv_generate_accel_gyro_quaternion+0x49e>
 8002580:	f8d0 1120 	ldr.w	r1, [r0, #288]	; 0x120
 8002584:	4ea6      	ldr	r6, [pc, #664]	; (8002820 <inv_generate_accel_gyro_quaternion+0x2b8>)
 8002586:	f001 0350 	and.w	r3, r1, #80	; 0x50
 800258a:	2b40      	cmp	r3, #64	; 0x40
 800258c:	f000 82e2 	beq.w	8002b54 <inv_generate_accel_gyro_quaternion+0x5ec>
 8002590:	05cd      	lsls	r5, r1, #23
 8002592:	f100 815b 	bmi.w	800284c <inv_generate_accel_gyro_quaternion+0x2e4>
 8002596:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002598:	0659      	lsls	r1, r3, #25
 800259a:	f100 821f 	bmi.w	80029dc <inv_generate_accel_gyro_quaternion+0x474>
 800259e:	4da0      	ldr	r5, [pc, #640]	; (8002820 <inv_generate_accel_gyro_quaternion+0x2b8>)
 80025a0:	f105 0210 	add.w	r2, r5, #16
 80025a4:	f105 0020 	add.w	r0, r5, #32
 80025a8:	4629      	mov	r1, r5
 80025aa:	f009 fc07 	bl	800bdbc <inv_q_mult>
 80025ae:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80025b0:	065a      	lsls	r2, r3, #25
 80025b2:	d556      	bpl.n	8002662 <inv_generate_accel_gyro_quaternion+0xfa>
 80025b4:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 80025b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80025ba:	4313      	orrs	r3, r2
 80025bc:	05db      	lsls	r3, r3, #23
 80025be:	d556      	bpl.n	800266e <inv_generate_accel_gyro_quaternion+0x106>
 80025c0:	f105 0010 	add.w	r0, r5, #16
 80025c4:	f104 015c 	add.w	r1, r4, #92	; 0x5c
 80025c8:	aa10      	add	r2, sp, #64	; 0x40
 80025ca:	f009 fd15 	bl	800bff8 <inv_q_rotate>
 80025ce:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80025d0:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80025d2:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80025d4:	fb82 2302 	smull	r2, r3, r2, r2
 80025d8:	fbc0 2300 	smlal	r2, r3, r0, r0
 80025dc:	fbc1 2301 	smlal	r2, r3, r1, r1
 80025e0:	f06f 4840 	mvn.w	r8, #3221225472	; 0xc0000000
 80025e4:	f04f 0902 	mov.w	r9, #2
 80025e8:	4590      	cmp	r8, r2
 80025ea:	eb79 0303 	sbcs.w	r3, r9, r3
 80025ee:	f2c0 82bd 	blt.w	8002b6c <inv_generate_accel_gyro_quaternion+0x604>
 80025f2:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80025f4:	2b04      	cmp	r3, #4
 80025f6:	f000 82cc 	beq.w	8002b92 <inv_generate_accel_gyro_quaternion+0x62a>
 80025fa:	1e9a      	subs	r2, r3, #2
 80025fc:	2a01      	cmp	r2, #1
 80025fe:	f240 81f1 	bls.w	80029e4 <inv_generate_accel_gyro_quaternion+0x47c>
 8002602:	2b01      	cmp	r3, #1
 8002604:	f000 8300 	beq.w	8002c08 <inv_generate_accel_gyro_quaternion+0x6a0>
 8002608:	2401      	movs	r4, #1
 800260a:	4b86      	ldr	r3, [pc, #536]	; (8002824 <inv_generate_accel_gyro_quaternion+0x2bc>)
 800260c:	00a4      	lsls	r4, r4, #2
 800260e:	fb03 f404 	mul.w	r4, r3, r4
 8002612:	9811      	ldr	r0, [sp, #68]	; 0x44
 8002614:	2500      	movs	r5, #0
 8002616:	4621      	mov	r1, r4
 8002618:	0280      	lsls	r0, r0, #10
 800261a:	9514      	str	r5, [sp, #80]	; 0x50
 800261c:	f009 fba2 	bl	800bd64 <inv_q30_mult>
 8002620:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002622:	9015      	str	r0, [sp, #84]	; 0x54
 8002624:	4258      	negs	r0, r3
 8002626:	4621      	mov	r1, r4
 8002628:	0280      	lsls	r0, r0, #10
 800262a:	f009 fb9b 	bl	800bd64 <inv_q30_mult>
 800262e:	aa18      	add	r2, sp, #96	; 0x60
 8002630:	9016      	str	r0, [sp, #88]	; 0x58
 8002632:	497d      	ldr	r1, [pc, #500]	; (8002828 <inv_generate_accel_gyro_quaternion+0x2c0>)
 8002634:	9517      	str	r5, [sp, #92]	; 0x5c
 8002636:	a814      	add	r0, sp, #80	; 0x50
 8002638:	f009 fbc0 	bl	800bdbc <inv_q_mult>
 800263c:	487a      	ldr	r0, [pc, #488]	; (8002828 <inv_generate_accel_gyro_quaternion+0x2c0>)
 800263e:	a918      	add	r1, sp, #96	; 0x60
 8002640:	4602      	mov	r2, r0
 8002642:	f009 fc84 	bl	800bf4e <inv_q_add>
 8002646:	4878      	ldr	r0, [pc, #480]	; (8002828 <inv_generate_accel_gyro_quaternion+0x2c0>)
 8002648:	4601      	mov	r1, r0
 800264a:	f7ff fe51 	bl	80022f0 <inv_normalize_quat>
 800264e:	4669      	mov	r1, sp
 8002650:	4873      	ldr	r0, [pc, #460]	; (8002820 <inv_generate_accel_gyro_quaternion+0x2b8>)
 8002652:	f009 fcad 	bl	800bfb0 <inv_q_invert>
 8002656:	4874      	ldr	r0, [pc, #464]	; (8002828 <inv_generate_accel_gyro_quaternion+0x2c0>)
 8002658:	4669      	mov	r1, sp
 800265a:	f100 0210 	add.w	r2, r0, #16
 800265e:	f009 fbad 	bl	800bdbc <inv_q_mult>
 8002662:	2000      	movs	r0, #0
 8002664:	b01d      	add	sp, #116	; 0x74
 8002666:	ecbd 8b04 	vpop	{d8-d9}
 800266a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800266e:	edd4 7a18 	vldr	s15, [r4, #96]	; 0x60
 8002672:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8002674:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8002678:	edd4 7a17 	vldr	s15, [r4, #92]	; 0x5c
 800267c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8002680:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002684:	edd4 7a19 	vldr	s15, [r4, #100]	; 0x64
 8002688:	eea7 0a07 	vfma.f32	s0, s14, s14
 800268c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002690:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8002694:	eef1 7ac0 	vsqrt.f32	s15, s0
 8002698:	eef4 7a67 	vcmp.f32	s15, s15
 800269c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a0:	f040 82dc 	bne.w	8002c5c <inv_generate_accel_gyro_quaternion+0x6f4>
 80026a4:	ed9f 7a61 	vldr	s14, [pc, #388]	; 800282c <inv_generate_accel_gyro_quaternion+0x2c4>
 80026a8:	eef0 6ae7 	vabs.f32	s13, s15
 80026ac:	eef4 6ac7 	vcmpe.f32	s13, s14
 80026b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026b4:	ddcb      	ble.n	800264e <inv_generate_accel_gyro_quaternion+0xe6>
 80026b6:	ed94 6a17 	vldr	s12, [r4, #92]	; 0x5c
 80026ba:	edd4 6a18 	vldr	s13, [r4, #96]	; 0x60
 80026be:	ed94 0a19 	vldr	s0, [r4, #100]	; 0x64
 80026c2:	ed96 7a04 	vldr	s14, [r6, #16]
 80026c6:	ed9f 5a5a 	vldr	s10, [pc, #360]	; 8002830 <inv_generate_accel_gyro_quaternion+0x2c8>
 80026ca:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80026ce:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80026d2:	ee86 6a27 	vdiv.f32	s12, s12, s15
 80026d6:	af18      	add	r7, sp, #96	; 0x60
 80026d8:	2300      	movs	r3, #0
 80026da:	aa04      	add	r2, sp, #16
 80026dc:	4638      	mov	r0, r7
 80026de:	a914      	add	r1, sp, #80	; 0x50
 80026e0:	9314      	str	r3, [sp, #80]	; 0x50
 80026e2:	eec6 6aa7 	vdiv.f32	s13, s13, s15
 80026e6:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80026ea:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 80026ee:	eec0 7a27 	vdiv.f32	s15, s0, s15
 80026f2:	ed96 7a05 	vldr	s14, [r6, #20]
 80026f6:	ed8d 6a15 	vstr	s12, [sp, #84]	; 0x54
 80026fa:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 80026fe:	ed96 7a06 	vldr	s14, [r6, #24]
 8002702:	edcd 6a16 	vstr	s13, [sp, #88]	; 0x58
 8002706:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800270a:	ed96 7a07 	vldr	s14, [r6, #28]
 800270e:	edcd 7a17 	vstr	s15, [sp, #92]	; 0x5c
 8002712:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002716:	ee26 6a05 	vmul.f32	s12, s12, s10
 800271a:	ee66 6a85 	vmul.f32	s13, s13, s10
 800271e:	ee27 7a05 	vmul.f32	s14, s14, s10
 8002722:	ee65 5a85 	vmul.f32	s11, s11, s10
 8002726:	ed8d 6a19 	vstr	s12, [sp, #100]	; 0x64
 800272a:	edcd 6a1a 	vstr	s13, [sp, #104]	; 0x68
 800272e:	ed8d 7a1b 	vstr	s14, [sp, #108]	; 0x6c
 8002732:	edcd 5a18 	vstr	s11, [sp, #96]	; 0x60
 8002736:	f009 fc92 	bl	800c05e <inv_q_multf>
 800273a:	4638      	mov	r0, r7
 800273c:	a90c      	add	r1, sp, #48	; 0x30
 800273e:	f009 ff2d 	bl	800c59c <inv_q_invertf>
 8002742:	a804      	add	r0, sp, #16
 8002744:	a90c      	add	r1, sp, #48	; 0x30
 8002746:	aa08      	add	r2, sp, #32
 8002748:	f009 fc89 	bl	800c05e <inv_q_multf>
 800274c:	eddd 6a09 	vldr	s13, [sp, #36]	; 0x24
 8002750:	ed9d 6a0a 	vldr	s12, [sp, #40]	; 0x28
 8002754:	eddf 7a37 	vldr	s15, [pc, #220]	; 8002834 <inv_generate_accel_gyro_quaternion+0x2cc>
 8002758:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800275c:	eea6 7a06 	vfma.f32	s14, s12, s12
 8002760:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002768:	f100 821b 	bmi.w	8002ba2 <inv_generate_accel_gyro_quaternion+0x63a>
 800276c:	eddf 7a32 	vldr	s15, [pc, #200]	; 8002838 <inv_generate_accel_gyro_quaternion+0x2d0>
 8002770:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002778:	f100 825a 	bmi.w	8002c30 <inv_generate_accel_gyro_quaternion+0x6c8>
 800277c:	eddf 7a2f 	vldr	s15, [pc, #188]	; 800283c <inv_generate_accel_gyro_quaternion+0x2d4>
 8002780:	eddf 5a2f 	vldr	s11, [pc, #188]	; 8002840 <inv_generate_accel_gyro_quaternion+0x2d8>
 8002784:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800278c:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8002790:	bf48      	it	mi
 8002792:	eef0 5a67 	vmovmi.f32	s11, s15
 8002796:	ee07 5a10 	vmov	s14, r5
 800279a:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8002844 <inv_generate_accel_gyro_quaternion+0x2dc>
 800279e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80027a2:	2300      	movs	r3, #0
 80027a4:	ee87 7a27 	vdiv.f32	s14, s14, s15
 80027a8:	a810      	add	r0, sp, #64	; 0x40
 80027aa:	4639      	mov	r1, r7
 80027ac:	aa08      	add	r2, sp, #32
 80027ae:	9310      	str	r3, [sp, #64]	; 0x40
 80027b0:	9313      	str	r3, [sp, #76]	; 0x4c
 80027b2:	ee67 7a25 	vmul.f32	s15, s14, s11
 80027b6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80027ba:	ee66 7ae7 	vnmul.f32	s15, s13, s15
 80027be:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80027c2:	edcd 7a12 	vstr	s15, [sp, #72]	; 0x48
 80027c6:	f009 fc4a 	bl	800c05e <inv_q_multf>
 80027ca:	a808      	add	r0, sp, #32
 80027cc:	4602      	mov	r2, r0
 80027ce:	4639      	mov	r1, r7
 80027d0:	f009 fd10 	bl	800c1f4 <inv_q_addf>
 80027d4:	a808      	add	r0, sp, #32
 80027d6:	f009 fe5e 	bl	800c496 <inv_q_norm4>
 80027da:	eddf 5a1b 	vldr	s11, [pc, #108]	; 8002848 <inv_generate_accel_gyro_quaternion+0x2e0>
 80027de:	ed9d 6a08 	vldr	s12, [sp, #32]
 80027e2:	eddd 6a09 	vldr	s13, [sp, #36]	; 0x24
 80027e6:	ed9d 7a0a 	vldr	s14, [sp, #40]	; 0x28
 80027ea:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 80027ee:	ee26 6a25 	vmul.f32	s12, s12, s11
 80027f2:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80027f6:	ee27 7a25 	vmul.f32	s14, s14, s11
 80027fa:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80027fe:	eebd 6ac6 	vcvt.s32.f32	s12, s12
 8002802:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8002806:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800280a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800280e:	ed86 6a04 	vstr	s12, [r6, #16]
 8002812:	edc6 6a05 	vstr	s13, [r6, #20]
 8002816:	ed86 7a06 	vstr	s14, [r6, #24]
 800281a:	edc6 7a07 	vstr	s15, [r6, #28]
 800281e:	e716      	b.n	800264e <inv_generate_accel_gyro_quaternion+0xe6>
 8002820:	200004fc 	.word	0x200004fc
 8002824:	00c49ba6 	.word	0x00c49ba6
 8002828:	2000050c 	.word	0x2000050c
 800282c:	46800000 	.word	0x46800000
 8002830:	30800000 	.word	0x30800000
 8002834:	3951b717 	.word	0x3951b717
 8002838:	3c23d70a 	.word	0x3c23d70a
 800283c:	3e4ccccd 	.word	0x3e4ccccd
 8002840:	3ecccccd 	.word	0x3ecccccd
 8002844:	47cd1400 	.word	0x47cd1400
 8002848:	4e800000 	.word	0x4e800000
 800284c:	0648      	lsls	r0, r1, #25
 800284e:	f57f aea6 	bpl.w	800259e <inv_generate_accel_gyro_quaternion+0x36>
 8002852:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
 8002856:	6837      	ldr	r7, [r6, #0]
 8002858:	f8d4 512c 	ldr.w	r5, [r4, #300]	; 0x12c
 800285c:	4bdb      	ldr	r3, [pc, #876]	; (8002bcc <inv_generate_accel_gyro_quaternion+0x664>)
 800285e:	48dc      	ldr	r0, [pc, #880]	; (8002bd0 <inv_generate_accel_gyro_quaternion+0x668>)
 8002860:	fb03 f305 	mul.w	r3, r3, r5
 8002864:	1bd2      	subs	r2, r2, r7
 8002866:	429a      	cmp	r2, r3
 8002868:	bfcc      	ite	gt
 800286a:	2303      	movgt	r3, #3
 800286c:	2302      	movle	r3, #2
 800286e:	f411 7100 	ands.w	r1, r1, #512	; 0x200
 8002872:	6383      	str	r3, [r0, #56]	; 0x38
 8002874:	f040 818f 	bne.w	8002b96 <inv_generate_accel_gyro_quaternion+0x62e>
 8002878:	ad10      	add	r5, sp, #64	; 0x40
 800287a:	4fd5      	ldr	r7, [pc, #852]	; (8002bd0 <inv_generate_accel_gyro_quaternion+0x668>)
 800287c:	4628      	mov	r0, r5
 800287e:	f008 fe63 	bl	800b548 <inv_get_gyro_bias>
 8002882:	4628      	mov	r0, r5
 8002884:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8002888:	220c      	movs	r2, #12
 800288a:	f00a fc1b 	bl	800d0c4 <memcmp>
 800288e:	b928      	cbnz	r0, 800289c <inv_generate_accel_gyro_quaternion+0x334>
 8002890:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002892:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
 8002896:	429a      	cmp	r2, r3
 8002898:	f000 81d9 	beq.w	8002c4e <inv_generate_accel_gyro_quaternion+0x6e6>
 800289c:	af18      	add	r7, sp, #96	; 0x60
 800289e:	463b      	mov	r3, r7
 80028a0:	8820      	ldrh	r0, [r4, #0]
 80028a2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80028a4:	462a      	mov	r2, r5
 80028a6:	f009 fffb 	bl	800c8a0 <inv_convert_to_body_with_scale>
 80028aa:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
 80028ae:	ed9d 7a18 	vldr	s14, [sp, #96]	; 0x60
 80028b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028b6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80028ba:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80028be:	ed9d 7a1a 	vldr	s14, [sp, #104]	; 0x68
 80028c2:	eee6 7aa6 	vfma.f32	s15, s13, s13
 80028c6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80028ca:	eee7 7a07 	vfma.f32	s15, s14, s14
 80028ce:	eef1 8ae7 	vsqrt.f32	s17, s15
 80028d2:	eeb0 0a67 	vmov.f32	s0, s15
 80028d6:	eef4 8a68 	vcmp.f32	s17, s17
 80028da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028de:	f040 81d1 	bne.w	8002c84 <inv_generate_accel_gyro_quaternion+0x71c>
 80028e2:	eddf 6abc 	vldr	s13, [pc, #752]	; 8002bd4 <inv_generate_accel_gyro_quaternion+0x66c>
 80028e6:	ed9f 7abc 	vldr	s14, [pc, #752]	; 8002bd8 <inv_generate_accel_gyro_quaternion+0x670>
 80028ea:	f8d4 8128 	ldr.w	r8, [r4, #296]	; 0x128
 80028ee:	eddf 7abb 	vldr	s15, [pc, #748]	; 8002bdc <inv_generate_accel_gyro_quaternion+0x674>
 80028f2:	ed9f 8abb 	vldr	s16, [pc, #748]	; 8002be0 <inv_generate_accel_gyro_quaternion+0x678>
 80028f6:	ee68 6aa6 	vmul.f32	s13, s17, s13
 80028fa:	ee06 8a10 	vmov	s12, r8
 80028fe:	ee86 7a87 	vdiv.f32	s14, s13, s14
 8002902:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8002906:	ee27 7a27 	vmul.f32	s14, s14, s15
 800290a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800290e:	ee67 7a06 	vmul.f32	s15, s14, s12
 8002912:	eec7 7a88 	vdiv.f32	s15, s15, s16
 8002916:	ee27 8aa6 	vmul.f32	s16, s15, s13
 800291a:	eeb0 0a48 	vmov.f32	s0, s16
 800291e:	f00d fc29 	bl	8010174 <cosf>
 8002922:	eeb0 9a40 	vmov.f32	s18, s0
 8002926:	eeb0 0a48 	vmov.f32	s0, s16
 800292a:	f00d fc63 	bl	80101f4 <sinf>
 800292e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8002932:	eef4 8ae7 	vcmpe.f32	s17, s15
 8002936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800293a:	f100 8135 	bmi.w	8002ba8 <inv_generate_accel_gyro_quaternion+0x640>
 800293e:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 8002942:	ed9f 6aa8 	vldr	s12, [pc, #672]	; 8002be4 <inv_generate_accel_gyro_quaternion+0x67c>
 8002946:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800294a:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
 800294e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002952:	eddd 7a1a 	vldr	s15, [sp, #104]	; 0x68
 8002956:	ee20 0a46 	vnmul.f32	s0, s0, s12
 800295a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800295e:	ee60 6a26 	vmul.f32	s13, s0, s13
 8002962:	ee20 7a07 	vmul.f32	s14, s0, s14
 8002966:	ee20 0a27 	vmul.f32	s0, s0, s15
 800296a:	eec6 6aa8 	vdiv.f32	s13, s13, s17
 800296e:	ee87 7a28 	vdiv.f32	s14, s14, s17
 8002972:	eec0 7a28 	vdiv.f32	s15, s0, s17
 8002976:	ee29 9a06 	vmul.f32	s18, s18, s12
 800297a:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800297e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8002982:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002986:	eebd 9ac9 	vcvt.s32.f32	s18, s18
 800298a:	edc6 6a13 	vstr	s13, [r6, #76]	; 0x4c
 800298e:	ed86 7a14 	vstr	s14, [r6, #80]	; 0x50
 8002992:	edc6 7a15 	vstr	s15, [r6, #84]	; 0x54
 8002996:	ed86 9a12 	vstr	s18, [r6, #72]	; 0x48
 800299a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800299e:	4b92      	ldr	r3, [pc, #584]	; (8002be8 <inv_generate_accel_gyro_quaternion+0x680>)
 80029a0:	f8c6 8058 	str.w	r8, [r6, #88]	; 0x58
 80029a4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80029a8:	f504 7588 	add.w	r5, r4, #272	; 0x110
 80029ac:	4628      	mov	r0, r5
 80029ae:	463a      	mov	r2, r7
 80029b0:	498e      	ldr	r1, [pc, #568]	; (8002bec <inv_generate_accel_gyro_quaternion+0x684>)
 80029b2:	f009 fa03 	bl	800bdbc <inv_q_mult>
 80029b6:	aa14      	add	r2, sp, #80	; 0x50
 80029b8:	4639      	mov	r1, r7
 80029ba:	488d      	ldr	r0, [pc, #564]	; (8002bf0 <inv_generate_accel_gyro_quaternion+0x688>)
 80029bc:	f009 f9fe 	bl	800bdbc <inv_q_mult>
 80029c0:	4628      	mov	r0, r5
 80029c2:	498b      	ldr	r1, [pc, #556]	; (8002bf0 <inv_generate_accel_gyro_quaternion+0x688>)
 80029c4:	f009 faf4 	bl	800bfb0 <inv_q_invert>
 80029c8:	a914      	add	r1, sp, #80	; 0x50
 80029ca:	4881      	ldr	r0, [pc, #516]	; (8002bd0 <inv_generate_accel_gyro_quaternion+0x668>)
 80029cc:	463a      	mov	r2, r7
 80029ce:	f009 f9f5 	bl	800bdbc <inv_q_mult>
 80029d2:	4638      	mov	r0, r7
 80029d4:	497e      	ldr	r1, [pc, #504]	; (8002bd0 <inv_generate_accel_gyro_quaternion+0x668>)
 80029d6:	f7ff fc8b 	bl	80022f0 <inv_normalize_quat>
 80029da:	e5e0      	b.n	800259e <inv_generate_accel_gyro_quaternion+0x36>
 80029dc:	4620      	mov	r0, r4
 80029de:	f7ff fd07 	bl	80023f0 <inv_generate_gyro_quaternion.part.1>
 80029e2:	e5dc      	b.n	800259e <inv_generate_accel_gyro_quaternion+0x36>
 80029e4:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80029e6:	4c83      	ldr	r4, [pc, #524]	; (8002bf4 <inv_generate_accel_gyro_quaternion+0x68c>)
 80029e8:	17ca      	asrs	r2, r1, #31
 80029ea:	fb84 1401 	smull	r1, r4, r4, r1
 80029ee:	ebc2 24e4 	rsb	r4, r2, r4, asr #11
 80029f2:	2c01      	cmp	r4, #1
 80029f4:	bfb8      	it	lt
 80029f6:	2401      	movlt	r4, #1
 80029f8:	2b03      	cmp	r3, #3
 80029fa:	f47f ae06 	bne.w	800260a <inv_generate_accel_gyro_quaternion+0xa2>
 80029fe:	4b7e      	ldr	r3, [pc, #504]	; (8002bf8 <inv_generate_accel_gyro_quaternion+0x690>)
 8002a00:	fb03 f404 	mul.w	r4, r3, r4
 8002a04:	e605      	b.n	8002612 <inv_generate_accel_gyro_quaternion+0xaa>
 8002a06:	edd0 7a18 	vldr	s15, [r0, #96]	; 0x60
 8002a0a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8002a0e:	edd0 7a17 	vldr	s15, [r0, #92]	; 0x5c
 8002a12:	ee20 0a00 	vmul.f32	s0, s0, s0
 8002a16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a1a:	edd0 7a19 	vldr	s15, [r0, #100]	; 0x64
 8002a1e:	eea7 0a07 	vfma.f32	s0, s14, s14
 8002a22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a26:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8002a2a:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8002a2e:	eeb4 8a48 	vcmp.f32	s16, s16
 8002a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a36:	f040 810c 	bne.w	8002c52 <inv_generate_accel_gyro_quaternion+0x6ea>
 8002a3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002a3e:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8002a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a46:	f240 80b7 	bls.w	8002bb8 <inv_generate_accel_gyro_quaternion+0x650>
 8002a4a:	edd4 7a19 	vldr	s15, [r4, #100]	; 0x64
 8002a4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a52:	ee87 8a88 	vdiv.f32	s16, s15, s16
 8002a56:	ee37 7a48 	vsub.f32	s14, s14, s16
 8002a5a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8002a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a62:	bfc6      	itte	gt
 8002a64:	eeb6 0a00 	vmovgt.f32	s0, #96	; 0x3f000000  0.5
 8002a68:	ee27 0a00 	vmulgt.f32	s0, s14, s0
 8002a6c:	ed9f 0a63 	vldrle	s0, [pc, #396]	; 8002bfc <inv_generate_accel_gyro_quaternion+0x694>
 8002a70:	eef1 8ac0 	vsqrt.f32	s17, s0
 8002a74:	eef4 8a68 	vcmp.f32	s17, s17
 8002a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a7c:	f040 80fd 	bne.w	8002c7a <inv_generate_accel_gyro_quaternion+0x712>
 8002a80:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002a84:	ee38 8a00 	vadd.f32	s16, s16, s0
 8002a88:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8002a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a90:	bfc6      	itte	gt
 8002a92:	eeb6 0a00 	vmovgt.f32	s0, #96	; 0x3f000000  0.5
 8002a96:	ee28 0a00 	vmulgt.f32	s0, s16, s0
 8002a9a:	ed9f 0a58 	vldrle	s0, [pc, #352]	; 8002bfc <inv_generate_accel_gyro_quaternion+0x694>
 8002a9e:	eeb1 9ac0 	vsqrt.f32	s18, s0
 8002aa2:	eeb4 9a49 	vcmp.f32	s18, s18
 8002aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aaa:	f040 80e1 	bne.w	8002c70 <inv_generate_accel_gyro_quaternion+0x708>
 8002aae:	edd4 7a18 	vldr	s15, [r4, #96]	; 0x60
 8002ab2:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8002ab6:	edd4 7a17 	vldr	s15, [r4, #92]	; 0x5c
 8002aba:	ee20 0a00 	vmul.f32	s0, s0, s0
 8002abe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ac2:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8002ac6:	eeb1 7ac0 	vsqrt.f32	s14, s0
 8002aca:	eeb4 7a47 	vcmp.f32	s14, s14
 8002ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ad2:	f040 80c8 	bne.w	8002c66 <inv_generate_accel_gyro_quaternion+0x6fe>
 8002ad6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002ada:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ae2:	d969      	bls.n	8002bb8 <inv_generate_accel_gyro_quaternion+0x650>
 8002ae4:	edd4 7a18 	vldr	s15, [r4, #96]	; 0x60
 8002ae8:	ed94 6a17 	vldr	s12, [r4, #92]	; 0x5c
 8002aec:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8002be4 <inv_generate_accel_gyro_quaternion+0x67c>
 8002af0:	4e37      	ldr	r6, [pc, #220]	; (8002bd0 <inv_generate_accel_gyro_quaternion+0x668>)
 8002af2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002af6:	eeb8 0ac6 	vcvt.f32.s32	s0, s12
 8002afa:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8002afe:	2300      	movs	r3, #0
 8002b00:	61f3      	str	r3, [r6, #28]
 8002b02:	ee80 7a07 	vdiv.f32	s14, s0, s14
 8002b06:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8002b0a:	ee68 8ac7 	vnmul.f32	s17, s17, s14
 8002b0e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b12:	ee29 9a26 	vmul.f32	s18, s18, s13
 8002b16:	ee68 8aa6 	vmul.f32	s17, s17, s13
 8002b1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b1e:	eebd 9ac9 	vcvt.s32.f32	s18, s18
 8002b22:	eefd 8ae8 	vcvt.s32.f32	s17, s17
 8002b26:	edc6 7a05 	vstr	s15, [r6, #20]
 8002b2a:	ed86 9a04 	vstr	s18, [r6, #16]
 8002b2e:	edc6 8a06 	vstr	s17, [r6, #24]
 8002b32:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002b36:	05db      	lsls	r3, r3, #23
 8002b38:	d474      	bmi.n	8002c24 <inv_generate_accel_gyro_quaternion+0x6bc>
 8002b3a:	4669      	mov	r1, sp
 8002b3c:	4824      	ldr	r0, [pc, #144]	; (8002bd0 <inv_generate_accel_gyro_quaternion+0x668>)
 8002b3e:	f009 fa37 	bl	800bfb0 <inv_q_invert>
 8002b42:	482f      	ldr	r0, [pc, #188]	; (8002c00 <inv_generate_accel_gyro_quaternion+0x698>)
 8002b44:	4669      	mov	r1, sp
 8002b46:	f100 0210 	add.w	r2, r0, #16
 8002b4a:	f009 f937 	bl	800bdbc <inv_q_mult>
 8002b4e:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
 8002b52:	e51d      	b.n	8002590 <inv_generate_accel_gyro_quaternion+0x28>
 8002b54:	f500 7088 	add.w	r0, r0, #272	; 0x110
 8002b58:	f106 015c 	add.w	r1, r6, #92	; 0x5c
 8002b5c:	f009 fa28 	bl	800bfb0 <inv_q_invert>
 8002b60:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8002b62:	05df      	lsls	r7, r3, #23
 8002b64:	d467      	bmi.n	8002c36 <inv_generate_accel_gyro_quaternion+0x6ce>
 8002b66:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
 8002b6a:	e511      	b.n	8002590 <inv_generate_accel_gyro_quaternion+0x28>
 8002b6c:	a80c      	add	r0, sp, #48	; 0x30
 8002b6e:	f00a f94b 	bl	800ce08 <inv_get_linear_accel>
 8002b72:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002b74:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002b76:	990e      	ldr	r1, [sp, #56]	; 0x38
 8002b78:	fb82 2302 	smull	r2, r3, r2, r2
 8002b7c:	fbc0 2300 	smlal	r2, r3, r0, r0
 8002b80:	fbc1 2301 	smlal	r2, r3, r1, r1
 8002b84:	4590      	cmp	r8, r2
 8002b86:	eb79 0303 	sbcs.w	r3, r9, r3
 8002b8a:	f6bf ad32 	bge.w	80025f2 <inv_generate_accel_gyro_quaternion+0x8a>
 8002b8e:	2304      	movs	r3, #4
 8002b90:	63ab      	str	r3, [r5, #56]	; 0x38
 8002b92:	2400      	movs	r4, #0
 8002b94:	e53d      	b.n	8002612 <inv_generate_accel_gyro_quaternion+0xaa>
 8002b96:	f504 7088 	add.w	r0, r4, #272	; 0x110
 8002b9a:	490d      	ldr	r1, [pc, #52]	; (8002bd0 <inv_generate_accel_gyro_quaternion+0x668>)
 8002b9c:	f7ff fba8 	bl	80022f0 <inv_normalize_quat>
 8002ba0:	e4fd      	b.n	800259e <inv_generate_accel_gyro_quaternion+0x36>
 8002ba2:	eddf 5a18 	vldr	s11, [pc, #96]	; 8002c04 <inv_generate_accel_gyro_quaternion+0x69c>
 8002ba6:	e5f6      	b.n	8002796 <inv_generate_accel_gyro_quaternion+0x22e>
 8002ba8:	2300      	movs	r3, #0
 8002baa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002bae:	64b2      	str	r2, [r6, #72]	; 0x48
 8002bb0:	64f3      	str	r3, [r6, #76]	; 0x4c
 8002bb2:	6533      	str	r3, [r6, #80]	; 0x50
 8002bb4:	6573      	str	r3, [r6, #84]	; 0x54
 8002bb6:	e6f0      	b.n	800299a <inv_generate_accel_gyro_quaternion+0x432>
 8002bb8:	4e05      	ldr	r6, [pc, #20]	; (8002bd0 <inv_generate_accel_gyro_quaternion+0x668>)
 8002bba:	2300      	movs	r3, #0
 8002bbc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002bc0:	6132      	str	r2, [r6, #16]
 8002bc2:	6173      	str	r3, [r6, #20]
 8002bc4:	61b3      	str	r3, [r6, #24]
 8002bc6:	61f3      	str	r3, [r6, #28]
 8002bc8:	e7b3      	b.n	8002b32 <inv_generate_accel_gyro_quaternion+0x5ca>
 8002bca:	bf00      	nop
 8002bcc:	001c9871 	.word	0x001c9871
 8002bd0:	200004fc 	.word	0x200004fc
 8002bd4:	40490fdb 	.word	0x40490fdb
 8002bd8:	43340000 	.word	0x43340000
 8002bdc:	37800000 	.word	0x37800000
 8002be0:	49742400 	.word	0x49742400
 8002be4:	4e800000 	.word	0x4e800000
 8002be8:	20000538 	.word	0x20000538
 8002bec:	20000544 	.word	0x20000544
 8002bf0:	20000558 	.word	0x20000558
 8002bf4:	68db8bad 	.word	0x68db8bad
 8002bf8:	00c49ba6 	.word	0x00c49ba6
 8002bfc:	00000000 	.word	0x00000000
 8002c00:	2000050c 	.word	0x2000050c
 8002c04:	3bc49ba6 	.word	0x3bc49ba6
 8002c08:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002c0a:	4c21      	ldr	r4, [pc, #132]	; (8002c90 <inv_generate_accel_gyro_quaternion+0x728>)
 8002c0c:	17d3      	asrs	r3, r2, #31
 8002c0e:	fb84 2402 	smull	r2, r4, r4, r2
 8002c12:	ebc3 24e4 	rsb	r4, r3, r4, asr #11
 8002c16:	2c00      	cmp	r4, #0
 8002c18:	bfc9      	itett	gt
 8002c1a:	4b1e      	ldrgt	r3, [pc, #120]	; (8002c94 <inv_generate_accel_gyro_quaternion+0x72c>)
 8002c1c:	4c1e      	ldrle	r4, [pc, #120]	; (8002c98 <inv_generate_accel_gyro_quaternion+0x730>)
 8002c1e:	00e4      	lslgt	r4, r4, #3
 8002c20:	435c      	mulgt	r4, r3
 8002c22:	e4f6      	b.n	8002612 <inv_generate_accel_gyro_quaternion+0xaa>
 8002c24:	f504 7088 	add.w	r0, r4, #272	; 0x110
 8002c28:	491c      	ldr	r1, [pc, #112]	; (8002c9c <inv_generate_accel_gyro_quaternion+0x734>)
 8002c2a:	f009 f9c1 	bl	800bfb0 <inv_q_invert>
 8002c2e:	e784      	b.n	8002b3a <inv_generate_accel_gyro_quaternion+0x5d2>
 8002c30:	eddf 5a1b 	vldr	s11, [pc, #108]	; 8002ca0 <inv_generate_accel_gyro_quaternion+0x738>
 8002c34:	e5af      	b.n	8002796 <inv_generate_accel_gyro_quaternion+0x22e>
 8002c36:	4669      	mov	r1, sp
 8002c38:	4630      	mov	r0, r6
 8002c3a:	f009 f9b9 	bl	800bfb0 <inv_q_invert>
 8002c3e:	4669      	mov	r1, sp
 8002c40:	f106 0010 	add.w	r0, r6, #16
 8002c44:	f106 0220 	add.w	r2, r6, #32
 8002c48:	f009 f8b8 	bl	800bdbc <inv_q_mult>
 8002c4c:	e78b      	b.n	8002b66 <inv_generate_accel_gyro_quaternion+0x5fe>
 8002c4e:	af18      	add	r7, sp, #96	; 0x60
 8002c50:	e6aa      	b.n	80029a8 <inv_generate_accel_gyro_quaternion+0x440>
 8002c52:	f00d fc2f 	bl	80104b4 <sqrtf>
 8002c56:	eeb0 8a40 	vmov.f32	s16, s0
 8002c5a:	e6ee      	b.n	8002a3a <inv_generate_accel_gyro_quaternion+0x4d2>
 8002c5c:	f00d fc2a 	bl	80104b4 <sqrtf>
 8002c60:	eef0 7a40 	vmov.f32	s15, s0
 8002c64:	e51e      	b.n	80026a4 <inv_generate_accel_gyro_quaternion+0x13c>
 8002c66:	f00d fc25 	bl	80104b4 <sqrtf>
 8002c6a:	eeb0 7a40 	vmov.f32	s14, s0
 8002c6e:	e732      	b.n	8002ad6 <inv_generate_accel_gyro_quaternion+0x56e>
 8002c70:	f00d fc20 	bl	80104b4 <sqrtf>
 8002c74:	eeb0 9a40 	vmov.f32	s18, s0
 8002c78:	e719      	b.n	8002aae <inv_generate_accel_gyro_quaternion+0x546>
 8002c7a:	f00d fc1b 	bl	80104b4 <sqrtf>
 8002c7e:	eef0 8a40 	vmov.f32	s17, s0
 8002c82:	e6fd      	b.n	8002a80 <inv_generate_accel_gyro_quaternion+0x518>
 8002c84:	f00d fc16 	bl	80104b4 <sqrtf>
 8002c88:	eef0 8a40 	vmov.f32	s17, s0
 8002c8c:	e629      	b.n	80028e2 <inv_generate_accel_gyro_quaternion+0x37a>
 8002c8e:	bf00      	nop
 8002c90:	68db8bad 	.word	0x68db8bad
 8002c94:	00c49ba6 	.word	0x00c49ba6
 8002c98:	0624dd30 	.word	0x0624dd30
 8002c9c:	20000558 	.word	0x20000558
 8002ca0:	3d75c28f 	.word	0x3d75c28f

08002ca4 <inv_generate_quaternion>:
 8002ca4:	b538      	push	{r3, r4, r5, lr}
 8002ca6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002ca8:	05dc      	lsls	r4, r3, #23
 8002caa:	d402      	bmi.n	8002cb2 <inv_generate_quaternion+0xe>
 8002cac:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8002cae:	05d9      	lsls	r1, r3, #23
 8002cb0:	d50f      	bpl.n	8002cd2 <inv_generate_quaternion+0x2e>
 8002cb2:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
 8002cb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cbe:	4604      	mov	r4, r0
 8002cc0:	d011      	beq.n	8002ce6 <inv_generate_quaternion+0x42>
 8002cc2:	f7ff fc51 	bl	8002568 <inv_generate_accel_gyro_quaternion>
 8002cc6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002cc8:	480c      	ldr	r0, [pc, #48]	; (8002cfc <inv_generate_quaternion+0x58>)
 8002cca:	f009 feb7 	bl	800ca3c <inv_store_gaming_quaternion>
 8002cce:	2000      	movs	r0, #0
 8002cd0:	bd38      	pop	{r3, r4, r5, pc}
 8002cd2:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
 8002cd6:	05da      	lsls	r2, r3, #23
 8002cd8:	d5f9      	bpl.n	8002cce <inv_generate_quaternion+0x2a>
 8002cda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ce2:	4604      	mov	r4, r0
 8002ce4:	d1ed      	bne.n	8002cc2 <inv_generate_quaternion+0x1e>
 8002ce6:	4d05      	ldr	r5, [pc, #20]	; (8002cfc <inv_generate_quaternion+0x58>)
 8002ce8:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
 8002cec:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
 8002cf0:	f8d4 2118 	ldr.w	r2, [r4, #280]	; 0x118
 8002cf4:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8002cf8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cfa:	e7e4      	b.n	8002cc6 <inv_generate_quaternion+0x22>
 8002cfc:	2000050c 	.word	0x2000050c

08002d00 <inv_stop_quaternion>:
 8002d00:	4801      	ldr	r0, [pc, #4]	; (8002d08 <inv_stop_quaternion+0x8>)
 8002d02:	f008 bd0f 	b.w	800b724 <inv_unregister_data_cb>
 8002d06:	bf00      	nop
 8002d08:	08002ca5 	.word	0x08002ca5

08002d0c <inv_init_quaternion>:
 8002d0c:	b510      	push	{r4, lr}
 8002d0e:	4c07      	ldr	r4, [pc, #28]	; (8002d2c <inv_init_quaternion+0x20>)
 8002d10:	2100      	movs	r1, #0
 8002d12:	4620      	mov	r0, r4
 8002d14:	226c      	movs	r2, #108	; 0x6c
 8002d16:	f00a fa0b 	bl	800d130 <memset>
 8002d1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d1e:	6123      	str	r3, [r4, #16]
 8002d20:	6023      	str	r3, [r4, #0]
 8002d22:	6223      	str	r3, [r4, #32]
 8002d24:	63e3      	str	r3, [r4, #60]	; 0x3c
 8002d26:	65e3      	str	r3, [r4, #92]	; 0x5c
 8002d28:	2000      	movs	r0, #0
 8002d2a:	bd10      	pop	{r4, pc}
 8002d2c:	200004fc 	.word	0x200004fc

08002d30 <inv_enable_quaternion>:
 8002d30:	b508      	push	{r3, lr}
 8002d32:	f7ff ffeb 	bl	8002d0c <inv_init_quaternion>
 8002d36:	b100      	cbz	r0, 8002d3a <inv_enable_quaternion+0xa>
 8002d38:	bd08      	pop	{r3, pc}
 8002d3a:	4802      	ldr	r0, [pc, #8]	; (8002d44 <inv_enable_quaternion+0x14>)
 8002d3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002d40:	f00a b8e0 	b.w	800cf04 <inv_register_mpl_start_notification>
 8002d44:	080023c1 	.word	0x080023c1

08002d48 <inv_disable_quaternion>:
 8002d48:	b508      	push	{r3, lr}
 8002d4a:	4804      	ldr	r0, [pc, #16]	; (8002d5c <inv_disable_quaternion+0x14>)
 8002d4c:	f008 fcea 	bl	800b724 <inv_unregister_data_cb>
 8002d50:	4803      	ldr	r0, [pc, #12]	; (8002d60 <inv_disable_quaternion+0x18>)
 8002d52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002d56:	f00a b895 	b.w	800ce84 <inv_unregister_mpl_start_notification>
 8002d5a:	bf00      	nop
 8002d5c:	08002ca5 	.word	0x08002ca5
 8002d60:	080023c1 	.word	0x080023c1
 8002d64:	f3af 8000 	nop.w

08002d68 <strlen>:
 8002d68:	4603      	mov	r3, r0
 8002d6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002d6e:	2a00      	cmp	r2, #0
 8002d70:	d1fb      	bne.n	8002d6a <strlen+0x2>
 8002d72:	1a18      	subs	r0, r3, r0
 8002d74:	3801      	subs	r0, #1
 8002d76:	4770      	bx	lr
	...

08002d80 <memchr>:
 8002d80:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8002d84:	2a10      	cmp	r2, #16
 8002d86:	db2b      	blt.n	8002de0 <memchr+0x60>
 8002d88:	f010 0f07 	tst.w	r0, #7
 8002d8c:	d008      	beq.n	8002da0 <memchr+0x20>
 8002d8e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002d92:	3a01      	subs	r2, #1
 8002d94:	428b      	cmp	r3, r1
 8002d96:	d02d      	beq.n	8002df4 <memchr+0x74>
 8002d98:	f010 0f07 	tst.w	r0, #7
 8002d9c:	b342      	cbz	r2, 8002df0 <memchr+0x70>
 8002d9e:	d1f6      	bne.n	8002d8e <memchr+0xe>
 8002da0:	b4f0      	push	{r4, r5, r6, r7}
 8002da2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8002da6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8002daa:	f022 0407 	bic.w	r4, r2, #7
 8002dae:	f07f 0700 	mvns.w	r7, #0
 8002db2:	2300      	movs	r3, #0
 8002db4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8002db8:	3c08      	subs	r4, #8
 8002dba:	ea85 0501 	eor.w	r5, r5, r1
 8002dbe:	ea86 0601 	eor.w	r6, r6, r1
 8002dc2:	fa85 f547 	uadd8	r5, r5, r7
 8002dc6:	faa3 f587 	sel	r5, r3, r7
 8002dca:	fa86 f647 	uadd8	r6, r6, r7
 8002dce:	faa5 f687 	sel	r6, r5, r7
 8002dd2:	b98e      	cbnz	r6, 8002df8 <memchr+0x78>
 8002dd4:	d1ee      	bne.n	8002db4 <memchr+0x34>
 8002dd6:	bcf0      	pop	{r4, r5, r6, r7}
 8002dd8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8002ddc:	f002 0207 	and.w	r2, r2, #7
 8002de0:	b132      	cbz	r2, 8002df0 <memchr+0x70>
 8002de2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002de6:	3a01      	subs	r2, #1
 8002de8:	ea83 0301 	eor.w	r3, r3, r1
 8002dec:	b113      	cbz	r3, 8002df4 <memchr+0x74>
 8002dee:	d1f8      	bne.n	8002de2 <memchr+0x62>
 8002df0:	2000      	movs	r0, #0
 8002df2:	4770      	bx	lr
 8002df4:	3801      	subs	r0, #1
 8002df6:	4770      	bx	lr
 8002df8:	2d00      	cmp	r5, #0
 8002dfa:	bf06      	itte	eq
 8002dfc:	4635      	moveq	r5, r6
 8002dfe:	3803      	subeq	r0, #3
 8002e00:	3807      	subne	r0, #7
 8002e02:	f015 0f01 	tst.w	r5, #1
 8002e06:	d107      	bne.n	8002e18 <memchr+0x98>
 8002e08:	3001      	adds	r0, #1
 8002e0a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8002e0e:	bf02      	ittt	eq
 8002e10:	3001      	addeq	r0, #1
 8002e12:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8002e16:	3001      	addeq	r0, #1
 8002e18:	bcf0      	pop	{r4, r5, r6, r7}
 8002e1a:	3801      	subs	r0, #1
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop

08002e20 <__aeabi_drsub>:
 8002e20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8002e24:	e002      	b.n	8002e2c <__adddf3>
 8002e26:	bf00      	nop

08002e28 <__aeabi_dsub>:
 8002e28:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08002e2c <__adddf3>:
 8002e2c:	b530      	push	{r4, r5, lr}
 8002e2e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8002e32:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8002e36:	ea94 0f05 	teq	r4, r5
 8002e3a:	bf08      	it	eq
 8002e3c:	ea90 0f02 	teqeq	r0, r2
 8002e40:	bf1f      	itttt	ne
 8002e42:	ea54 0c00 	orrsne.w	ip, r4, r0
 8002e46:	ea55 0c02 	orrsne.w	ip, r5, r2
 8002e4a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8002e4e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8002e52:	f000 80e2 	beq.w	800301a <__adddf3+0x1ee>
 8002e56:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8002e5a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8002e5e:	bfb8      	it	lt
 8002e60:	426d      	neglt	r5, r5
 8002e62:	dd0c      	ble.n	8002e7e <__adddf3+0x52>
 8002e64:	442c      	add	r4, r5
 8002e66:	ea80 0202 	eor.w	r2, r0, r2
 8002e6a:	ea81 0303 	eor.w	r3, r1, r3
 8002e6e:	ea82 0000 	eor.w	r0, r2, r0
 8002e72:	ea83 0101 	eor.w	r1, r3, r1
 8002e76:	ea80 0202 	eor.w	r2, r0, r2
 8002e7a:	ea81 0303 	eor.w	r3, r1, r3
 8002e7e:	2d36      	cmp	r5, #54	; 0x36
 8002e80:	bf88      	it	hi
 8002e82:	bd30      	pophi	{r4, r5, pc}
 8002e84:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8002e88:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8002e8c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8002e90:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8002e94:	d002      	beq.n	8002e9c <__adddf3+0x70>
 8002e96:	4240      	negs	r0, r0
 8002e98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8002e9c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8002ea0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8002ea4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8002ea8:	d002      	beq.n	8002eb0 <__adddf3+0x84>
 8002eaa:	4252      	negs	r2, r2
 8002eac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8002eb0:	ea94 0f05 	teq	r4, r5
 8002eb4:	f000 80a7 	beq.w	8003006 <__adddf3+0x1da>
 8002eb8:	f1a4 0401 	sub.w	r4, r4, #1
 8002ebc:	f1d5 0e20 	rsbs	lr, r5, #32
 8002ec0:	db0d      	blt.n	8002ede <__adddf3+0xb2>
 8002ec2:	fa02 fc0e 	lsl.w	ip, r2, lr
 8002ec6:	fa22 f205 	lsr.w	r2, r2, r5
 8002eca:	1880      	adds	r0, r0, r2
 8002ecc:	f141 0100 	adc.w	r1, r1, #0
 8002ed0:	fa03 f20e 	lsl.w	r2, r3, lr
 8002ed4:	1880      	adds	r0, r0, r2
 8002ed6:	fa43 f305 	asr.w	r3, r3, r5
 8002eda:	4159      	adcs	r1, r3
 8002edc:	e00e      	b.n	8002efc <__adddf3+0xd0>
 8002ede:	f1a5 0520 	sub.w	r5, r5, #32
 8002ee2:	f10e 0e20 	add.w	lr, lr, #32
 8002ee6:	2a01      	cmp	r2, #1
 8002ee8:	fa03 fc0e 	lsl.w	ip, r3, lr
 8002eec:	bf28      	it	cs
 8002eee:	f04c 0c02 	orrcs.w	ip, ip, #2
 8002ef2:	fa43 f305 	asr.w	r3, r3, r5
 8002ef6:	18c0      	adds	r0, r0, r3
 8002ef8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8002efc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8002f00:	d507      	bpl.n	8002f12 <__adddf3+0xe6>
 8002f02:	f04f 0e00 	mov.w	lr, #0
 8002f06:	f1dc 0c00 	rsbs	ip, ip, #0
 8002f0a:	eb7e 0000 	sbcs.w	r0, lr, r0
 8002f0e:	eb6e 0101 	sbc.w	r1, lr, r1
 8002f12:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8002f16:	d31b      	bcc.n	8002f50 <__adddf3+0x124>
 8002f18:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8002f1c:	d30c      	bcc.n	8002f38 <__adddf3+0x10c>
 8002f1e:	0849      	lsrs	r1, r1, #1
 8002f20:	ea5f 0030 	movs.w	r0, r0, rrx
 8002f24:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8002f28:	f104 0401 	add.w	r4, r4, #1
 8002f2c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8002f30:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8002f34:	f080 809a 	bcs.w	800306c <__adddf3+0x240>
 8002f38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8002f3c:	bf08      	it	eq
 8002f3e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8002f42:	f150 0000 	adcs.w	r0, r0, #0
 8002f46:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8002f4a:	ea41 0105 	orr.w	r1, r1, r5
 8002f4e:	bd30      	pop	{r4, r5, pc}
 8002f50:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8002f54:	4140      	adcs	r0, r0
 8002f56:	eb41 0101 	adc.w	r1, r1, r1
 8002f5a:	3c01      	subs	r4, #1
 8002f5c:	bf28      	it	cs
 8002f5e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8002f62:	d2e9      	bcs.n	8002f38 <__adddf3+0x10c>
 8002f64:	f091 0f00 	teq	r1, #0
 8002f68:	bf04      	itt	eq
 8002f6a:	4601      	moveq	r1, r0
 8002f6c:	2000      	moveq	r0, #0
 8002f6e:	fab1 f381 	clz	r3, r1
 8002f72:	bf08      	it	eq
 8002f74:	3320      	addeq	r3, #32
 8002f76:	f1a3 030b 	sub.w	r3, r3, #11
 8002f7a:	f1b3 0220 	subs.w	r2, r3, #32
 8002f7e:	da0c      	bge.n	8002f9a <__adddf3+0x16e>
 8002f80:	320c      	adds	r2, #12
 8002f82:	dd08      	ble.n	8002f96 <__adddf3+0x16a>
 8002f84:	f102 0c14 	add.w	ip, r2, #20
 8002f88:	f1c2 020c 	rsb	r2, r2, #12
 8002f8c:	fa01 f00c 	lsl.w	r0, r1, ip
 8002f90:	fa21 f102 	lsr.w	r1, r1, r2
 8002f94:	e00c      	b.n	8002fb0 <__adddf3+0x184>
 8002f96:	f102 0214 	add.w	r2, r2, #20
 8002f9a:	bfd8      	it	le
 8002f9c:	f1c2 0c20 	rsble	ip, r2, #32
 8002fa0:	fa01 f102 	lsl.w	r1, r1, r2
 8002fa4:	fa20 fc0c 	lsr.w	ip, r0, ip
 8002fa8:	bfdc      	itt	le
 8002faa:	ea41 010c 	orrle.w	r1, r1, ip
 8002fae:	4090      	lslle	r0, r2
 8002fb0:	1ae4      	subs	r4, r4, r3
 8002fb2:	bfa2      	ittt	ge
 8002fb4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8002fb8:	4329      	orrge	r1, r5
 8002fba:	bd30      	popge	{r4, r5, pc}
 8002fbc:	ea6f 0404 	mvn.w	r4, r4
 8002fc0:	3c1f      	subs	r4, #31
 8002fc2:	da1c      	bge.n	8002ffe <__adddf3+0x1d2>
 8002fc4:	340c      	adds	r4, #12
 8002fc6:	dc0e      	bgt.n	8002fe6 <__adddf3+0x1ba>
 8002fc8:	f104 0414 	add.w	r4, r4, #20
 8002fcc:	f1c4 0220 	rsb	r2, r4, #32
 8002fd0:	fa20 f004 	lsr.w	r0, r0, r4
 8002fd4:	fa01 f302 	lsl.w	r3, r1, r2
 8002fd8:	ea40 0003 	orr.w	r0, r0, r3
 8002fdc:	fa21 f304 	lsr.w	r3, r1, r4
 8002fe0:	ea45 0103 	orr.w	r1, r5, r3
 8002fe4:	bd30      	pop	{r4, r5, pc}
 8002fe6:	f1c4 040c 	rsb	r4, r4, #12
 8002fea:	f1c4 0220 	rsb	r2, r4, #32
 8002fee:	fa20 f002 	lsr.w	r0, r0, r2
 8002ff2:	fa01 f304 	lsl.w	r3, r1, r4
 8002ff6:	ea40 0003 	orr.w	r0, r0, r3
 8002ffa:	4629      	mov	r1, r5
 8002ffc:	bd30      	pop	{r4, r5, pc}
 8002ffe:	fa21 f004 	lsr.w	r0, r1, r4
 8003002:	4629      	mov	r1, r5
 8003004:	bd30      	pop	{r4, r5, pc}
 8003006:	f094 0f00 	teq	r4, #0
 800300a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800300e:	bf06      	itte	eq
 8003010:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8003014:	3401      	addeq	r4, #1
 8003016:	3d01      	subne	r5, #1
 8003018:	e74e      	b.n	8002eb8 <__adddf3+0x8c>
 800301a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800301e:	bf18      	it	ne
 8003020:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8003024:	d029      	beq.n	800307a <__adddf3+0x24e>
 8003026:	ea94 0f05 	teq	r4, r5
 800302a:	bf08      	it	eq
 800302c:	ea90 0f02 	teqeq	r0, r2
 8003030:	d005      	beq.n	800303e <__adddf3+0x212>
 8003032:	ea54 0c00 	orrs.w	ip, r4, r0
 8003036:	bf04      	itt	eq
 8003038:	4619      	moveq	r1, r3
 800303a:	4610      	moveq	r0, r2
 800303c:	bd30      	pop	{r4, r5, pc}
 800303e:	ea91 0f03 	teq	r1, r3
 8003042:	bf1e      	ittt	ne
 8003044:	2100      	movne	r1, #0
 8003046:	2000      	movne	r0, #0
 8003048:	bd30      	popne	{r4, r5, pc}
 800304a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800304e:	d105      	bne.n	800305c <__adddf3+0x230>
 8003050:	0040      	lsls	r0, r0, #1
 8003052:	4149      	adcs	r1, r1
 8003054:	bf28      	it	cs
 8003056:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800305a:	bd30      	pop	{r4, r5, pc}
 800305c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8003060:	bf3c      	itt	cc
 8003062:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8003066:	bd30      	popcc	{r4, r5, pc}
 8003068:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800306c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8003070:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003074:	f04f 0000 	mov.w	r0, #0
 8003078:	bd30      	pop	{r4, r5, pc}
 800307a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800307e:	bf1a      	itte	ne
 8003080:	4619      	movne	r1, r3
 8003082:	4610      	movne	r0, r2
 8003084:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8003088:	bf1c      	itt	ne
 800308a:	460b      	movne	r3, r1
 800308c:	4602      	movne	r2, r0
 800308e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8003092:	bf06      	itte	eq
 8003094:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8003098:	ea91 0f03 	teqeq	r1, r3
 800309c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80030a0:	bd30      	pop	{r4, r5, pc}
 80030a2:	bf00      	nop

080030a4 <__aeabi_ui2d>:
 80030a4:	f090 0f00 	teq	r0, #0
 80030a8:	bf04      	itt	eq
 80030aa:	2100      	moveq	r1, #0
 80030ac:	4770      	bxeq	lr
 80030ae:	b530      	push	{r4, r5, lr}
 80030b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80030b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80030b8:	f04f 0500 	mov.w	r5, #0
 80030bc:	f04f 0100 	mov.w	r1, #0
 80030c0:	e750      	b.n	8002f64 <__adddf3+0x138>
 80030c2:	bf00      	nop

080030c4 <__aeabi_i2d>:
 80030c4:	f090 0f00 	teq	r0, #0
 80030c8:	bf04      	itt	eq
 80030ca:	2100      	moveq	r1, #0
 80030cc:	4770      	bxeq	lr
 80030ce:	b530      	push	{r4, r5, lr}
 80030d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80030d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80030d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80030dc:	bf48      	it	mi
 80030de:	4240      	negmi	r0, r0
 80030e0:	f04f 0100 	mov.w	r1, #0
 80030e4:	e73e      	b.n	8002f64 <__adddf3+0x138>
 80030e6:	bf00      	nop

080030e8 <__aeabi_f2d>:
 80030e8:	0042      	lsls	r2, r0, #1
 80030ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80030ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80030f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80030f6:	bf1f      	itttt	ne
 80030f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80030fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8003100:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8003104:	4770      	bxne	lr
 8003106:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800310a:	bf08      	it	eq
 800310c:	4770      	bxeq	lr
 800310e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8003112:	bf04      	itt	eq
 8003114:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8003118:	4770      	bxeq	lr
 800311a:	b530      	push	{r4, r5, lr}
 800311c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8003120:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003124:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003128:	e71c      	b.n	8002f64 <__adddf3+0x138>
 800312a:	bf00      	nop

0800312c <__aeabi_ul2d>:
 800312c:	ea50 0201 	orrs.w	r2, r0, r1
 8003130:	bf08      	it	eq
 8003132:	4770      	bxeq	lr
 8003134:	b530      	push	{r4, r5, lr}
 8003136:	f04f 0500 	mov.w	r5, #0
 800313a:	e00a      	b.n	8003152 <__aeabi_l2d+0x16>

0800313c <__aeabi_l2d>:
 800313c:	ea50 0201 	orrs.w	r2, r0, r1
 8003140:	bf08      	it	eq
 8003142:	4770      	bxeq	lr
 8003144:	b530      	push	{r4, r5, lr}
 8003146:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800314a:	d502      	bpl.n	8003152 <__aeabi_l2d+0x16>
 800314c:	4240      	negs	r0, r0
 800314e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003152:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003156:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800315a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800315e:	f43f aed8 	beq.w	8002f12 <__adddf3+0xe6>
 8003162:	f04f 0203 	mov.w	r2, #3
 8003166:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800316a:	bf18      	it	ne
 800316c:	3203      	addne	r2, #3
 800316e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8003172:	bf18      	it	ne
 8003174:	3203      	addne	r2, #3
 8003176:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800317a:	f1c2 0320 	rsb	r3, r2, #32
 800317e:	fa00 fc03 	lsl.w	ip, r0, r3
 8003182:	fa20 f002 	lsr.w	r0, r0, r2
 8003186:	fa01 fe03 	lsl.w	lr, r1, r3
 800318a:	ea40 000e 	orr.w	r0, r0, lr
 800318e:	fa21 f102 	lsr.w	r1, r1, r2
 8003192:	4414      	add	r4, r2
 8003194:	e6bd      	b.n	8002f12 <__adddf3+0xe6>
 8003196:	bf00      	nop

08003198 <__aeabi_dmul>:
 8003198:	b570      	push	{r4, r5, r6, lr}
 800319a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800319e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80031a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80031a6:	bf1d      	ittte	ne
 80031a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80031ac:	ea94 0f0c 	teqne	r4, ip
 80031b0:	ea95 0f0c 	teqne	r5, ip
 80031b4:	f000 f8de 	bleq	8003374 <__aeabi_dmul+0x1dc>
 80031b8:	442c      	add	r4, r5
 80031ba:	ea81 0603 	eor.w	r6, r1, r3
 80031be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80031c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80031c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80031ca:	bf18      	it	ne
 80031cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80031d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80031d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031d8:	d038      	beq.n	800324c <__aeabi_dmul+0xb4>
 80031da:	fba0 ce02 	umull	ip, lr, r0, r2
 80031de:	f04f 0500 	mov.w	r5, #0
 80031e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80031e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80031ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80031ee:	f04f 0600 	mov.w	r6, #0
 80031f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80031f6:	f09c 0f00 	teq	ip, #0
 80031fa:	bf18      	it	ne
 80031fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8003200:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8003204:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8003208:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800320c:	d204      	bcs.n	8003218 <__aeabi_dmul+0x80>
 800320e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8003212:	416d      	adcs	r5, r5
 8003214:	eb46 0606 	adc.w	r6, r6, r6
 8003218:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800321c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8003220:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8003224:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8003228:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800322c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8003230:	bf88      	it	hi
 8003232:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8003236:	d81e      	bhi.n	8003276 <__aeabi_dmul+0xde>
 8003238:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800323c:	bf08      	it	eq
 800323e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8003242:	f150 0000 	adcs.w	r0, r0, #0
 8003246:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800324a:	bd70      	pop	{r4, r5, r6, pc}
 800324c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8003250:	ea46 0101 	orr.w	r1, r6, r1
 8003254:	ea40 0002 	orr.w	r0, r0, r2
 8003258:	ea81 0103 	eor.w	r1, r1, r3
 800325c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8003260:	bfc2      	ittt	gt
 8003262:	ebd4 050c 	rsbsgt	r5, r4, ip
 8003266:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800326a:	bd70      	popgt	{r4, r5, r6, pc}
 800326c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003270:	f04f 0e00 	mov.w	lr, #0
 8003274:	3c01      	subs	r4, #1
 8003276:	f300 80ab 	bgt.w	80033d0 <__aeabi_dmul+0x238>
 800327a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800327e:	bfde      	ittt	le
 8003280:	2000      	movle	r0, #0
 8003282:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8003286:	bd70      	pople	{r4, r5, r6, pc}
 8003288:	f1c4 0400 	rsb	r4, r4, #0
 800328c:	3c20      	subs	r4, #32
 800328e:	da35      	bge.n	80032fc <__aeabi_dmul+0x164>
 8003290:	340c      	adds	r4, #12
 8003292:	dc1b      	bgt.n	80032cc <__aeabi_dmul+0x134>
 8003294:	f104 0414 	add.w	r4, r4, #20
 8003298:	f1c4 0520 	rsb	r5, r4, #32
 800329c:	fa00 f305 	lsl.w	r3, r0, r5
 80032a0:	fa20 f004 	lsr.w	r0, r0, r4
 80032a4:	fa01 f205 	lsl.w	r2, r1, r5
 80032a8:	ea40 0002 	orr.w	r0, r0, r2
 80032ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80032b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80032b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80032b8:	fa21 f604 	lsr.w	r6, r1, r4
 80032bc:	eb42 0106 	adc.w	r1, r2, r6
 80032c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80032c4:	bf08      	it	eq
 80032c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80032ca:	bd70      	pop	{r4, r5, r6, pc}
 80032cc:	f1c4 040c 	rsb	r4, r4, #12
 80032d0:	f1c4 0520 	rsb	r5, r4, #32
 80032d4:	fa00 f304 	lsl.w	r3, r0, r4
 80032d8:	fa20 f005 	lsr.w	r0, r0, r5
 80032dc:	fa01 f204 	lsl.w	r2, r1, r4
 80032e0:	ea40 0002 	orr.w	r0, r0, r2
 80032e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80032e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80032ec:	f141 0100 	adc.w	r1, r1, #0
 80032f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80032f4:	bf08      	it	eq
 80032f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80032fa:	bd70      	pop	{r4, r5, r6, pc}
 80032fc:	f1c4 0520 	rsb	r5, r4, #32
 8003300:	fa00 f205 	lsl.w	r2, r0, r5
 8003304:	ea4e 0e02 	orr.w	lr, lr, r2
 8003308:	fa20 f304 	lsr.w	r3, r0, r4
 800330c:	fa01 f205 	lsl.w	r2, r1, r5
 8003310:	ea43 0302 	orr.w	r3, r3, r2
 8003314:	fa21 f004 	lsr.w	r0, r1, r4
 8003318:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800331c:	fa21 f204 	lsr.w	r2, r1, r4
 8003320:	ea20 0002 	bic.w	r0, r0, r2
 8003324:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8003328:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800332c:	bf08      	it	eq
 800332e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8003332:	bd70      	pop	{r4, r5, r6, pc}
 8003334:	f094 0f00 	teq	r4, #0
 8003338:	d10f      	bne.n	800335a <__aeabi_dmul+0x1c2>
 800333a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800333e:	0040      	lsls	r0, r0, #1
 8003340:	eb41 0101 	adc.w	r1, r1, r1
 8003344:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003348:	bf08      	it	eq
 800334a:	3c01      	subeq	r4, #1
 800334c:	d0f7      	beq.n	800333e <__aeabi_dmul+0x1a6>
 800334e:	ea41 0106 	orr.w	r1, r1, r6
 8003352:	f095 0f00 	teq	r5, #0
 8003356:	bf18      	it	ne
 8003358:	4770      	bxne	lr
 800335a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800335e:	0052      	lsls	r2, r2, #1
 8003360:	eb43 0303 	adc.w	r3, r3, r3
 8003364:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003368:	bf08      	it	eq
 800336a:	3d01      	subeq	r5, #1
 800336c:	d0f7      	beq.n	800335e <__aeabi_dmul+0x1c6>
 800336e:	ea43 0306 	orr.w	r3, r3, r6
 8003372:	4770      	bx	lr
 8003374:	ea94 0f0c 	teq	r4, ip
 8003378:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800337c:	bf18      	it	ne
 800337e:	ea95 0f0c 	teqne	r5, ip
 8003382:	d00c      	beq.n	800339e <__aeabi_dmul+0x206>
 8003384:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8003388:	bf18      	it	ne
 800338a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800338e:	d1d1      	bne.n	8003334 <__aeabi_dmul+0x19c>
 8003390:	ea81 0103 	eor.w	r1, r1, r3
 8003394:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003398:	f04f 0000 	mov.w	r0, #0
 800339c:	bd70      	pop	{r4, r5, r6, pc}
 800339e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80033a2:	bf06      	itte	eq
 80033a4:	4610      	moveq	r0, r2
 80033a6:	4619      	moveq	r1, r3
 80033a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80033ac:	d019      	beq.n	80033e2 <__aeabi_dmul+0x24a>
 80033ae:	ea94 0f0c 	teq	r4, ip
 80033b2:	d102      	bne.n	80033ba <__aeabi_dmul+0x222>
 80033b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80033b8:	d113      	bne.n	80033e2 <__aeabi_dmul+0x24a>
 80033ba:	ea95 0f0c 	teq	r5, ip
 80033be:	d105      	bne.n	80033cc <__aeabi_dmul+0x234>
 80033c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80033c4:	bf1c      	itt	ne
 80033c6:	4610      	movne	r0, r2
 80033c8:	4619      	movne	r1, r3
 80033ca:	d10a      	bne.n	80033e2 <__aeabi_dmul+0x24a>
 80033cc:	ea81 0103 	eor.w	r1, r1, r3
 80033d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80033d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80033d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80033dc:	f04f 0000 	mov.w	r0, #0
 80033e0:	bd70      	pop	{r4, r5, r6, pc}
 80033e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80033e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80033ea:	bd70      	pop	{r4, r5, r6, pc}

080033ec <__aeabi_ddiv>:
 80033ec:	b570      	push	{r4, r5, r6, lr}
 80033ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80033f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80033f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80033fa:	bf1d      	ittte	ne
 80033fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8003400:	ea94 0f0c 	teqne	r4, ip
 8003404:	ea95 0f0c 	teqne	r5, ip
 8003408:	f000 f8a7 	bleq	800355a <__aeabi_ddiv+0x16e>
 800340c:	eba4 0405 	sub.w	r4, r4, r5
 8003410:	ea81 0e03 	eor.w	lr, r1, r3
 8003414:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8003418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800341c:	f000 8088 	beq.w	8003530 <__aeabi_ddiv+0x144>
 8003420:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8003424:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8003428:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800342c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8003430:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8003434:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8003438:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800343c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8003440:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8003444:	429d      	cmp	r5, r3
 8003446:	bf08      	it	eq
 8003448:	4296      	cmpeq	r6, r2
 800344a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800344e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8003452:	d202      	bcs.n	800345a <__aeabi_ddiv+0x6e>
 8003454:	085b      	lsrs	r3, r3, #1
 8003456:	ea4f 0232 	mov.w	r2, r2, rrx
 800345a:	1ab6      	subs	r6, r6, r2
 800345c:	eb65 0503 	sbc.w	r5, r5, r3
 8003460:	085b      	lsrs	r3, r3, #1
 8003462:	ea4f 0232 	mov.w	r2, r2, rrx
 8003466:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800346a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800346e:	ebb6 0e02 	subs.w	lr, r6, r2
 8003472:	eb75 0e03 	sbcs.w	lr, r5, r3
 8003476:	bf22      	ittt	cs
 8003478:	1ab6      	subcs	r6, r6, r2
 800347a:	4675      	movcs	r5, lr
 800347c:	ea40 000c 	orrcs.w	r0, r0, ip
 8003480:	085b      	lsrs	r3, r3, #1
 8003482:	ea4f 0232 	mov.w	r2, r2, rrx
 8003486:	ebb6 0e02 	subs.w	lr, r6, r2
 800348a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800348e:	bf22      	ittt	cs
 8003490:	1ab6      	subcs	r6, r6, r2
 8003492:	4675      	movcs	r5, lr
 8003494:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8003498:	085b      	lsrs	r3, r3, #1
 800349a:	ea4f 0232 	mov.w	r2, r2, rrx
 800349e:	ebb6 0e02 	subs.w	lr, r6, r2
 80034a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80034a6:	bf22      	ittt	cs
 80034a8:	1ab6      	subcs	r6, r6, r2
 80034aa:	4675      	movcs	r5, lr
 80034ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80034b0:	085b      	lsrs	r3, r3, #1
 80034b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80034b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80034ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80034be:	bf22      	ittt	cs
 80034c0:	1ab6      	subcs	r6, r6, r2
 80034c2:	4675      	movcs	r5, lr
 80034c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80034c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80034cc:	d018      	beq.n	8003500 <__aeabi_ddiv+0x114>
 80034ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80034d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80034d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80034da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80034de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80034e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80034e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80034ea:	d1c0      	bne.n	800346e <__aeabi_ddiv+0x82>
 80034ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80034f0:	d10b      	bne.n	800350a <__aeabi_ddiv+0x11e>
 80034f2:	ea41 0100 	orr.w	r1, r1, r0
 80034f6:	f04f 0000 	mov.w	r0, #0
 80034fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80034fe:	e7b6      	b.n	800346e <__aeabi_ddiv+0x82>
 8003500:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003504:	bf04      	itt	eq
 8003506:	4301      	orreq	r1, r0
 8003508:	2000      	moveq	r0, #0
 800350a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800350e:	bf88      	it	hi
 8003510:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8003514:	f63f aeaf 	bhi.w	8003276 <__aeabi_dmul+0xde>
 8003518:	ebb5 0c03 	subs.w	ip, r5, r3
 800351c:	bf04      	itt	eq
 800351e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8003522:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8003526:	f150 0000 	adcs.w	r0, r0, #0
 800352a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800352e:	bd70      	pop	{r4, r5, r6, pc}
 8003530:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8003534:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8003538:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800353c:	bfc2      	ittt	gt
 800353e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8003542:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8003546:	bd70      	popgt	{r4, r5, r6, pc}
 8003548:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800354c:	f04f 0e00 	mov.w	lr, #0
 8003550:	3c01      	subs	r4, #1
 8003552:	e690      	b.n	8003276 <__aeabi_dmul+0xde>
 8003554:	ea45 0e06 	orr.w	lr, r5, r6
 8003558:	e68d      	b.n	8003276 <__aeabi_dmul+0xde>
 800355a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800355e:	ea94 0f0c 	teq	r4, ip
 8003562:	bf08      	it	eq
 8003564:	ea95 0f0c 	teqeq	r5, ip
 8003568:	f43f af3b 	beq.w	80033e2 <__aeabi_dmul+0x24a>
 800356c:	ea94 0f0c 	teq	r4, ip
 8003570:	d10a      	bne.n	8003588 <__aeabi_ddiv+0x19c>
 8003572:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8003576:	f47f af34 	bne.w	80033e2 <__aeabi_dmul+0x24a>
 800357a:	ea95 0f0c 	teq	r5, ip
 800357e:	f47f af25 	bne.w	80033cc <__aeabi_dmul+0x234>
 8003582:	4610      	mov	r0, r2
 8003584:	4619      	mov	r1, r3
 8003586:	e72c      	b.n	80033e2 <__aeabi_dmul+0x24a>
 8003588:	ea95 0f0c 	teq	r5, ip
 800358c:	d106      	bne.n	800359c <__aeabi_ddiv+0x1b0>
 800358e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8003592:	f43f aefd 	beq.w	8003390 <__aeabi_dmul+0x1f8>
 8003596:	4610      	mov	r0, r2
 8003598:	4619      	mov	r1, r3
 800359a:	e722      	b.n	80033e2 <__aeabi_dmul+0x24a>
 800359c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80035a0:	bf18      	it	ne
 80035a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80035a6:	f47f aec5 	bne.w	8003334 <__aeabi_dmul+0x19c>
 80035aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80035ae:	f47f af0d 	bne.w	80033cc <__aeabi_dmul+0x234>
 80035b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80035b6:	f47f aeeb 	bne.w	8003390 <__aeabi_dmul+0x1f8>
 80035ba:	e712      	b.n	80033e2 <__aeabi_dmul+0x24a>

080035bc <__gedf2>:
 80035bc:	f04f 3cff 	mov.w	ip, #4294967295
 80035c0:	e006      	b.n	80035d0 <__cmpdf2+0x4>
 80035c2:	bf00      	nop

080035c4 <__ledf2>:
 80035c4:	f04f 0c01 	mov.w	ip, #1
 80035c8:	e002      	b.n	80035d0 <__cmpdf2+0x4>
 80035ca:	bf00      	nop

080035cc <__cmpdf2>:
 80035cc:	f04f 0c01 	mov.w	ip, #1
 80035d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80035d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80035d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80035dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80035e0:	bf18      	it	ne
 80035e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80035e6:	d01b      	beq.n	8003620 <__cmpdf2+0x54>
 80035e8:	b001      	add	sp, #4
 80035ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80035ee:	bf0c      	ite	eq
 80035f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80035f4:	ea91 0f03 	teqne	r1, r3
 80035f8:	bf02      	ittt	eq
 80035fa:	ea90 0f02 	teqeq	r0, r2
 80035fe:	2000      	moveq	r0, #0
 8003600:	4770      	bxeq	lr
 8003602:	f110 0f00 	cmn.w	r0, #0
 8003606:	ea91 0f03 	teq	r1, r3
 800360a:	bf58      	it	pl
 800360c:	4299      	cmppl	r1, r3
 800360e:	bf08      	it	eq
 8003610:	4290      	cmpeq	r0, r2
 8003612:	bf2c      	ite	cs
 8003614:	17d8      	asrcs	r0, r3, #31
 8003616:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800361a:	f040 0001 	orr.w	r0, r0, #1
 800361e:	4770      	bx	lr
 8003620:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8003624:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8003628:	d102      	bne.n	8003630 <__cmpdf2+0x64>
 800362a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800362e:	d107      	bne.n	8003640 <__cmpdf2+0x74>
 8003630:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8003634:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8003638:	d1d6      	bne.n	80035e8 <__cmpdf2+0x1c>
 800363a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800363e:	d0d3      	beq.n	80035e8 <__cmpdf2+0x1c>
 8003640:	f85d 0b04 	ldr.w	r0, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop

08003648 <__aeabi_cdrcmple>:
 8003648:	4684      	mov	ip, r0
 800364a:	4610      	mov	r0, r2
 800364c:	4662      	mov	r2, ip
 800364e:	468c      	mov	ip, r1
 8003650:	4619      	mov	r1, r3
 8003652:	4663      	mov	r3, ip
 8003654:	e000      	b.n	8003658 <__aeabi_cdcmpeq>
 8003656:	bf00      	nop

08003658 <__aeabi_cdcmpeq>:
 8003658:	b501      	push	{r0, lr}
 800365a:	f7ff ffb7 	bl	80035cc <__cmpdf2>
 800365e:	2800      	cmp	r0, #0
 8003660:	bf48      	it	mi
 8003662:	f110 0f00 	cmnmi.w	r0, #0
 8003666:	bd01      	pop	{r0, pc}

08003668 <__aeabi_dcmpeq>:
 8003668:	f84d ed08 	str.w	lr, [sp, #-8]!
 800366c:	f7ff fff4 	bl	8003658 <__aeabi_cdcmpeq>
 8003670:	bf0c      	ite	eq
 8003672:	2001      	moveq	r0, #1
 8003674:	2000      	movne	r0, #0
 8003676:	f85d fb08 	ldr.w	pc, [sp], #8
 800367a:	bf00      	nop

0800367c <__aeabi_dcmplt>:
 800367c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003680:	f7ff ffea 	bl	8003658 <__aeabi_cdcmpeq>
 8003684:	bf34      	ite	cc
 8003686:	2001      	movcc	r0, #1
 8003688:	2000      	movcs	r0, #0
 800368a:	f85d fb08 	ldr.w	pc, [sp], #8
 800368e:	bf00      	nop

08003690 <__aeabi_dcmple>:
 8003690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003694:	f7ff ffe0 	bl	8003658 <__aeabi_cdcmpeq>
 8003698:	bf94      	ite	ls
 800369a:	2001      	movls	r0, #1
 800369c:	2000      	movhi	r0, #0
 800369e:	f85d fb08 	ldr.w	pc, [sp], #8
 80036a2:	bf00      	nop

080036a4 <__aeabi_dcmpge>:
 80036a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80036a8:	f7ff ffce 	bl	8003648 <__aeabi_cdrcmple>
 80036ac:	bf94      	ite	ls
 80036ae:	2001      	movls	r0, #1
 80036b0:	2000      	movhi	r0, #0
 80036b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80036b6:	bf00      	nop

080036b8 <__aeabi_dcmpgt>:
 80036b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80036bc:	f7ff ffc4 	bl	8003648 <__aeabi_cdrcmple>
 80036c0:	bf34      	ite	cc
 80036c2:	2001      	movcc	r0, #1
 80036c4:	2000      	movcs	r0, #0
 80036c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80036ca:	bf00      	nop

080036cc <__aeabi_dcmpun>:
 80036cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80036d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80036d4:	d102      	bne.n	80036dc <__aeabi_dcmpun+0x10>
 80036d6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80036da:	d10a      	bne.n	80036f2 <__aeabi_dcmpun+0x26>
 80036dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80036e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80036e4:	d102      	bne.n	80036ec <__aeabi_dcmpun+0x20>
 80036e6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80036ea:	d102      	bne.n	80036f2 <__aeabi_dcmpun+0x26>
 80036ec:	f04f 0000 	mov.w	r0, #0
 80036f0:	4770      	bx	lr
 80036f2:	f04f 0001 	mov.w	r0, #1
 80036f6:	4770      	bx	lr

080036f8 <__aeabi_d2iz>:
 80036f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80036fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8003700:	d215      	bcs.n	800372e <__aeabi_d2iz+0x36>
 8003702:	d511      	bpl.n	8003728 <__aeabi_d2iz+0x30>
 8003704:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8003708:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800370c:	d912      	bls.n	8003734 <__aeabi_d2iz+0x3c>
 800370e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8003712:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003716:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800371a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800371e:	fa23 f002 	lsr.w	r0, r3, r2
 8003722:	bf18      	it	ne
 8003724:	4240      	negne	r0, r0
 8003726:	4770      	bx	lr
 8003728:	f04f 0000 	mov.w	r0, #0
 800372c:	4770      	bx	lr
 800372e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8003732:	d105      	bne.n	8003740 <__aeabi_d2iz+0x48>
 8003734:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8003738:	bf08      	it	eq
 800373a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800373e:	4770      	bx	lr
 8003740:	f04f 0000 	mov.w	r0, #0
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop

08003748 <__aeabi_d2f>:
 8003748:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800374c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8003750:	bf24      	itt	cs
 8003752:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8003756:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800375a:	d90d      	bls.n	8003778 <__aeabi_d2f+0x30>
 800375c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8003760:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8003764:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8003768:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800376c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8003770:	bf08      	it	eq
 8003772:	f020 0001 	biceq.w	r0, r0, #1
 8003776:	4770      	bx	lr
 8003778:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800377c:	d121      	bne.n	80037c2 <__aeabi_d2f+0x7a>
 800377e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8003782:	bfbc      	itt	lt
 8003784:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8003788:	4770      	bxlt	lr
 800378a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800378e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8003792:	f1c2 0218 	rsb	r2, r2, #24
 8003796:	f1c2 0c20 	rsb	ip, r2, #32
 800379a:	fa10 f30c 	lsls.w	r3, r0, ip
 800379e:	fa20 f002 	lsr.w	r0, r0, r2
 80037a2:	bf18      	it	ne
 80037a4:	f040 0001 	orrne.w	r0, r0, #1
 80037a8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80037ac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80037b0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80037b4:	ea40 000c 	orr.w	r0, r0, ip
 80037b8:	fa23 f302 	lsr.w	r3, r3, r2
 80037bc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80037c0:	e7cc      	b.n	800375c <__aeabi_d2f+0x14>
 80037c2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80037c6:	d107      	bne.n	80037d8 <__aeabi_d2f+0x90>
 80037c8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80037cc:	bf1e      	ittt	ne
 80037ce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80037d2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80037d6:	4770      	bxne	lr
 80037d8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80037dc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80037e0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop

080037e8 <__aeabi_frsub>:
 80037e8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80037ec:	e002      	b.n	80037f4 <__addsf3>
 80037ee:	bf00      	nop

080037f0 <__aeabi_fsub>:
 80037f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080037f4 <__addsf3>:
 80037f4:	0042      	lsls	r2, r0, #1
 80037f6:	bf1f      	itttt	ne
 80037f8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80037fc:	ea92 0f03 	teqne	r2, r3
 8003800:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8003804:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8003808:	d06a      	beq.n	80038e0 <__addsf3+0xec>
 800380a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800380e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8003812:	bfc1      	itttt	gt
 8003814:	18d2      	addgt	r2, r2, r3
 8003816:	4041      	eorgt	r1, r0
 8003818:	4048      	eorgt	r0, r1
 800381a:	4041      	eorgt	r1, r0
 800381c:	bfb8      	it	lt
 800381e:	425b      	neglt	r3, r3
 8003820:	2b19      	cmp	r3, #25
 8003822:	bf88      	it	hi
 8003824:	4770      	bxhi	lr
 8003826:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800382a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800382e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8003832:	bf18      	it	ne
 8003834:	4240      	negne	r0, r0
 8003836:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800383a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800383e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8003842:	bf18      	it	ne
 8003844:	4249      	negne	r1, r1
 8003846:	ea92 0f03 	teq	r2, r3
 800384a:	d03f      	beq.n	80038cc <__addsf3+0xd8>
 800384c:	f1a2 0201 	sub.w	r2, r2, #1
 8003850:	fa41 fc03 	asr.w	ip, r1, r3
 8003854:	eb10 000c 	adds.w	r0, r0, ip
 8003858:	f1c3 0320 	rsb	r3, r3, #32
 800385c:	fa01 f103 	lsl.w	r1, r1, r3
 8003860:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8003864:	d502      	bpl.n	800386c <__addsf3+0x78>
 8003866:	4249      	negs	r1, r1
 8003868:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800386c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8003870:	d313      	bcc.n	800389a <__addsf3+0xa6>
 8003872:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003876:	d306      	bcc.n	8003886 <__addsf3+0x92>
 8003878:	0840      	lsrs	r0, r0, #1
 800387a:	ea4f 0131 	mov.w	r1, r1, rrx
 800387e:	f102 0201 	add.w	r2, r2, #1
 8003882:	2afe      	cmp	r2, #254	; 0xfe
 8003884:	d251      	bcs.n	800392a <__addsf3+0x136>
 8003886:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800388a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800388e:	bf08      	it	eq
 8003890:	f020 0001 	biceq.w	r0, r0, #1
 8003894:	ea40 0003 	orr.w	r0, r0, r3
 8003898:	4770      	bx	lr
 800389a:	0049      	lsls	r1, r1, #1
 800389c:	eb40 0000 	adc.w	r0, r0, r0
 80038a0:	3a01      	subs	r2, #1
 80038a2:	bf28      	it	cs
 80038a4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80038a8:	d2ed      	bcs.n	8003886 <__addsf3+0x92>
 80038aa:	fab0 fc80 	clz	ip, r0
 80038ae:	f1ac 0c08 	sub.w	ip, ip, #8
 80038b2:	ebb2 020c 	subs.w	r2, r2, ip
 80038b6:	fa00 f00c 	lsl.w	r0, r0, ip
 80038ba:	bfaa      	itet	ge
 80038bc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80038c0:	4252      	neglt	r2, r2
 80038c2:	4318      	orrge	r0, r3
 80038c4:	bfbc      	itt	lt
 80038c6:	40d0      	lsrlt	r0, r2
 80038c8:	4318      	orrlt	r0, r3
 80038ca:	4770      	bx	lr
 80038cc:	f092 0f00 	teq	r2, #0
 80038d0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80038d4:	bf06      	itte	eq
 80038d6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80038da:	3201      	addeq	r2, #1
 80038dc:	3b01      	subne	r3, #1
 80038de:	e7b5      	b.n	800384c <__addsf3+0x58>
 80038e0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80038e4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80038e8:	bf18      	it	ne
 80038ea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80038ee:	d021      	beq.n	8003934 <__addsf3+0x140>
 80038f0:	ea92 0f03 	teq	r2, r3
 80038f4:	d004      	beq.n	8003900 <__addsf3+0x10c>
 80038f6:	f092 0f00 	teq	r2, #0
 80038fa:	bf08      	it	eq
 80038fc:	4608      	moveq	r0, r1
 80038fe:	4770      	bx	lr
 8003900:	ea90 0f01 	teq	r0, r1
 8003904:	bf1c      	itt	ne
 8003906:	2000      	movne	r0, #0
 8003908:	4770      	bxne	lr
 800390a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800390e:	d104      	bne.n	800391a <__addsf3+0x126>
 8003910:	0040      	lsls	r0, r0, #1
 8003912:	bf28      	it	cs
 8003914:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8003918:	4770      	bx	lr
 800391a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800391e:	bf3c      	itt	cc
 8003920:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8003924:	4770      	bxcc	lr
 8003926:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800392a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800392e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8003932:	4770      	bx	lr
 8003934:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8003938:	bf16      	itet	ne
 800393a:	4608      	movne	r0, r1
 800393c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8003940:	4601      	movne	r1, r0
 8003942:	0242      	lsls	r2, r0, #9
 8003944:	bf06      	itte	eq
 8003946:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800394a:	ea90 0f01 	teqeq	r0, r1
 800394e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8003952:	4770      	bx	lr

08003954 <__aeabi_ui2f>:
 8003954:	f04f 0300 	mov.w	r3, #0
 8003958:	e004      	b.n	8003964 <__aeabi_i2f+0x8>
 800395a:	bf00      	nop

0800395c <__aeabi_i2f>:
 800395c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8003960:	bf48      	it	mi
 8003962:	4240      	negmi	r0, r0
 8003964:	ea5f 0c00 	movs.w	ip, r0
 8003968:	bf08      	it	eq
 800396a:	4770      	bxeq	lr
 800396c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8003970:	4601      	mov	r1, r0
 8003972:	f04f 0000 	mov.w	r0, #0
 8003976:	e01c      	b.n	80039b2 <__aeabi_l2f+0x2a>

08003978 <__aeabi_ul2f>:
 8003978:	ea50 0201 	orrs.w	r2, r0, r1
 800397c:	bf08      	it	eq
 800397e:	4770      	bxeq	lr
 8003980:	f04f 0300 	mov.w	r3, #0
 8003984:	e00a      	b.n	800399c <__aeabi_l2f+0x14>
 8003986:	bf00      	nop

08003988 <__aeabi_l2f>:
 8003988:	ea50 0201 	orrs.w	r2, r0, r1
 800398c:	bf08      	it	eq
 800398e:	4770      	bxeq	lr
 8003990:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8003994:	d502      	bpl.n	800399c <__aeabi_l2f+0x14>
 8003996:	4240      	negs	r0, r0
 8003998:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800399c:	ea5f 0c01 	movs.w	ip, r1
 80039a0:	bf02      	ittt	eq
 80039a2:	4684      	moveq	ip, r0
 80039a4:	4601      	moveq	r1, r0
 80039a6:	2000      	moveq	r0, #0
 80039a8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80039ac:	bf08      	it	eq
 80039ae:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80039b2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80039b6:	fabc f28c 	clz	r2, ip
 80039ba:	3a08      	subs	r2, #8
 80039bc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80039c0:	db10      	blt.n	80039e4 <__aeabi_l2f+0x5c>
 80039c2:	fa01 fc02 	lsl.w	ip, r1, r2
 80039c6:	4463      	add	r3, ip
 80039c8:	fa00 fc02 	lsl.w	ip, r0, r2
 80039cc:	f1c2 0220 	rsb	r2, r2, #32
 80039d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80039d4:	fa20 f202 	lsr.w	r2, r0, r2
 80039d8:	eb43 0002 	adc.w	r0, r3, r2
 80039dc:	bf08      	it	eq
 80039de:	f020 0001 	biceq.w	r0, r0, #1
 80039e2:	4770      	bx	lr
 80039e4:	f102 0220 	add.w	r2, r2, #32
 80039e8:	fa01 fc02 	lsl.w	ip, r1, r2
 80039ec:	f1c2 0220 	rsb	r2, r2, #32
 80039f0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80039f4:	fa21 f202 	lsr.w	r2, r1, r2
 80039f8:	eb43 0002 	adc.w	r0, r3, r2
 80039fc:	bf08      	it	eq
 80039fe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8003a02:	4770      	bx	lr

08003a04 <__aeabi_ldivmod>:
 8003a04:	b97b      	cbnz	r3, 8003a26 <__aeabi_ldivmod+0x22>
 8003a06:	b972      	cbnz	r2, 8003a26 <__aeabi_ldivmod+0x22>
 8003a08:	2900      	cmp	r1, #0
 8003a0a:	bfbe      	ittt	lt
 8003a0c:	2000      	movlt	r0, #0
 8003a0e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8003a12:	e006      	blt.n	8003a22 <__aeabi_ldivmod+0x1e>
 8003a14:	bf08      	it	eq
 8003a16:	2800      	cmpeq	r0, #0
 8003a18:	bf1c      	itt	ne
 8003a1a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8003a1e:	f04f 30ff 	movne.w	r0, #4294967295
 8003a22:	f000 b9ed 	b.w	8003e00 <__aeabi_idiv0>
 8003a26:	f1ad 0c08 	sub.w	ip, sp, #8
 8003a2a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8003a2e:	2900      	cmp	r1, #0
 8003a30:	db09      	blt.n	8003a46 <__aeabi_ldivmod+0x42>
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	db1a      	blt.n	8003a6c <__aeabi_ldivmod+0x68>
 8003a36:	f000 f881 	bl	8003b3c <__udivmoddi4>
 8003a3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8003a3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003a42:	b004      	add	sp, #16
 8003a44:	4770      	bx	lr
 8003a46:	4240      	negs	r0, r0
 8003a48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	db1b      	blt.n	8003a88 <__aeabi_ldivmod+0x84>
 8003a50:	f000 f874 	bl	8003b3c <__udivmoddi4>
 8003a54:	f8dd e004 	ldr.w	lr, [sp, #4]
 8003a58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003a5c:	b004      	add	sp, #16
 8003a5e:	4240      	negs	r0, r0
 8003a60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003a64:	4252      	negs	r2, r2
 8003a66:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8003a6a:	4770      	bx	lr
 8003a6c:	4252      	negs	r2, r2
 8003a6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8003a72:	f000 f863 	bl	8003b3c <__udivmoddi4>
 8003a76:	f8dd e004 	ldr.w	lr, [sp, #4]
 8003a7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003a7e:	b004      	add	sp, #16
 8003a80:	4240      	negs	r0, r0
 8003a82:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003a86:	4770      	bx	lr
 8003a88:	4252      	negs	r2, r2
 8003a8a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8003a8e:	f000 f855 	bl	8003b3c <__udivmoddi4>
 8003a92:	f8dd e004 	ldr.w	lr, [sp, #4]
 8003a96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003a9a:	b004      	add	sp, #16
 8003a9c:	4252      	negs	r2, r2
 8003a9e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8003aa2:	4770      	bx	lr

08003aa4 <__aeabi_uldivmod>:
 8003aa4:	b953      	cbnz	r3, 8003abc <__aeabi_uldivmod+0x18>
 8003aa6:	b94a      	cbnz	r2, 8003abc <__aeabi_uldivmod+0x18>
 8003aa8:	2900      	cmp	r1, #0
 8003aaa:	bf08      	it	eq
 8003aac:	2800      	cmpeq	r0, #0
 8003aae:	bf1c      	itt	ne
 8003ab0:	f04f 31ff 	movne.w	r1, #4294967295
 8003ab4:	f04f 30ff 	movne.w	r0, #4294967295
 8003ab8:	f000 b9a2 	b.w	8003e00 <__aeabi_idiv0>
 8003abc:	f1ad 0c08 	sub.w	ip, sp, #8
 8003ac0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8003ac4:	f000 f83a 	bl	8003b3c <__udivmoddi4>
 8003ac8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8003acc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003ad0:	b004      	add	sp, #16
 8003ad2:	4770      	bx	lr

08003ad4 <__aeabi_f2lz>:
 8003ad4:	ee07 0a90 	vmov	s15, r0
 8003ad8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ae0:	d401      	bmi.n	8003ae6 <__aeabi_f2lz+0x12>
 8003ae2:	f000 b80b 	b.w	8003afc <__aeabi_f2ulz>
 8003ae6:	eef1 7a67 	vneg.f32	s15, s15
 8003aea:	b508      	push	{r3, lr}
 8003aec:	ee17 0a90 	vmov	r0, s15
 8003af0:	f000 f804 	bl	8003afc <__aeabi_f2ulz>
 8003af4:	4240      	negs	r0, r0
 8003af6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003afa:	bd08      	pop	{r3, pc}

08003afc <__aeabi_f2ulz>:
 8003afc:	b5d0      	push	{r4, r6, r7, lr}
 8003afe:	f7ff faf3 	bl	80030e8 <__aeabi_f2d>
 8003b02:	4b0c      	ldr	r3, [pc, #48]	; (8003b34 <__aeabi_f2ulz+0x38>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	4606      	mov	r6, r0
 8003b08:	460f      	mov	r7, r1
 8003b0a:	f7ff fb45 	bl	8003198 <__aeabi_dmul>
 8003b0e:	f000 f979 	bl	8003e04 <__aeabi_d2uiz>
 8003b12:	4604      	mov	r4, r0
 8003b14:	f7ff fac6 	bl	80030a4 <__aeabi_ui2d>
 8003b18:	4b07      	ldr	r3, [pc, #28]	; (8003b38 <__aeabi_f2ulz+0x3c>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f7ff fb3c 	bl	8003198 <__aeabi_dmul>
 8003b20:	4602      	mov	r2, r0
 8003b22:	460b      	mov	r3, r1
 8003b24:	4630      	mov	r0, r6
 8003b26:	4639      	mov	r1, r7
 8003b28:	f7ff f97e 	bl	8002e28 <__aeabi_dsub>
 8003b2c:	f000 f96a 	bl	8003e04 <__aeabi_d2uiz>
 8003b30:	4621      	mov	r1, r4
 8003b32:	bdd0      	pop	{r4, r6, r7, pc}
 8003b34:	3df00000 	.word	0x3df00000
 8003b38:	41f00000 	.word	0x41f00000

08003b3c <__udivmoddi4>:
 8003b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b40:	9d08      	ldr	r5, [sp, #32]
 8003b42:	4604      	mov	r4, r0
 8003b44:	468c      	mov	ip, r1
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f040 8083 	bne.w	8003c52 <__udivmoddi4+0x116>
 8003b4c:	428a      	cmp	r2, r1
 8003b4e:	4617      	mov	r7, r2
 8003b50:	d947      	bls.n	8003be2 <__udivmoddi4+0xa6>
 8003b52:	fab2 f282 	clz	r2, r2
 8003b56:	b142      	cbz	r2, 8003b6a <__udivmoddi4+0x2e>
 8003b58:	f1c2 0020 	rsb	r0, r2, #32
 8003b5c:	fa24 f000 	lsr.w	r0, r4, r0
 8003b60:	4091      	lsls	r1, r2
 8003b62:	4097      	lsls	r7, r2
 8003b64:	ea40 0c01 	orr.w	ip, r0, r1
 8003b68:	4094      	lsls	r4, r2
 8003b6a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8003b6e:	0c23      	lsrs	r3, r4, #16
 8003b70:	fbbc f6f8 	udiv	r6, ip, r8
 8003b74:	fa1f fe87 	uxth.w	lr, r7
 8003b78:	fb08 c116 	mls	r1, r8, r6, ip
 8003b7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8003b80:	fb06 f10e 	mul.w	r1, r6, lr
 8003b84:	4299      	cmp	r1, r3
 8003b86:	d909      	bls.n	8003b9c <__udivmoddi4+0x60>
 8003b88:	18fb      	adds	r3, r7, r3
 8003b8a:	f106 30ff 	add.w	r0, r6, #4294967295
 8003b8e:	f080 8119 	bcs.w	8003dc4 <__udivmoddi4+0x288>
 8003b92:	4299      	cmp	r1, r3
 8003b94:	f240 8116 	bls.w	8003dc4 <__udivmoddi4+0x288>
 8003b98:	3e02      	subs	r6, #2
 8003b9a:	443b      	add	r3, r7
 8003b9c:	1a5b      	subs	r3, r3, r1
 8003b9e:	b2a4      	uxth	r4, r4
 8003ba0:	fbb3 f0f8 	udiv	r0, r3, r8
 8003ba4:	fb08 3310 	mls	r3, r8, r0, r3
 8003ba8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8003bac:	fb00 fe0e 	mul.w	lr, r0, lr
 8003bb0:	45a6      	cmp	lr, r4
 8003bb2:	d909      	bls.n	8003bc8 <__udivmoddi4+0x8c>
 8003bb4:	193c      	adds	r4, r7, r4
 8003bb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8003bba:	f080 8105 	bcs.w	8003dc8 <__udivmoddi4+0x28c>
 8003bbe:	45a6      	cmp	lr, r4
 8003bc0:	f240 8102 	bls.w	8003dc8 <__udivmoddi4+0x28c>
 8003bc4:	3802      	subs	r0, #2
 8003bc6:	443c      	add	r4, r7
 8003bc8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8003bcc:	eba4 040e 	sub.w	r4, r4, lr
 8003bd0:	2600      	movs	r6, #0
 8003bd2:	b11d      	cbz	r5, 8003bdc <__udivmoddi4+0xa0>
 8003bd4:	40d4      	lsrs	r4, r2
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	e9c5 4300 	strd	r4, r3, [r5]
 8003bdc:	4631      	mov	r1, r6
 8003bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003be2:	b902      	cbnz	r2, 8003be6 <__udivmoddi4+0xaa>
 8003be4:	deff      	udf	#255	; 0xff
 8003be6:	fab2 f282 	clz	r2, r2
 8003bea:	2a00      	cmp	r2, #0
 8003bec:	d150      	bne.n	8003c90 <__udivmoddi4+0x154>
 8003bee:	1bcb      	subs	r3, r1, r7
 8003bf0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8003bf4:	fa1f f887 	uxth.w	r8, r7
 8003bf8:	2601      	movs	r6, #1
 8003bfa:	fbb3 fcfe 	udiv	ip, r3, lr
 8003bfe:	0c21      	lsrs	r1, r4, #16
 8003c00:	fb0e 331c 	mls	r3, lr, ip, r3
 8003c04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8003c08:	fb08 f30c 	mul.w	r3, r8, ip
 8003c0c:	428b      	cmp	r3, r1
 8003c0e:	d907      	bls.n	8003c20 <__udivmoddi4+0xe4>
 8003c10:	1879      	adds	r1, r7, r1
 8003c12:	f10c 30ff 	add.w	r0, ip, #4294967295
 8003c16:	d202      	bcs.n	8003c1e <__udivmoddi4+0xe2>
 8003c18:	428b      	cmp	r3, r1
 8003c1a:	f200 80e9 	bhi.w	8003df0 <__udivmoddi4+0x2b4>
 8003c1e:	4684      	mov	ip, r0
 8003c20:	1ac9      	subs	r1, r1, r3
 8003c22:	b2a3      	uxth	r3, r4
 8003c24:	fbb1 f0fe 	udiv	r0, r1, lr
 8003c28:	fb0e 1110 	mls	r1, lr, r0, r1
 8003c2c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8003c30:	fb08 f800 	mul.w	r8, r8, r0
 8003c34:	45a0      	cmp	r8, r4
 8003c36:	d907      	bls.n	8003c48 <__udivmoddi4+0x10c>
 8003c38:	193c      	adds	r4, r7, r4
 8003c3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8003c3e:	d202      	bcs.n	8003c46 <__udivmoddi4+0x10a>
 8003c40:	45a0      	cmp	r8, r4
 8003c42:	f200 80d9 	bhi.w	8003df8 <__udivmoddi4+0x2bc>
 8003c46:	4618      	mov	r0, r3
 8003c48:	eba4 0408 	sub.w	r4, r4, r8
 8003c4c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8003c50:	e7bf      	b.n	8003bd2 <__udivmoddi4+0x96>
 8003c52:	428b      	cmp	r3, r1
 8003c54:	d909      	bls.n	8003c6a <__udivmoddi4+0x12e>
 8003c56:	2d00      	cmp	r5, #0
 8003c58:	f000 80b1 	beq.w	8003dbe <__udivmoddi4+0x282>
 8003c5c:	2600      	movs	r6, #0
 8003c5e:	e9c5 0100 	strd	r0, r1, [r5]
 8003c62:	4630      	mov	r0, r6
 8003c64:	4631      	mov	r1, r6
 8003c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c6a:	fab3 f683 	clz	r6, r3
 8003c6e:	2e00      	cmp	r6, #0
 8003c70:	d14a      	bne.n	8003d08 <__udivmoddi4+0x1cc>
 8003c72:	428b      	cmp	r3, r1
 8003c74:	d302      	bcc.n	8003c7c <__udivmoddi4+0x140>
 8003c76:	4282      	cmp	r2, r0
 8003c78:	f200 80b8 	bhi.w	8003dec <__udivmoddi4+0x2b0>
 8003c7c:	1a84      	subs	r4, r0, r2
 8003c7e:	eb61 0103 	sbc.w	r1, r1, r3
 8003c82:	2001      	movs	r0, #1
 8003c84:	468c      	mov	ip, r1
 8003c86:	2d00      	cmp	r5, #0
 8003c88:	d0a8      	beq.n	8003bdc <__udivmoddi4+0xa0>
 8003c8a:	e9c5 4c00 	strd	r4, ip, [r5]
 8003c8e:	e7a5      	b.n	8003bdc <__udivmoddi4+0xa0>
 8003c90:	f1c2 0320 	rsb	r3, r2, #32
 8003c94:	fa20 f603 	lsr.w	r6, r0, r3
 8003c98:	4097      	lsls	r7, r2
 8003c9a:	fa01 f002 	lsl.w	r0, r1, r2
 8003c9e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8003ca2:	40d9      	lsrs	r1, r3
 8003ca4:	4330      	orrs	r0, r6
 8003ca6:	0c03      	lsrs	r3, r0, #16
 8003ca8:	fbb1 f6fe 	udiv	r6, r1, lr
 8003cac:	fa1f f887 	uxth.w	r8, r7
 8003cb0:	fb0e 1116 	mls	r1, lr, r6, r1
 8003cb4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8003cb8:	fb06 f108 	mul.w	r1, r6, r8
 8003cbc:	4299      	cmp	r1, r3
 8003cbe:	fa04 f402 	lsl.w	r4, r4, r2
 8003cc2:	d909      	bls.n	8003cd8 <__udivmoddi4+0x19c>
 8003cc4:	18fb      	adds	r3, r7, r3
 8003cc6:	f106 3cff 	add.w	ip, r6, #4294967295
 8003cca:	f080 808d 	bcs.w	8003de8 <__udivmoddi4+0x2ac>
 8003cce:	4299      	cmp	r1, r3
 8003cd0:	f240 808a 	bls.w	8003de8 <__udivmoddi4+0x2ac>
 8003cd4:	3e02      	subs	r6, #2
 8003cd6:	443b      	add	r3, r7
 8003cd8:	1a5b      	subs	r3, r3, r1
 8003cda:	b281      	uxth	r1, r0
 8003cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8003ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8003ce4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8003ce8:	fb00 f308 	mul.w	r3, r0, r8
 8003cec:	428b      	cmp	r3, r1
 8003cee:	d907      	bls.n	8003d00 <__udivmoddi4+0x1c4>
 8003cf0:	1879      	adds	r1, r7, r1
 8003cf2:	f100 3cff 	add.w	ip, r0, #4294967295
 8003cf6:	d273      	bcs.n	8003de0 <__udivmoddi4+0x2a4>
 8003cf8:	428b      	cmp	r3, r1
 8003cfa:	d971      	bls.n	8003de0 <__udivmoddi4+0x2a4>
 8003cfc:	3802      	subs	r0, #2
 8003cfe:	4439      	add	r1, r7
 8003d00:	1acb      	subs	r3, r1, r3
 8003d02:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8003d06:	e778      	b.n	8003bfa <__udivmoddi4+0xbe>
 8003d08:	f1c6 0c20 	rsb	ip, r6, #32
 8003d0c:	fa03 f406 	lsl.w	r4, r3, r6
 8003d10:	fa22 f30c 	lsr.w	r3, r2, ip
 8003d14:	431c      	orrs	r4, r3
 8003d16:	fa20 f70c 	lsr.w	r7, r0, ip
 8003d1a:	fa01 f306 	lsl.w	r3, r1, r6
 8003d1e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8003d22:	fa21 f10c 	lsr.w	r1, r1, ip
 8003d26:	431f      	orrs	r7, r3
 8003d28:	0c3b      	lsrs	r3, r7, #16
 8003d2a:	fbb1 f9fe 	udiv	r9, r1, lr
 8003d2e:	fa1f f884 	uxth.w	r8, r4
 8003d32:	fb0e 1119 	mls	r1, lr, r9, r1
 8003d36:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8003d3a:	fb09 fa08 	mul.w	sl, r9, r8
 8003d3e:	458a      	cmp	sl, r1
 8003d40:	fa02 f206 	lsl.w	r2, r2, r6
 8003d44:	fa00 f306 	lsl.w	r3, r0, r6
 8003d48:	d908      	bls.n	8003d5c <__udivmoddi4+0x220>
 8003d4a:	1861      	adds	r1, r4, r1
 8003d4c:	f109 30ff 	add.w	r0, r9, #4294967295
 8003d50:	d248      	bcs.n	8003de4 <__udivmoddi4+0x2a8>
 8003d52:	458a      	cmp	sl, r1
 8003d54:	d946      	bls.n	8003de4 <__udivmoddi4+0x2a8>
 8003d56:	f1a9 0902 	sub.w	r9, r9, #2
 8003d5a:	4421      	add	r1, r4
 8003d5c:	eba1 010a 	sub.w	r1, r1, sl
 8003d60:	b2bf      	uxth	r7, r7
 8003d62:	fbb1 f0fe 	udiv	r0, r1, lr
 8003d66:	fb0e 1110 	mls	r1, lr, r0, r1
 8003d6a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8003d6e:	fb00 f808 	mul.w	r8, r0, r8
 8003d72:	45b8      	cmp	r8, r7
 8003d74:	d907      	bls.n	8003d86 <__udivmoddi4+0x24a>
 8003d76:	19e7      	adds	r7, r4, r7
 8003d78:	f100 31ff 	add.w	r1, r0, #4294967295
 8003d7c:	d22e      	bcs.n	8003ddc <__udivmoddi4+0x2a0>
 8003d7e:	45b8      	cmp	r8, r7
 8003d80:	d92c      	bls.n	8003ddc <__udivmoddi4+0x2a0>
 8003d82:	3802      	subs	r0, #2
 8003d84:	4427      	add	r7, r4
 8003d86:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8003d8a:	eba7 0708 	sub.w	r7, r7, r8
 8003d8e:	fba0 8902 	umull	r8, r9, r0, r2
 8003d92:	454f      	cmp	r7, r9
 8003d94:	46c6      	mov	lr, r8
 8003d96:	4649      	mov	r1, r9
 8003d98:	d31a      	bcc.n	8003dd0 <__udivmoddi4+0x294>
 8003d9a:	d017      	beq.n	8003dcc <__udivmoddi4+0x290>
 8003d9c:	b15d      	cbz	r5, 8003db6 <__udivmoddi4+0x27a>
 8003d9e:	ebb3 020e 	subs.w	r2, r3, lr
 8003da2:	eb67 0701 	sbc.w	r7, r7, r1
 8003da6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8003daa:	40f2      	lsrs	r2, r6
 8003dac:	ea4c 0202 	orr.w	r2, ip, r2
 8003db0:	40f7      	lsrs	r7, r6
 8003db2:	e9c5 2700 	strd	r2, r7, [r5]
 8003db6:	2600      	movs	r6, #0
 8003db8:	4631      	mov	r1, r6
 8003dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dbe:	462e      	mov	r6, r5
 8003dc0:	4628      	mov	r0, r5
 8003dc2:	e70b      	b.n	8003bdc <__udivmoddi4+0xa0>
 8003dc4:	4606      	mov	r6, r0
 8003dc6:	e6e9      	b.n	8003b9c <__udivmoddi4+0x60>
 8003dc8:	4618      	mov	r0, r3
 8003dca:	e6fd      	b.n	8003bc8 <__udivmoddi4+0x8c>
 8003dcc:	4543      	cmp	r3, r8
 8003dce:	d2e5      	bcs.n	8003d9c <__udivmoddi4+0x260>
 8003dd0:	ebb8 0e02 	subs.w	lr, r8, r2
 8003dd4:	eb69 0104 	sbc.w	r1, r9, r4
 8003dd8:	3801      	subs	r0, #1
 8003dda:	e7df      	b.n	8003d9c <__udivmoddi4+0x260>
 8003ddc:	4608      	mov	r0, r1
 8003dde:	e7d2      	b.n	8003d86 <__udivmoddi4+0x24a>
 8003de0:	4660      	mov	r0, ip
 8003de2:	e78d      	b.n	8003d00 <__udivmoddi4+0x1c4>
 8003de4:	4681      	mov	r9, r0
 8003de6:	e7b9      	b.n	8003d5c <__udivmoddi4+0x220>
 8003de8:	4666      	mov	r6, ip
 8003dea:	e775      	b.n	8003cd8 <__udivmoddi4+0x19c>
 8003dec:	4630      	mov	r0, r6
 8003dee:	e74a      	b.n	8003c86 <__udivmoddi4+0x14a>
 8003df0:	f1ac 0c02 	sub.w	ip, ip, #2
 8003df4:	4439      	add	r1, r7
 8003df6:	e713      	b.n	8003c20 <__udivmoddi4+0xe4>
 8003df8:	3802      	subs	r0, #2
 8003dfa:	443c      	add	r4, r7
 8003dfc:	e724      	b.n	8003c48 <__udivmoddi4+0x10c>
 8003dfe:	bf00      	nop

08003e00 <__aeabi_idiv0>:
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop

08003e04 <__aeabi_d2uiz>:
 8003e04:	004a      	lsls	r2, r1, #1
 8003e06:	d211      	bcs.n	8003e2c <__aeabi_d2uiz+0x28>
 8003e08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8003e0c:	d211      	bcs.n	8003e32 <__aeabi_d2uiz+0x2e>
 8003e0e:	d50d      	bpl.n	8003e2c <__aeabi_d2uiz+0x28>
 8003e10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8003e14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8003e18:	d40e      	bmi.n	8003e38 <__aeabi_d2uiz+0x34>
 8003e1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8003e1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8003e26:	fa23 f002 	lsr.w	r0, r3, r2
 8003e2a:	4770      	bx	lr
 8003e2c:	f04f 0000 	mov.w	r0, #0
 8003e30:	4770      	bx	lr
 8003e32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8003e36:	d102      	bne.n	8003e3e <__aeabi_d2uiz+0x3a>
 8003e38:	f04f 30ff 	mov.w	r0, #4294967295
 8003e3c:	4770      	bx	lr
 8003e3e:	f04f 0000 	mov.w	r0, #0
 8003e42:	4770      	bx	lr

08003e44 <checkMPUI2C>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void checkMPUI2C(void){
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af04      	add	r7, sp, #16
    uint8_t whoami = 0;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	71bb      	strb	r3, [r7, #6]
    HAL_StatusTypeDef status = HAL_OK;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	71fb      	strb	r3, [r7, #7]

    status = HAL_I2C_Mem_Read(&I2C_DEV, MPU6050ADDR, WHOAMIADDR, I2C_ADDSIZE, &whoami, 1, I2C_TIMEOUT);
 8003e52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e56:	9302      	str	r3, [sp, #8]
 8003e58:	2301      	movs	r3, #1
 8003e5a:	9301      	str	r3, [sp, #4]
 8003e5c:	1dbb      	adds	r3, r7, #6
 8003e5e:	9300      	str	r3, [sp, #0]
 8003e60:	2301      	movs	r3, #1
 8003e62:	2275      	movs	r2, #117	; 0x75
 8003e64:	21d0      	movs	r1, #208	; 0xd0
 8003e66:	481f      	ldr	r0, [pc, #124]	; (8003ee4 <checkMPUI2C+0xa0>)
 8003e68:	f001 fd68 	bl	800593c <HAL_I2C_Mem_Read>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	71fb      	strb	r3, [r7, #7]

    switch(status){
 8003e70:	79fb      	ldrb	r3, [r7, #7]
 8003e72:	2b03      	cmp	r3, #3
 8003e74:	d82b      	bhi.n	8003ece <checkMPUI2C+0x8a>
 8003e76:	a201      	add	r2, pc, #4	; (adr r2, 8003e7c <checkMPUI2C+0x38>)
 8003e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e7c:	08003e8d 	.word	0x08003e8d
 8003e80:	08003eab 	.word	0x08003eab
 8003e84:	08003eb7 	.word	0x08003eb7
 8003e88:	08003ec3 	.word	0x08003ec3
        case HAL_OK:
            if(whoami == MPU6050ID)
 8003e8c:	79bb      	ldrb	r3, [r7, #6]
 8003e8e:	2b68      	cmp	r3, #104	; 0x68
 8003e90:	d105      	bne.n	8003e9e <checkMPUI2C+0x5a>
                MPL_LOGI("DEVICE OK\r\n");
 8003e92:	4a15      	ldr	r2, [pc, #84]	; (8003ee8 <checkMPUI2C+0xa4>)
 8003e94:	2100      	movs	r1, #0
 8003e96:	2004      	movs	r0, #4
 8003e98:	f006 ff12 	bl	800acc0 <_MLPrintLog>
            else
                MPL_LOGI("ERR: DEVICE\r\n");
            break;
 8003e9c:	e01d      	b.n	8003eda <checkMPUI2C+0x96>
                MPL_LOGI("ERR: DEVICE\r\n");
 8003e9e:	4a13      	ldr	r2, [pc, #76]	; (8003eec <checkMPUI2C+0xa8>)
 8003ea0:	2100      	movs	r1, #0
 8003ea2:	2004      	movs	r0, #4
 8003ea4:	f006 ff0c 	bl	800acc0 <_MLPrintLog>
            break;
 8003ea8:	e017      	b.n	8003eda <checkMPUI2C+0x96>
        case HAL_ERROR:
            MPL_LOGI("ERR: STATUS\r\n");
 8003eaa:	4a11      	ldr	r2, [pc, #68]	; (8003ef0 <checkMPUI2C+0xac>)
 8003eac:	2100      	movs	r1, #0
 8003eae:	2004      	movs	r0, #4
 8003eb0:	f006 ff06 	bl	800acc0 <_MLPrintLog>
            break;
 8003eb4:	e011      	b.n	8003eda <checkMPUI2C+0x96>
        case HAL_BUSY:
            MPL_LOGI("ERR: BUSY\r\n");
 8003eb6:	4a0f      	ldr	r2, [pc, #60]	; (8003ef4 <checkMPUI2C+0xb0>)
 8003eb8:	2100      	movs	r1, #0
 8003eba:	2004      	movs	r0, #4
 8003ebc:	f006 ff00 	bl	800acc0 <_MLPrintLog>
            break;
 8003ec0:	e00b      	b.n	8003eda <checkMPUI2C+0x96>
        case HAL_TIMEOUT:
            MPL_LOGI("ERR: TIMEOUT\r\n");
 8003ec2:	4a0d      	ldr	r2, [pc, #52]	; (8003ef8 <checkMPUI2C+0xb4>)
 8003ec4:	2100      	movs	r1, #0
 8003ec6:	2004      	movs	r0, #4
 8003ec8:	f006 fefa 	bl	800acc0 <_MLPrintLog>
            break;
 8003ecc:	e005      	b.n	8003eda <checkMPUI2C+0x96>
        default:
            MPL_LOGI("ERR: UNKNOWN\r\n");
 8003ece:	4a0b      	ldr	r2, [pc, #44]	; (8003efc <checkMPUI2C+0xb8>)
 8003ed0:	2100      	movs	r1, #0
 8003ed2:	2004      	movs	r0, #4
 8003ed4:	f006 fef4 	bl	800acc0 <_MLPrintLog>
            break;
 8003ed8:	bf00      	nop
    }

    return;
 8003eda:	bf00      	nop
}
 8003edc:	3708      	adds	r7, #8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	20000b20 	.word	0x20000b20
 8003ee8:	08012824 	.word	0x08012824
 8003eec:	08012830 	.word	0x08012830
 8003ef0:	08012840 	.word	0x08012840
 8003ef4:	08012850 	.word	0x08012850
 8003ef8:	0801285c 	.word	0x0801285c
 8003efc:	0801286c 	.word	0x0801286c

08003f00 <initMPU>:

void initMPU(void){
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
    unsigned char accel_fsr;
    unsigned short gyro_rate, gyro_fsr;

    if(mpu_init() == 0)
 8003f06:	f003 fee9 	bl	8007cdc <mpu_init>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d105      	bne.n	8003f1c <initMPU+0x1c>
        MPL_LOGI("MPU INIT OK\r\n");
 8003f10:	4a5e      	ldr	r2, [pc, #376]	; (800408c <initMPU+0x18c>)
 8003f12:	2100      	movs	r1, #0
 8003f14:	2004      	movs	r0, #4
 8003f16:	f006 fed3 	bl	800acc0 <_MLPrintLog>
 8003f1a:	e004      	b.n	8003f26 <initMPU+0x26>
    else
        MPL_LOGI("ERR: MPU INIT\r\n");
 8003f1c:	4a5c      	ldr	r2, [pc, #368]	; (8004090 <initMPU+0x190>)
 8003f1e:	2100      	movs	r1, #0
 8003f20:	2004      	movs	r0, #4
 8003f22:	f006 fecd 	bl	800acc0 <_MLPrintLog>

    if(inv_init_mpl() == 0)
 8003f26:	f008 fd33 	bl	800c990 <inv_init_mpl>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d105      	bne.n	8003f3c <initMPU+0x3c>
        MPL_LOGI("MPU INV INIT OK\r\n");
 8003f30:	4a58      	ldr	r2, [pc, #352]	; (8004094 <initMPU+0x194>)
 8003f32:	2100      	movs	r1, #0
 8003f34:	2004      	movs	r0, #4
 8003f36:	f006 fec3 	bl	800acc0 <_MLPrintLog>
 8003f3a:	e004      	b.n	8003f46 <initMPU+0x46>
    else
        MPL_LOGI("ERR: MPU INV INIT\r\n");
 8003f3c:	4a56      	ldr	r2, [pc, #344]	; (8004098 <initMPU+0x198>)
 8003f3e:	2100      	movs	r1, #0
 8003f40:	2004      	movs	r0, #4
 8003f42:	f006 febd 	bl	800acc0 <_MLPrintLog>

    inv_enable_quaternion();
 8003f46:	f7fe fef3 	bl	8002d30 <inv_enable_quaternion>
    inv_enable_9x_sensor_fusion();
 8003f4a:	f7fd fba7 	bl	800169c <inv_enable_9x_sensor_fusion>
    inv_enable_fast_nomot();
 8003f4e:	f7fc fff1 	bl	8000f34 <inv_enable_fast_nomot>
    inv_enable_gyro_tc();
 8003f52:	f7fd fe55 	bl	8001c00 <inv_enable_gyro_tc>
    inv_enable_eMPL_outputs();
 8003f56:	f007 f899 	bl	800b08c <inv_enable_eMPL_outputs>

    if(inv_start_mpl() == 0)
 8003f5a:	f008 fd55 	bl	800ca08 <inv_start_mpl>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d105      	bne.n	8003f70 <initMPU+0x70>
        MPL_LOGI("START MPL OK\r\n");
 8003f64:	4a4d      	ldr	r2, [pc, #308]	; (800409c <initMPU+0x19c>)
 8003f66:	2100      	movs	r1, #0
 8003f68:	2004      	movs	r0, #4
 8003f6a:	f006 fea9 	bl	800acc0 <_MLPrintLog>
 8003f6e:	e00f      	b.n	8003f90 <initMPU+0x90>
    else if(inv_start_mpl() == INV_ERROR_NOT_AUTHORIZED)
 8003f70:	f008 fd4a 	bl	800ca08 <inv_start_mpl>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b32      	cmp	r3, #50	; 0x32
 8003f78:	d105      	bne.n	8003f86 <initMPU+0x86>
        MPL_LOGI("ERR: START MPL: NOAUTH\r\n");
 8003f7a:	4a49      	ldr	r2, [pc, #292]	; (80040a0 <initMPU+0x1a0>)
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	2004      	movs	r0, #4
 8003f80:	f006 fe9e 	bl	800acc0 <_MLPrintLog>
 8003f84:	e004      	b.n	8003f90 <initMPU+0x90>
    else
        MPL_LOGI("ERR: START MPL\r\n");
 8003f86:	4a47      	ldr	r2, [pc, #284]	; (80040a4 <initMPU+0x1a4>)
 8003f88:	2100      	movs	r1, #0
 8003f8a:	2004      	movs	r0, #4
 8003f8c:	f006 fe98 	bl	800acc0 <_MLPrintLog>

    mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL);
 8003f90:	2078      	movs	r0, #120	; 0x78
 8003f92:	f004 fcc1 	bl	8008918 <mpu_set_sensors>
    mpu_configure_fifo(INV_XYZ_GYRO | INV_XYZ_ACCEL);
 8003f96:	2078      	movs	r0, #120	; 0x78
 8003f98:	f004 fc6c 	bl	8008874 <mpu_configure_fifo>

    mpu_set_sample_rate(DEFAULT_MPU_HZ);
 8003f9c:	2014      	movs	r0, #20
 8003f9e:	f004 fb6f 	bl	8008680 <mpu_set_sample_rate>
    mpu_get_sample_rate(&gyro_rate);
 8003fa2:	1d3b      	adds	r3, r7, #4
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f004 fb51 	bl	800864c <mpu_get_sample_rate>

    mpu_get_gyro_fsr(&gyro_fsr);
 8003faa:	1cbb      	adds	r3, r7, #2
 8003fac:	4618      	mov	r0, r3
 8003fae:	f004 f96f 	bl	8008290 <mpu_get_gyro_fsr>
    mpu_get_accel_fsr(&accel_fsr);
 8003fb2:	1dfb      	adds	r3, r7, #7
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f004 fa01 	bl	80083bc <mpu_get_accel_fsr>

    inv_set_gyro_sample_rate(1000000L / gyro_rate);
 8003fba:	88bb      	ldrh	r3, [r7, #4]
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	4b3a      	ldr	r3, [pc, #232]	; (80040a8 <initMPU+0x1a8>)
 8003fc0:	fb93 f3f2 	sdiv	r3, r3, r2
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f007 f8f7 	bl	800b1b8 <inv_set_gyro_sample_rate>
    inv_set_accel_sample_rate(1000000L / gyro_rate);
 8003fca:	88bb      	ldrh	r3, [r7, #4]
 8003fcc:	461a      	mov	r2, r3
 8003fce:	4b36      	ldr	r3, [pc, #216]	; (80040a8 <initMPU+0x1a8>)
 8003fd0:	fb93 f3f2 	sdiv	r3, r3, r2
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f007 f915 	bl	800b204 <inv_set_accel_sample_rate>

    inv_set_gyro_orientation_and_scale(inv_orientation_matrix_to_scalar(gyro_pdata.orientation),
 8003fda:	4834      	ldr	r0, [pc, #208]	; (80040ac <initMPU+0x1ac>)
 8003fdc:	f008 fc38 	bl	800c850 <inv_orientation_matrix_to_scalar>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	461a      	mov	r2, r3
                                       (long)gyro_fsr<<15);
 8003fe4:	887b      	ldrh	r3, [r7, #2]
    inv_set_gyro_orientation_and_scale(inv_orientation_matrix_to_scalar(gyro_pdata.orientation),
 8003fe6:	03db      	lsls	r3, r3, #15
 8003fe8:	4619      	mov	r1, r3
 8003fea:	4610      	mov	r0, r2
 8003fec:	f007 f8d4 	bl	800b198 <inv_set_gyro_orientation_and_scale>
    inv_set_accel_orientation_and_scale(inv_orientation_matrix_to_scalar(gyro_pdata.orientation),
 8003ff0:	482e      	ldr	r0, [pc, #184]	; (80040ac <initMPU+0x1ac>)
 8003ff2:	f008 fc2d 	bl	800c850 <inv_orientation_matrix_to_scalar>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	461a      	mov	r2, r3
                                        (long)accel_fsr<<15);
 8003ffa:	79fb      	ldrb	r3, [r7, #7]
    inv_set_accel_orientation_and_scale(inv_orientation_matrix_to_scalar(gyro_pdata.orientation),
 8003ffc:	03db      	lsls	r3, r3, #15
 8003ffe:	4619      	mov	r1, r3
 8004000:	4610      	mov	r0, r2
 8004002:	f007 f9a7 	bl	800b354 <inv_set_accel_orientation_and_scale>

    hal.sensors = ACCEL_ON | GYRO_ON;
 8004006:	4b2a      	ldr	r3, [pc, #168]	; (80040b0 <initMPU+0x1b0>)
 8004008:	2203      	movs	r2, #3
 800400a:	705a      	strb	r2, [r3, #1]
    hal.dmp_on = 0;
 800400c:	4b28      	ldr	r3, [pc, #160]	; (80040b0 <initMPU+0x1b0>)
 800400e:	2200      	movs	r2, #0
 8004010:	709a      	strb	r2, [r3, #2]
    hal.report = 0;
 8004012:	4b27      	ldr	r3, [pc, #156]	; (80040b0 <initMPU+0x1b0>)
 8004014:	2200      	movs	r2, #0
 8004016:	619a      	str	r2, [r3, #24]
    hal.rx.cmd = 0;
 8004018:	4b25      	ldr	r3, [pc, #148]	; (80040b0 <initMPU+0x1b0>)
 800401a:	2200      	movs	r2, #0
 800401c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hal.next_pedo_ms = 0;
 8004020:	4b23      	ldr	r3, [pc, #140]	; (80040b0 <initMPU+0x1b0>)
 8004022:	2200      	movs	r2, #0
 8004024:	60da      	str	r2, [r3, #12]
    hal.next_compass_ms = 0;
 8004026:	4b22      	ldr	r3, [pc, #136]	; (80040b0 <initMPU+0x1b0>)
 8004028:	2200      	movs	r2, #0
 800402a:	615a      	str	r2, [r3, #20]
    hal.next_temp_ms = 0;
 800402c:	4b20      	ldr	r3, [pc, #128]	; (80040b0 <initMPU+0x1b0>)
 800402e:	2200      	movs	r2, #0
 8004030:	611a      	str	r2, [r3, #16]

    if(dmp_load_motion_driver_firmware() == 0)
 8004032:	f005 ff55 	bl	8009ee0 <dmp_load_motion_driver_firmware>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d105      	bne.n	8004048 <initMPU+0x148>
        MPL_LOGI("FIRMWARE OK\r\n");
 800403c:	4a1d      	ldr	r2, [pc, #116]	; (80040b4 <initMPU+0x1b4>)
 800403e:	2100      	movs	r1, #0
 8004040:	2004      	movs	r0, #4
 8004042:	f006 fe3d 	bl	800acc0 <_MLPrintLog>
 8004046:	e004      	b.n	8004052 <initMPU+0x152>
    else
        MPL_LOGI("ERR: FIRMWARE\r\n");
 8004048:	4a1b      	ldr	r2, [pc, #108]	; (80040b8 <initMPU+0x1b8>)
 800404a:	2100      	movs	r1, #0
 800404c:	2004      	movs	r0, #4
 800404e:	f006 fe37 	bl	800acc0 <_MLPrintLog>

    dmp_set_orientation(inv_orientation_matrix_to_scalar(gyro_pdata.orientation));
 8004052:	4816      	ldr	r0, [pc, #88]	; (80040ac <initMPU+0x1ac>)
 8004054:	f008 fbfc 	bl	800c850 <inv_orientation_matrix_to_scalar>
 8004058:	4603      	mov	r3, r0
 800405a:	4618      	mov	r0, r3
 800405c:	f005 ff50 	bl	8009f00 <dmp_set_orientation>

    hal.dmp_features = DMP_FEATURE_6X_LP_QUAT     |
 8004060:	4b13      	ldr	r3, [pc, #76]	; (80040b0 <initMPU+0x1b0>)
 8004062:	f240 1271 	movw	r2, #369	; 0x171
 8004066:	839a      	strh	r2, [r3, #28]
                       DMP_FEATURE_SEND_RAW_ACCEL |
                       DMP_FEATURE_SEND_CAL_GYRO  |
                       DMP_FEATURE_GYRO_CAL       |
                       DMP_FEATURE_TAP; // quest'ultima serve solo per evitare un bug che limita la frequenza della fifo

    dmp_enable_feature(hal.dmp_features);
 8004068:	4b11      	ldr	r3, [pc, #68]	; (80040b0 <initMPU+0x1b0>)
 800406a:	8b9b      	ldrh	r3, [r3, #28]
 800406c:	4618      	mov	r0, r3
 800406e:	f006 fac3 	bl	800a5f8 <dmp_enable_feature>
    dmp_set_fifo_rate(DEFAULT_MPU_HZ);
 8004072:	2014      	movs	r0, #20
 8004074:	f006 f836 	bl	800a0e4 <dmp_set_fifo_rate>
    mpu_set_dmp_state(1);
 8004078:	2001      	movs	r0, #1
 800407a:	f005 fec7 	bl	8009e0c <mpu_set_dmp_state>
    hal.dmp_on = 1;
 800407e:	4b0c      	ldr	r3, [pc, #48]	; (80040b0 <initMPU+0x1b0>)
 8004080:	2201      	movs	r2, #1
 8004082:	709a      	strb	r2, [r3, #2]

    return;
 8004084:	bf00      	nop
}
 8004086:	3708      	adds	r7, #8
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	0801287c 	.word	0x0801287c
 8004090:	0801288c 	.word	0x0801288c
 8004094:	0801289c 	.word	0x0801289c
 8004098:	080128b0 	.word	0x080128b0
 800409c:	080128c4 	.word	0x080128c4
 80040a0:	080128d4 	.word	0x080128d4
 80040a4:	080128f0 	.word	0x080128f0
 80040a8:	000f4240 	.word	0x000f4240
 80040ac:	20000000 	.word	0x20000000
 80040b0:	20000568 	.word	0x20000568
 80040b4:	08012904 	.word	0x08012904
 80040b8:	08012914 	.word	0x08012914

080040bc <run_self_test>:
static inline void run_self_test(void)
{
 80040bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80040c0:	b090      	sub	sp, #64	; 0x40
 80040c2:	af06      	add	r7, sp, #24
    int result;
    long gyro[3], accel[3];

    result = mpu_run_self_test(gyro, accel);
 80040c4:	f107 020c 	add.w	r2, r7, #12
 80040c8:	f107 0318 	add.w	r3, r7, #24
 80040cc:	4611      	mov	r1, r2
 80040ce:	4618      	mov	r0, r3
 80040d0:	f005 fc68 	bl	80099a4 <mpu_run_self_test>
 80040d4:	6278      	str	r0, [r7, #36]	; 0x24

    if (result == 0x7) {
 80040d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d8:	2b07      	cmp	r3, #7
 80040da:	f040 80c4 	bne.w	8004266 <run_self_test+0x1aa>
        MPL_LOGI("Passed!\r\n");
 80040de:	4a73      	ldr	r2, [pc, #460]	; (80042ac <run_self_test+0x1f0>)
 80040e0:	2100      	movs	r1, #0
 80040e2:	2004      	movs	r0, #4
 80040e4:	f006 fdec 	bl	800acc0 <_MLPrintLog>
        MPL_LOGI("accel: %7.4f %7.4f %7.4f\r\n",
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	ee07 3a90 	vmov	s15, r3
 80040ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040f2:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 80042b0 <run_self_test+0x1f4>
 80040f6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80040fa:	ee16 0a90 	vmov	r0, s13
 80040fe:	f7fe fff3 	bl	80030e8 <__aeabi_f2d>
 8004102:	4604      	mov	r4, r0
 8004104:	460d      	mov	r5, r1
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	ee07 3a90 	vmov	s15, r3
 800410c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004110:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80042b0 <run_self_test+0x1f4>
 8004114:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004118:	ee16 0a90 	vmov	r0, s13
 800411c:	f7fe ffe4 	bl	80030e8 <__aeabi_f2d>
 8004120:	4680      	mov	r8, r0
 8004122:	4689      	mov	r9, r1
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	ee07 3a90 	vmov	s15, r3
 800412a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800412e:	ed9f 7a60 	vldr	s14, [pc, #384]	; 80042b0 <run_self_test+0x1f4>
 8004132:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004136:	ee16 0a90 	vmov	r0, s13
 800413a:	f7fe ffd5 	bl	80030e8 <__aeabi_f2d>
 800413e:	4602      	mov	r2, r0
 8004140:	460b      	mov	r3, r1
 8004142:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004146:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800414a:	e9cd 4500 	strd	r4, r5, [sp]
 800414e:	4a59      	ldr	r2, [pc, #356]	; (80042b4 <run_self_test+0x1f8>)
 8004150:	2100      	movs	r1, #0
 8004152:	2004      	movs	r0, #4
 8004154:	f006 fdb4 	bl	800acc0 <_MLPrintLog>
                    accel[0]/65536.f,
                    accel[1]/65536.f,
                    accel[2]/65536.f);
        MPL_LOGI("gyro: %7.4f %7.4f %7.4f\r\n",
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	ee07 3a90 	vmov	s15, r3
 800415e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004162:	ed9f 7a53 	vldr	s14, [pc, #332]	; 80042b0 <run_self_test+0x1f4>
 8004166:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800416a:	ee16 0a90 	vmov	r0, s13
 800416e:	f7fe ffbb 	bl	80030e8 <__aeabi_f2d>
 8004172:	4604      	mov	r4, r0
 8004174:	460d      	mov	r5, r1
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	ee07 3a90 	vmov	s15, r3
 800417c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004180:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80042b0 <run_self_test+0x1f4>
 8004184:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004188:	ee16 0a90 	vmov	r0, s13
 800418c:	f7fe ffac 	bl	80030e8 <__aeabi_f2d>
 8004190:	4680      	mov	r8, r0
 8004192:	4689      	mov	r9, r1
 8004194:	6a3b      	ldr	r3, [r7, #32]
 8004196:	ee07 3a90 	vmov	s15, r3
 800419a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800419e:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80042b0 <run_self_test+0x1f4>
 80041a2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80041a6:	ee16 0a90 	vmov	r0, s13
 80041aa:	f7fe ff9d 	bl	80030e8 <__aeabi_f2d>
 80041ae:	4602      	mov	r2, r0
 80041b0:	460b      	mov	r3, r1
 80041b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80041b6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80041ba:	e9cd 4500 	strd	r4, r5, [sp]
 80041be:	4a3e      	ldr	r2, [pc, #248]	; (80042b8 <run_self_test+0x1fc>)
 80041c0:	2100      	movs	r1, #0
 80041c2:	2004      	movs	r0, #4
 80041c4:	f006 fd7c 	bl	800acc0 <_MLPrintLog>
                    gyro[2]/65536.f);

        unsigned short accel_sens;
        float gyro_sens;

        mpu_get_accel_sens(&accel_sens);
 80041c8:	f107 030a 	add.w	r3, r7, #10
 80041cc:	4618      	mov	r0, r3
 80041ce:	f004 fb01 	bl	80087d4 <mpu_get_accel_sens>
        accel[0] *= accel_sens;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	897a      	ldrh	r2, [r7, #10]
 80041d6:	fb02 f303 	mul.w	r3, r2, r3
 80041da:	60fb      	str	r3, [r7, #12]
        accel[1] *= accel_sens;
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	897a      	ldrh	r2, [r7, #10]
 80041e0:	fb02 f303 	mul.w	r3, r2, r3
 80041e4:	613b      	str	r3, [r7, #16]
        accel[2] *= accel_sens;
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	897a      	ldrh	r2, [r7, #10]
 80041ea:	fb02 f303 	mul.w	r3, r2, r3
 80041ee:	617b      	str	r3, [r7, #20]
        inv_set_accel_bias(accel, 3);
 80041f0:	f107 030c 	add.w	r3, r7, #12
 80041f4:	2103      	movs	r1, #3
 80041f6:	4618      	mov	r0, r3
 80041f8:	f007 f916 	bl	800b428 <inv_set_accel_bias>
        mpu_get_gyro_sens(&gyro_sens);
 80041fc:	1d3b      	adds	r3, r7, #4
 80041fe:	4618      	mov	r0, r3
 8004200:	f004 fab0 	bl	8008764 <mpu_get_gyro_sens>
        gyro[0] = (long) (gyro[0] * gyro_sens);
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	ee07 3a90 	vmov	s15, r3
 800420a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800420e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004216:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800421a:	ee17 3a90 	vmov	r3, s15
 800421e:	61bb      	str	r3, [r7, #24]
        gyro[1] = (long) (gyro[1] * gyro_sens);
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	ee07 3a90 	vmov	s15, r3
 8004226:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800422a:	edd7 7a01 	vldr	s15, [r7, #4]
 800422e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004232:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004236:	ee17 3a90 	vmov	r3, s15
 800423a:	61fb      	str	r3, [r7, #28]
        gyro[2] = (long) (gyro[2] * gyro_sens);
 800423c:	6a3b      	ldr	r3, [r7, #32]
 800423e:	ee07 3a90 	vmov	s15, r3
 8004242:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004246:	edd7 7a01 	vldr	s15, [r7, #4]
 800424a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800424e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004252:	ee17 3a90 	vmov	r3, s15
 8004256:	623b      	str	r3, [r7, #32]
        inv_set_gyro_bias(gyro, 3);
 8004258:	f107 0318 	add.w	r3, r7, #24
 800425c:	2103      	movs	r1, #3
 800425e:	4618      	mov	r0, r3
 8004260:	f007 f914 	bl	800b48c <inv_set_gyro_bias>
                MPL_LOGE("Accel failed.\r\n");
            if (!(result & 0x4))
                MPL_LOGE("Compass failed.\r\n");
     }

}
 8004264:	e01d      	b.n	80042a2 <run_self_test+0x1e6>
            if (!(result & 0x1))
 8004266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004268:	f003 0301 	and.w	r3, r3, #1
 800426c:	2b00      	cmp	r3, #0
 800426e:	d104      	bne.n	800427a <run_self_test+0x1be>
                MPL_LOGE("Gyro failed.\r\n");
 8004270:	4a12      	ldr	r2, [pc, #72]	; (80042bc <run_self_test+0x200>)
 8004272:	2100      	movs	r1, #0
 8004274:	2006      	movs	r0, #6
 8004276:	f006 fd23 	bl	800acc0 <_MLPrintLog>
            if (!(result & 0x2))
 800427a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427c:	f003 0302 	and.w	r3, r3, #2
 8004280:	2b00      	cmp	r3, #0
 8004282:	d104      	bne.n	800428e <run_self_test+0x1d2>
                MPL_LOGE("Accel failed.\r\n");
 8004284:	4a0e      	ldr	r2, [pc, #56]	; (80042c0 <run_self_test+0x204>)
 8004286:	2100      	movs	r1, #0
 8004288:	2006      	movs	r0, #6
 800428a:	f006 fd19 	bl	800acc0 <_MLPrintLog>
            if (!(result & 0x4))
 800428e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004290:	f003 0304 	and.w	r3, r3, #4
 8004294:	2b00      	cmp	r3, #0
 8004296:	d104      	bne.n	80042a2 <run_self_test+0x1e6>
                MPL_LOGE("Compass failed.\r\n");
 8004298:	4a0a      	ldr	r2, [pc, #40]	; (80042c4 <run_self_test+0x208>)
 800429a:	2100      	movs	r1, #0
 800429c:	2006      	movs	r0, #6
 800429e:	f006 fd0f 	bl	800acc0 <_MLPrintLog>
}
 80042a2:	bf00      	nop
 80042a4:	3728      	adds	r7, #40	; 0x28
 80042a6:	46bd      	mov	sp, r7
 80042a8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80042ac:	08012924 	.word	0x08012924
 80042b0:	47800000 	.word	0x47800000
 80042b4:	08012930 	.word	0x08012930
 80042b8:	0801294c 	.word	0x0801294c
 80042bc:	08012968 	.word	0x08012968
 80042c0:	08012978 	.word	0x08012978
 80042c4:	08012988 	.word	0x08012988

080042c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80042c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042cc:	b0a0      	sub	sp, #128	; 0x80
 80042ce:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN 1 */
    unsigned long sensorTimestamp = 0;
 80042d0:	2300      	movs	r3, #0
 80042d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    unsigned long oldSensorTimestamp = 0;
 80042d4:	2300      	movs	r3, #0
 80042d6:	65fb      	str	r3, [r7, #92]	; 0x5c
    float dT = 0.0;
 80042d8:	f04f 0300 	mov.w	r3, #0
 80042dc:	653b      	str	r3, [r7, #80]	; 0x50

    short gyro[3], accel_short[3], sensors;
    long  quat[4];
    unsigned char more;

    float convFact = 1073741824.0;
 80042de:	f04f 439d 	mov.w	r3, #1317011456	; 0x4e800000
 80042e2:	64fb      	str	r3, [r7, #76]	; 0x4c

    float q0 = 0.0;
 80042e4:	f04f 0300 	mov.w	r3, #0
 80042e8:	64bb      	str	r3, [r7, #72]	; 0x48
    float q1 = 0.0;
 80042ea:	f04f 0300 	mov.w	r3, #0
 80042ee:	647b      	str	r3, [r7, #68]	; 0x44
    float q2 = 0.0;
 80042f0:	f04f 0300 	mov.w	r3, #0
 80042f4:	643b      	str	r3, [r7, #64]	; 0x40
    float q3 = 0.0;
 80042f6:	f04f 0300 	mov.w	r3, #0
 80042fa:	63fb      	str	r3, [r7, #60]	; 0x3c

    float psi = 0.0;
 80042fc:	f04f 0300 	mov.w	r3, #0
 8004300:	63bb      	str	r3, [r7, #56]	; 0x38
    float theta = 0.0;
 8004302:	f04f 0300 	mov.w	r3, #0
 8004306:	637b      	str	r3, [r7, #52]	; 0x34
    float phi = 0.0;
 8004308:	f04f 0300 	mov.w	r3, #0
 800430c:	633b      	str	r3, [r7, #48]	; 0x30

    float zeroPsi = 0.0;
 800430e:	f04f 0300 	mov.w	r3, #0
 8004312:	65bb      	str	r3, [r7, #88]	; 0x58
    uint8_t psiCalibDone = 0;
 8004314:	2300      	movs	r3, #0
 8004316:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800431a:	f000 fd13 	bl	8004d44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800431e:	f000 fa29 	bl	8004774 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004322:	f000 faeb 	bl	80048fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8004326:	f000 fabf 	bl	80048a8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800432a:	f000 fa8f 	bl	800484c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  checkMPUI2C();
 800432e:	f7ff fd89 	bl	8003e44 <checkMPUI2C>

  initMPU();
 8004332:	f7ff fde5 	bl	8003f00 <initMPU>

  run_self_test();
 8004336:	f7ff fec1 	bl	80040bc <run_self_test>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      dmp_read_fifo(gyro, accel_short, quat, &sensorTimestamp, &sensors, &more);
 800433a:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 800433e:	f107 0208 	add.w	r2, r7, #8
 8004342:	f107 011c 	add.w	r1, r7, #28
 8004346:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800434a:	1dfb      	adds	r3, r7, #7
 800434c:	9301      	str	r3, [sp, #4]
 800434e:	f107 031a 	add.w	r3, r7, #26
 8004352:	9300      	str	r3, [sp, #0]
 8004354:	4623      	mov	r3, r4
 8004356:	f006 fb39 	bl	800a9cc <dmp_read_fifo>
      if (sensors & (INV_WXYZ_QUAT | INV_XYZ_ACCEL | INV_XYZ_GYRO)) {
 800435a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800435e:	b29b      	uxth	r3, r3
 8004360:	f403 73bc 	and.w	r3, r3, #376	; 0x178
 8004364:	2b00      	cmp	r3, #0
 8004366:	f000 8200 	beq.w	800476a <main+0x4a2>
          dT = (float)(sensorTimestamp-oldSensorTimestamp)/1000.0;
 800436a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800436c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	ee07 3a90 	vmov	s15, r3
 8004374:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004378:	eddf 6ae1 	vldr	s13, [pc, #900]	; 8004700 <main+0x438>
 800437c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004380:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
          oldSensorTimestamp = sensorTimestamp;
 8004384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004386:	65fb      	str	r3, [r7, #92]	; 0x5c

          inv_build_quat(quat, 0, sensorTimestamp);
 8004388:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800438a:	f107 0308 	add.w	r3, r7, #8
 800438e:	2100      	movs	r1, #0
 8004390:	4618      	mov	r0, r3
 8004392:	f007 f8f7 	bl	800b584 <inv_build_quat>

          q0 = (((double)quat[0])/convFact);
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	4618      	mov	r0, r3
 800439a:	f7fe fe93 	bl	80030c4 <__aeabi_i2d>
 800439e:	4604      	mov	r4, r0
 80043a0:	460d      	mov	r5, r1
 80043a2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80043a4:	f7fe fea0 	bl	80030e8 <__aeabi_f2d>
 80043a8:	4602      	mov	r2, r0
 80043aa:	460b      	mov	r3, r1
 80043ac:	4620      	mov	r0, r4
 80043ae:	4629      	mov	r1, r5
 80043b0:	f7ff f81c 	bl	80033ec <__aeabi_ddiv>
 80043b4:	4602      	mov	r2, r0
 80043b6:	460b      	mov	r3, r1
 80043b8:	4610      	mov	r0, r2
 80043ba:	4619      	mov	r1, r3
 80043bc:	f7ff f9c4 	bl	8003748 <__aeabi_d2f>
 80043c0:	4603      	mov	r3, r0
 80043c2:	64bb      	str	r3, [r7, #72]	; 0x48
          q1 = (((double)quat[1])/convFact);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7fe fe7c 	bl	80030c4 <__aeabi_i2d>
 80043cc:	4604      	mov	r4, r0
 80043ce:	460d      	mov	r5, r1
 80043d0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80043d2:	f7fe fe89 	bl	80030e8 <__aeabi_f2d>
 80043d6:	4602      	mov	r2, r0
 80043d8:	460b      	mov	r3, r1
 80043da:	4620      	mov	r0, r4
 80043dc:	4629      	mov	r1, r5
 80043de:	f7ff f805 	bl	80033ec <__aeabi_ddiv>
 80043e2:	4602      	mov	r2, r0
 80043e4:	460b      	mov	r3, r1
 80043e6:	4610      	mov	r0, r2
 80043e8:	4619      	mov	r1, r3
 80043ea:	f7ff f9ad 	bl	8003748 <__aeabi_d2f>
 80043ee:	4603      	mov	r3, r0
 80043f0:	647b      	str	r3, [r7, #68]	; 0x44
          q2 = (((double)quat[2])/convFact);
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7fe fe65 	bl	80030c4 <__aeabi_i2d>
 80043fa:	4604      	mov	r4, r0
 80043fc:	460d      	mov	r5, r1
 80043fe:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004400:	f7fe fe72 	bl	80030e8 <__aeabi_f2d>
 8004404:	4602      	mov	r2, r0
 8004406:	460b      	mov	r3, r1
 8004408:	4620      	mov	r0, r4
 800440a:	4629      	mov	r1, r5
 800440c:	f7fe ffee 	bl	80033ec <__aeabi_ddiv>
 8004410:	4602      	mov	r2, r0
 8004412:	460b      	mov	r3, r1
 8004414:	4610      	mov	r0, r2
 8004416:	4619      	mov	r1, r3
 8004418:	f7ff f996 	bl	8003748 <__aeabi_d2f>
 800441c:	4603      	mov	r3, r0
 800441e:	643b      	str	r3, [r7, #64]	; 0x40
          q3 = (((double)quat[3])/convFact);
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	4618      	mov	r0, r3
 8004424:	f7fe fe4e 	bl	80030c4 <__aeabi_i2d>
 8004428:	4604      	mov	r4, r0
 800442a:	460d      	mov	r5, r1
 800442c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800442e:	f7fe fe5b 	bl	80030e8 <__aeabi_f2d>
 8004432:	4602      	mov	r2, r0
 8004434:	460b      	mov	r3, r1
 8004436:	4620      	mov	r0, r4
 8004438:	4629      	mov	r1, r5
 800443a:	f7fe ffd7 	bl	80033ec <__aeabi_ddiv>
 800443e:	4602      	mov	r2, r0
 8004440:	460b      	mov	r3, r1
 8004442:	4610      	mov	r0, r2
 8004444:	4619      	mov	r1, r3
 8004446:	f7ff f97f 	bl	8003748 <__aeabi_d2f>
 800444a:	4603      	mov	r3, r0
 800444c:	63fb      	str	r3, [r7, #60]	; 0x3c

          phi = atan2(2*((q0*q1)+(q2*q3)),1-(2*(pow(q1,2)+pow(q2,2))))*M_1_PI*180;
 800444e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004452:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004456:	ee27 7a27 	vmul.f32	s14, s14, s15
 800445a:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 800445e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004462:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004466:	ee77 7a27 	vadd.f32	s15, s14, s15
 800446a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800446e:	ee17 0a90 	vmov	r0, s15
 8004472:	f7fe fe39 	bl	80030e8 <__aeabi_f2d>
 8004476:	4604      	mov	r4, r0
 8004478:	460d      	mov	r5, r1
 800447a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800447c:	f7fe fe34 	bl	80030e8 <__aeabi_f2d>
 8004480:	4602      	mov	r2, r0
 8004482:	460b      	mov	r3, r1
 8004484:	ed9f 1b98 	vldr	d1, [pc, #608]	; 80046e8 <main+0x420>
 8004488:	ec43 2b10 	vmov	d0, r2, r3
 800448c:	f00b ff30 	bl	80102f0 <pow>
 8004490:	ec59 8b10 	vmov	r8, r9, d0
 8004494:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004496:	f7fe fe27 	bl	80030e8 <__aeabi_f2d>
 800449a:	4602      	mov	r2, r0
 800449c:	460b      	mov	r3, r1
 800449e:	ed9f 1b92 	vldr	d1, [pc, #584]	; 80046e8 <main+0x420>
 80044a2:	ec43 2b10 	vmov	d0, r2, r3
 80044a6:	f00b ff23 	bl	80102f0 <pow>
 80044aa:	ec53 2b10 	vmov	r2, r3, d0
 80044ae:	4640      	mov	r0, r8
 80044b0:	4649      	mov	r1, r9
 80044b2:	f7fe fcbb 	bl	8002e2c <__adddf3>
 80044b6:	4602      	mov	r2, r0
 80044b8:	460b      	mov	r3, r1
 80044ba:	4610      	mov	r0, r2
 80044bc:	4619      	mov	r1, r3
 80044be:	4602      	mov	r2, r0
 80044c0:	460b      	mov	r3, r1
 80044c2:	f7fe fcb3 	bl	8002e2c <__adddf3>
 80044c6:	4602      	mov	r2, r0
 80044c8:	460b      	mov	r3, r1
 80044ca:	f04f 0000 	mov.w	r0, #0
 80044ce:	498d      	ldr	r1, [pc, #564]	; (8004704 <main+0x43c>)
 80044d0:	f7fe fcaa 	bl	8002e28 <__aeabi_dsub>
 80044d4:	4602      	mov	r2, r0
 80044d6:	460b      	mov	r3, r1
 80044d8:	ec43 2b17 	vmov	d7, r2, r3
 80044dc:	eeb0 1a47 	vmov.f32	s2, s14
 80044e0:	eef0 1a67 	vmov.f32	s3, s15
 80044e4:	ec45 4b10 	vmov	d0, r4, r5
 80044e8:	f00b ff00 	bl	80102ec <atan2>
 80044ec:	ec51 0b10 	vmov	r0, r1, d0
 80044f0:	a37f      	add	r3, pc, #508	; (adr r3, 80046f0 <main+0x428>)
 80044f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f6:	f7fe fe4f 	bl	8003198 <__aeabi_dmul>
 80044fa:	4602      	mov	r2, r0
 80044fc:	460b      	mov	r3, r1
 80044fe:	4610      	mov	r0, r2
 8004500:	4619      	mov	r1, r3
 8004502:	f04f 0200 	mov.w	r2, #0
 8004506:	4b80      	ldr	r3, [pc, #512]	; (8004708 <main+0x440>)
 8004508:	f7fe fe46 	bl	8003198 <__aeabi_dmul>
 800450c:	4602      	mov	r2, r0
 800450e:	460b      	mov	r3, r1
 8004510:	4610      	mov	r0, r2
 8004512:	4619      	mov	r1, r3
 8004514:	f7ff f918 	bl	8003748 <__aeabi_d2f>
 8004518:	4603      	mov	r3, r0
 800451a:	633b      	str	r3, [r7, #48]	; 0x30
          theta = asin(2*((q0*q2)-(q3*q1)))*M_1_PI*180;
 800451c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004520:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8004524:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004528:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 800452c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004530:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004534:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004538:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800453c:	ee17 0a90 	vmov	r0, s15
 8004540:	f7fe fdd2 	bl	80030e8 <__aeabi_f2d>
 8004544:	4602      	mov	r2, r0
 8004546:	460b      	mov	r3, r1
 8004548:	ec43 2b10 	vmov	d0, r2, r3
 800454c:	f00b fe94 	bl	8010278 <asin>
 8004550:	ec51 0b10 	vmov	r0, r1, d0
 8004554:	a366      	add	r3, pc, #408	; (adr r3, 80046f0 <main+0x428>)
 8004556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800455a:	f7fe fe1d 	bl	8003198 <__aeabi_dmul>
 800455e:	4602      	mov	r2, r0
 8004560:	460b      	mov	r3, r1
 8004562:	4610      	mov	r0, r2
 8004564:	4619      	mov	r1, r3
 8004566:	f04f 0200 	mov.w	r2, #0
 800456a:	4b67      	ldr	r3, [pc, #412]	; (8004708 <main+0x440>)
 800456c:	f7fe fe14 	bl	8003198 <__aeabi_dmul>
 8004570:	4602      	mov	r2, r0
 8004572:	460b      	mov	r3, r1
 8004574:	4610      	mov	r0, r2
 8004576:	4619      	mov	r1, r3
 8004578:	f7ff f8e6 	bl	8003748 <__aeabi_d2f>
 800457c:	4603      	mov	r3, r0
 800457e:	637b      	str	r3, [r7, #52]	; 0x34
          psi = atan2(2*((q0*q3)+(q1*q2)),1-(2*(pow(q2,2)+pow(q3,2))))*M_1_PI*180;
 8004580:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004584:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004588:	ee27 7a27 	vmul.f32	s14, s14, s15
 800458c:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8004590:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8004594:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004598:	ee77 7a27 	vadd.f32	s15, s14, s15
 800459c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80045a0:	ee17 0a90 	vmov	r0, s15
 80045a4:	f7fe fda0 	bl	80030e8 <__aeabi_f2d>
 80045a8:	4604      	mov	r4, r0
 80045aa:	460d      	mov	r5, r1
 80045ac:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80045ae:	f7fe fd9b 	bl	80030e8 <__aeabi_f2d>
 80045b2:	4602      	mov	r2, r0
 80045b4:	460b      	mov	r3, r1
 80045b6:	ed9f 1b4c 	vldr	d1, [pc, #304]	; 80046e8 <main+0x420>
 80045ba:	ec43 2b10 	vmov	d0, r2, r3
 80045be:	f00b fe97 	bl	80102f0 <pow>
 80045c2:	ec59 8b10 	vmov	r8, r9, d0
 80045c6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80045c8:	f7fe fd8e 	bl	80030e8 <__aeabi_f2d>
 80045cc:	4602      	mov	r2, r0
 80045ce:	460b      	mov	r3, r1
 80045d0:	ed9f 1b45 	vldr	d1, [pc, #276]	; 80046e8 <main+0x420>
 80045d4:	ec43 2b10 	vmov	d0, r2, r3
 80045d8:	f00b fe8a 	bl	80102f0 <pow>
 80045dc:	ec53 2b10 	vmov	r2, r3, d0
 80045e0:	4640      	mov	r0, r8
 80045e2:	4649      	mov	r1, r9
 80045e4:	f7fe fc22 	bl	8002e2c <__adddf3>
 80045e8:	4602      	mov	r2, r0
 80045ea:	460b      	mov	r3, r1
 80045ec:	4610      	mov	r0, r2
 80045ee:	4619      	mov	r1, r3
 80045f0:	4602      	mov	r2, r0
 80045f2:	460b      	mov	r3, r1
 80045f4:	f7fe fc1a 	bl	8002e2c <__adddf3>
 80045f8:	4602      	mov	r2, r0
 80045fa:	460b      	mov	r3, r1
 80045fc:	f04f 0000 	mov.w	r0, #0
 8004600:	4940      	ldr	r1, [pc, #256]	; (8004704 <main+0x43c>)
 8004602:	f7fe fc11 	bl	8002e28 <__aeabi_dsub>
 8004606:	4602      	mov	r2, r0
 8004608:	460b      	mov	r3, r1
 800460a:	ec43 2b17 	vmov	d7, r2, r3
 800460e:	eeb0 1a47 	vmov.f32	s2, s14
 8004612:	eef0 1a67 	vmov.f32	s3, s15
 8004616:	ec45 4b10 	vmov	d0, r4, r5
 800461a:	f00b fe67 	bl	80102ec <atan2>
 800461e:	ec51 0b10 	vmov	r0, r1, d0
 8004622:	a333      	add	r3, pc, #204	; (adr r3, 80046f0 <main+0x428>)
 8004624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004628:	f7fe fdb6 	bl	8003198 <__aeabi_dmul>
 800462c:	4602      	mov	r2, r0
 800462e:	460b      	mov	r3, r1
 8004630:	4610      	mov	r0, r2
 8004632:	4619      	mov	r1, r3
 8004634:	f04f 0200 	mov.w	r2, #0
 8004638:	4b33      	ldr	r3, [pc, #204]	; (8004708 <main+0x440>)
 800463a:	f7fe fdad 	bl	8003198 <__aeabi_dmul>
 800463e:	4602      	mov	r2, r0
 8004640:	460b      	mov	r3, r1
 8004642:	4610      	mov	r0, r2
 8004644:	4619      	mov	r1, r3
 8004646:	f7ff f87f 	bl	8003748 <__aeabi_d2f>
 800464a:	4603      	mov	r3, r0
 800464c:	63bb      	str	r3, [r7, #56]	; 0x38

          if(psiCalibDone == 0){
 800464e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004652:	2b00      	cmp	r3, #0
 8004654:	d163      	bne.n	800471e <main+0x456>
              MPL_LOGI("CALIB: psi=%3.4f\tzeroPsi=%3.4f\tdT=%3.4f\tdpsi/dt=%3.4f\r\n",
 8004656:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004658:	f7fe fd46 	bl	80030e8 <__aeabi_f2d>
 800465c:	4604      	mov	r4, r0
 800465e:	460d      	mov	r5, r1
 8004660:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004662:	f7fe fd41 	bl	80030e8 <__aeabi_f2d>
 8004666:	4680      	mov	r8, r0
 8004668:	4689      	mov	r9, r1
 800466a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800466c:	f7fe fd3c 	bl	80030e8 <__aeabi_f2d>
 8004670:	4682      	mov	sl, r0
 8004672:	468b      	mov	fp, r1
 8004674:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004678:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800467c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004680:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004684:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004688:	eef0 7ae7 	vabs.f32	s15, s15
 800468c:	ee17 0a90 	vmov	r0, s15
 8004690:	f7fe fd2a 	bl	80030e8 <__aeabi_f2d>
 8004694:	4602      	mov	r2, r0
 8004696:	460b      	mov	r3, r1
 8004698:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800469c:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80046a0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80046a4:	e9cd 4500 	strd	r4, r5, [sp]
 80046a8:	4a18      	ldr	r2, [pc, #96]	; (800470c <main+0x444>)
 80046aa:	2100      	movs	r1, #0
 80046ac:	2004      	movs	r0, #4
 80046ae:	f006 fb07 	bl	800acc0 <_MLPrintLog>
                      psi,zeroPsi,dT,fabsf((psi-zeroPsi)/dT));
              if(fabsf((psi-zeroPsi)/dT) >= 0.001){
 80046b2:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80046b6:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80046ba:	ee77 6a67 	vsub.f32	s13, s14, s15
 80046be:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80046c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046c6:	eef0 7ae7 	vabs.f32	s15, s15
 80046ca:	ee17 0a90 	vmov	r0, s15
 80046ce:	f7fe fd0b 	bl	80030e8 <__aeabi_f2d>
 80046d2:	a309      	add	r3, pc, #36	; (adr r3, 80046f8 <main+0x430>)
 80046d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d8:	f7fe ffe4 	bl	80036a4 <__aeabi_dcmpge>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d019      	beq.n	8004716 <main+0x44e>
 80046e2:	e015      	b.n	8004710 <main+0x448>
 80046e4:	f3af 8000 	nop.w
 80046e8:	00000000 	.word	0x00000000
 80046ec:	40000000 	.word	0x40000000
 80046f0:	6dc9c883 	.word	0x6dc9c883
 80046f4:	3fd45f30 	.word	0x3fd45f30
 80046f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80046fc:	3f50624d 	.word	0x3f50624d
 8004700:	447a0000 	.word	0x447a0000
 8004704:	3ff00000 	.word	0x3ff00000
 8004708:	40668000 	.word	0x40668000
 800470c:	0801299c 	.word	0x0801299c
                  zeroPsi = psi;
 8004710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004712:	65bb      	str	r3, [r7, #88]	; 0x58
 8004714:	e029      	b.n	800476a <main+0x4a2>
              }else
                  psiCalibDone = 1;
 8004716:	2301      	movs	r3, #1
 8004718:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800471c:	e025      	b.n	800476a <main+0x4a2>
          }else{
              MPL_LOGI("\rphi=%3.2f\ttheta=%3.2f\tpsi=%3.2f",phi,theta,psi-zeroPsi);
 800471e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004720:	f7fe fce2 	bl	80030e8 <__aeabi_f2d>
 8004724:	4604      	mov	r4, r0
 8004726:	460d      	mov	r5, r1
 8004728:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800472a:	f7fe fcdd 	bl	80030e8 <__aeabi_f2d>
 800472e:	4680      	mov	r8, r0
 8004730:	4689      	mov	r9, r1
 8004732:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004736:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800473a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800473e:	ee17 0a90 	vmov	r0, s15
 8004742:	f7fe fcd1 	bl	80030e8 <__aeabi_f2d>
 8004746:	4602      	mov	r2, r0
 8004748:	460b      	mov	r3, r1
 800474a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800474e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8004752:	e9cd 4500 	strd	r4, r5, [sp]
 8004756:	4a06      	ldr	r2, [pc, #24]	; (8004770 <main+0x4a8>)
 8004758:	2100      	movs	r1, #0
 800475a:	2004      	movs	r0, #4
 800475c:	f006 fab0 	bl	800acc0 <_MLPrintLog>

              eMPL_send_quat(quat);
 8004760:	f107 0308 	add.w	r3, r7, #8
 8004764:	4618      	mov	r0, r3
 8004766:	f006 fb47 	bl	800adf8 <eMPL_send_quat>
          }
      }

      inv_execute_on_data();
 800476a:	f007 f827 	bl	800b7bc <inv_execute_on_data>
      dmp_read_fifo(gyro, accel_short, quat, &sensorTimestamp, &sensors, &more);
 800476e:	e5e4      	b.n	800433a <main+0x72>
 8004770:	080129d4 	.word	0x080129d4

08004774 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b094      	sub	sp, #80	; 0x50
 8004778:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800477a:	f107 0320 	add.w	r3, r7, #32
 800477e:	2230      	movs	r2, #48	; 0x30
 8004780:	2100      	movs	r1, #0
 8004782:	4618      	mov	r0, r3
 8004784:	f008 fcd4 	bl	800d130 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004788:	f107 030c 	add.w	r3, r7, #12
 800478c:	2200      	movs	r2, #0
 800478e:	601a      	str	r2, [r3, #0]
 8004790:	605a      	str	r2, [r3, #4]
 8004792:	609a      	str	r2, [r3, #8]
 8004794:	60da      	str	r2, [r3, #12]
 8004796:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004798:	2300      	movs	r3, #0
 800479a:	60bb      	str	r3, [r7, #8]
 800479c:	4b29      	ldr	r3, [pc, #164]	; (8004844 <SystemClock_Config+0xd0>)
 800479e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a0:	4a28      	ldr	r2, [pc, #160]	; (8004844 <SystemClock_Config+0xd0>)
 80047a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047a6:	6413      	str	r3, [r2, #64]	; 0x40
 80047a8:	4b26      	ldr	r3, [pc, #152]	; (8004844 <SystemClock_Config+0xd0>)
 80047aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047b0:	60bb      	str	r3, [r7, #8]
 80047b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80047b4:	2300      	movs	r3, #0
 80047b6:	607b      	str	r3, [r7, #4]
 80047b8:	4b23      	ldr	r3, [pc, #140]	; (8004848 <SystemClock_Config+0xd4>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80047c0:	4a21      	ldr	r2, [pc, #132]	; (8004848 <SystemClock_Config+0xd4>)
 80047c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047c6:	6013      	str	r3, [r2, #0]
 80047c8:	4b1f      	ldr	r3, [pc, #124]	; (8004848 <SystemClock_Config+0xd4>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80047d0:	607b      	str	r3, [r7, #4]
 80047d2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80047d4:	2302      	movs	r3, #2
 80047d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80047d8:	2301      	movs	r3, #1
 80047da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80047dc:	2310      	movs	r3, #16
 80047de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80047e0:	2302      	movs	r3, #2
 80047e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80047e4:	2300      	movs	r3, #0
 80047e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80047e8:	2310      	movs	r3, #16
 80047ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80047ec:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80047f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80047f2:	2304      	movs	r3, #4
 80047f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80047f6:	2307      	movs	r3, #7
 80047f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80047fa:	f107 0320 	add.w	r3, r7, #32
 80047fe:	4618      	mov	r0, r3
 8004800:	f001 fe1e 	bl	8006440 <HAL_RCC_OscConfig>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d001      	beq.n	800480e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800480a:	f000 f89f 	bl	800494c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800480e:	230f      	movs	r3, #15
 8004810:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004812:	2302      	movs	r3, #2
 8004814:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004816:	2300      	movs	r3, #0
 8004818:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800481a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800481e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004820:	2300      	movs	r3, #0
 8004822:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004824:	f107 030c 	add.w	r3, r7, #12
 8004828:	2102      	movs	r1, #2
 800482a:	4618      	mov	r0, r3
 800482c:	f002 f880 	bl	8006930 <HAL_RCC_ClockConfig>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d001      	beq.n	800483a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8004836:	f000 f889 	bl	800494c <Error_Handler>
  }
}
 800483a:	bf00      	nop
 800483c:	3750      	adds	r7, #80	; 0x50
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	40023800 	.word	0x40023800
 8004848:	40007000 	.word	0x40007000

0800484c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004850:	4b12      	ldr	r3, [pc, #72]	; (800489c <MX_I2C1_Init+0x50>)
 8004852:	4a13      	ldr	r2, [pc, #76]	; (80048a0 <MX_I2C1_Init+0x54>)
 8004854:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8004856:	4b11      	ldr	r3, [pc, #68]	; (800489c <MX_I2C1_Init+0x50>)
 8004858:	4a12      	ldr	r2, [pc, #72]	; (80048a4 <MX_I2C1_Init+0x58>)
 800485a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800485c:	4b0f      	ldr	r3, [pc, #60]	; (800489c <MX_I2C1_Init+0x50>)
 800485e:	2200      	movs	r2, #0
 8004860:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004862:	4b0e      	ldr	r3, [pc, #56]	; (800489c <MX_I2C1_Init+0x50>)
 8004864:	2200      	movs	r2, #0
 8004866:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004868:	4b0c      	ldr	r3, [pc, #48]	; (800489c <MX_I2C1_Init+0x50>)
 800486a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800486e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004870:	4b0a      	ldr	r3, [pc, #40]	; (800489c <MX_I2C1_Init+0x50>)
 8004872:	2200      	movs	r2, #0
 8004874:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004876:	4b09      	ldr	r3, [pc, #36]	; (800489c <MX_I2C1_Init+0x50>)
 8004878:	2200      	movs	r2, #0
 800487a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800487c:	4b07      	ldr	r3, [pc, #28]	; (800489c <MX_I2C1_Init+0x50>)
 800487e:	2200      	movs	r2, #0
 8004880:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004882:	4b06      	ldr	r3, [pc, #24]	; (800489c <MX_I2C1_Init+0x50>)
 8004884:	2200      	movs	r2, #0
 8004886:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004888:	4804      	ldr	r0, [pc, #16]	; (800489c <MX_I2C1_Init+0x50>)
 800488a:	f000 fe19 	bl	80054c0 <HAL_I2C_Init>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d001      	beq.n	8004898 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004894:	f000 f85a 	bl	800494c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004898:	bf00      	nop
 800489a:	bd80      	pop	{r7, pc}
 800489c:	20000b20 	.word	0x20000b20
 80048a0:	40005400 	.word	0x40005400
 80048a4:	00061a80 	.word	0x00061a80

080048a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80048ac:	4b11      	ldr	r3, [pc, #68]	; (80048f4 <MX_USART2_UART_Init+0x4c>)
 80048ae:	4a12      	ldr	r2, [pc, #72]	; (80048f8 <MX_USART2_UART_Init+0x50>)
 80048b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80048b2:	4b10      	ldr	r3, [pc, #64]	; (80048f4 <MX_USART2_UART_Init+0x4c>)
 80048b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80048b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80048ba:	4b0e      	ldr	r3, [pc, #56]	; (80048f4 <MX_USART2_UART_Init+0x4c>)
 80048bc:	2200      	movs	r2, #0
 80048be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80048c0:	4b0c      	ldr	r3, [pc, #48]	; (80048f4 <MX_USART2_UART_Init+0x4c>)
 80048c2:	2200      	movs	r2, #0
 80048c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80048c6:	4b0b      	ldr	r3, [pc, #44]	; (80048f4 <MX_USART2_UART_Init+0x4c>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80048cc:	4b09      	ldr	r3, [pc, #36]	; (80048f4 <MX_USART2_UART_Init+0x4c>)
 80048ce:	220c      	movs	r2, #12
 80048d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80048d2:	4b08      	ldr	r3, [pc, #32]	; (80048f4 <MX_USART2_UART_Init+0x4c>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80048d8:	4b06      	ldr	r3, [pc, #24]	; (80048f4 <MX_USART2_UART_Init+0x4c>)
 80048da:	2200      	movs	r2, #0
 80048dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80048de:	4805      	ldr	r0, [pc, #20]	; (80048f4 <MX_USART2_UART_Init+0x4c>)
 80048e0:	f002 fa22 	bl	8006d28 <HAL_UART_Init>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d001      	beq.n	80048ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80048ea:	f000 f82f 	bl	800494c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80048ee:	bf00      	nop
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	20000b74 	.word	0x20000b74
 80048f8:	40004400 	.word	0x40004400

080048fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004902:	2300      	movs	r3, #0
 8004904:	607b      	str	r3, [r7, #4]
 8004906:	4b10      	ldr	r3, [pc, #64]	; (8004948 <MX_GPIO_Init+0x4c>)
 8004908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490a:	4a0f      	ldr	r2, [pc, #60]	; (8004948 <MX_GPIO_Init+0x4c>)
 800490c:	f043 0301 	orr.w	r3, r3, #1
 8004910:	6313      	str	r3, [r2, #48]	; 0x30
 8004912:	4b0d      	ldr	r3, [pc, #52]	; (8004948 <MX_GPIO_Init+0x4c>)
 8004914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004916:	f003 0301 	and.w	r3, r3, #1
 800491a:	607b      	str	r3, [r7, #4]
 800491c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800491e:	2300      	movs	r3, #0
 8004920:	603b      	str	r3, [r7, #0]
 8004922:	4b09      	ldr	r3, [pc, #36]	; (8004948 <MX_GPIO_Init+0x4c>)
 8004924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004926:	4a08      	ldr	r2, [pc, #32]	; (8004948 <MX_GPIO_Init+0x4c>)
 8004928:	f043 0302 	orr.w	r3, r3, #2
 800492c:	6313      	str	r3, [r2, #48]	; 0x30
 800492e:	4b06      	ldr	r3, [pc, #24]	; (8004948 <MX_GPIO_Init+0x4c>)
 8004930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	603b      	str	r3, [r7, #0]
 8004938:	683b      	ldr	r3, [r7, #0]

}
 800493a:	bf00      	nop
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	40023800 	.word	0x40023800

0800494c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800494c:	b480      	push	{r7}
 800494e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004950:	b672      	cpsid	i
}
 8004952:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004954:	e7fe      	b.n	8004954 <Error_Handler+0x8>
	...

08004958 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800495e:	2300      	movs	r3, #0
 8004960:	607b      	str	r3, [r7, #4]
 8004962:	4b10      	ldr	r3, [pc, #64]	; (80049a4 <HAL_MspInit+0x4c>)
 8004964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004966:	4a0f      	ldr	r2, [pc, #60]	; (80049a4 <HAL_MspInit+0x4c>)
 8004968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800496c:	6453      	str	r3, [r2, #68]	; 0x44
 800496e:	4b0d      	ldr	r3, [pc, #52]	; (80049a4 <HAL_MspInit+0x4c>)
 8004970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004976:	607b      	str	r3, [r7, #4]
 8004978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800497a:	2300      	movs	r3, #0
 800497c:	603b      	str	r3, [r7, #0]
 800497e:	4b09      	ldr	r3, [pc, #36]	; (80049a4 <HAL_MspInit+0x4c>)
 8004980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004982:	4a08      	ldr	r2, [pc, #32]	; (80049a4 <HAL_MspInit+0x4c>)
 8004984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004988:	6413      	str	r3, [r2, #64]	; 0x40
 800498a:	4b06      	ldr	r3, [pc, #24]	; (80049a4 <HAL_MspInit+0x4c>)
 800498c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004992:	603b      	str	r3, [r7, #0]
 8004994:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004996:	2007      	movs	r0, #7
 8004998:	f000 fb3a 	bl	8005010 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800499c:	bf00      	nop
 800499e:	3708      	adds	r7, #8
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	40023800 	.word	0x40023800

080049a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b08a      	sub	sp, #40	; 0x28
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049b0:	f107 0314 	add.w	r3, r7, #20
 80049b4:	2200      	movs	r2, #0
 80049b6:	601a      	str	r2, [r3, #0]
 80049b8:	605a      	str	r2, [r3, #4]
 80049ba:	609a      	str	r2, [r3, #8]
 80049bc:	60da      	str	r2, [r3, #12]
 80049be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a19      	ldr	r2, [pc, #100]	; (8004a2c <HAL_I2C_MspInit+0x84>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d12c      	bne.n	8004a24 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049ca:	2300      	movs	r3, #0
 80049cc:	613b      	str	r3, [r7, #16]
 80049ce:	4b18      	ldr	r3, [pc, #96]	; (8004a30 <HAL_I2C_MspInit+0x88>)
 80049d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d2:	4a17      	ldr	r2, [pc, #92]	; (8004a30 <HAL_I2C_MspInit+0x88>)
 80049d4:	f043 0302 	orr.w	r3, r3, #2
 80049d8:	6313      	str	r3, [r2, #48]	; 0x30
 80049da:	4b15      	ldr	r3, [pc, #84]	; (8004a30 <HAL_I2C_MspInit+0x88>)
 80049dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	613b      	str	r3, [r7, #16]
 80049e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80049e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80049ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80049ec:	2312      	movs	r3, #18
 80049ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049f0:	2300      	movs	r3, #0
 80049f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049f4:	2303      	movs	r3, #3
 80049f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80049f8:	2304      	movs	r3, #4
 80049fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049fc:	f107 0314 	add.w	r3, r7, #20
 8004a00:	4619      	mov	r1, r3
 8004a02:	480c      	ldr	r0, [pc, #48]	; (8004a34 <HAL_I2C_MspInit+0x8c>)
 8004a04:	f000 fbd8 	bl	80051b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004a08:	2300      	movs	r3, #0
 8004a0a:	60fb      	str	r3, [r7, #12]
 8004a0c:	4b08      	ldr	r3, [pc, #32]	; (8004a30 <HAL_I2C_MspInit+0x88>)
 8004a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a10:	4a07      	ldr	r2, [pc, #28]	; (8004a30 <HAL_I2C_MspInit+0x88>)
 8004a12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a16:	6413      	str	r3, [r2, #64]	; 0x40
 8004a18:	4b05      	ldr	r3, [pc, #20]	; (8004a30 <HAL_I2C_MspInit+0x88>)
 8004a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a20:	60fb      	str	r3, [r7, #12]
 8004a22:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004a24:	bf00      	nop
 8004a26:	3728      	adds	r7, #40	; 0x28
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	40005400 	.word	0x40005400
 8004a30:	40023800 	.word	0x40023800
 8004a34:	40020400 	.word	0x40020400

08004a38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b08a      	sub	sp, #40	; 0x28
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a40:	f107 0314 	add.w	r3, r7, #20
 8004a44:	2200      	movs	r2, #0
 8004a46:	601a      	str	r2, [r3, #0]
 8004a48:	605a      	str	r2, [r3, #4]
 8004a4a:	609a      	str	r2, [r3, #8]
 8004a4c:	60da      	str	r2, [r3, #12]
 8004a4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a1d      	ldr	r2, [pc, #116]	; (8004acc <HAL_UART_MspInit+0x94>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d133      	bne.n	8004ac2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	613b      	str	r3, [r7, #16]
 8004a5e:	4b1c      	ldr	r3, [pc, #112]	; (8004ad0 <HAL_UART_MspInit+0x98>)
 8004a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a62:	4a1b      	ldr	r2, [pc, #108]	; (8004ad0 <HAL_UART_MspInit+0x98>)
 8004a64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a68:	6413      	str	r3, [r2, #64]	; 0x40
 8004a6a:	4b19      	ldr	r3, [pc, #100]	; (8004ad0 <HAL_UART_MspInit+0x98>)
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a72:	613b      	str	r3, [r7, #16]
 8004a74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a76:	2300      	movs	r3, #0
 8004a78:	60fb      	str	r3, [r7, #12]
 8004a7a:	4b15      	ldr	r3, [pc, #84]	; (8004ad0 <HAL_UART_MspInit+0x98>)
 8004a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7e:	4a14      	ldr	r2, [pc, #80]	; (8004ad0 <HAL_UART_MspInit+0x98>)
 8004a80:	f043 0301 	orr.w	r3, r3, #1
 8004a84:	6313      	str	r3, [r2, #48]	; 0x30
 8004a86:	4b12      	ldr	r3, [pc, #72]	; (8004ad0 <HAL_UART_MspInit+0x98>)
 8004a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	60fb      	str	r3, [r7, #12]
 8004a90:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004a92:	230c      	movs	r3, #12
 8004a94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a96:	2302      	movs	r3, #2
 8004a98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004aa2:	2307      	movs	r3, #7
 8004aa4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004aa6:	f107 0314 	add.w	r3, r7, #20
 8004aaa:	4619      	mov	r1, r3
 8004aac:	4809      	ldr	r0, [pc, #36]	; (8004ad4 <HAL_UART_MspInit+0x9c>)
 8004aae:	f000 fb83 	bl	80051b8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	2100      	movs	r1, #0
 8004ab6:	2026      	movs	r0, #38	; 0x26
 8004ab8:	f000 fab5 	bl	8005026 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004abc:	2026      	movs	r0, #38	; 0x26
 8004abe:	f000 face 	bl	800505e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004ac2:	bf00      	nop
 8004ac4:	3728      	adds	r7, #40	; 0x28
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	40004400 	.word	0x40004400
 8004ad0:	40023800 	.word	0x40023800
 8004ad4:	40020000 	.word	0x40020000

08004ad8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004adc:	e7fe      	b.n	8004adc <NMI_Handler+0x4>

08004ade <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004ade:	b480      	push	{r7}
 8004ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004ae2:	e7fe      	b.n	8004ae2 <HardFault_Handler+0x4>

08004ae4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004ae8:	e7fe      	b.n	8004ae8 <MemManage_Handler+0x4>

08004aea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004aea:	b480      	push	{r7}
 8004aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004aee:	e7fe      	b.n	8004aee <BusFault_Handler+0x4>

08004af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004af0:	b480      	push	{r7}
 8004af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004af4:	e7fe      	b.n	8004af4 <UsageFault_Handler+0x4>

08004af6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004af6:	b480      	push	{r7}
 8004af8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004afa:	bf00      	nop
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004b04:	b480      	push	{r7}
 8004b06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004b08:	bf00      	nop
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr

08004b12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004b12:	b480      	push	{r7}
 8004b14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004b16:	bf00      	nop
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004b24:	f000 f960 	bl	8004de8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004b28:	bf00      	nop
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004b30:	4802      	ldr	r0, [pc, #8]	; (8004b3c <USART2_IRQHandler+0x10>)
 8004b32:	f002 f9d9 	bl	8006ee8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004b36:	bf00      	nop
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	20000b74 	.word	0x20000b74

08004b40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004b40:	b480      	push	{r7}
 8004b42:	af00      	add	r7, sp, #0
	return 1;
 8004b44:	2301      	movs	r3, #1
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <_kill>:

int _kill(int pid, int sig)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004b5a:	f008 fa89 	bl	800d070 <__errno>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2216      	movs	r2, #22
 8004b62:	601a      	str	r2, [r3, #0]
	return -1;
 8004b64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3708      	adds	r7, #8
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <_exit>:

void _exit (int status)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004b78:	f04f 31ff 	mov.w	r1, #4294967295
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f7ff ffe7 	bl	8004b50 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004b82:	e7fe      	b.n	8004b82 <_exit+0x12>

08004b84 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b086      	sub	sp, #24
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b90:	2300      	movs	r3, #0
 8004b92:	617b      	str	r3, [r7, #20]
 8004b94:	e00a      	b.n	8004bac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004b96:	f3af 8000 	nop.w
 8004b9a:	4601      	mov	r1, r0
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	1c5a      	adds	r2, r3, #1
 8004ba0:	60ba      	str	r2, [r7, #8]
 8004ba2:	b2ca      	uxtb	r2, r1
 8004ba4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	3301      	adds	r3, #1
 8004baa:	617b      	str	r3, [r7, #20]
 8004bac:	697a      	ldr	r2, [r7, #20]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	dbf0      	blt.n	8004b96 <_read+0x12>
	}

return len;
 8004bb4:	687b      	ldr	r3, [r7, #4]
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3718      	adds	r7, #24
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}

08004bbe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b086      	sub	sp, #24
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	60f8      	str	r0, [r7, #12]
 8004bc6:	60b9      	str	r1, [r7, #8]
 8004bc8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004bca:	2300      	movs	r3, #0
 8004bcc:	617b      	str	r3, [r7, #20]
 8004bce:	e009      	b.n	8004be4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	1c5a      	adds	r2, r3, #1
 8004bd4:	60ba      	str	r2, [r7, #8]
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	3301      	adds	r3, #1
 8004be2:	617b      	str	r3, [r7, #20]
 8004be4:	697a      	ldr	r2, [r7, #20]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	dbf1      	blt.n	8004bd0 <_write+0x12>
	}
	return len;
 8004bec:	687b      	ldr	r3, [r7, #4]
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3718      	adds	r7, #24
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}

08004bf6 <_close>:

int _close(int file)
{
 8004bf6:	b480      	push	{r7}
 8004bf8:	b083      	sub	sp, #12
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
	return -1;
 8004bfe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	370c      	adds	r7, #12
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr

08004c0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004c0e:	b480      	push	{r7}
 8004c10:	b083      	sub	sp, #12
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
 8004c16:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004c1e:	605a      	str	r2, [r3, #4]
	return 0;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	370c      	adds	r7, #12
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr

08004c2e <_isatty>:

int _isatty(int file)
{
 8004c2e:	b480      	push	{r7}
 8004c30:	b083      	sub	sp, #12
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
	return 1;
 8004c36:	2301      	movs	r3, #1
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	607a      	str	r2, [r7, #4]
	return 0;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3714      	adds	r7, #20
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
	...

08004c60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b086      	sub	sp, #24
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004c68:	4a14      	ldr	r2, [pc, #80]	; (8004cbc <_sbrk+0x5c>)
 8004c6a:	4b15      	ldr	r3, [pc, #84]	; (8004cc0 <_sbrk+0x60>)
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004c74:	4b13      	ldr	r3, [pc, #76]	; (8004cc4 <_sbrk+0x64>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d102      	bne.n	8004c82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004c7c:	4b11      	ldr	r3, [pc, #68]	; (8004cc4 <_sbrk+0x64>)
 8004c7e:	4a12      	ldr	r2, [pc, #72]	; (8004cc8 <_sbrk+0x68>)
 8004c80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004c82:	4b10      	ldr	r3, [pc, #64]	; (8004cc4 <_sbrk+0x64>)
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4413      	add	r3, r2
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d207      	bcs.n	8004ca0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004c90:	f008 f9ee 	bl	800d070 <__errno>
 8004c94:	4603      	mov	r3, r0
 8004c96:	220c      	movs	r2, #12
 8004c98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c9e:	e009      	b.n	8004cb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004ca0:	4b08      	ldr	r3, [pc, #32]	; (8004cc4 <_sbrk+0x64>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004ca6:	4b07      	ldr	r3, [pc, #28]	; (8004cc4 <_sbrk+0x64>)
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4413      	add	r3, r2
 8004cae:	4a05      	ldr	r2, [pc, #20]	; (8004cc4 <_sbrk+0x64>)
 8004cb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3718      	adds	r7, #24
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	20018000 	.word	0x20018000
 8004cc0:	00000400 	.word	0x00000400
 8004cc4:	2000058c 	.word	0x2000058c
 8004cc8:	20000f68 	.word	0x20000f68

08004ccc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004cd0:	4b06      	ldr	r3, [pc, #24]	; (8004cec <SystemInit+0x20>)
 8004cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd6:	4a05      	ldr	r2, [pc, #20]	; (8004cec <SystemInit+0x20>)
 8004cd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004cdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004ce0:	bf00      	nop
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	e000ed00 	.word	0xe000ed00

08004cf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004cf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004d28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004cf4:	480d      	ldr	r0, [pc, #52]	; (8004d2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004cf6:	490e      	ldr	r1, [pc, #56]	; (8004d30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004cf8:	4a0e      	ldr	r2, [pc, #56]	; (8004d34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004cfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004cfc:	e002      	b.n	8004d04 <LoopCopyDataInit>

08004cfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004cfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004d00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004d02:	3304      	adds	r3, #4

08004d04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004d04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004d06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004d08:	d3f9      	bcc.n	8004cfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004d0a:	4a0b      	ldr	r2, [pc, #44]	; (8004d38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004d0c:	4c0b      	ldr	r4, [pc, #44]	; (8004d3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8004d0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004d10:	e001      	b.n	8004d16 <LoopFillZerobss>

08004d12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004d12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004d14:	3204      	adds	r2, #4

08004d16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004d16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004d18:	d3fb      	bcc.n	8004d12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004d1a:	f7ff ffd7 	bl	8004ccc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004d1e:	f008 f9ad 	bl	800d07c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004d22:	f7ff fad1 	bl	80042c8 <main>
  bx  lr    
 8004d26:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004d28:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8004d2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004d30:	2000021c 	.word	0x2000021c
  ldr r2, =_sidata
 8004d34:	08014008 	.word	0x08014008
  ldr r2, =_sbss
 8004d38:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8004d3c:	20000f68 	.word	0x20000f68

08004d40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004d40:	e7fe      	b.n	8004d40 <ADC_IRQHandler>
	...

08004d44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004d48:	4b0e      	ldr	r3, [pc, #56]	; (8004d84 <HAL_Init+0x40>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a0d      	ldr	r2, [pc, #52]	; (8004d84 <HAL_Init+0x40>)
 8004d4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004d54:	4b0b      	ldr	r3, [pc, #44]	; (8004d84 <HAL_Init+0x40>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a0a      	ldr	r2, [pc, #40]	; (8004d84 <HAL_Init+0x40>)
 8004d5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004d60:	4b08      	ldr	r3, [pc, #32]	; (8004d84 <HAL_Init+0x40>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a07      	ldr	r2, [pc, #28]	; (8004d84 <HAL_Init+0x40>)
 8004d66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d6c:	2003      	movs	r0, #3
 8004d6e:	f000 f94f 	bl	8005010 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004d72:	2000      	movs	r0, #0
 8004d74:	f000 f808 	bl	8004d88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004d78:	f7ff fdee 	bl	8004958 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	40023c00 	.word	0x40023c00

08004d88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004d90:	4b12      	ldr	r3, [pc, #72]	; (8004ddc <HAL_InitTick+0x54>)
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	4b12      	ldr	r3, [pc, #72]	; (8004de0 <HAL_InitTick+0x58>)
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	4619      	mov	r1, r3
 8004d9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004da6:	4618      	mov	r0, r3
 8004da8:	f000 f967 	bl	800507a <HAL_SYSTICK_Config>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d001      	beq.n	8004db6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e00e      	b.n	8004dd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2b0f      	cmp	r3, #15
 8004dba:	d80a      	bhi.n	8004dd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	6879      	ldr	r1, [r7, #4]
 8004dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8004dc4:	f000 f92f 	bl	8005026 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004dc8:	4a06      	ldr	r2, [pc, #24]	; (8004de4 <HAL_InitTick+0x5c>)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	e000      	b.n	8004dd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3708      	adds	r7, #8
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	20000010 	.word	0x20000010
 8004de0:	20000018 	.word	0x20000018
 8004de4:	20000014 	.word	0x20000014

08004de8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004de8:	b480      	push	{r7}
 8004dea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004dec:	4b06      	ldr	r3, [pc, #24]	; (8004e08 <HAL_IncTick+0x20>)
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	461a      	mov	r2, r3
 8004df2:	4b06      	ldr	r3, [pc, #24]	; (8004e0c <HAL_IncTick+0x24>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4413      	add	r3, r2
 8004df8:	4a04      	ldr	r2, [pc, #16]	; (8004e0c <HAL_IncTick+0x24>)
 8004dfa:	6013      	str	r3, [r2, #0]
}
 8004dfc:	bf00      	nop
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	20000018 	.word	0x20000018
 8004e0c:	20000bb8 	.word	0x20000bb8

08004e10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004e10:	b480      	push	{r7}
 8004e12:	af00      	add	r7, sp, #0
  return uwTick;
 8004e14:	4b03      	ldr	r3, [pc, #12]	; (8004e24 <HAL_GetTick+0x14>)
 8004e16:	681b      	ldr	r3, [r3, #0]
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	20000bb8 	.word	0x20000bb8

08004e28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004e30:	f7ff ffee 	bl	8004e10 <HAL_GetTick>
 8004e34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e40:	d005      	beq.n	8004e4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004e42:	4b0a      	ldr	r3, [pc, #40]	; (8004e6c <HAL_Delay+0x44>)
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	461a      	mov	r2, r3
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004e4e:	bf00      	nop
 8004e50:	f7ff ffde 	bl	8004e10 <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d8f7      	bhi.n	8004e50 <HAL_Delay+0x28>
  {
  }
}
 8004e60:	bf00      	nop
 8004e62:	bf00      	nop
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	20000018 	.word	0x20000018

08004e70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b085      	sub	sp, #20
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f003 0307 	and.w	r3, r3, #7
 8004e7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e80:	4b0c      	ldr	r3, [pc, #48]	; (8004eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e86:	68ba      	ldr	r2, [r7, #8]
 8004e88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004e9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ea0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ea2:	4a04      	ldr	r2, [pc, #16]	; (8004eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	60d3      	str	r3, [r2, #12]
}
 8004ea8:	bf00      	nop
 8004eaa:	3714      	adds	r7, #20
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr
 8004eb4:	e000ed00 	.word	0xe000ed00

08004eb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ebc:	4b04      	ldr	r3, [pc, #16]	; (8004ed0 <__NVIC_GetPriorityGrouping+0x18>)
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	0a1b      	lsrs	r3, r3, #8
 8004ec2:	f003 0307 	and.w	r3, r3, #7
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr
 8004ed0:	e000ed00 	.word	0xe000ed00

08004ed4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	4603      	mov	r3, r0
 8004edc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	db0b      	blt.n	8004efe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ee6:	79fb      	ldrb	r3, [r7, #7]
 8004ee8:	f003 021f 	and.w	r2, r3, #31
 8004eec:	4907      	ldr	r1, [pc, #28]	; (8004f0c <__NVIC_EnableIRQ+0x38>)
 8004eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ef2:	095b      	lsrs	r3, r3, #5
 8004ef4:	2001      	movs	r0, #1
 8004ef6:	fa00 f202 	lsl.w	r2, r0, r2
 8004efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004efe:	bf00      	nop
 8004f00:	370c      	adds	r7, #12
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	e000e100 	.word	0xe000e100

08004f10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	4603      	mov	r3, r0
 8004f18:	6039      	str	r1, [r7, #0]
 8004f1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	db0a      	blt.n	8004f3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	b2da      	uxtb	r2, r3
 8004f28:	490c      	ldr	r1, [pc, #48]	; (8004f5c <__NVIC_SetPriority+0x4c>)
 8004f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f2e:	0112      	lsls	r2, r2, #4
 8004f30:	b2d2      	uxtb	r2, r2
 8004f32:	440b      	add	r3, r1
 8004f34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f38:	e00a      	b.n	8004f50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	b2da      	uxtb	r2, r3
 8004f3e:	4908      	ldr	r1, [pc, #32]	; (8004f60 <__NVIC_SetPriority+0x50>)
 8004f40:	79fb      	ldrb	r3, [r7, #7]
 8004f42:	f003 030f 	and.w	r3, r3, #15
 8004f46:	3b04      	subs	r3, #4
 8004f48:	0112      	lsls	r2, r2, #4
 8004f4a:	b2d2      	uxtb	r2, r2
 8004f4c:	440b      	add	r3, r1
 8004f4e:	761a      	strb	r2, [r3, #24]
}
 8004f50:	bf00      	nop
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr
 8004f5c:	e000e100 	.word	0xe000e100
 8004f60:	e000ed00 	.word	0xe000ed00

08004f64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b089      	sub	sp, #36	; 0x24
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f003 0307 	and.w	r3, r3, #7
 8004f76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	f1c3 0307 	rsb	r3, r3, #7
 8004f7e:	2b04      	cmp	r3, #4
 8004f80:	bf28      	it	cs
 8004f82:	2304      	movcs	r3, #4
 8004f84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	3304      	adds	r3, #4
 8004f8a:	2b06      	cmp	r3, #6
 8004f8c:	d902      	bls.n	8004f94 <NVIC_EncodePriority+0x30>
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	3b03      	subs	r3, #3
 8004f92:	e000      	b.n	8004f96 <NVIC_EncodePriority+0x32>
 8004f94:	2300      	movs	r3, #0
 8004f96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f98:	f04f 32ff 	mov.w	r2, #4294967295
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa2:	43da      	mvns	r2, r3
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	401a      	ands	r2, r3
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004fac:	f04f 31ff 	mov.w	r1, #4294967295
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8004fb6:	43d9      	mvns	r1, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fbc:	4313      	orrs	r3, r2
         );
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3724      	adds	r7, #36	; 0x24
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
	...

08004fcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004fdc:	d301      	bcc.n	8004fe2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e00f      	b.n	8005002 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004fe2:	4a0a      	ldr	r2, [pc, #40]	; (800500c <SysTick_Config+0x40>)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004fea:	210f      	movs	r1, #15
 8004fec:	f04f 30ff 	mov.w	r0, #4294967295
 8004ff0:	f7ff ff8e 	bl	8004f10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ff4:	4b05      	ldr	r3, [pc, #20]	; (800500c <SysTick_Config+0x40>)
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ffa:	4b04      	ldr	r3, [pc, #16]	; (800500c <SysTick_Config+0x40>)
 8004ffc:	2207      	movs	r2, #7
 8004ffe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3708      	adds	r7, #8
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	e000e010 	.word	0xe000e010

08005010 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b082      	sub	sp, #8
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f7ff ff29 	bl	8004e70 <__NVIC_SetPriorityGrouping>
}
 800501e:	bf00      	nop
 8005020:	3708      	adds	r7, #8
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}

08005026 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005026:	b580      	push	{r7, lr}
 8005028:	b086      	sub	sp, #24
 800502a:	af00      	add	r7, sp, #0
 800502c:	4603      	mov	r3, r0
 800502e:	60b9      	str	r1, [r7, #8]
 8005030:	607a      	str	r2, [r7, #4]
 8005032:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005034:	2300      	movs	r3, #0
 8005036:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005038:	f7ff ff3e 	bl	8004eb8 <__NVIC_GetPriorityGrouping>
 800503c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	68b9      	ldr	r1, [r7, #8]
 8005042:	6978      	ldr	r0, [r7, #20]
 8005044:	f7ff ff8e 	bl	8004f64 <NVIC_EncodePriority>
 8005048:	4602      	mov	r2, r0
 800504a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800504e:	4611      	mov	r1, r2
 8005050:	4618      	mov	r0, r3
 8005052:	f7ff ff5d 	bl	8004f10 <__NVIC_SetPriority>
}
 8005056:	bf00      	nop
 8005058:	3718      	adds	r7, #24
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}

0800505e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800505e:	b580      	push	{r7, lr}
 8005060:	b082      	sub	sp, #8
 8005062:	af00      	add	r7, sp, #0
 8005064:	4603      	mov	r3, r0
 8005066:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800506c:	4618      	mov	r0, r3
 800506e:	f7ff ff31 	bl	8004ed4 <__NVIC_EnableIRQ>
}
 8005072:	bf00      	nop
 8005074:	3708      	adds	r7, #8
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}

0800507a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800507a:	b580      	push	{r7, lr}
 800507c:	b082      	sub	sp, #8
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f7ff ffa2 	bl	8004fcc <SysTick_Config>
 8005088:	4603      	mov	r3, r0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3708      	adds	r7, #8
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}

08005092 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005092:	b580      	push	{r7, lr}
 8005094:	b084      	sub	sp, #16
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800509e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80050a0:	f7ff feb6 	bl	8004e10 <HAL_GetTick>
 80050a4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d008      	beq.n	80050c4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2280      	movs	r2, #128	; 0x80
 80050b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e052      	b.n	800516a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f022 0216 	bic.w	r2, r2, #22
 80050d2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	695a      	ldr	r2, [r3, #20]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050e2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d103      	bne.n	80050f4 <HAL_DMA_Abort+0x62>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d007      	beq.n	8005104 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f022 0208 	bic.w	r2, r2, #8
 8005102:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f022 0201 	bic.w	r2, r2, #1
 8005112:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005114:	e013      	b.n	800513e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005116:	f7ff fe7b 	bl	8004e10 <HAL_GetTick>
 800511a:	4602      	mov	r2, r0
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	2b05      	cmp	r3, #5
 8005122:	d90c      	bls.n	800513e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2220      	movs	r2, #32
 8005128:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2203      	movs	r2, #3
 800512e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	e015      	b.n	800516a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0301 	and.w	r3, r3, #1
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1e4      	bne.n	8005116 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005150:	223f      	movs	r2, #63	; 0x3f
 8005152:	409a      	lsls	r2, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3710      	adds	r7, #16
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005172:	b480      	push	{r7}
 8005174:	b083      	sub	sp, #12
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005180:	b2db      	uxtb	r3, r3
 8005182:	2b02      	cmp	r3, #2
 8005184:	d004      	beq.n	8005190 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2280      	movs	r2, #128	; 0x80
 800518a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e00c      	b.n	80051aa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2205      	movs	r2, #5
 8005194:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f022 0201 	bic.w	r2, r2, #1
 80051a6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	370c      	adds	r7, #12
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
	...

080051b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b089      	sub	sp, #36	; 0x24
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80051c2:	2300      	movs	r3, #0
 80051c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80051c6:	2300      	movs	r3, #0
 80051c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80051ca:	2300      	movs	r3, #0
 80051cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80051ce:	2300      	movs	r3, #0
 80051d0:	61fb      	str	r3, [r7, #28]
 80051d2:	e159      	b.n	8005488 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80051d4:	2201      	movs	r2, #1
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	fa02 f303 	lsl.w	r3, r2, r3
 80051dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	4013      	ands	r3, r2
 80051e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80051e8:	693a      	ldr	r2, [r7, #16]
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	f040 8148 	bne.w	8005482 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	f003 0303 	and.w	r3, r3, #3
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d005      	beq.n	800520a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005206:	2b02      	cmp	r3, #2
 8005208:	d130      	bne.n	800526c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	005b      	lsls	r3, r3, #1
 8005214:	2203      	movs	r2, #3
 8005216:	fa02 f303 	lsl.w	r3, r2, r3
 800521a:	43db      	mvns	r3, r3
 800521c:	69ba      	ldr	r2, [r7, #24]
 800521e:	4013      	ands	r3, r2
 8005220:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	68da      	ldr	r2, [r3, #12]
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	005b      	lsls	r3, r3, #1
 800522a:	fa02 f303 	lsl.w	r3, r2, r3
 800522e:	69ba      	ldr	r2, [r7, #24]
 8005230:	4313      	orrs	r3, r2
 8005232:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	69ba      	ldr	r2, [r7, #24]
 8005238:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005240:	2201      	movs	r2, #1
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	fa02 f303 	lsl.w	r3, r2, r3
 8005248:	43db      	mvns	r3, r3
 800524a:	69ba      	ldr	r2, [r7, #24]
 800524c:	4013      	ands	r3, r2
 800524e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	091b      	lsrs	r3, r3, #4
 8005256:	f003 0201 	and.w	r2, r3, #1
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	fa02 f303 	lsl.w	r3, r2, r3
 8005260:	69ba      	ldr	r2, [r7, #24]
 8005262:	4313      	orrs	r3, r2
 8005264:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	69ba      	ldr	r2, [r7, #24]
 800526a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	f003 0303 	and.w	r3, r3, #3
 8005274:	2b03      	cmp	r3, #3
 8005276:	d017      	beq.n	80052a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	005b      	lsls	r3, r3, #1
 8005282:	2203      	movs	r2, #3
 8005284:	fa02 f303 	lsl.w	r3, r2, r3
 8005288:	43db      	mvns	r3, r3
 800528a:	69ba      	ldr	r2, [r7, #24]
 800528c:	4013      	ands	r3, r2
 800528e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	689a      	ldr	r2, [r3, #8]
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	005b      	lsls	r3, r3, #1
 8005298:	fa02 f303 	lsl.w	r3, r2, r3
 800529c:	69ba      	ldr	r2, [r7, #24]
 800529e:	4313      	orrs	r3, r2
 80052a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	69ba      	ldr	r2, [r7, #24]
 80052a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	f003 0303 	and.w	r3, r3, #3
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d123      	bne.n	80052fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	08da      	lsrs	r2, r3, #3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	3208      	adds	r2, #8
 80052bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	f003 0307 	and.w	r3, r3, #7
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	220f      	movs	r2, #15
 80052cc:	fa02 f303 	lsl.w	r3, r2, r3
 80052d0:	43db      	mvns	r3, r3
 80052d2:	69ba      	ldr	r2, [r7, #24]
 80052d4:	4013      	ands	r3, r2
 80052d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	691a      	ldr	r2, [r3, #16]
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	f003 0307 	and.w	r3, r3, #7
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	fa02 f303 	lsl.w	r3, r2, r3
 80052e8:	69ba      	ldr	r2, [r7, #24]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	08da      	lsrs	r2, r3, #3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	3208      	adds	r2, #8
 80052f6:	69b9      	ldr	r1, [r7, #24]
 80052f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	005b      	lsls	r3, r3, #1
 8005306:	2203      	movs	r2, #3
 8005308:	fa02 f303 	lsl.w	r3, r2, r3
 800530c:	43db      	mvns	r3, r3
 800530e:	69ba      	ldr	r2, [r7, #24]
 8005310:	4013      	ands	r3, r2
 8005312:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	f003 0203 	and.w	r2, r3, #3
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	005b      	lsls	r3, r3, #1
 8005320:	fa02 f303 	lsl.w	r3, r2, r3
 8005324:	69ba      	ldr	r2, [r7, #24]
 8005326:	4313      	orrs	r3, r2
 8005328:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	69ba      	ldr	r2, [r7, #24]
 800532e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005338:	2b00      	cmp	r3, #0
 800533a:	f000 80a2 	beq.w	8005482 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800533e:	2300      	movs	r3, #0
 8005340:	60fb      	str	r3, [r7, #12]
 8005342:	4b57      	ldr	r3, [pc, #348]	; (80054a0 <HAL_GPIO_Init+0x2e8>)
 8005344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005346:	4a56      	ldr	r2, [pc, #344]	; (80054a0 <HAL_GPIO_Init+0x2e8>)
 8005348:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800534c:	6453      	str	r3, [r2, #68]	; 0x44
 800534e:	4b54      	ldr	r3, [pc, #336]	; (80054a0 <HAL_GPIO_Init+0x2e8>)
 8005350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005352:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005356:	60fb      	str	r3, [r7, #12]
 8005358:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800535a:	4a52      	ldr	r2, [pc, #328]	; (80054a4 <HAL_GPIO_Init+0x2ec>)
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	089b      	lsrs	r3, r3, #2
 8005360:	3302      	adds	r3, #2
 8005362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005366:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	f003 0303 	and.w	r3, r3, #3
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	220f      	movs	r2, #15
 8005372:	fa02 f303 	lsl.w	r3, r2, r3
 8005376:	43db      	mvns	r3, r3
 8005378:	69ba      	ldr	r2, [r7, #24]
 800537a:	4013      	ands	r3, r2
 800537c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a49      	ldr	r2, [pc, #292]	; (80054a8 <HAL_GPIO_Init+0x2f0>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d019      	beq.n	80053ba <HAL_GPIO_Init+0x202>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a48      	ldr	r2, [pc, #288]	; (80054ac <HAL_GPIO_Init+0x2f4>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d013      	beq.n	80053b6 <HAL_GPIO_Init+0x1fe>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a47      	ldr	r2, [pc, #284]	; (80054b0 <HAL_GPIO_Init+0x2f8>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d00d      	beq.n	80053b2 <HAL_GPIO_Init+0x1fa>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a46      	ldr	r2, [pc, #280]	; (80054b4 <HAL_GPIO_Init+0x2fc>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d007      	beq.n	80053ae <HAL_GPIO_Init+0x1f6>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a45      	ldr	r2, [pc, #276]	; (80054b8 <HAL_GPIO_Init+0x300>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d101      	bne.n	80053aa <HAL_GPIO_Init+0x1f2>
 80053a6:	2304      	movs	r3, #4
 80053a8:	e008      	b.n	80053bc <HAL_GPIO_Init+0x204>
 80053aa:	2307      	movs	r3, #7
 80053ac:	e006      	b.n	80053bc <HAL_GPIO_Init+0x204>
 80053ae:	2303      	movs	r3, #3
 80053b0:	e004      	b.n	80053bc <HAL_GPIO_Init+0x204>
 80053b2:	2302      	movs	r3, #2
 80053b4:	e002      	b.n	80053bc <HAL_GPIO_Init+0x204>
 80053b6:	2301      	movs	r3, #1
 80053b8:	e000      	b.n	80053bc <HAL_GPIO_Init+0x204>
 80053ba:	2300      	movs	r3, #0
 80053bc:	69fa      	ldr	r2, [r7, #28]
 80053be:	f002 0203 	and.w	r2, r2, #3
 80053c2:	0092      	lsls	r2, r2, #2
 80053c4:	4093      	lsls	r3, r2
 80053c6:	69ba      	ldr	r2, [r7, #24]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80053cc:	4935      	ldr	r1, [pc, #212]	; (80054a4 <HAL_GPIO_Init+0x2ec>)
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	089b      	lsrs	r3, r3, #2
 80053d2:	3302      	adds	r3, #2
 80053d4:	69ba      	ldr	r2, [r7, #24]
 80053d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80053da:	4b38      	ldr	r3, [pc, #224]	; (80054bc <HAL_GPIO_Init+0x304>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	43db      	mvns	r3, r3
 80053e4:	69ba      	ldr	r2, [r7, #24]
 80053e6:	4013      	ands	r3, r2
 80053e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d003      	beq.n	80053fe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80053f6:	69ba      	ldr	r2, [r7, #24]
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80053fe:	4a2f      	ldr	r2, [pc, #188]	; (80054bc <HAL_GPIO_Init+0x304>)
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005404:	4b2d      	ldr	r3, [pc, #180]	; (80054bc <HAL_GPIO_Init+0x304>)
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	43db      	mvns	r3, r3
 800540e:	69ba      	ldr	r2, [r7, #24]
 8005410:	4013      	ands	r3, r2
 8005412:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d003      	beq.n	8005428 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005420:	69ba      	ldr	r2, [r7, #24]
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	4313      	orrs	r3, r2
 8005426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005428:	4a24      	ldr	r2, [pc, #144]	; (80054bc <HAL_GPIO_Init+0x304>)
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800542e:	4b23      	ldr	r3, [pc, #140]	; (80054bc <HAL_GPIO_Init+0x304>)
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	43db      	mvns	r3, r3
 8005438:	69ba      	ldr	r2, [r7, #24]
 800543a:	4013      	ands	r3, r2
 800543c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d003      	beq.n	8005452 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800544a:	69ba      	ldr	r2, [r7, #24]
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	4313      	orrs	r3, r2
 8005450:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005452:	4a1a      	ldr	r2, [pc, #104]	; (80054bc <HAL_GPIO_Init+0x304>)
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005458:	4b18      	ldr	r3, [pc, #96]	; (80054bc <HAL_GPIO_Init+0x304>)
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	43db      	mvns	r3, r3
 8005462:	69ba      	ldr	r2, [r7, #24]
 8005464:	4013      	ands	r3, r2
 8005466:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d003      	beq.n	800547c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005474:	69ba      	ldr	r2, [r7, #24]
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	4313      	orrs	r3, r2
 800547a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800547c:	4a0f      	ldr	r2, [pc, #60]	; (80054bc <HAL_GPIO_Init+0x304>)
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	3301      	adds	r3, #1
 8005486:	61fb      	str	r3, [r7, #28]
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	2b0f      	cmp	r3, #15
 800548c:	f67f aea2 	bls.w	80051d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005490:	bf00      	nop
 8005492:	bf00      	nop
 8005494:	3724      	adds	r7, #36	; 0x24
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	40023800 	.word	0x40023800
 80054a4:	40013800 	.word	0x40013800
 80054a8:	40020000 	.word	0x40020000
 80054ac:	40020400 	.word	0x40020400
 80054b0:	40020800 	.word	0x40020800
 80054b4:	40020c00 	.word	0x40020c00
 80054b8:	40021000 	.word	0x40021000
 80054bc:	40013c00 	.word	0x40013c00

080054c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d101      	bne.n	80054d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e12b      	b.n	800572a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d106      	bne.n	80054ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f7ff fa5e 	bl	80049a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2224      	movs	r2, #36	; 0x24
 80054f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f022 0201 	bic.w	r2, r2, #1
 8005502:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005512:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005522:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005524:	f001 fbd8 	bl	8006cd8 <HAL_RCC_GetPCLK1Freq>
 8005528:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	4a81      	ldr	r2, [pc, #516]	; (8005734 <HAL_I2C_Init+0x274>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d807      	bhi.n	8005544 <HAL_I2C_Init+0x84>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	4a80      	ldr	r2, [pc, #512]	; (8005738 <HAL_I2C_Init+0x278>)
 8005538:	4293      	cmp	r3, r2
 800553a:	bf94      	ite	ls
 800553c:	2301      	movls	r3, #1
 800553e:	2300      	movhi	r3, #0
 8005540:	b2db      	uxtb	r3, r3
 8005542:	e006      	b.n	8005552 <HAL_I2C_Init+0x92>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	4a7d      	ldr	r2, [pc, #500]	; (800573c <HAL_I2C_Init+0x27c>)
 8005548:	4293      	cmp	r3, r2
 800554a:	bf94      	ite	ls
 800554c:	2301      	movls	r3, #1
 800554e:	2300      	movhi	r3, #0
 8005550:	b2db      	uxtb	r3, r3
 8005552:	2b00      	cmp	r3, #0
 8005554:	d001      	beq.n	800555a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e0e7      	b.n	800572a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	4a78      	ldr	r2, [pc, #480]	; (8005740 <HAL_I2C_Init+0x280>)
 800555e:	fba2 2303 	umull	r2, r3, r2, r3
 8005562:	0c9b      	lsrs	r3, r3, #18
 8005564:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68ba      	ldr	r2, [r7, #8]
 8005576:	430a      	orrs	r2, r1
 8005578:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	6a1b      	ldr	r3, [r3, #32]
 8005580:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	4a6a      	ldr	r2, [pc, #424]	; (8005734 <HAL_I2C_Init+0x274>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d802      	bhi.n	8005594 <HAL_I2C_Init+0xd4>
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	3301      	adds	r3, #1
 8005592:	e009      	b.n	80055a8 <HAL_I2C_Init+0xe8>
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800559a:	fb02 f303 	mul.w	r3, r2, r3
 800559e:	4a69      	ldr	r2, [pc, #420]	; (8005744 <HAL_I2C_Init+0x284>)
 80055a0:	fba2 2303 	umull	r2, r3, r2, r3
 80055a4:	099b      	lsrs	r3, r3, #6
 80055a6:	3301      	adds	r3, #1
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	6812      	ldr	r2, [r2, #0]
 80055ac:	430b      	orrs	r3, r1
 80055ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	69db      	ldr	r3, [r3, #28]
 80055b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80055ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	495c      	ldr	r1, [pc, #368]	; (8005734 <HAL_I2C_Init+0x274>)
 80055c4:	428b      	cmp	r3, r1
 80055c6:	d819      	bhi.n	80055fc <HAL_I2C_Init+0x13c>
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	1e59      	subs	r1, r3, #1
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	005b      	lsls	r3, r3, #1
 80055d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80055d6:	1c59      	adds	r1, r3, #1
 80055d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80055dc:	400b      	ands	r3, r1
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00a      	beq.n	80055f8 <HAL_I2C_Init+0x138>
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	1e59      	subs	r1, r3, #1
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	005b      	lsls	r3, r3, #1
 80055ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80055f0:	3301      	adds	r3, #1
 80055f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055f6:	e051      	b.n	800569c <HAL_I2C_Init+0x1dc>
 80055f8:	2304      	movs	r3, #4
 80055fa:	e04f      	b.n	800569c <HAL_I2C_Init+0x1dc>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d111      	bne.n	8005628 <HAL_I2C_Init+0x168>
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	1e58      	subs	r0, r3, #1
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6859      	ldr	r1, [r3, #4]
 800560c:	460b      	mov	r3, r1
 800560e:	005b      	lsls	r3, r3, #1
 8005610:	440b      	add	r3, r1
 8005612:	fbb0 f3f3 	udiv	r3, r0, r3
 8005616:	3301      	adds	r3, #1
 8005618:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800561c:	2b00      	cmp	r3, #0
 800561e:	bf0c      	ite	eq
 8005620:	2301      	moveq	r3, #1
 8005622:	2300      	movne	r3, #0
 8005624:	b2db      	uxtb	r3, r3
 8005626:	e012      	b.n	800564e <HAL_I2C_Init+0x18e>
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	1e58      	subs	r0, r3, #1
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6859      	ldr	r1, [r3, #4]
 8005630:	460b      	mov	r3, r1
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	440b      	add	r3, r1
 8005636:	0099      	lsls	r1, r3, #2
 8005638:	440b      	add	r3, r1
 800563a:	fbb0 f3f3 	udiv	r3, r0, r3
 800563e:	3301      	adds	r3, #1
 8005640:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005644:	2b00      	cmp	r3, #0
 8005646:	bf0c      	ite	eq
 8005648:	2301      	moveq	r3, #1
 800564a:	2300      	movne	r3, #0
 800564c:	b2db      	uxtb	r3, r3
 800564e:	2b00      	cmp	r3, #0
 8005650:	d001      	beq.n	8005656 <HAL_I2C_Init+0x196>
 8005652:	2301      	movs	r3, #1
 8005654:	e022      	b.n	800569c <HAL_I2C_Init+0x1dc>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d10e      	bne.n	800567c <HAL_I2C_Init+0x1bc>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	1e58      	subs	r0, r3, #1
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6859      	ldr	r1, [r3, #4]
 8005666:	460b      	mov	r3, r1
 8005668:	005b      	lsls	r3, r3, #1
 800566a:	440b      	add	r3, r1
 800566c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005670:	3301      	adds	r3, #1
 8005672:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005676:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800567a:	e00f      	b.n	800569c <HAL_I2C_Init+0x1dc>
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	1e58      	subs	r0, r3, #1
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6859      	ldr	r1, [r3, #4]
 8005684:	460b      	mov	r3, r1
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	440b      	add	r3, r1
 800568a:	0099      	lsls	r1, r3, #2
 800568c:	440b      	add	r3, r1
 800568e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005692:	3301      	adds	r3, #1
 8005694:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005698:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800569c:	6879      	ldr	r1, [r7, #4]
 800569e:	6809      	ldr	r1, [r1, #0]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	69da      	ldr	r2, [r3, #28]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a1b      	ldr	r3, [r3, #32]
 80056b6:	431a      	orrs	r2, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	430a      	orrs	r2, r1
 80056be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80056ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	6911      	ldr	r1, [r2, #16]
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	68d2      	ldr	r2, [r2, #12]
 80056d6:	4311      	orrs	r1, r2
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	6812      	ldr	r2, [r2, #0]
 80056dc:	430b      	orrs	r3, r1
 80056de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	695a      	ldr	r2, [r3, #20]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	699b      	ldr	r3, [r3, #24]
 80056f2:	431a      	orrs	r2, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	430a      	orrs	r2, r1
 80056fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f042 0201 	orr.w	r2, r2, #1
 800570a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2220      	movs	r2, #32
 8005716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3710      	adds	r7, #16
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	000186a0 	.word	0x000186a0
 8005738:	001e847f 	.word	0x001e847f
 800573c:	003d08ff 	.word	0x003d08ff
 8005740:	431bde83 	.word	0x431bde83
 8005744:	10624dd3 	.word	0x10624dd3

08005748 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b088      	sub	sp, #32
 800574c:	af02      	add	r7, sp, #8
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	4608      	mov	r0, r1
 8005752:	4611      	mov	r1, r2
 8005754:	461a      	mov	r2, r3
 8005756:	4603      	mov	r3, r0
 8005758:	817b      	strh	r3, [r7, #10]
 800575a:	460b      	mov	r3, r1
 800575c:	813b      	strh	r3, [r7, #8]
 800575e:	4613      	mov	r3, r2
 8005760:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005762:	f7ff fb55 	bl	8004e10 <HAL_GetTick>
 8005766:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800576e:	b2db      	uxtb	r3, r3
 8005770:	2b20      	cmp	r3, #32
 8005772:	f040 80d9 	bne.w	8005928 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	9300      	str	r3, [sp, #0]
 800577a:	2319      	movs	r3, #25
 800577c:	2201      	movs	r2, #1
 800577e:	496d      	ldr	r1, [pc, #436]	; (8005934 <HAL_I2C_Mem_Write+0x1ec>)
 8005780:	68f8      	ldr	r0, [r7, #12]
 8005782:	f000 fc7f 	bl	8006084 <I2C_WaitOnFlagUntilTimeout>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d001      	beq.n	8005790 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800578c:	2302      	movs	r3, #2
 800578e:	e0cc      	b.n	800592a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005796:	2b01      	cmp	r3, #1
 8005798:	d101      	bne.n	800579e <HAL_I2C_Mem_Write+0x56>
 800579a:	2302      	movs	r3, #2
 800579c:	e0c5      	b.n	800592a <HAL_I2C_Mem_Write+0x1e2>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2201      	movs	r2, #1
 80057a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 0301 	and.w	r3, r3, #1
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d007      	beq.n	80057c4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f042 0201 	orr.w	r2, r2, #1
 80057c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2221      	movs	r2, #33	; 0x21
 80057d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2240      	movs	r2, #64	; 0x40
 80057e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2200      	movs	r2, #0
 80057e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6a3a      	ldr	r2, [r7, #32]
 80057ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80057f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	4a4d      	ldr	r2, [pc, #308]	; (8005938 <HAL_I2C_Mem_Write+0x1f0>)
 8005804:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005806:	88f8      	ldrh	r0, [r7, #6]
 8005808:	893a      	ldrh	r2, [r7, #8]
 800580a:	8979      	ldrh	r1, [r7, #10]
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	9301      	str	r3, [sp, #4]
 8005810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005812:	9300      	str	r3, [sp, #0]
 8005814:	4603      	mov	r3, r0
 8005816:	68f8      	ldr	r0, [r7, #12]
 8005818:	f000 fab6 	bl	8005d88 <I2C_RequestMemoryWrite>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d052      	beq.n	80058c8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e081      	b.n	800592a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005826:	697a      	ldr	r2, [r7, #20]
 8005828:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f000 fd00 	bl	8006230 <I2C_WaitOnTXEFlagUntilTimeout>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00d      	beq.n	8005852 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583a:	2b04      	cmp	r3, #4
 800583c:	d107      	bne.n	800584e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800584c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e06b      	b.n	800592a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005856:	781a      	ldrb	r2, [r3, #0]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005862:	1c5a      	adds	r2, r3, #1
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800586c:	3b01      	subs	r3, #1
 800586e:	b29a      	uxth	r2, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005878:	b29b      	uxth	r3, r3
 800587a:	3b01      	subs	r3, #1
 800587c:	b29a      	uxth	r2, r3
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	695b      	ldr	r3, [r3, #20]
 8005888:	f003 0304 	and.w	r3, r3, #4
 800588c:	2b04      	cmp	r3, #4
 800588e:	d11b      	bne.n	80058c8 <HAL_I2C_Mem_Write+0x180>
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005894:	2b00      	cmp	r3, #0
 8005896:	d017      	beq.n	80058c8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589c:	781a      	ldrb	r2, [r3, #0]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a8:	1c5a      	adds	r2, r3, #1
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058b2:	3b01      	subs	r3, #1
 80058b4:	b29a      	uxth	r2, r3
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058be:	b29b      	uxth	r3, r3
 80058c0:	3b01      	subs	r3, #1
 80058c2:	b29a      	uxth	r2, r3
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d1aa      	bne.n	8005826 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058d0:	697a      	ldr	r2, [r7, #20]
 80058d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058d4:	68f8      	ldr	r0, [r7, #12]
 80058d6:	f000 fcec 	bl	80062b2 <I2C_WaitOnBTFFlagUntilTimeout>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d00d      	beq.n	80058fc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e4:	2b04      	cmp	r3, #4
 80058e6:	d107      	bne.n	80058f8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058f6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e016      	b.n	800592a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800590a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2220      	movs	r2, #32
 8005910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005924:	2300      	movs	r3, #0
 8005926:	e000      	b.n	800592a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005928:	2302      	movs	r3, #2
  }
}
 800592a:	4618      	mov	r0, r3
 800592c:	3718      	adds	r7, #24
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	00100002 	.word	0x00100002
 8005938:	ffff0000 	.word	0xffff0000

0800593c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b08c      	sub	sp, #48	; 0x30
 8005940:	af02      	add	r7, sp, #8
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	4608      	mov	r0, r1
 8005946:	4611      	mov	r1, r2
 8005948:	461a      	mov	r2, r3
 800594a:	4603      	mov	r3, r0
 800594c:	817b      	strh	r3, [r7, #10]
 800594e:	460b      	mov	r3, r1
 8005950:	813b      	strh	r3, [r7, #8]
 8005952:	4613      	mov	r3, r2
 8005954:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005956:	f7ff fa5b 	bl	8004e10 <HAL_GetTick>
 800595a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005962:	b2db      	uxtb	r3, r3
 8005964:	2b20      	cmp	r3, #32
 8005966:	f040 8208 	bne.w	8005d7a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800596a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596c:	9300      	str	r3, [sp, #0]
 800596e:	2319      	movs	r3, #25
 8005970:	2201      	movs	r2, #1
 8005972:	497b      	ldr	r1, [pc, #492]	; (8005b60 <HAL_I2C_Mem_Read+0x224>)
 8005974:	68f8      	ldr	r0, [r7, #12]
 8005976:	f000 fb85 	bl	8006084 <I2C_WaitOnFlagUntilTimeout>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d001      	beq.n	8005984 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005980:	2302      	movs	r3, #2
 8005982:	e1fb      	b.n	8005d7c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800598a:	2b01      	cmp	r3, #1
 800598c:	d101      	bne.n	8005992 <HAL_I2C_Mem_Read+0x56>
 800598e:	2302      	movs	r3, #2
 8005990:	e1f4      	b.n	8005d7c <HAL_I2C_Mem_Read+0x440>
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 0301 	and.w	r3, r3, #1
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d007      	beq.n	80059b8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f042 0201 	orr.w	r2, r2, #1
 80059b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2222      	movs	r2, #34	; 0x22
 80059cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2240      	movs	r2, #64	; 0x40
 80059d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2200      	movs	r2, #0
 80059dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80059e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059ee:	b29a      	uxth	r2, r3
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	4a5b      	ldr	r2, [pc, #364]	; (8005b64 <HAL_I2C_Mem_Read+0x228>)
 80059f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80059fa:	88f8      	ldrh	r0, [r7, #6]
 80059fc:	893a      	ldrh	r2, [r7, #8]
 80059fe:	8979      	ldrh	r1, [r7, #10]
 8005a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a02:	9301      	str	r3, [sp, #4]
 8005a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a06:	9300      	str	r3, [sp, #0]
 8005a08:	4603      	mov	r3, r0
 8005a0a:	68f8      	ldr	r0, [r7, #12]
 8005a0c:	f000 fa52 	bl	8005eb4 <I2C_RequestMemoryRead>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d001      	beq.n	8005a1a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e1b0      	b.n	8005d7c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d113      	bne.n	8005a4a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a22:	2300      	movs	r3, #0
 8005a24:	623b      	str	r3, [r7, #32]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	695b      	ldr	r3, [r3, #20]
 8005a2c:	623b      	str	r3, [r7, #32]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	699b      	ldr	r3, [r3, #24]
 8005a34:	623b      	str	r3, [r7, #32]
 8005a36:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a46:	601a      	str	r2, [r3, #0]
 8005a48:	e184      	b.n	8005d54 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d11b      	bne.n	8005a8a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a62:	2300      	movs	r3, #0
 8005a64:	61fb      	str	r3, [r7, #28]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	695b      	ldr	r3, [r3, #20]
 8005a6c:	61fb      	str	r3, [r7, #28]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	699b      	ldr	r3, [r3, #24]
 8005a74:	61fb      	str	r3, [r7, #28]
 8005a76:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a86:	601a      	str	r2, [r3, #0]
 8005a88:	e164      	b.n	8005d54 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d11b      	bne.n	8005aca <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005aa0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ab0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	61bb      	str	r3, [r7, #24]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	695b      	ldr	r3, [r3, #20]
 8005abc:	61bb      	str	r3, [r7, #24]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	699b      	ldr	r3, [r3, #24]
 8005ac4:	61bb      	str	r3, [r7, #24]
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	e144      	b.n	8005d54 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005aca:	2300      	movs	r3, #0
 8005acc:	617b      	str	r3, [r7, #20]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	695b      	ldr	r3, [r3, #20]
 8005ad4:	617b      	str	r3, [r7, #20]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	699b      	ldr	r3, [r3, #24]
 8005adc:	617b      	str	r3, [r7, #20]
 8005ade:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005ae0:	e138      	b.n	8005d54 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ae6:	2b03      	cmp	r3, #3
 8005ae8:	f200 80f1 	bhi.w	8005cce <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d123      	bne.n	8005b3c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005af6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005af8:	68f8      	ldr	r0, [r7, #12]
 8005afa:	f000 fc1b 	bl	8006334 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d001      	beq.n	8005b08 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	e139      	b.n	8005d7c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	691a      	ldr	r2, [r3, #16]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b12:	b2d2      	uxtb	r2, r2
 8005b14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1a:	1c5a      	adds	r2, r3, #1
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b24:	3b01      	subs	r3, #1
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	3b01      	subs	r3, #1
 8005b34:	b29a      	uxth	r2, r3
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005b3a:	e10b      	b.n	8005d54 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	d14e      	bne.n	8005be2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b46:	9300      	str	r3, [sp, #0]
 8005b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	4906      	ldr	r1, [pc, #24]	; (8005b68 <HAL_I2C_Mem_Read+0x22c>)
 8005b4e:	68f8      	ldr	r0, [r7, #12]
 8005b50:	f000 fa98 	bl	8006084 <I2C_WaitOnFlagUntilTimeout>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d008      	beq.n	8005b6c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e10e      	b.n	8005d7c <HAL_I2C_Mem_Read+0x440>
 8005b5e:	bf00      	nop
 8005b60:	00100002 	.word	0x00100002
 8005b64:	ffff0000 	.word	0xffff0000
 8005b68:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	691a      	ldr	r2, [r3, #16]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b86:	b2d2      	uxtb	r2, r2
 8005b88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8e:	1c5a      	adds	r2, r3, #1
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b98:	3b01      	subs	r3, #1
 8005b9a:	b29a      	uxth	r2, r3
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	3b01      	subs	r3, #1
 8005ba8:	b29a      	uxth	r2, r3
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	691a      	ldr	r2, [r3, #16]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb8:	b2d2      	uxtb	r2, r2
 8005bba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc0:	1c5a      	adds	r2, r3, #1
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	b29a      	uxth	r2, r3
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	3b01      	subs	r3, #1
 8005bda:	b29a      	uxth	r2, r3
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005be0:	e0b8      	b.n	8005d54 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be4:	9300      	str	r3, [sp, #0]
 8005be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be8:	2200      	movs	r2, #0
 8005bea:	4966      	ldr	r1, [pc, #408]	; (8005d84 <HAL_I2C_Mem_Read+0x448>)
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f000 fa49 	bl	8006084 <I2C_WaitOnFlagUntilTimeout>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d001      	beq.n	8005bfc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e0bf      	b.n	8005d7c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	691a      	ldr	r2, [r3, #16]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c16:	b2d2      	uxtb	r2, r2
 8005c18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1e:	1c5a      	adds	r2, r3, #1
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	3b01      	subs	r3, #1
 8005c38:	b29a      	uxth	r2, r3
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c40:	9300      	str	r3, [sp, #0]
 8005c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c44:	2200      	movs	r2, #0
 8005c46:	494f      	ldr	r1, [pc, #316]	; (8005d84 <HAL_I2C_Mem_Read+0x448>)
 8005c48:	68f8      	ldr	r0, [r7, #12]
 8005c4a:	f000 fa1b 	bl	8006084 <I2C_WaitOnFlagUntilTimeout>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d001      	beq.n	8005c58 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e091      	b.n	8005d7c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	691a      	ldr	r2, [r3, #16]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c72:	b2d2      	uxtb	r2, r2
 8005c74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7a:	1c5a      	adds	r2, r3, #1
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c84:	3b01      	subs	r3, #1
 8005c86:	b29a      	uxth	r2, r3
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	3b01      	subs	r3, #1
 8005c94:	b29a      	uxth	r2, r3
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	691a      	ldr	r2, [r3, #16]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca4:	b2d2      	uxtb	r2, r2
 8005ca6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cac:	1c5a      	adds	r2, r3, #1
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	b29a      	uxth	r2, r3
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	b29a      	uxth	r2, r3
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005ccc:	e042      	b.n	8005d54 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cd0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005cd2:	68f8      	ldr	r0, [r7, #12]
 8005cd4:	f000 fb2e 	bl	8006334 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d001      	beq.n	8005ce2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e04c      	b.n	8005d7c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	691a      	ldr	r2, [r3, #16]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cec:	b2d2      	uxtb	r2, r2
 8005cee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf4:	1c5a      	adds	r2, r3, #1
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cfe:	3b01      	subs	r3, #1
 8005d00:	b29a      	uxth	r2, r3
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	3b01      	subs	r3, #1
 8005d0e:	b29a      	uxth	r2, r3
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	695b      	ldr	r3, [r3, #20]
 8005d1a:	f003 0304 	and.w	r3, r3, #4
 8005d1e:	2b04      	cmp	r3, #4
 8005d20:	d118      	bne.n	8005d54 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	691a      	ldr	r2, [r3, #16]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2c:	b2d2      	uxtb	r2, r2
 8005d2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d34:	1c5a      	adds	r2, r3, #1
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d3e:	3b01      	subs	r3, #1
 8005d40:	b29a      	uxth	r2, r3
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	3b01      	subs	r3, #1
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	f47f aec2 	bne.w	8005ae2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2220      	movs	r2, #32
 8005d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005d76:	2300      	movs	r3, #0
 8005d78:	e000      	b.n	8005d7c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005d7a:	2302      	movs	r3, #2
  }
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3728      	adds	r7, #40	; 0x28
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	00010004 	.word	0x00010004

08005d88 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b088      	sub	sp, #32
 8005d8c:	af02      	add	r7, sp, #8
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	4608      	mov	r0, r1
 8005d92:	4611      	mov	r1, r2
 8005d94:	461a      	mov	r2, r3
 8005d96:	4603      	mov	r3, r0
 8005d98:	817b      	strh	r3, [r7, #10]
 8005d9a:	460b      	mov	r3, r1
 8005d9c:	813b      	strh	r3, [r7, #8]
 8005d9e:	4613      	mov	r3, r2
 8005da0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005db0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db4:	9300      	str	r3, [sp, #0]
 8005db6:	6a3b      	ldr	r3, [r7, #32]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005dbe:	68f8      	ldr	r0, [r7, #12]
 8005dc0:	f000 f960 	bl	8006084 <I2C_WaitOnFlagUntilTimeout>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d00d      	beq.n	8005de6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dd8:	d103      	bne.n	8005de2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005de0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005de2:	2303      	movs	r3, #3
 8005de4:	e05f      	b.n	8005ea6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005de6:	897b      	ldrh	r3, [r7, #10]
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	461a      	mov	r2, r3
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005df4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df8:	6a3a      	ldr	r2, [r7, #32]
 8005dfa:	492d      	ldr	r1, [pc, #180]	; (8005eb0 <I2C_RequestMemoryWrite+0x128>)
 8005dfc:	68f8      	ldr	r0, [r7, #12]
 8005dfe:	f000 f998 	bl	8006132 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d001      	beq.n	8005e0c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e04c      	b.n	8005ea6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	617b      	str	r3, [r7, #20]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	695b      	ldr	r3, [r3, #20]
 8005e16:	617b      	str	r3, [r7, #20]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	617b      	str	r3, [r7, #20]
 8005e20:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e24:	6a39      	ldr	r1, [r7, #32]
 8005e26:	68f8      	ldr	r0, [r7, #12]
 8005e28:	f000 fa02 	bl	8006230 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00d      	beq.n	8005e4e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e36:	2b04      	cmp	r3, #4
 8005e38:	d107      	bne.n	8005e4a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e48:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e02b      	b.n	8005ea6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e4e:	88fb      	ldrh	r3, [r7, #6]
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d105      	bne.n	8005e60 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e54:	893b      	ldrh	r3, [r7, #8]
 8005e56:	b2da      	uxtb	r2, r3
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	611a      	str	r2, [r3, #16]
 8005e5e:	e021      	b.n	8005ea4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005e60:	893b      	ldrh	r3, [r7, #8]
 8005e62:	0a1b      	lsrs	r3, r3, #8
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	b2da      	uxtb	r2, r3
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e70:	6a39      	ldr	r1, [r7, #32]
 8005e72:	68f8      	ldr	r0, [r7, #12]
 8005e74:	f000 f9dc 	bl	8006230 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00d      	beq.n	8005e9a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e82:	2b04      	cmp	r3, #4
 8005e84:	d107      	bne.n	8005e96 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e94:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e005      	b.n	8005ea6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e9a:	893b      	ldrh	r3, [r7, #8]
 8005e9c:	b2da      	uxtb	r2, r3
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3718      	adds	r7, #24
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	00010002 	.word	0x00010002

08005eb4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b088      	sub	sp, #32
 8005eb8:	af02      	add	r7, sp, #8
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	4608      	mov	r0, r1
 8005ebe:	4611      	mov	r1, r2
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	817b      	strh	r3, [r7, #10]
 8005ec6:	460b      	mov	r3, r1
 8005ec8:	813b      	strh	r3, [r7, #8]
 8005eca:	4613      	mov	r3, r2
 8005ecc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005edc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005eec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef0:	9300      	str	r3, [sp, #0]
 8005ef2:	6a3b      	ldr	r3, [r7, #32]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005efa:	68f8      	ldr	r0, [r7, #12]
 8005efc:	f000 f8c2 	bl	8006084 <I2C_WaitOnFlagUntilTimeout>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00d      	beq.n	8005f22 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f14:	d103      	bne.n	8005f1e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f1c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	e0aa      	b.n	8006078 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f22:	897b      	ldrh	r3, [r7, #10]
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	461a      	mov	r2, r3
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005f30:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f34:	6a3a      	ldr	r2, [r7, #32]
 8005f36:	4952      	ldr	r1, [pc, #328]	; (8006080 <I2C_RequestMemoryRead+0x1cc>)
 8005f38:	68f8      	ldr	r0, [r7, #12]
 8005f3a:	f000 f8fa 	bl	8006132 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d001      	beq.n	8005f48 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e097      	b.n	8006078 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f48:	2300      	movs	r3, #0
 8005f4a:	617b      	str	r3, [r7, #20]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	695b      	ldr	r3, [r3, #20]
 8005f52:	617b      	str	r3, [r7, #20]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	699b      	ldr	r3, [r3, #24]
 8005f5a:	617b      	str	r3, [r7, #20]
 8005f5c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f60:	6a39      	ldr	r1, [r7, #32]
 8005f62:	68f8      	ldr	r0, [r7, #12]
 8005f64:	f000 f964 	bl	8006230 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d00d      	beq.n	8005f8a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f72:	2b04      	cmp	r3, #4
 8005f74:	d107      	bne.n	8005f86 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f84:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e076      	b.n	8006078 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005f8a:	88fb      	ldrh	r3, [r7, #6]
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d105      	bne.n	8005f9c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f90:	893b      	ldrh	r3, [r7, #8]
 8005f92:	b2da      	uxtb	r2, r3
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	611a      	str	r2, [r3, #16]
 8005f9a:	e021      	b.n	8005fe0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005f9c:	893b      	ldrh	r3, [r7, #8]
 8005f9e:	0a1b      	lsrs	r3, r3, #8
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	b2da      	uxtb	r2, r3
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fac:	6a39      	ldr	r1, [r7, #32]
 8005fae:	68f8      	ldr	r0, [r7, #12]
 8005fb0:	f000 f93e 	bl	8006230 <I2C_WaitOnTXEFlagUntilTimeout>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d00d      	beq.n	8005fd6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fbe:	2b04      	cmp	r3, #4
 8005fc0:	d107      	bne.n	8005fd2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fd0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e050      	b.n	8006078 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005fd6:	893b      	ldrh	r3, [r7, #8]
 8005fd8:	b2da      	uxtb	r2, r3
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fe2:	6a39      	ldr	r1, [r7, #32]
 8005fe4:	68f8      	ldr	r0, [r7, #12]
 8005fe6:	f000 f923 	bl	8006230 <I2C_WaitOnTXEFlagUntilTimeout>
 8005fea:	4603      	mov	r3, r0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d00d      	beq.n	800600c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff4:	2b04      	cmp	r3, #4
 8005ff6:	d107      	bne.n	8006008 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006006:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	e035      	b.n	8006078 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800601a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800601c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601e:	9300      	str	r3, [sp, #0]
 8006020:	6a3b      	ldr	r3, [r7, #32]
 8006022:	2200      	movs	r2, #0
 8006024:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	f000 f82b 	bl	8006084 <I2C_WaitOnFlagUntilTimeout>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d00d      	beq.n	8006050 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800603e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006042:	d103      	bne.n	800604c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f44f 7200 	mov.w	r2, #512	; 0x200
 800604a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800604c:	2303      	movs	r3, #3
 800604e:	e013      	b.n	8006078 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006050:	897b      	ldrh	r3, [r7, #10]
 8006052:	b2db      	uxtb	r3, r3
 8006054:	f043 0301 	orr.w	r3, r3, #1
 8006058:	b2da      	uxtb	r2, r3
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006062:	6a3a      	ldr	r2, [r7, #32]
 8006064:	4906      	ldr	r1, [pc, #24]	; (8006080 <I2C_RequestMemoryRead+0x1cc>)
 8006066:	68f8      	ldr	r0, [r7, #12]
 8006068:	f000 f863 	bl	8006132 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d001      	beq.n	8006076 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e000      	b.n	8006078 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	3718      	adds	r7, #24
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}
 8006080:	00010002 	.word	0x00010002

08006084 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	603b      	str	r3, [r7, #0]
 8006090:	4613      	mov	r3, r2
 8006092:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006094:	e025      	b.n	80060e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800609c:	d021      	beq.n	80060e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800609e:	f7fe feb7 	bl	8004e10 <HAL_GetTick>
 80060a2:	4602      	mov	r2, r0
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	1ad3      	subs	r3, r2, r3
 80060a8:	683a      	ldr	r2, [r7, #0]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d302      	bcc.n	80060b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d116      	bne.n	80060e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2200      	movs	r2, #0
 80060b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2220      	movs	r2, #32
 80060be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ce:	f043 0220 	orr.w	r2, r3, #32
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e023      	b.n	800612a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	0c1b      	lsrs	r3, r3, #16
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d10d      	bne.n	8006108 <I2C_WaitOnFlagUntilTimeout+0x84>
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	695b      	ldr	r3, [r3, #20]
 80060f2:	43da      	mvns	r2, r3
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	4013      	ands	r3, r2
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	bf0c      	ite	eq
 80060fe:	2301      	moveq	r3, #1
 8006100:	2300      	movne	r3, #0
 8006102:	b2db      	uxtb	r3, r3
 8006104:	461a      	mov	r2, r3
 8006106:	e00c      	b.n	8006122 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	699b      	ldr	r3, [r3, #24]
 800610e:	43da      	mvns	r2, r3
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	4013      	ands	r3, r2
 8006114:	b29b      	uxth	r3, r3
 8006116:	2b00      	cmp	r3, #0
 8006118:	bf0c      	ite	eq
 800611a:	2301      	moveq	r3, #1
 800611c:	2300      	movne	r3, #0
 800611e:	b2db      	uxtb	r3, r3
 8006120:	461a      	mov	r2, r3
 8006122:	79fb      	ldrb	r3, [r7, #7]
 8006124:	429a      	cmp	r2, r3
 8006126:	d0b6      	beq.n	8006096 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3710      	adds	r7, #16
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}

08006132 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006132:	b580      	push	{r7, lr}
 8006134:	b084      	sub	sp, #16
 8006136:	af00      	add	r7, sp, #0
 8006138:	60f8      	str	r0, [r7, #12]
 800613a:	60b9      	str	r1, [r7, #8]
 800613c:	607a      	str	r2, [r7, #4]
 800613e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006140:	e051      	b.n	80061e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	695b      	ldr	r3, [r3, #20]
 8006148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800614c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006150:	d123      	bne.n	800619a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006160:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800616a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2200      	movs	r2, #0
 8006170:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2220      	movs	r2, #32
 8006176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006186:	f043 0204 	orr.w	r2, r3, #4
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2200      	movs	r2, #0
 8006192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e046      	b.n	8006228 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a0:	d021      	beq.n	80061e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061a2:	f7fe fe35 	bl	8004e10 <HAL_GetTick>
 80061a6:	4602      	mov	r2, r0
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	1ad3      	subs	r3, r2, r3
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d302      	bcc.n	80061b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d116      	bne.n	80061e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2200      	movs	r2, #0
 80061bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2220      	movs	r2, #32
 80061c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d2:	f043 0220 	orr.w	r2, r3, #32
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e020      	b.n	8006228 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	0c1b      	lsrs	r3, r3, #16
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d10c      	bne.n	800620a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	695b      	ldr	r3, [r3, #20]
 80061f6:	43da      	mvns	r2, r3
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	4013      	ands	r3, r2
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	2b00      	cmp	r3, #0
 8006200:	bf14      	ite	ne
 8006202:	2301      	movne	r3, #1
 8006204:	2300      	moveq	r3, #0
 8006206:	b2db      	uxtb	r3, r3
 8006208:	e00b      	b.n	8006222 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	699b      	ldr	r3, [r3, #24]
 8006210:	43da      	mvns	r2, r3
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	4013      	ands	r3, r2
 8006216:	b29b      	uxth	r3, r3
 8006218:	2b00      	cmp	r3, #0
 800621a:	bf14      	ite	ne
 800621c:	2301      	movne	r3, #1
 800621e:	2300      	moveq	r3, #0
 8006220:	b2db      	uxtb	r3, r3
 8006222:	2b00      	cmp	r3, #0
 8006224:	d18d      	bne.n	8006142 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006226:	2300      	movs	r3, #0
}
 8006228:	4618      	mov	r0, r3
 800622a:	3710      	adds	r7, #16
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800623c:	e02d      	b.n	800629a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800623e:	68f8      	ldr	r0, [r7, #12]
 8006240:	f000 f8ce 	bl	80063e0 <I2C_IsAcknowledgeFailed>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d001      	beq.n	800624e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e02d      	b.n	80062aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006254:	d021      	beq.n	800629a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006256:	f7fe fddb 	bl	8004e10 <HAL_GetTick>
 800625a:	4602      	mov	r2, r0
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	1ad3      	subs	r3, r2, r3
 8006260:	68ba      	ldr	r2, [r7, #8]
 8006262:	429a      	cmp	r2, r3
 8006264:	d302      	bcc.n	800626c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d116      	bne.n	800629a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2200      	movs	r2, #0
 8006270:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2220      	movs	r2, #32
 8006276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006286:	f043 0220 	orr.w	r2, r3, #32
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2200      	movs	r2, #0
 8006292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e007      	b.n	80062aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	695b      	ldr	r3, [r3, #20]
 80062a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062a4:	2b80      	cmp	r3, #128	; 0x80
 80062a6:	d1ca      	bne.n	800623e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80062a8:	2300      	movs	r3, #0
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3710      	adds	r7, #16
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}

080062b2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062b2:	b580      	push	{r7, lr}
 80062b4:	b084      	sub	sp, #16
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	60f8      	str	r0, [r7, #12]
 80062ba:	60b9      	str	r1, [r7, #8]
 80062bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80062be:	e02d      	b.n	800631c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	f000 f88d 	bl	80063e0 <I2C_IsAcknowledgeFailed>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d001      	beq.n	80062d0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	e02d      	b.n	800632c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d6:	d021      	beq.n	800631c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062d8:	f7fe fd9a 	bl	8004e10 <HAL_GetTick>
 80062dc:	4602      	mov	r2, r0
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	68ba      	ldr	r2, [r7, #8]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d302      	bcc.n	80062ee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d116      	bne.n	800631c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2200      	movs	r2, #0
 80062f2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2220      	movs	r2, #32
 80062f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006308:	f043 0220 	orr.w	r2, r3, #32
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	e007      	b.n	800632c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	695b      	ldr	r3, [r3, #20]
 8006322:	f003 0304 	and.w	r3, r3, #4
 8006326:	2b04      	cmp	r3, #4
 8006328:	d1ca      	bne.n	80062c0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800632a:	2300      	movs	r3, #0
}
 800632c:	4618      	mov	r0, r3
 800632e:	3710      	adds	r7, #16
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006340:	e042      	b.n	80063c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	695b      	ldr	r3, [r3, #20]
 8006348:	f003 0310 	and.w	r3, r3, #16
 800634c:	2b10      	cmp	r3, #16
 800634e:	d119      	bne.n	8006384 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f06f 0210 	mvn.w	r2, #16
 8006358:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2200      	movs	r2, #0
 800635e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2220      	movs	r2, #32
 8006364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2200      	movs	r2, #0
 800636c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2200      	movs	r2, #0
 800637c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	e029      	b.n	80063d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006384:	f7fe fd44 	bl	8004e10 <HAL_GetTick>
 8006388:	4602      	mov	r2, r0
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	1ad3      	subs	r3, r2, r3
 800638e:	68ba      	ldr	r2, [r7, #8]
 8006390:	429a      	cmp	r2, r3
 8006392:	d302      	bcc.n	800639a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d116      	bne.n	80063c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2200      	movs	r2, #0
 800639e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2220      	movs	r2, #32
 80063a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b4:	f043 0220 	orr.w	r2, r3, #32
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2200      	movs	r2, #0
 80063c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	e007      	b.n	80063d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	695b      	ldr	r3, [r3, #20]
 80063ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063d2:	2b40      	cmp	r3, #64	; 0x40
 80063d4:	d1b5      	bne.n	8006342 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80063d6:	2300      	movs	r3, #0
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3710      	adds	r7, #16
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	695b      	ldr	r3, [r3, #20]
 80063ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063f6:	d11b      	bne.n	8006430 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006400:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2220      	movs	r2, #32
 800640c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641c:	f043 0204 	orr.w	r2, r3, #4
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	e000      	b.n	8006432 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006430:	2300      	movs	r3, #0
}
 8006432:	4618      	mov	r0, r3
 8006434:	370c      	adds	r7, #12
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr
	...

08006440 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b086      	sub	sp, #24
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d101      	bne.n	8006452 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	e264      	b.n	800691c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 0301 	and.w	r3, r3, #1
 800645a:	2b00      	cmp	r3, #0
 800645c:	d075      	beq.n	800654a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800645e:	4ba3      	ldr	r3, [pc, #652]	; (80066ec <HAL_RCC_OscConfig+0x2ac>)
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	f003 030c 	and.w	r3, r3, #12
 8006466:	2b04      	cmp	r3, #4
 8006468:	d00c      	beq.n	8006484 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800646a:	4ba0      	ldr	r3, [pc, #640]	; (80066ec <HAL_RCC_OscConfig+0x2ac>)
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006472:	2b08      	cmp	r3, #8
 8006474:	d112      	bne.n	800649c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006476:	4b9d      	ldr	r3, [pc, #628]	; (80066ec <HAL_RCC_OscConfig+0x2ac>)
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800647e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006482:	d10b      	bne.n	800649c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006484:	4b99      	ldr	r3, [pc, #612]	; (80066ec <HAL_RCC_OscConfig+0x2ac>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800648c:	2b00      	cmp	r3, #0
 800648e:	d05b      	beq.n	8006548 <HAL_RCC_OscConfig+0x108>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d157      	bne.n	8006548 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	e23f      	b.n	800691c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064a4:	d106      	bne.n	80064b4 <HAL_RCC_OscConfig+0x74>
 80064a6:	4b91      	ldr	r3, [pc, #580]	; (80066ec <HAL_RCC_OscConfig+0x2ac>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a90      	ldr	r2, [pc, #576]	; (80066ec <HAL_RCC_OscConfig+0x2ac>)
 80064ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064b0:	6013      	str	r3, [r2, #0]
 80064b2:	e01d      	b.n	80064f0 <HAL_RCC_OscConfig+0xb0>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064bc:	d10c      	bne.n	80064d8 <HAL_RCC_OscConfig+0x98>
 80064be:	4b8b      	ldr	r3, [pc, #556]	; (80066ec <HAL_RCC_OscConfig+0x2ac>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a8a      	ldr	r2, [pc, #552]	; (80066ec <HAL_RCC_OscConfig+0x2ac>)
 80064c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064c8:	6013      	str	r3, [r2, #0]
 80064ca:	4b88      	ldr	r3, [pc, #544]	; (80066ec <HAL_RCC_OscConfig+0x2ac>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a87      	ldr	r2, [pc, #540]	; (80066ec <HAL_RCC_OscConfig+0x2ac>)
 80064d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064d4:	6013      	str	r3, [r2, #0]
 80064d6:	e00b      	b.n	80064f0 <HAL_RCC_OscConfig+0xb0>
 80064d8:	4b84      	ldr	r3, [pc, #528]	; (80066ec <HAL_RCC_OscConfig+0x2ac>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a83      	ldr	r2, [pc, #524]	; (80066ec <HAL_RCC_OscConfig+0x2ac>)
 80064de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064e2:	6013      	str	r3, [r2, #0]
 80064e4:	4b81      	ldr	r3, [pc, #516]	; (80066ec <HAL_RCC_OscConfig+0x2ac>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a80      	ldr	r2, [pc, #512]	; (80066ec <HAL_RCC_OscConfig+0x2ac>)
 80064ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d013      	beq.n	8006520 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064f8:	f7fe fc8a 	bl	8004e10 <HAL_GetTick>
 80064fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064fe:	e008      	b.n	8006512 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006500:	f7fe fc86 	bl	8004e10 <HAL_GetTick>
 8006504:	4602      	mov	r2, r0
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	1ad3      	subs	r3, r2, r3
 800650a:	2b64      	cmp	r3, #100	; 0x64
 800650c:	d901      	bls.n	8006512 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800650e:	2303      	movs	r3, #3
 8006510:	e204      	b.n	800691c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006512:	4b76      	ldr	r3, [pc, #472]	; (80066ec <HAL_RCC_OscConfig+0x2ac>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800651a:	2b00      	cmp	r3, #0
 800651c:	d0f0      	beq.n	8006500 <HAL_RCC_OscConfig+0xc0>
 800651e:	e014      	b.n	800654a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006520:	f7fe fc76 	bl	8004e10 <HAL_GetTick>
 8006524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006526:	e008      	b.n	800653a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006528:	f7fe fc72 	bl	8004e10 <HAL_GetTick>
 800652c:	4602      	mov	r2, r0
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	2b64      	cmp	r3, #100	; 0x64
 8006534:	d901      	bls.n	800653a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006536:	2303      	movs	r3, #3
 8006538:	e1f0      	b.n	800691c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800653a:	4b6c      	ldr	r3, [pc, #432]	; (80066ec <HAL_RCC_OscConfig+0x2ac>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1f0      	bne.n	8006528 <HAL_RCC_OscConfig+0xe8>
 8006546:	e000      	b.n	800654a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006548:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f003 0302 	and.w	r3, r3, #2
 8006552:	2b00      	cmp	r3, #0
 8006554:	d063      	beq.n	800661e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006556:	4b65      	ldr	r3, [pc, #404]	; (80066ec <HAL_RCC_OscConfig+0x2ac>)
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	f003 030c 	and.w	r3, r3, #12
 800655e:	2b00      	cmp	r3, #0
 8006560:	d00b      	beq.n	800657a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006562:	4b62      	ldr	r3, [pc, #392]	; (80066ec <HAL_RCC_OscConfig+0x2ac>)
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800656a:	2b08      	cmp	r3, #8
 800656c:	d11c      	bne.n	80065a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800656e:	4b5f      	ldr	r3, [pc, #380]	; (80066ec <HAL_RCC_OscConfig+0x2ac>)
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006576:	2b00      	cmp	r3, #0
 8006578:	d116      	bne.n	80065a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800657a:	4b5c      	ldr	r3, [pc, #368]	; (80066ec <HAL_RCC_OscConfig+0x2ac>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f003 0302 	and.w	r3, r3, #2
 8006582:	2b00      	cmp	r3, #0
 8006584:	d005      	beq.n	8006592 <HAL_RCC_OscConfig+0x152>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	2b01      	cmp	r3, #1
 800658c:	d001      	beq.n	8006592 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e1c4      	b.n	800691c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006592:	4b56      	ldr	r3, [pc, #344]	; (80066ec <HAL_RCC_OscConfig+0x2ac>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	00db      	lsls	r3, r3, #3
 80065a0:	4952      	ldr	r1, [pc, #328]	; (80066ec <HAL_RCC_OscConfig+0x2ac>)
 80065a2:	4313      	orrs	r3, r2
 80065a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065a6:	e03a      	b.n	800661e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d020      	beq.n	80065f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80065b0:	4b4f      	ldr	r3, [pc, #316]	; (80066f0 <HAL_RCC_OscConfig+0x2b0>)
 80065b2:	2201      	movs	r2, #1
 80065b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065b6:	f7fe fc2b 	bl	8004e10 <HAL_GetTick>
 80065ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065bc:	e008      	b.n	80065d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80065be:	f7fe fc27 	bl	8004e10 <HAL_GetTick>
 80065c2:	4602      	mov	r2, r0
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	1ad3      	subs	r3, r2, r3
 80065c8:	2b02      	cmp	r3, #2
 80065ca:	d901      	bls.n	80065d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80065cc:	2303      	movs	r3, #3
 80065ce:	e1a5      	b.n	800691c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065d0:	4b46      	ldr	r3, [pc, #280]	; (80066ec <HAL_RCC_OscConfig+0x2ac>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f003 0302 	and.w	r3, r3, #2
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d0f0      	beq.n	80065be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065dc:	4b43      	ldr	r3, [pc, #268]	; (80066ec <HAL_RCC_OscConfig+0x2ac>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	691b      	ldr	r3, [r3, #16]
 80065e8:	00db      	lsls	r3, r3, #3
 80065ea:	4940      	ldr	r1, [pc, #256]	; (80066ec <HAL_RCC_OscConfig+0x2ac>)
 80065ec:	4313      	orrs	r3, r2
 80065ee:	600b      	str	r3, [r1, #0]
 80065f0:	e015      	b.n	800661e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80065f2:	4b3f      	ldr	r3, [pc, #252]	; (80066f0 <HAL_RCC_OscConfig+0x2b0>)
 80065f4:	2200      	movs	r2, #0
 80065f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065f8:	f7fe fc0a 	bl	8004e10 <HAL_GetTick>
 80065fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065fe:	e008      	b.n	8006612 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006600:	f7fe fc06 	bl	8004e10 <HAL_GetTick>
 8006604:	4602      	mov	r2, r0
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	1ad3      	subs	r3, r2, r3
 800660a:	2b02      	cmp	r3, #2
 800660c:	d901      	bls.n	8006612 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	e184      	b.n	800691c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006612:	4b36      	ldr	r3, [pc, #216]	; (80066ec <HAL_RCC_OscConfig+0x2ac>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f003 0302 	and.w	r3, r3, #2
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1f0      	bne.n	8006600 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f003 0308 	and.w	r3, r3, #8
 8006626:	2b00      	cmp	r3, #0
 8006628:	d030      	beq.n	800668c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	695b      	ldr	r3, [r3, #20]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d016      	beq.n	8006660 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006632:	4b30      	ldr	r3, [pc, #192]	; (80066f4 <HAL_RCC_OscConfig+0x2b4>)
 8006634:	2201      	movs	r2, #1
 8006636:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006638:	f7fe fbea 	bl	8004e10 <HAL_GetTick>
 800663c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800663e:	e008      	b.n	8006652 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006640:	f7fe fbe6 	bl	8004e10 <HAL_GetTick>
 8006644:	4602      	mov	r2, r0
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	1ad3      	subs	r3, r2, r3
 800664a:	2b02      	cmp	r3, #2
 800664c:	d901      	bls.n	8006652 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800664e:	2303      	movs	r3, #3
 8006650:	e164      	b.n	800691c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006652:	4b26      	ldr	r3, [pc, #152]	; (80066ec <HAL_RCC_OscConfig+0x2ac>)
 8006654:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006656:	f003 0302 	and.w	r3, r3, #2
 800665a:	2b00      	cmp	r3, #0
 800665c:	d0f0      	beq.n	8006640 <HAL_RCC_OscConfig+0x200>
 800665e:	e015      	b.n	800668c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006660:	4b24      	ldr	r3, [pc, #144]	; (80066f4 <HAL_RCC_OscConfig+0x2b4>)
 8006662:	2200      	movs	r2, #0
 8006664:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006666:	f7fe fbd3 	bl	8004e10 <HAL_GetTick>
 800666a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800666c:	e008      	b.n	8006680 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800666e:	f7fe fbcf 	bl	8004e10 <HAL_GetTick>
 8006672:	4602      	mov	r2, r0
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	1ad3      	subs	r3, r2, r3
 8006678:	2b02      	cmp	r3, #2
 800667a:	d901      	bls.n	8006680 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800667c:	2303      	movs	r3, #3
 800667e:	e14d      	b.n	800691c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006680:	4b1a      	ldr	r3, [pc, #104]	; (80066ec <HAL_RCC_OscConfig+0x2ac>)
 8006682:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006684:	f003 0302 	and.w	r3, r3, #2
 8006688:	2b00      	cmp	r3, #0
 800668a:	d1f0      	bne.n	800666e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f003 0304 	and.w	r3, r3, #4
 8006694:	2b00      	cmp	r3, #0
 8006696:	f000 80a0 	beq.w	80067da <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800669a:	2300      	movs	r3, #0
 800669c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800669e:	4b13      	ldr	r3, [pc, #76]	; (80066ec <HAL_RCC_OscConfig+0x2ac>)
 80066a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d10f      	bne.n	80066ca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066aa:	2300      	movs	r3, #0
 80066ac:	60bb      	str	r3, [r7, #8]
 80066ae:	4b0f      	ldr	r3, [pc, #60]	; (80066ec <HAL_RCC_OscConfig+0x2ac>)
 80066b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b2:	4a0e      	ldr	r2, [pc, #56]	; (80066ec <HAL_RCC_OscConfig+0x2ac>)
 80066b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066b8:	6413      	str	r3, [r2, #64]	; 0x40
 80066ba:	4b0c      	ldr	r3, [pc, #48]	; (80066ec <HAL_RCC_OscConfig+0x2ac>)
 80066bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066c2:	60bb      	str	r3, [r7, #8]
 80066c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066c6:	2301      	movs	r3, #1
 80066c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066ca:	4b0b      	ldr	r3, [pc, #44]	; (80066f8 <HAL_RCC_OscConfig+0x2b8>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d121      	bne.n	800671a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80066d6:	4b08      	ldr	r3, [pc, #32]	; (80066f8 <HAL_RCC_OscConfig+0x2b8>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a07      	ldr	r2, [pc, #28]	; (80066f8 <HAL_RCC_OscConfig+0x2b8>)
 80066dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066e2:	f7fe fb95 	bl	8004e10 <HAL_GetTick>
 80066e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066e8:	e011      	b.n	800670e <HAL_RCC_OscConfig+0x2ce>
 80066ea:	bf00      	nop
 80066ec:	40023800 	.word	0x40023800
 80066f0:	42470000 	.word	0x42470000
 80066f4:	42470e80 	.word	0x42470e80
 80066f8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066fc:	f7fe fb88 	bl	8004e10 <HAL_GetTick>
 8006700:	4602      	mov	r2, r0
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	1ad3      	subs	r3, r2, r3
 8006706:	2b02      	cmp	r3, #2
 8006708:	d901      	bls.n	800670e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800670a:	2303      	movs	r3, #3
 800670c:	e106      	b.n	800691c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800670e:	4b85      	ldr	r3, [pc, #532]	; (8006924 <HAL_RCC_OscConfig+0x4e4>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006716:	2b00      	cmp	r3, #0
 8006718:	d0f0      	beq.n	80066fc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	2b01      	cmp	r3, #1
 8006720:	d106      	bne.n	8006730 <HAL_RCC_OscConfig+0x2f0>
 8006722:	4b81      	ldr	r3, [pc, #516]	; (8006928 <HAL_RCC_OscConfig+0x4e8>)
 8006724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006726:	4a80      	ldr	r2, [pc, #512]	; (8006928 <HAL_RCC_OscConfig+0x4e8>)
 8006728:	f043 0301 	orr.w	r3, r3, #1
 800672c:	6713      	str	r3, [r2, #112]	; 0x70
 800672e:	e01c      	b.n	800676a <HAL_RCC_OscConfig+0x32a>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	2b05      	cmp	r3, #5
 8006736:	d10c      	bne.n	8006752 <HAL_RCC_OscConfig+0x312>
 8006738:	4b7b      	ldr	r3, [pc, #492]	; (8006928 <HAL_RCC_OscConfig+0x4e8>)
 800673a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800673c:	4a7a      	ldr	r2, [pc, #488]	; (8006928 <HAL_RCC_OscConfig+0x4e8>)
 800673e:	f043 0304 	orr.w	r3, r3, #4
 8006742:	6713      	str	r3, [r2, #112]	; 0x70
 8006744:	4b78      	ldr	r3, [pc, #480]	; (8006928 <HAL_RCC_OscConfig+0x4e8>)
 8006746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006748:	4a77      	ldr	r2, [pc, #476]	; (8006928 <HAL_RCC_OscConfig+0x4e8>)
 800674a:	f043 0301 	orr.w	r3, r3, #1
 800674e:	6713      	str	r3, [r2, #112]	; 0x70
 8006750:	e00b      	b.n	800676a <HAL_RCC_OscConfig+0x32a>
 8006752:	4b75      	ldr	r3, [pc, #468]	; (8006928 <HAL_RCC_OscConfig+0x4e8>)
 8006754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006756:	4a74      	ldr	r2, [pc, #464]	; (8006928 <HAL_RCC_OscConfig+0x4e8>)
 8006758:	f023 0301 	bic.w	r3, r3, #1
 800675c:	6713      	str	r3, [r2, #112]	; 0x70
 800675e:	4b72      	ldr	r3, [pc, #456]	; (8006928 <HAL_RCC_OscConfig+0x4e8>)
 8006760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006762:	4a71      	ldr	r2, [pc, #452]	; (8006928 <HAL_RCC_OscConfig+0x4e8>)
 8006764:	f023 0304 	bic.w	r3, r3, #4
 8006768:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d015      	beq.n	800679e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006772:	f7fe fb4d 	bl	8004e10 <HAL_GetTick>
 8006776:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006778:	e00a      	b.n	8006790 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800677a:	f7fe fb49 	bl	8004e10 <HAL_GetTick>
 800677e:	4602      	mov	r2, r0
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	1ad3      	subs	r3, r2, r3
 8006784:	f241 3288 	movw	r2, #5000	; 0x1388
 8006788:	4293      	cmp	r3, r2
 800678a:	d901      	bls.n	8006790 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800678c:	2303      	movs	r3, #3
 800678e:	e0c5      	b.n	800691c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006790:	4b65      	ldr	r3, [pc, #404]	; (8006928 <HAL_RCC_OscConfig+0x4e8>)
 8006792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006794:	f003 0302 	and.w	r3, r3, #2
 8006798:	2b00      	cmp	r3, #0
 800679a:	d0ee      	beq.n	800677a <HAL_RCC_OscConfig+0x33a>
 800679c:	e014      	b.n	80067c8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800679e:	f7fe fb37 	bl	8004e10 <HAL_GetTick>
 80067a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067a4:	e00a      	b.n	80067bc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067a6:	f7fe fb33 	bl	8004e10 <HAL_GetTick>
 80067aa:	4602      	mov	r2, r0
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	1ad3      	subs	r3, r2, r3
 80067b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d901      	bls.n	80067bc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80067b8:	2303      	movs	r3, #3
 80067ba:	e0af      	b.n	800691c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067bc:	4b5a      	ldr	r3, [pc, #360]	; (8006928 <HAL_RCC_OscConfig+0x4e8>)
 80067be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067c0:	f003 0302 	and.w	r3, r3, #2
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d1ee      	bne.n	80067a6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80067c8:	7dfb      	ldrb	r3, [r7, #23]
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d105      	bne.n	80067da <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067ce:	4b56      	ldr	r3, [pc, #344]	; (8006928 <HAL_RCC_OscConfig+0x4e8>)
 80067d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d2:	4a55      	ldr	r2, [pc, #340]	; (8006928 <HAL_RCC_OscConfig+0x4e8>)
 80067d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	699b      	ldr	r3, [r3, #24]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	f000 809b 	beq.w	800691a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80067e4:	4b50      	ldr	r3, [pc, #320]	; (8006928 <HAL_RCC_OscConfig+0x4e8>)
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	f003 030c 	and.w	r3, r3, #12
 80067ec:	2b08      	cmp	r3, #8
 80067ee:	d05c      	beq.n	80068aa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	699b      	ldr	r3, [r3, #24]
 80067f4:	2b02      	cmp	r3, #2
 80067f6:	d141      	bne.n	800687c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067f8:	4b4c      	ldr	r3, [pc, #304]	; (800692c <HAL_RCC_OscConfig+0x4ec>)
 80067fa:	2200      	movs	r2, #0
 80067fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067fe:	f7fe fb07 	bl	8004e10 <HAL_GetTick>
 8006802:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006804:	e008      	b.n	8006818 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006806:	f7fe fb03 	bl	8004e10 <HAL_GetTick>
 800680a:	4602      	mov	r2, r0
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	1ad3      	subs	r3, r2, r3
 8006810:	2b02      	cmp	r3, #2
 8006812:	d901      	bls.n	8006818 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006814:	2303      	movs	r3, #3
 8006816:	e081      	b.n	800691c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006818:	4b43      	ldr	r3, [pc, #268]	; (8006928 <HAL_RCC_OscConfig+0x4e8>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006820:	2b00      	cmp	r3, #0
 8006822:	d1f0      	bne.n	8006806 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	69da      	ldr	r2, [r3, #28]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6a1b      	ldr	r3, [r3, #32]
 800682c:	431a      	orrs	r2, r3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006832:	019b      	lsls	r3, r3, #6
 8006834:	431a      	orrs	r2, r3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800683a:	085b      	lsrs	r3, r3, #1
 800683c:	3b01      	subs	r3, #1
 800683e:	041b      	lsls	r3, r3, #16
 8006840:	431a      	orrs	r2, r3
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006846:	061b      	lsls	r3, r3, #24
 8006848:	4937      	ldr	r1, [pc, #220]	; (8006928 <HAL_RCC_OscConfig+0x4e8>)
 800684a:	4313      	orrs	r3, r2
 800684c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800684e:	4b37      	ldr	r3, [pc, #220]	; (800692c <HAL_RCC_OscConfig+0x4ec>)
 8006850:	2201      	movs	r2, #1
 8006852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006854:	f7fe fadc 	bl	8004e10 <HAL_GetTick>
 8006858:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800685a:	e008      	b.n	800686e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800685c:	f7fe fad8 	bl	8004e10 <HAL_GetTick>
 8006860:	4602      	mov	r2, r0
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	2b02      	cmp	r3, #2
 8006868:	d901      	bls.n	800686e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800686a:	2303      	movs	r3, #3
 800686c:	e056      	b.n	800691c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800686e:	4b2e      	ldr	r3, [pc, #184]	; (8006928 <HAL_RCC_OscConfig+0x4e8>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006876:	2b00      	cmp	r3, #0
 8006878:	d0f0      	beq.n	800685c <HAL_RCC_OscConfig+0x41c>
 800687a:	e04e      	b.n	800691a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800687c:	4b2b      	ldr	r3, [pc, #172]	; (800692c <HAL_RCC_OscConfig+0x4ec>)
 800687e:	2200      	movs	r2, #0
 8006880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006882:	f7fe fac5 	bl	8004e10 <HAL_GetTick>
 8006886:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006888:	e008      	b.n	800689c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800688a:	f7fe fac1 	bl	8004e10 <HAL_GetTick>
 800688e:	4602      	mov	r2, r0
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	1ad3      	subs	r3, r2, r3
 8006894:	2b02      	cmp	r3, #2
 8006896:	d901      	bls.n	800689c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006898:	2303      	movs	r3, #3
 800689a:	e03f      	b.n	800691c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800689c:	4b22      	ldr	r3, [pc, #136]	; (8006928 <HAL_RCC_OscConfig+0x4e8>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d1f0      	bne.n	800688a <HAL_RCC_OscConfig+0x44a>
 80068a8:	e037      	b.n	800691a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	699b      	ldr	r3, [r3, #24]
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d101      	bne.n	80068b6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	e032      	b.n	800691c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80068b6:	4b1c      	ldr	r3, [pc, #112]	; (8006928 <HAL_RCC_OscConfig+0x4e8>)
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	699b      	ldr	r3, [r3, #24]
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d028      	beq.n	8006916 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d121      	bne.n	8006916 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068dc:	429a      	cmp	r2, r3
 80068de:	d11a      	bne.n	8006916 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80068e6:	4013      	ands	r3, r2
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80068ec:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d111      	bne.n	8006916 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068fc:	085b      	lsrs	r3, r3, #1
 80068fe:	3b01      	subs	r3, #1
 8006900:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006902:	429a      	cmp	r2, r3
 8006904:	d107      	bne.n	8006916 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006910:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006912:	429a      	cmp	r2, r3
 8006914:	d001      	beq.n	800691a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e000      	b.n	800691c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	3718      	adds	r7, #24
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}
 8006924:	40007000 	.word	0x40007000
 8006928:	40023800 	.word	0x40023800
 800692c:	42470060 	.word	0x42470060

08006930 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d101      	bne.n	8006944 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	e0cc      	b.n	8006ade <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006944:	4b68      	ldr	r3, [pc, #416]	; (8006ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 0307 	and.w	r3, r3, #7
 800694c:	683a      	ldr	r2, [r7, #0]
 800694e:	429a      	cmp	r2, r3
 8006950:	d90c      	bls.n	800696c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006952:	4b65      	ldr	r3, [pc, #404]	; (8006ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8006954:	683a      	ldr	r2, [r7, #0]
 8006956:	b2d2      	uxtb	r2, r2
 8006958:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800695a:	4b63      	ldr	r3, [pc, #396]	; (8006ae8 <HAL_RCC_ClockConfig+0x1b8>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f003 0307 	and.w	r3, r3, #7
 8006962:	683a      	ldr	r2, [r7, #0]
 8006964:	429a      	cmp	r2, r3
 8006966:	d001      	beq.n	800696c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	e0b8      	b.n	8006ade <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f003 0302 	and.w	r3, r3, #2
 8006974:	2b00      	cmp	r3, #0
 8006976:	d020      	beq.n	80069ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 0304 	and.w	r3, r3, #4
 8006980:	2b00      	cmp	r3, #0
 8006982:	d005      	beq.n	8006990 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006984:	4b59      	ldr	r3, [pc, #356]	; (8006aec <HAL_RCC_ClockConfig+0x1bc>)
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	4a58      	ldr	r2, [pc, #352]	; (8006aec <HAL_RCC_ClockConfig+0x1bc>)
 800698a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800698e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 0308 	and.w	r3, r3, #8
 8006998:	2b00      	cmp	r3, #0
 800699a:	d005      	beq.n	80069a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800699c:	4b53      	ldr	r3, [pc, #332]	; (8006aec <HAL_RCC_ClockConfig+0x1bc>)
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	4a52      	ldr	r2, [pc, #328]	; (8006aec <HAL_RCC_ClockConfig+0x1bc>)
 80069a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80069a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069a8:	4b50      	ldr	r3, [pc, #320]	; (8006aec <HAL_RCC_ClockConfig+0x1bc>)
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	494d      	ldr	r1, [pc, #308]	; (8006aec <HAL_RCC_ClockConfig+0x1bc>)
 80069b6:	4313      	orrs	r3, r2
 80069b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 0301 	and.w	r3, r3, #1
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d044      	beq.n	8006a50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d107      	bne.n	80069de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069ce:	4b47      	ldr	r3, [pc, #284]	; (8006aec <HAL_RCC_ClockConfig+0x1bc>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d119      	bne.n	8006a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	e07f      	b.n	8006ade <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	2b02      	cmp	r3, #2
 80069e4:	d003      	beq.n	80069ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80069ea:	2b03      	cmp	r3, #3
 80069ec:	d107      	bne.n	80069fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069ee:	4b3f      	ldr	r3, [pc, #252]	; (8006aec <HAL_RCC_ClockConfig+0x1bc>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d109      	bne.n	8006a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	e06f      	b.n	8006ade <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069fe:	4b3b      	ldr	r3, [pc, #236]	; (8006aec <HAL_RCC_ClockConfig+0x1bc>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 0302 	and.w	r3, r3, #2
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d101      	bne.n	8006a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e067      	b.n	8006ade <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a0e:	4b37      	ldr	r3, [pc, #220]	; (8006aec <HAL_RCC_ClockConfig+0x1bc>)
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	f023 0203 	bic.w	r2, r3, #3
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	4934      	ldr	r1, [pc, #208]	; (8006aec <HAL_RCC_ClockConfig+0x1bc>)
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a20:	f7fe f9f6 	bl	8004e10 <HAL_GetTick>
 8006a24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a26:	e00a      	b.n	8006a3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a28:	f7fe f9f2 	bl	8004e10 <HAL_GetTick>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	1ad3      	subs	r3, r2, r3
 8006a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d901      	bls.n	8006a3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006a3a:	2303      	movs	r3, #3
 8006a3c:	e04f      	b.n	8006ade <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a3e:	4b2b      	ldr	r3, [pc, #172]	; (8006aec <HAL_RCC_ClockConfig+0x1bc>)
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	f003 020c 	and.w	r2, r3, #12
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d1eb      	bne.n	8006a28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a50:	4b25      	ldr	r3, [pc, #148]	; (8006ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f003 0307 	and.w	r3, r3, #7
 8006a58:	683a      	ldr	r2, [r7, #0]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d20c      	bcs.n	8006a78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a5e:	4b22      	ldr	r3, [pc, #136]	; (8006ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8006a60:	683a      	ldr	r2, [r7, #0]
 8006a62:	b2d2      	uxtb	r2, r2
 8006a64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a66:	4b20      	ldr	r3, [pc, #128]	; (8006ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 0307 	and.w	r3, r3, #7
 8006a6e:	683a      	ldr	r2, [r7, #0]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d001      	beq.n	8006a78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	e032      	b.n	8006ade <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f003 0304 	and.w	r3, r3, #4
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d008      	beq.n	8006a96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a84:	4b19      	ldr	r3, [pc, #100]	; (8006aec <HAL_RCC_ClockConfig+0x1bc>)
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	4916      	ldr	r1, [pc, #88]	; (8006aec <HAL_RCC_ClockConfig+0x1bc>)
 8006a92:	4313      	orrs	r3, r2
 8006a94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 0308 	and.w	r3, r3, #8
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d009      	beq.n	8006ab6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006aa2:	4b12      	ldr	r3, [pc, #72]	; (8006aec <HAL_RCC_ClockConfig+0x1bc>)
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	00db      	lsls	r3, r3, #3
 8006ab0:	490e      	ldr	r1, [pc, #56]	; (8006aec <HAL_RCC_ClockConfig+0x1bc>)
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006ab6:	f000 f821 	bl	8006afc <HAL_RCC_GetSysClockFreq>
 8006aba:	4602      	mov	r2, r0
 8006abc:	4b0b      	ldr	r3, [pc, #44]	; (8006aec <HAL_RCC_ClockConfig+0x1bc>)
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	091b      	lsrs	r3, r3, #4
 8006ac2:	f003 030f 	and.w	r3, r3, #15
 8006ac6:	490a      	ldr	r1, [pc, #40]	; (8006af0 <HAL_RCC_ClockConfig+0x1c0>)
 8006ac8:	5ccb      	ldrb	r3, [r1, r3]
 8006aca:	fa22 f303 	lsr.w	r3, r2, r3
 8006ace:	4a09      	ldr	r2, [pc, #36]	; (8006af4 <HAL_RCC_ClockConfig+0x1c4>)
 8006ad0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006ad2:	4b09      	ldr	r3, [pc, #36]	; (8006af8 <HAL_RCC_ClockConfig+0x1c8>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f7fe f956 	bl	8004d88 <HAL_InitTick>

  return HAL_OK;
 8006adc:	2300      	movs	r3, #0
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3710      	adds	r7, #16
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	40023c00 	.word	0x40023c00
 8006aec:	40023800 	.word	0x40023800
 8006af0:	08012ac8 	.word	0x08012ac8
 8006af4:	20000010 	.word	0x20000010
 8006af8:	20000014 	.word	0x20000014

08006afc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006afc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006b00:	b084      	sub	sp, #16
 8006b02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006b04:	2300      	movs	r3, #0
 8006b06:	607b      	str	r3, [r7, #4]
 8006b08:	2300      	movs	r3, #0
 8006b0a:	60fb      	str	r3, [r7, #12]
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006b10:	2300      	movs	r3, #0
 8006b12:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b14:	4b67      	ldr	r3, [pc, #412]	; (8006cb4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	f003 030c 	and.w	r3, r3, #12
 8006b1c:	2b08      	cmp	r3, #8
 8006b1e:	d00d      	beq.n	8006b3c <HAL_RCC_GetSysClockFreq+0x40>
 8006b20:	2b08      	cmp	r3, #8
 8006b22:	f200 80bd 	bhi.w	8006ca0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d002      	beq.n	8006b30 <HAL_RCC_GetSysClockFreq+0x34>
 8006b2a:	2b04      	cmp	r3, #4
 8006b2c:	d003      	beq.n	8006b36 <HAL_RCC_GetSysClockFreq+0x3a>
 8006b2e:	e0b7      	b.n	8006ca0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006b30:	4b61      	ldr	r3, [pc, #388]	; (8006cb8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006b32:	60bb      	str	r3, [r7, #8]
       break;
 8006b34:	e0b7      	b.n	8006ca6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006b36:	4b61      	ldr	r3, [pc, #388]	; (8006cbc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006b38:	60bb      	str	r3, [r7, #8]
      break;
 8006b3a:	e0b4      	b.n	8006ca6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006b3c:	4b5d      	ldr	r3, [pc, #372]	; (8006cb4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b44:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006b46:	4b5b      	ldr	r3, [pc, #364]	; (8006cb4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d04d      	beq.n	8006bee <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b52:	4b58      	ldr	r3, [pc, #352]	; (8006cb4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	099b      	lsrs	r3, r3, #6
 8006b58:	461a      	mov	r2, r3
 8006b5a:	f04f 0300 	mov.w	r3, #0
 8006b5e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006b62:	f04f 0100 	mov.w	r1, #0
 8006b66:	ea02 0800 	and.w	r8, r2, r0
 8006b6a:	ea03 0901 	and.w	r9, r3, r1
 8006b6e:	4640      	mov	r0, r8
 8006b70:	4649      	mov	r1, r9
 8006b72:	f04f 0200 	mov.w	r2, #0
 8006b76:	f04f 0300 	mov.w	r3, #0
 8006b7a:	014b      	lsls	r3, r1, #5
 8006b7c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006b80:	0142      	lsls	r2, r0, #5
 8006b82:	4610      	mov	r0, r2
 8006b84:	4619      	mov	r1, r3
 8006b86:	ebb0 0008 	subs.w	r0, r0, r8
 8006b8a:	eb61 0109 	sbc.w	r1, r1, r9
 8006b8e:	f04f 0200 	mov.w	r2, #0
 8006b92:	f04f 0300 	mov.w	r3, #0
 8006b96:	018b      	lsls	r3, r1, #6
 8006b98:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006b9c:	0182      	lsls	r2, r0, #6
 8006b9e:	1a12      	subs	r2, r2, r0
 8006ba0:	eb63 0301 	sbc.w	r3, r3, r1
 8006ba4:	f04f 0000 	mov.w	r0, #0
 8006ba8:	f04f 0100 	mov.w	r1, #0
 8006bac:	00d9      	lsls	r1, r3, #3
 8006bae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006bb2:	00d0      	lsls	r0, r2, #3
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	460b      	mov	r3, r1
 8006bb8:	eb12 0208 	adds.w	r2, r2, r8
 8006bbc:	eb43 0309 	adc.w	r3, r3, r9
 8006bc0:	f04f 0000 	mov.w	r0, #0
 8006bc4:	f04f 0100 	mov.w	r1, #0
 8006bc8:	0259      	lsls	r1, r3, #9
 8006bca:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006bce:	0250      	lsls	r0, r2, #9
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	460b      	mov	r3, r1
 8006bd4:	4610      	mov	r0, r2
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	461a      	mov	r2, r3
 8006bdc:	f04f 0300 	mov.w	r3, #0
 8006be0:	f7fc ff60 	bl	8003aa4 <__aeabi_uldivmod>
 8006be4:	4602      	mov	r2, r0
 8006be6:	460b      	mov	r3, r1
 8006be8:	4613      	mov	r3, r2
 8006bea:	60fb      	str	r3, [r7, #12]
 8006bec:	e04a      	b.n	8006c84 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006bee:	4b31      	ldr	r3, [pc, #196]	; (8006cb4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	099b      	lsrs	r3, r3, #6
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	f04f 0300 	mov.w	r3, #0
 8006bfa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006bfe:	f04f 0100 	mov.w	r1, #0
 8006c02:	ea02 0400 	and.w	r4, r2, r0
 8006c06:	ea03 0501 	and.w	r5, r3, r1
 8006c0a:	4620      	mov	r0, r4
 8006c0c:	4629      	mov	r1, r5
 8006c0e:	f04f 0200 	mov.w	r2, #0
 8006c12:	f04f 0300 	mov.w	r3, #0
 8006c16:	014b      	lsls	r3, r1, #5
 8006c18:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006c1c:	0142      	lsls	r2, r0, #5
 8006c1e:	4610      	mov	r0, r2
 8006c20:	4619      	mov	r1, r3
 8006c22:	1b00      	subs	r0, r0, r4
 8006c24:	eb61 0105 	sbc.w	r1, r1, r5
 8006c28:	f04f 0200 	mov.w	r2, #0
 8006c2c:	f04f 0300 	mov.w	r3, #0
 8006c30:	018b      	lsls	r3, r1, #6
 8006c32:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006c36:	0182      	lsls	r2, r0, #6
 8006c38:	1a12      	subs	r2, r2, r0
 8006c3a:	eb63 0301 	sbc.w	r3, r3, r1
 8006c3e:	f04f 0000 	mov.w	r0, #0
 8006c42:	f04f 0100 	mov.w	r1, #0
 8006c46:	00d9      	lsls	r1, r3, #3
 8006c48:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006c4c:	00d0      	lsls	r0, r2, #3
 8006c4e:	4602      	mov	r2, r0
 8006c50:	460b      	mov	r3, r1
 8006c52:	1912      	adds	r2, r2, r4
 8006c54:	eb45 0303 	adc.w	r3, r5, r3
 8006c58:	f04f 0000 	mov.w	r0, #0
 8006c5c:	f04f 0100 	mov.w	r1, #0
 8006c60:	0299      	lsls	r1, r3, #10
 8006c62:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006c66:	0290      	lsls	r0, r2, #10
 8006c68:	4602      	mov	r2, r0
 8006c6a:	460b      	mov	r3, r1
 8006c6c:	4610      	mov	r0, r2
 8006c6e:	4619      	mov	r1, r3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	461a      	mov	r2, r3
 8006c74:	f04f 0300 	mov.w	r3, #0
 8006c78:	f7fc ff14 	bl	8003aa4 <__aeabi_uldivmod>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	460b      	mov	r3, r1
 8006c80:	4613      	mov	r3, r2
 8006c82:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006c84:	4b0b      	ldr	r3, [pc, #44]	; (8006cb4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	0c1b      	lsrs	r3, r3, #16
 8006c8a:	f003 0303 	and.w	r3, r3, #3
 8006c8e:	3301      	adds	r3, #1
 8006c90:	005b      	lsls	r3, r3, #1
 8006c92:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006c94:	68fa      	ldr	r2, [r7, #12]
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c9c:	60bb      	str	r3, [r7, #8]
      break;
 8006c9e:	e002      	b.n	8006ca6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006ca0:	4b05      	ldr	r3, [pc, #20]	; (8006cb8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006ca2:	60bb      	str	r3, [r7, #8]
      break;
 8006ca4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ca6:	68bb      	ldr	r3, [r7, #8]
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3710      	adds	r7, #16
 8006cac:	46bd      	mov	sp, r7
 8006cae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006cb2:	bf00      	nop
 8006cb4:	40023800 	.word	0x40023800
 8006cb8:	00f42400 	.word	0x00f42400
 8006cbc:	007a1200 	.word	0x007a1200

08006cc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006cc4:	4b03      	ldr	r3, [pc, #12]	; (8006cd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr
 8006cd2:	bf00      	nop
 8006cd4:	20000010 	.word	0x20000010

08006cd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006cdc:	f7ff fff0 	bl	8006cc0 <HAL_RCC_GetHCLKFreq>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	4b05      	ldr	r3, [pc, #20]	; (8006cf8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	0a9b      	lsrs	r3, r3, #10
 8006ce8:	f003 0307 	and.w	r3, r3, #7
 8006cec:	4903      	ldr	r1, [pc, #12]	; (8006cfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8006cee:	5ccb      	ldrb	r3, [r1, r3]
 8006cf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	40023800 	.word	0x40023800
 8006cfc:	08012ad8 	.word	0x08012ad8

08006d00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006d04:	f7ff ffdc 	bl	8006cc0 <HAL_RCC_GetHCLKFreq>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	4b05      	ldr	r3, [pc, #20]	; (8006d20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	0b5b      	lsrs	r3, r3, #13
 8006d10:	f003 0307 	and.w	r3, r3, #7
 8006d14:	4903      	ldr	r1, [pc, #12]	; (8006d24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d16:	5ccb      	ldrb	r3, [r1, r3]
 8006d18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	bd80      	pop	{r7, pc}
 8006d20:	40023800 	.word	0x40023800
 8006d24:	08012ad8 	.word	0x08012ad8

08006d28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b082      	sub	sp, #8
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d101      	bne.n	8006d3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	e03f      	b.n	8006dba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d106      	bne.n	8006d54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f7fd fe72 	bl	8004a38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2224      	movs	r2, #36	; 0x24
 8006d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	68da      	ldr	r2, [r3, #12]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 fd7b 	bl	8007868 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	691a      	ldr	r2, [r3, #16]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	695a      	ldr	r2, [r3, #20]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	68da      	ldr	r2, [r3, #12]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006da0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2220      	movs	r2, #32
 8006dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2220      	movs	r2, #32
 8006db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006db8:	2300      	movs	r3, #0
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3708      	adds	r7, #8
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}

08006dc2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b08a      	sub	sp, #40	; 0x28
 8006dc6:	af02      	add	r7, sp, #8
 8006dc8:	60f8      	str	r0, [r7, #12]
 8006dca:	60b9      	str	r1, [r7, #8]
 8006dcc:	603b      	str	r3, [r7, #0]
 8006dce:	4613      	mov	r3, r2
 8006dd0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	2b20      	cmp	r3, #32
 8006de0:	d17c      	bne.n	8006edc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d002      	beq.n	8006dee <HAL_UART_Transmit+0x2c>
 8006de8:	88fb      	ldrh	r3, [r7, #6]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d101      	bne.n	8006df2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	e075      	b.n	8006ede <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d101      	bne.n	8006e00 <HAL_UART_Transmit+0x3e>
 8006dfc:	2302      	movs	r3, #2
 8006dfe:	e06e      	b.n	8006ede <HAL_UART_Transmit+0x11c>
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2221      	movs	r2, #33	; 0x21
 8006e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e16:	f7fd fffb 	bl	8004e10 <HAL_GetTick>
 8006e1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	88fa      	ldrh	r2, [r7, #6]
 8006e20:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	88fa      	ldrh	r2, [r7, #6]
 8006e26:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e30:	d108      	bne.n	8006e44 <HAL_UART_Transmit+0x82>
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	691b      	ldr	r3, [r3, #16]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d104      	bne.n	8006e44 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	61bb      	str	r3, [r7, #24]
 8006e42:	e003      	b.n	8006e4c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006e54:	e02a      	b.n	8006eac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	9300      	str	r3, [sp, #0]
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	2180      	movs	r1, #128	; 0x80
 8006e60:	68f8      	ldr	r0, [r7, #12]
 8006e62:	f000 faf9 	bl	8007458 <UART_WaitOnFlagUntilTimeout>
 8006e66:	4603      	mov	r3, r0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d001      	beq.n	8006e70 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006e6c:	2303      	movs	r3, #3
 8006e6e:	e036      	b.n	8006ede <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d10b      	bne.n	8006e8e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e76:	69bb      	ldr	r3, [r7, #24]
 8006e78:	881b      	ldrh	r3, [r3, #0]
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e84:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006e86:	69bb      	ldr	r3, [r7, #24]
 8006e88:	3302      	adds	r3, #2
 8006e8a:	61bb      	str	r3, [r7, #24]
 8006e8c:	e007      	b.n	8006e9e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	781a      	ldrb	r2, [r3, #0]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	3b01      	subs	r3, #1
 8006ea6:	b29a      	uxth	r2, r3
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d1cf      	bne.n	8006e56 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	9300      	str	r3, [sp, #0]
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	2140      	movs	r1, #64	; 0x40
 8006ec0:	68f8      	ldr	r0, [r7, #12]
 8006ec2:	f000 fac9 	bl	8007458 <UART_WaitOnFlagUntilTimeout>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d001      	beq.n	8006ed0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006ecc:	2303      	movs	r3, #3
 8006ece:	e006      	b.n	8006ede <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2220      	movs	r2, #32
 8006ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	e000      	b.n	8006ede <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006edc:	2302      	movs	r3, #2
  }
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3720      	adds	r7, #32
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
	...

08006ee8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b0ba      	sub	sp, #232	; 0xe8
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	695b      	ldr	r3, [r3, #20]
 8006f0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006f14:	2300      	movs	r3, #0
 8006f16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f1e:	f003 030f 	and.w	r3, r3, #15
 8006f22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006f26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d10f      	bne.n	8006f4e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f32:	f003 0320 	and.w	r3, r3, #32
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d009      	beq.n	8006f4e <HAL_UART_IRQHandler+0x66>
 8006f3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f3e:	f003 0320 	and.w	r3, r3, #32
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d003      	beq.n	8006f4e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 fbd3 	bl	80076f2 <UART_Receive_IT>
      return;
 8006f4c:	e256      	b.n	80073fc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006f4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	f000 80de 	beq.w	8007114 <HAL_UART_IRQHandler+0x22c>
 8006f58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f5c:	f003 0301 	and.w	r3, r3, #1
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d106      	bne.n	8006f72 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f68:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	f000 80d1 	beq.w	8007114 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f76:	f003 0301 	and.w	r3, r3, #1
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d00b      	beq.n	8006f96 <HAL_UART_IRQHandler+0xae>
 8006f7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d005      	beq.n	8006f96 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8e:	f043 0201 	orr.w	r2, r3, #1
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f9a:	f003 0304 	and.w	r3, r3, #4
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d00b      	beq.n	8006fba <HAL_UART_IRQHandler+0xd2>
 8006fa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fa6:	f003 0301 	and.w	r3, r3, #1
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d005      	beq.n	8006fba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb2:	f043 0202 	orr.w	r2, r3, #2
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fbe:	f003 0302 	and.w	r3, r3, #2
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d00b      	beq.n	8006fde <HAL_UART_IRQHandler+0xf6>
 8006fc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fca:	f003 0301 	and.w	r3, r3, #1
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d005      	beq.n	8006fde <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd6:	f043 0204 	orr.w	r2, r3, #4
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fe2:	f003 0308 	and.w	r3, r3, #8
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d011      	beq.n	800700e <HAL_UART_IRQHandler+0x126>
 8006fea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fee:	f003 0320 	and.w	r3, r3, #32
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d105      	bne.n	8007002 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006ff6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ffa:	f003 0301 	and.w	r3, r3, #1
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d005      	beq.n	800700e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007006:	f043 0208 	orr.w	r2, r3, #8
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007012:	2b00      	cmp	r3, #0
 8007014:	f000 81ed 	beq.w	80073f2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800701c:	f003 0320 	and.w	r3, r3, #32
 8007020:	2b00      	cmp	r3, #0
 8007022:	d008      	beq.n	8007036 <HAL_UART_IRQHandler+0x14e>
 8007024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007028:	f003 0320 	and.w	r3, r3, #32
 800702c:	2b00      	cmp	r3, #0
 800702e:	d002      	beq.n	8007036 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f000 fb5e 	bl	80076f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	695b      	ldr	r3, [r3, #20]
 800703c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007040:	2b40      	cmp	r3, #64	; 0x40
 8007042:	bf0c      	ite	eq
 8007044:	2301      	moveq	r3, #1
 8007046:	2300      	movne	r3, #0
 8007048:	b2db      	uxtb	r3, r3
 800704a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007052:	f003 0308 	and.w	r3, r3, #8
 8007056:	2b00      	cmp	r3, #0
 8007058:	d103      	bne.n	8007062 <HAL_UART_IRQHandler+0x17a>
 800705a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800705e:	2b00      	cmp	r3, #0
 8007060:	d04f      	beq.n	8007102 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 fa66 	bl	8007534 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	695b      	ldr	r3, [r3, #20]
 800706e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007072:	2b40      	cmp	r3, #64	; 0x40
 8007074:	d141      	bne.n	80070fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	3314      	adds	r3, #20
 800707c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007080:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007084:	e853 3f00 	ldrex	r3, [r3]
 8007088:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800708c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007090:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007094:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	3314      	adds	r3, #20
 800709e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80070a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80070a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80070ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80070b2:	e841 2300 	strex	r3, r2, [r1]
 80070b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80070ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d1d9      	bne.n	8007076 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d013      	beq.n	80070f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ce:	4a7d      	ldr	r2, [pc, #500]	; (80072c4 <HAL_UART_IRQHandler+0x3dc>)
 80070d0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d6:	4618      	mov	r0, r3
 80070d8:	f7fe f84b 	bl	8005172 <HAL_DMA_Abort_IT>
 80070dc:	4603      	mov	r3, r0
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d016      	beq.n	8007110 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80070ec:	4610      	mov	r0, r2
 80070ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070f0:	e00e      	b.n	8007110 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 f99a 	bl	800742c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070f8:	e00a      	b.n	8007110 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 f996 	bl	800742c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007100:	e006      	b.n	8007110 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 f992 	bl	800742c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2200      	movs	r2, #0
 800710c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800710e:	e170      	b.n	80073f2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007110:	bf00      	nop
    return;
 8007112:	e16e      	b.n	80073f2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007118:	2b01      	cmp	r3, #1
 800711a:	f040 814a 	bne.w	80073b2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800711e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007122:	f003 0310 	and.w	r3, r3, #16
 8007126:	2b00      	cmp	r3, #0
 8007128:	f000 8143 	beq.w	80073b2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800712c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007130:	f003 0310 	and.w	r3, r3, #16
 8007134:	2b00      	cmp	r3, #0
 8007136:	f000 813c 	beq.w	80073b2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800713a:	2300      	movs	r3, #0
 800713c:	60bb      	str	r3, [r7, #8]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	60bb      	str	r3, [r7, #8]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	60bb      	str	r3, [r7, #8]
 800714e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	695b      	ldr	r3, [r3, #20]
 8007156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800715a:	2b40      	cmp	r3, #64	; 0x40
 800715c:	f040 80b4 	bne.w	80072c8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800716c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007170:	2b00      	cmp	r3, #0
 8007172:	f000 8140 	beq.w	80073f6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800717a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800717e:	429a      	cmp	r2, r3
 8007180:	f080 8139 	bcs.w	80073f6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800718a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007190:	69db      	ldr	r3, [r3, #28]
 8007192:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007196:	f000 8088 	beq.w	80072aa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	330c      	adds	r3, #12
 80071a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80071a8:	e853 3f00 	ldrex	r3, [r3]
 80071ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80071b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80071b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	330c      	adds	r3, #12
 80071c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80071c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80071ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80071d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80071d6:	e841 2300 	strex	r3, r2, [r1]
 80071da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80071de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d1d9      	bne.n	800719a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	3314      	adds	r3, #20
 80071ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071f0:	e853 3f00 	ldrex	r3, [r3]
 80071f4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80071f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80071f8:	f023 0301 	bic.w	r3, r3, #1
 80071fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	3314      	adds	r3, #20
 8007206:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800720a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800720e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007210:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007212:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007216:	e841 2300 	strex	r3, r2, [r1]
 800721a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800721c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800721e:	2b00      	cmp	r3, #0
 8007220:	d1e1      	bne.n	80071e6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	3314      	adds	r3, #20
 8007228:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800722a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800722c:	e853 3f00 	ldrex	r3, [r3]
 8007230:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007232:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007234:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007238:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	3314      	adds	r3, #20
 8007242:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007246:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007248:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800724a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800724c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800724e:	e841 2300 	strex	r3, r2, [r1]
 8007252:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007254:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007256:	2b00      	cmp	r3, #0
 8007258:	d1e3      	bne.n	8007222 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2220      	movs	r2, #32
 800725e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	330c      	adds	r3, #12
 800726e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007270:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007272:	e853 3f00 	ldrex	r3, [r3]
 8007276:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007278:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800727a:	f023 0310 	bic.w	r3, r3, #16
 800727e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	330c      	adds	r3, #12
 8007288:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800728c:	65ba      	str	r2, [r7, #88]	; 0x58
 800728e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007290:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007292:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007294:	e841 2300 	strex	r3, r2, [r1]
 8007298:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800729a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800729c:	2b00      	cmp	r3, #0
 800729e:	d1e3      	bne.n	8007268 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a4:	4618      	mov	r0, r3
 80072a6:	f7fd fef4 	bl	8005092 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	1ad3      	subs	r3, r2, r3
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	4619      	mov	r1, r3
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 f8c0 	bl	8007440 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80072c0:	e099      	b.n	80073f6 <HAL_UART_IRQHandler+0x50e>
 80072c2:	bf00      	nop
 80072c4:	080075fb 	.word	0x080075fb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	1ad3      	subs	r3, r2, r3
 80072d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80072dc:	b29b      	uxth	r3, r3
 80072de:	2b00      	cmp	r3, #0
 80072e0:	f000 808b 	beq.w	80073fa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80072e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	f000 8086 	beq.w	80073fa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	330c      	adds	r3, #12
 80072f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f8:	e853 3f00 	ldrex	r3, [r3]
 80072fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80072fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007300:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007304:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	330c      	adds	r3, #12
 800730e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007312:	647a      	str	r2, [r7, #68]	; 0x44
 8007314:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007316:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007318:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800731a:	e841 2300 	strex	r3, r2, [r1]
 800731e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007322:	2b00      	cmp	r3, #0
 8007324:	d1e3      	bne.n	80072ee <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	3314      	adds	r3, #20
 800732c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800732e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007330:	e853 3f00 	ldrex	r3, [r3]
 8007334:	623b      	str	r3, [r7, #32]
   return(result);
 8007336:	6a3b      	ldr	r3, [r7, #32]
 8007338:	f023 0301 	bic.w	r3, r3, #1
 800733c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	3314      	adds	r3, #20
 8007346:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800734a:	633a      	str	r2, [r7, #48]	; 0x30
 800734c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800734e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007350:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007352:	e841 2300 	strex	r3, r2, [r1]
 8007356:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800735a:	2b00      	cmp	r3, #0
 800735c:	d1e3      	bne.n	8007326 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2220      	movs	r2, #32
 8007362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2200      	movs	r2, #0
 800736a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	330c      	adds	r3, #12
 8007372:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	e853 3f00 	ldrex	r3, [r3]
 800737a:	60fb      	str	r3, [r7, #12]
   return(result);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f023 0310 	bic.w	r3, r3, #16
 8007382:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	330c      	adds	r3, #12
 800738c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007390:	61fa      	str	r2, [r7, #28]
 8007392:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007394:	69b9      	ldr	r1, [r7, #24]
 8007396:	69fa      	ldr	r2, [r7, #28]
 8007398:	e841 2300 	strex	r3, r2, [r1]
 800739c:	617b      	str	r3, [r7, #20]
   return(result);
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d1e3      	bne.n	800736c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80073a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80073a8:	4619      	mov	r1, r3
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 f848 	bl	8007440 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80073b0:	e023      	b.n	80073fa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80073b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d009      	beq.n	80073d2 <HAL_UART_IRQHandler+0x4ea>
 80073be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d003      	beq.n	80073d2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 f929 	bl	8007622 <UART_Transmit_IT>
    return;
 80073d0:	e014      	b.n	80073fc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80073d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d00e      	beq.n	80073fc <HAL_UART_IRQHandler+0x514>
 80073de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d008      	beq.n	80073fc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 f969 	bl	80076c2 <UART_EndTransmit_IT>
    return;
 80073f0:	e004      	b.n	80073fc <HAL_UART_IRQHandler+0x514>
    return;
 80073f2:	bf00      	nop
 80073f4:	e002      	b.n	80073fc <HAL_UART_IRQHandler+0x514>
      return;
 80073f6:	bf00      	nop
 80073f8:	e000      	b.n	80073fc <HAL_UART_IRQHandler+0x514>
      return;
 80073fa:	bf00      	nop
  }
}
 80073fc:	37e8      	adds	r7, #232	; 0xe8
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
 8007402:	bf00      	nop

08007404 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007404:	b480      	push	{r7}
 8007406:	b083      	sub	sp, #12
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800740c:	bf00      	nop
 800740e:	370c      	adds	r7, #12
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr

08007418 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007418:	b480      	push	{r7}
 800741a:	b083      	sub	sp, #12
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007420:	bf00      	nop
 8007422:	370c      	adds	r7, #12
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800742c:	b480      	push	{r7}
 800742e:	b083      	sub	sp, #12
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007434:	bf00      	nop
 8007436:	370c      	adds	r7, #12
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr

08007440 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007440:	b480      	push	{r7}
 8007442:	b083      	sub	sp, #12
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	460b      	mov	r3, r1
 800744a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800744c:	bf00      	nop
 800744e:	370c      	adds	r7, #12
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b090      	sub	sp, #64	; 0x40
 800745c:	af00      	add	r7, sp, #0
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	60b9      	str	r1, [r7, #8]
 8007462:	603b      	str	r3, [r7, #0]
 8007464:	4613      	mov	r3, r2
 8007466:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007468:	e050      	b.n	800750c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800746a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800746c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007470:	d04c      	beq.n	800750c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007472:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007474:	2b00      	cmp	r3, #0
 8007476:	d007      	beq.n	8007488 <UART_WaitOnFlagUntilTimeout+0x30>
 8007478:	f7fd fcca 	bl	8004e10 <HAL_GetTick>
 800747c:	4602      	mov	r2, r0
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	1ad3      	subs	r3, r2, r3
 8007482:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007484:	429a      	cmp	r2, r3
 8007486:	d241      	bcs.n	800750c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	330c      	adds	r3, #12
 800748e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007492:	e853 3f00 	ldrex	r3, [r3]
 8007496:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800749e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	330c      	adds	r3, #12
 80074a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80074a8:	637a      	str	r2, [r7, #52]	; 0x34
 80074aa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80074ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074b0:	e841 2300 	strex	r3, r2, [r1]
 80074b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80074b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d1e5      	bne.n	8007488 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	3314      	adds	r3, #20
 80074c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	e853 3f00 	ldrex	r3, [r3]
 80074ca:	613b      	str	r3, [r7, #16]
   return(result);
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	f023 0301 	bic.w	r3, r3, #1
 80074d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	3314      	adds	r3, #20
 80074da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074dc:	623a      	str	r2, [r7, #32]
 80074de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e0:	69f9      	ldr	r1, [r7, #28]
 80074e2:	6a3a      	ldr	r2, [r7, #32]
 80074e4:	e841 2300 	strex	r3, r2, [r1]
 80074e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80074ea:	69bb      	ldr	r3, [r7, #24]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d1e5      	bne.n	80074bc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2220      	movs	r2, #32
 80074f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2220      	movs	r2, #32
 80074fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2200      	movs	r2, #0
 8007504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007508:	2303      	movs	r3, #3
 800750a:	e00f      	b.n	800752c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	4013      	ands	r3, r2
 8007516:	68ba      	ldr	r2, [r7, #8]
 8007518:	429a      	cmp	r2, r3
 800751a:	bf0c      	ite	eq
 800751c:	2301      	moveq	r3, #1
 800751e:	2300      	movne	r3, #0
 8007520:	b2db      	uxtb	r3, r3
 8007522:	461a      	mov	r2, r3
 8007524:	79fb      	ldrb	r3, [r7, #7]
 8007526:	429a      	cmp	r2, r3
 8007528:	d09f      	beq.n	800746a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800752a:	2300      	movs	r3, #0
}
 800752c:	4618      	mov	r0, r3
 800752e:	3740      	adds	r7, #64	; 0x40
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}

08007534 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007534:	b480      	push	{r7}
 8007536:	b095      	sub	sp, #84	; 0x54
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	330c      	adds	r3, #12
 8007542:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007546:	e853 3f00 	ldrex	r3, [r3]
 800754a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800754c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007552:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	330c      	adds	r3, #12
 800755a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800755c:	643a      	str	r2, [r7, #64]	; 0x40
 800755e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007560:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007562:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007564:	e841 2300 	strex	r3, r2, [r1]
 8007568:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800756a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800756c:	2b00      	cmp	r3, #0
 800756e:	d1e5      	bne.n	800753c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	3314      	adds	r3, #20
 8007576:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007578:	6a3b      	ldr	r3, [r7, #32]
 800757a:	e853 3f00 	ldrex	r3, [r3]
 800757e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007580:	69fb      	ldr	r3, [r7, #28]
 8007582:	f023 0301 	bic.w	r3, r3, #1
 8007586:	64bb      	str	r3, [r7, #72]	; 0x48
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	3314      	adds	r3, #20
 800758e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007590:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007592:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007594:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007596:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007598:	e841 2300 	strex	r3, r2, [r1]
 800759c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800759e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d1e5      	bne.n	8007570 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d119      	bne.n	80075e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	330c      	adds	r3, #12
 80075b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	e853 3f00 	ldrex	r3, [r3]
 80075ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	f023 0310 	bic.w	r3, r3, #16
 80075c2:	647b      	str	r3, [r7, #68]	; 0x44
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	330c      	adds	r3, #12
 80075ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075cc:	61ba      	str	r2, [r7, #24]
 80075ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d0:	6979      	ldr	r1, [r7, #20]
 80075d2:	69ba      	ldr	r2, [r7, #24]
 80075d4:	e841 2300 	strex	r3, r2, [r1]
 80075d8:	613b      	str	r3, [r7, #16]
   return(result);
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d1e5      	bne.n	80075ac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2220      	movs	r2, #32
 80075e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	631a      	str	r2, [r3, #48]	; 0x30
}
 80075ee:	bf00      	nop
 80075f0:	3754      	adds	r7, #84	; 0x54
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr

080075fa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80075fa:	b580      	push	{r7, lr}
 80075fc:	b084      	sub	sp, #16
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007606:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2200      	movs	r2, #0
 800760c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2200      	movs	r2, #0
 8007612:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007614:	68f8      	ldr	r0, [r7, #12]
 8007616:	f7ff ff09 	bl	800742c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800761a:	bf00      	nop
 800761c:	3710      	adds	r7, #16
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}

08007622 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007622:	b480      	push	{r7}
 8007624:	b085      	sub	sp, #20
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007630:	b2db      	uxtb	r3, r3
 8007632:	2b21      	cmp	r3, #33	; 0x21
 8007634:	d13e      	bne.n	80076b4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800763e:	d114      	bne.n	800766a <UART_Transmit_IT+0x48>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	691b      	ldr	r3, [r3, #16]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d110      	bne.n	800766a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6a1b      	ldr	r3, [r3, #32]
 800764c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	881b      	ldrh	r3, [r3, #0]
 8007652:	461a      	mov	r2, r3
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800765c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6a1b      	ldr	r3, [r3, #32]
 8007662:	1c9a      	adds	r2, r3, #2
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	621a      	str	r2, [r3, #32]
 8007668:	e008      	b.n	800767c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6a1b      	ldr	r3, [r3, #32]
 800766e:	1c59      	adds	r1, r3, #1
 8007670:	687a      	ldr	r2, [r7, #4]
 8007672:	6211      	str	r1, [r2, #32]
 8007674:	781a      	ldrb	r2, [r3, #0]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007680:	b29b      	uxth	r3, r3
 8007682:	3b01      	subs	r3, #1
 8007684:	b29b      	uxth	r3, r3
 8007686:	687a      	ldr	r2, [r7, #4]
 8007688:	4619      	mov	r1, r3
 800768a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800768c:	2b00      	cmp	r3, #0
 800768e:	d10f      	bne.n	80076b0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	68da      	ldr	r2, [r3, #12]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800769e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	68da      	ldr	r2, [r3, #12]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076ae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80076b0:	2300      	movs	r3, #0
 80076b2:	e000      	b.n	80076b6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80076b4:	2302      	movs	r3, #2
  }
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3714      	adds	r7, #20
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr

080076c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80076c2:	b580      	push	{r7, lr}
 80076c4:	b082      	sub	sp, #8
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	68da      	ldr	r2, [r3, #12]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2220      	movs	r2, #32
 80076de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f7ff fe8e 	bl	8007404 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80076e8:	2300      	movs	r3, #0
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3708      	adds	r7, #8
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}

080076f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80076f2:	b580      	push	{r7, lr}
 80076f4:	b08c      	sub	sp, #48	; 0x30
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007700:	b2db      	uxtb	r3, r3
 8007702:	2b22      	cmp	r3, #34	; 0x22
 8007704:	f040 80ab 	bne.w	800785e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007710:	d117      	bne.n	8007742 <UART_Receive_IT+0x50>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	691b      	ldr	r3, [r3, #16]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d113      	bne.n	8007742 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800771a:	2300      	movs	r3, #0
 800771c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007722:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	b29b      	uxth	r3, r3
 800772c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007730:	b29a      	uxth	r2, r3
 8007732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007734:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800773a:	1c9a      	adds	r2, r3, #2
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	629a      	str	r2, [r3, #40]	; 0x28
 8007740:	e026      	b.n	8007790 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007746:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007748:	2300      	movs	r3, #0
 800774a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007754:	d007      	beq.n	8007766 <UART_Receive_IT+0x74>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d10a      	bne.n	8007774 <UART_Receive_IT+0x82>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	691b      	ldr	r3, [r3, #16]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d106      	bne.n	8007774 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	b2da      	uxtb	r2, r3
 800776e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007770:	701a      	strb	r2, [r3, #0]
 8007772:	e008      	b.n	8007786 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	b2db      	uxtb	r3, r3
 800777c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007780:	b2da      	uxtb	r2, r3
 8007782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007784:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800778a:	1c5a      	adds	r2, r3, #1
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007794:	b29b      	uxth	r3, r3
 8007796:	3b01      	subs	r3, #1
 8007798:	b29b      	uxth	r3, r3
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	4619      	mov	r1, r3
 800779e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d15a      	bne.n	800785a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	68da      	ldr	r2, [r3, #12]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f022 0220 	bic.w	r2, r2, #32
 80077b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	68da      	ldr	r2, [r3, #12]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80077c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	695a      	ldr	r2, [r3, #20]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f022 0201 	bic.w	r2, r2, #1
 80077d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2220      	movs	r2, #32
 80077d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d135      	bne.n	8007850 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2200      	movs	r2, #0
 80077e8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	330c      	adds	r3, #12
 80077f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	e853 3f00 	ldrex	r3, [r3]
 80077f8:	613b      	str	r3, [r7, #16]
   return(result);
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	f023 0310 	bic.w	r3, r3, #16
 8007800:	627b      	str	r3, [r7, #36]	; 0x24
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	330c      	adds	r3, #12
 8007808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800780a:	623a      	str	r2, [r7, #32]
 800780c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800780e:	69f9      	ldr	r1, [r7, #28]
 8007810:	6a3a      	ldr	r2, [r7, #32]
 8007812:	e841 2300 	strex	r3, r2, [r1]
 8007816:	61bb      	str	r3, [r7, #24]
   return(result);
 8007818:	69bb      	ldr	r3, [r7, #24]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d1e5      	bne.n	80077ea <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f003 0310 	and.w	r3, r3, #16
 8007828:	2b10      	cmp	r3, #16
 800782a:	d10a      	bne.n	8007842 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800782c:	2300      	movs	r3, #0
 800782e:	60fb      	str	r3, [r7, #12]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	60fb      	str	r3, [r7, #12]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	60fb      	str	r3, [r7, #12]
 8007840:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007846:	4619      	mov	r1, r3
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f7ff fdf9 	bl	8007440 <HAL_UARTEx_RxEventCallback>
 800784e:	e002      	b.n	8007856 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f7ff fde1 	bl	8007418 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007856:	2300      	movs	r3, #0
 8007858:	e002      	b.n	8007860 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800785a:	2300      	movs	r3, #0
 800785c:	e000      	b.n	8007860 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800785e:	2302      	movs	r3, #2
  }
}
 8007860:	4618      	mov	r0, r3
 8007862:	3730      	adds	r7, #48	; 0x30
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}

08007868 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800786c:	b09f      	sub	sp, #124	; 0x7c
 800786e:	af00      	add	r7, sp, #0
 8007870:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007872:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	691b      	ldr	r3, [r3, #16]
 8007878:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800787c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800787e:	68d9      	ldr	r1, [r3, #12]
 8007880:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007882:	681a      	ldr	r2, [r3, #0]
 8007884:	ea40 0301 	orr.w	r3, r0, r1
 8007888:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800788a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800788c:	689a      	ldr	r2, [r3, #8]
 800788e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007890:	691b      	ldr	r3, [r3, #16]
 8007892:	431a      	orrs	r2, r3
 8007894:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007896:	695b      	ldr	r3, [r3, #20]
 8007898:	431a      	orrs	r2, r3
 800789a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800789c:	69db      	ldr	r3, [r3, #28]
 800789e:	4313      	orrs	r3, r2
 80078a0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80078a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	68db      	ldr	r3, [r3, #12]
 80078a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80078ac:	f021 010c 	bic.w	r1, r1, #12
 80078b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078b2:	681a      	ldr	r2, [r3, #0]
 80078b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80078b6:	430b      	orrs	r3, r1
 80078b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80078ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	695b      	ldr	r3, [r3, #20]
 80078c0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80078c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078c6:	6999      	ldr	r1, [r3, #24]
 80078c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	ea40 0301 	orr.w	r3, r0, r1
 80078d0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80078d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	4bc5      	ldr	r3, [pc, #788]	; (8007bec <UART_SetConfig+0x384>)
 80078d8:	429a      	cmp	r2, r3
 80078da:	d004      	beq.n	80078e6 <UART_SetConfig+0x7e>
 80078dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	4bc3      	ldr	r3, [pc, #780]	; (8007bf0 <UART_SetConfig+0x388>)
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d103      	bne.n	80078ee <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80078e6:	f7ff fa0b 	bl	8006d00 <HAL_RCC_GetPCLK2Freq>
 80078ea:	6778      	str	r0, [r7, #116]	; 0x74
 80078ec:	e002      	b.n	80078f4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80078ee:	f7ff f9f3 	bl	8006cd8 <HAL_RCC_GetPCLK1Freq>
 80078f2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078f6:	69db      	ldr	r3, [r3, #28]
 80078f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078fc:	f040 80b6 	bne.w	8007a6c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007900:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007902:	461c      	mov	r4, r3
 8007904:	f04f 0500 	mov.w	r5, #0
 8007908:	4622      	mov	r2, r4
 800790a:	462b      	mov	r3, r5
 800790c:	1891      	adds	r1, r2, r2
 800790e:	6439      	str	r1, [r7, #64]	; 0x40
 8007910:	415b      	adcs	r3, r3
 8007912:	647b      	str	r3, [r7, #68]	; 0x44
 8007914:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007918:	1912      	adds	r2, r2, r4
 800791a:	eb45 0303 	adc.w	r3, r5, r3
 800791e:	f04f 0000 	mov.w	r0, #0
 8007922:	f04f 0100 	mov.w	r1, #0
 8007926:	00d9      	lsls	r1, r3, #3
 8007928:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800792c:	00d0      	lsls	r0, r2, #3
 800792e:	4602      	mov	r2, r0
 8007930:	460b      	mov	r3, r1
 8007932:	1911      	adds	r1, r2, r4
 8007934:	6639      	str	r1, [r7, #96]	; 0x60
 8007936:	416b      	adcs	r3, r5
 8007938:	667b      	str	r3, [r7, #100]	; 0x64
 800793a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	461a      	mov	r2, r3
 8007940:	f04f 0300 	mov.w	r3, #0
 8007944:	1891      	adds	r1, r2, r2
 8007946:	63b9      	str	r1, [r7, #56]	; 0x38
 8007948:	415b      	adcs	r3, r3
 800794a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800794c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007950:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007954:	f7fc f8a6 	bl	8003aa4 <__aeabi_uldivmod>
 8007958:	4602      	mov	r2, r0
 800795a:	460b      	mov	r3, r1
 800795c:	4ba5      	ldr	r3, [pc, #660]	; (8007bf4 <UART_SetConfig+0x38c>)
 800795e:	fba3 2302 	umull	r2, r3, r3, r2
 8007962:	095b      	lsrs	r3, r3, #5
 8007964:	011e      	lsls	r6, r3, #4
 8007966:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007968:	461c      	mov	r4, r3
 800796a:	f04f 0500 	mov.w	r5, #0
 800796e:	4622      	mov	r2, r4
 8007970:	462b      	mov	r3, r5
 8007972:	1891      	adds	r1, r2, r2
 8007974:	6339      	str	r1, [r7, #48]	; 0x30
 8007976:	415b      	adcs	r3, r3
 8007978:	637b      	str	r3, [r7, #52]	; 0x34
 800797a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800797e:	1912      	adds	r2, r2, r4
 8007980:	eb45 0303 	adc.w	r3, r5, r3
 8007984:	f04f 0000 	mov.w	r0, #0
 8007988:	f04f 0100 	mov.w	r1, #0
 800798c:	00d9      	lsls	r1, r3, #3
 800798e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007992:	00d0      	lsls	r0, r2, #3
 8007994:	4602      	mov	r2, r0
 8007996:	460b      	mov	r3, r1
 8007998:	1911      	adds	r1, r2, r4
 800799a:	65b9      	str	r1, [r7, #88]	; 0x58
 800799c:	416b      	adcs	r3, r5
 800799e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	461a      	mov	r2, r3
 80079a6:	f04f 0300 	mov.w	r3, #0
 80079aa:	1891      	adds	r1, r2, r2
 80079ac:	62b9      	str	r1, [r7, #40]	; 0x28
 80079ae:	415b      	adcs	r3, r3
 80079b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80079b6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80079ba:	f7fc f873 	bl	8003aa4 <__aeabi_uldivmod>
 80079be:	4602      	mov	r2, r0
 80079c0:	460b      	mov	r3, r1
 80079c2:	4b8c      	ldr	r3, [pc, #560]	; (8007bf4 <UART_SetConfig+0x38c>)
 80079c4:	fba3 1302 	umull	r1, r3, r3, r2
 80079c8:	095b      	lsrs	r3, r3, #5
 80079ca:	2164      	movs	r1, #100	; 0x64
 80079cc:	fb01 f303 	mul.w	r3, r1, r3
 80079d0:	1ad3      	subs	r3, r2, r3
 80079d2:	00db      	lsls	r3, r3, #3
 80079d4:	3332      	adds	r3, #50	; 0x32
 80079d6:	4a87      	ldr	r2, [pc, #540]	; (8007bf4 <UART_SetConfig+0x38c>)
 80079d8:	fba2 2303 	umull	r2, r3, r2, r3
 80079dc:	095b      	lsrs	r3, r3, #5
 80079de:	005b      	lsls	r3, r3, #1
 80079e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80079e4:	441e      	add	r6, r3
 80079e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079e8:	4618      	mov	r0, r3
 80079ea:	f04f 0100 	mov.w	r1, #0
 80079ee:	4602      	mov	r2, r0
 80079f0:	460b      	mov	r3, r1
 80079f2:	1894      	adds	r4, r2, r2
 80079f4:	623c      	str	r4, [r7, #32]
 80079f6:	415b      	adcs	r3, r3
 80079f8:	627b      	str	r3, [r7, #36]	; 0x24
 80079fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80079fe:	1812      	adds	r2, r2, r0
 8007a00:	eb41 0303 	adc.w	r3, r1, r3
 8007a04:	f04f 0400 	mov.w	r4, #0
 8007a08:	f04f 0500 	mov.w	r5, #0
 8007a0c:	00dd      	lsls	r5, r3, #3
 8007a0e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007a12:	00d4      	lsls	r4, r2, #3
 8007a14:	4622      	mov	r2, r4
 8007a16:	462b      	mov	r3, r5
 8007a18:	1814      	adds	r4, r2, r0
 8007a1a:	653c      	str	r4, [r7, #80]	; 0x50
 8007a1c:	414b      	adcs	r3, r1
 8007a1e:	657b      	str	r3, [r7, #84]	; 0x54
 8007a20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	461a      	mov	r2, r3
 8007a26:	f04f 0300 	mov.w	r3, #0
 8007a2a:	1891      	adds	r1, r2, r2
 8007a2c:	61b9      	str	r1, [r7, #24]
 8007a2e:	415b      	adcs	r3, r3
 8007a30:	61fb      	str	r3, [r7, #28]
 8007a32:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a36:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007a3a:	f7fc f833 	bl	8003aa4 <__aeabi_uldivmod>
 8007a3e:	4602      	mov	r2, r0
 8007a40:	460b      	mov	r3, r1
 8007a42:	4b6c      	ldr	r3, [pc, #432]	; (8007bf4 <UART_SetConfig+0x38c>)
 8007a44:	fba3 1302 	umull	r1, r3, r3, r2
 8007a48:	095b      	lsrs	r3, r3, #5
 8007a4a:	2164      	movs	r1, #100	; 0x64
 8007a4c:	fb01 f303 	mul.w	r3, r1, r3
 8007a50:	1ad3      	subs	r3, r2, r3
 8007a52:	00db      	lsls	r3, r3, #3
 8007a54:	3332      	adds	r3, #50	; 0x32
 8007a56:	4a67      	ldr	r2, [pc, #412]	; (8007bf4 <UART_SetConfig+0x38c>)
 8007a58:	fba2 2303 	umull	r2, r3, r2, r3
 8007a5c:	095b      	lsrs	r3, r3, #5
 8007a5e:	f003 0207 	and.w	r2, r3, #7
 8007a62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4432      	add	r2, r6
 8007a68:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007a6a:	e0b9      	b.n	8007be0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007a6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a6e:	461c      	mov	r4, r3
 8007a70:	f04f 0500 	mov.w	r5, #0
 8007a74:	4622      	mov	r2, r4
 8007a76:	462b      	mov	r3, r5
 8007a78:	1891      	adds	r1, r2, r2
 8007a7a:	6139      	str	r1, [r7, #16]
 8007a7c:	415b      	adcs	r3, r3
 8007a7e:	617b      	str	r3, [r7, #20]
 8007a80:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007a84:	1912      	adds	r2, r2, r4
 8007a86:	eb45 0303 	adc.w	r3, r5, r3
 8007a8a:	f04f 0000 	mov.w	r0, #0
 8007a8e:	f04f 0100 	mov.w	r1, #0
 8007a92:	00d9      	lsls	r1, r3, #3
 8007a94:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007a98:	00d0      	lsls	r0, r2, #3
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	460b      	mov	r3, r1
 8007a9e:	eb12 0804 	adds.w	r8, r2, r4
 8007aa2:	eb43 0905 	adc.w	r9, r3, r5
 8007aa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f04f 0100 	mov.w	r1, #0
 8007ab0:	f04f 0200 	mov.w	r2, #0
 8007ab4:	f04f 0300 	mov.w	r3, #0
 8007ab8:	008b      	lsls	r3, r1, #2
 8007aba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007abe:	0082      	lsls	r2, r0, #2
 8007ac0:	4640      	mov	r0, r8
 8007ac2:	4649      	mov	r1, r9
 8007ac4:	f7fb ffee 	bl	8003aa4 <__aeabi_uldivmod>
 8007ac8:	4602      	mov	r2, r0
 8007aca:	460b      	mov	r3, r1
 8007acc:	4b49      	ldr	r3, [pc, #292]	; (8007bf4 <UART_SetConfig+0x38c>)
 8007ace:	fba3 2302 	umull	r2, r3, r3, r2
 8007ad2:	095b      	lsrs	r3, r3, #5
 8007ad4:	011e      	lsls	r6, r3, #4
 8007ad6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f04f 0100 	mov.w	r1, #0
 8007ade:	4602      	mov	r2, r0
 8007ae0:	460b      	mov	r3, r1
 8007ae2:	1894      	adds	r4, r2, r2
 8007ae4:	60bc      	str	r4, [r7, #8]
 8007ae6:	415b      	adcs	r3, r3
 8007ae8:	60fb      	str	r3, [r7, #12]
 8007aea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007aee:	1812      	adds	r2, r2, r0
 8007af0:	eb41 0303 	adc.w	r3, r1, r3
 8007af4:	f04f 0400 	mov.w	r4, #0
 8007af8:	f04f 0500 	mov.w	r5, #0
 8007afc:	00dd      	lsls	r5, r3, #3
 8007afe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007b02:	00d4      	lsls	r4, r2, #3
 8007b04:	4622      	mov	r2, r4
 8007b06:	462b      	mov	r3, r5
 8007b08:	1814      	adds	r4, r2, r0
 8007b0a:	64bc      	str	r4, [r7, #72]	; 0x48
 8007b0c:	414b      	adcs	r3, r1
 8007b0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	4618      	mov	r0, r3
 8007b16:	f04f 0100 	mov.w	r1, #0
 8007b1a:	f04f 0200 	mov.w	r2, #0
 8007b1e:	f04f 0300 	mov.w	r3, #0
 8007b22:	008b      	lsls	r3, r1, #2
 8007b24:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007b28:	0082      	lsls	r2, r0, #2
 8007b2a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007b2e:	f7fb ffb9 	bl	8003aa4 <__aeabi_uldivmod>
 8007b32:	4602      	mov	r2, r0
 8007b34:	460b      	mov	r3, r1
 8007b36:	4b2f      	ldr	r3, [pc, #188]	; (8007bf4 <UART_SetConfig+0x38c>)
 8007b38:	fba3 1302 	umull	r1, r3, r3, r2
 8007b3c:	095b      	lsrs	r3, r3, #5
 8007b3e:	2164      	movs	r1, #100	; 0x64
 8007b40:	fb01 f303 	mul.w	r3, r1, r3
 8007b44:	1ad3      	subs	r3, r2, r3
 8007b46:	011b      	lsls	r3, r3, #4
 8007b48:	3332      	adds	r3, #50	; 0x32
 8007b4a:	4a2a      	ldr	r2, [pc, #168]	; (8007bf4 <UART_SetConfig+0x38c>)
 8007b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8007b50:	095b      	lsrs	r3, r3, #5
 8007b52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b56:	441e      	add	r6, r3
 8007b58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f04f 0100 	mov.w	r1, #0
 8007b60:	4602      	mov	r2, r0
 8007b62:	460b      	mov	r3, r1
 8007b64:	1894      	adds	r4, r2, r2
 8007b66:	603c      	str	r4, [r7, #0]
 8007b68:	415b      	adcs	r3, r3
 8007b6a:	607b      	str	r3, [r7, #4]
 8007b6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b70:	1812      	adds	r2, r2, r0
 8007b72:	eb41 0303 	adc.w	r3, r1, r3
 8007b76:	f04f 0400 	mov.w	r4, #0
 8007b7a:	f04f 0500 	mov.w	r5, #0
 8007b7e:	00dd      	lsls	r5, r3, #3
 8007b80:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007b84:	00d4      	lsls	r4, r2, #3
 8007b86:	4622      	mov	r2, r4
 8007b88:	462b      	mov	r3, r5
 8007b8a:	eb12 0a00 	adds.w	sl, r2, r0
 8007b8e:	eb43 0b01 	adc.w	fp, r3, r1
 8007b92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	4618      	mov	r0, r3
 8007b98:	f04f 0100 	mov.w	r1, #0
 8007b9c:	f04f 0200 	mov.w	r2, #0
 8007ba0:	f04f 0300 	mov.w	r3, #0
 8007ba4:	008b      	lsls	r3, r1, #2
 8007ba6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007baa:	0082      	lsls	r2, r0, #2
 8007bac:	4650      	mov	r0, sl
 8007bae:	4659      	mov	r1, fp
 8007bb0:	f7fb ff78 	bl	8003aa4 <__aeabi_uldivmod>
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	460b      	mov	r3, r1
 8007bb8:	4b0e      	ldr	r3, [pc, #56]	; (8007bf4 <UART_SetConfig+0x38c>)
 8007bba:	fba3 1302 	umull	r1, r3, r3, r2
 8007bbe:	095b      	lsrs	r3, r3, #5
 8007bc0:	2164      	movs	r1, #100	; 0x64
 8007bc2:	fb01 f303 	mul.w	r3, r1, r3
 8007bc6:	1ad3      	subs	r3, r2, r3
 8007bc8:	011b      	lsls	r3, r3, #4
 8007bca:	3332      	adds	r3, #50	; 0x32
 8007bcc:	4a09      	ldr	r2, [pc, #36]	; (8007bf4 <UART_SetConfig+0x38c>)
 8007bce:	fba2 2303 	umull	r2, r3, r2, r3
 8007bd2:	095b      	lsrs	r3, r3, #5
 8007bd4:	f003 020f 	and.w	r2, r3, #15
 8007bd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4432      	add	r2, r6
 8007bde:	609a      	str	r2, [r3, #8]
}
 8007be0:	bf00      	nop
 8007be2:	377c      	adds	r7, #124	; 0x7c
 8007be4:	46bd      	mov	sp, r7
 8007be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bea:	bf00      	nop
 8007bec:	40011000 	.word	0x40011000
 8007bf0:	40011400 	.word	0x40011400
 8007bf4:	51eb851f 	.word	0x51eb851f

08007bf8 <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b088      	sub	sp, #32
 8007bfc:	af04      	add	r7, sp, #16
 8007bfe:	4603      	mov	r3, r0
 8007c00:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
 8007c02:	4b34      	ldr	r3, [pc, #208]	; (8007cd4 <set_int_enable+0xdc>)
 8007c04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d027      	beq.n	8007c5c <set_int_enable+0x64>
        if (enable)
 8007c0c:	79fb      	ldrb	r3, [r7, #7]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d002      	beq.n	8007c18 <set_int_enable+0x20>
            tmp = BIT_DMP_INT_EN;
 8007c12:	2302      	movs	r3, #2
 8007c14:	73fb      	strb	r3, [r7, #15]
 8007c16:	e001      	b.n	8007c1c <set_int_enable+0x24>
        else
            tmp = 0x00;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8007c1c:	4b2d      	ldr	r3, [pc, #180]	; (8007cd4 <set_int_enable+0xdc>)
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	781b      	ldrb	r3, [r3, #0]
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	005b      	lsls	r3, r3, #1
 8007c26:	b299      	uxth	r1, r3
 8007c28:	4b2a      	ldr	r3, [pc, #168]	; (8007cd4 <set_int_enable+0xdc>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	7c5b      	ldrb	r3, [r3, #17]
 8007c2e:	b29a      	uxth	r2, r3
 8007c30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007c34:	9302      	str	r3, [sp, #8]
 8007c36:	2301      	movs	r3, #1
 8007c38:	9301      	str	r3, [sp, #4]
 8007c3a:	f107 030f 	add.w	r3, r7, #15
 8007c3e:	9300      	str	r3, [sp, #0]
 8007c40:	2301      	movs	r3, #1
 8007c42:	4825      	ldr	r0, [pc, #148]	; (8007cd8 <set_int_enable+0xe0>)
 8007c44:	f7fd fd80 	bl	8005748 <HAL_I2C_Mem_Write>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d002      	beq.n	8007c54 <set_int_enable+0x5c>
            return -1;
 8007c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8007c52:	e03b      	b.n	8007ccc <set_int_enable+0xd4>
        st.chip_cfg.int_enable = tmp;
 8007c54:	7bfa      	ldrb	r2, [r7, #15]
 8007c56:	4b1f      	ldr	r3, [pc, #124]	; (8007cd4 <set_int_enable+0xdc>)
 8007c58:	745a      	strb	r2, [r3, #17]
 8007c5a:	e036      	b.n	8007cca <set_int_enable+0xd2>
    } else {
        if (!st.chip_cfg.sensors)
 8007c5c:	4b1d      	ldr	r3, [pc, #116]	; (8007cd4 <set_int_enable+0xdc>)
 8007c5e:	7a9b      	ldrb	r3, [r3, #10]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d102      	bne.n	8007c6a <set_int_enable+0x72>
            return -1;
 8007c64:	f04f 33ff 	mov.w	r3, #4294967295
 8007c68:	e030      	b.n	8007ccc <set_int_enable+0xd4>
        if (enable && st.chip_cfg.int_enable)
 8007c6a:	79fb      	ldrb	r3, [r7, #7]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d005      	beq.n	8007c7c <set_int_enable+0x84>
 8007c70:	4b18      	ldr	r3, [pc, #96]	; (8007cd4 <set_int_enable+0xdc>)
 8007c72:	7c5b      	ldrb	r3, [r3, #17]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d001      	beq.n	8007c7c <set_int_enable+0x84>
            return 0;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	e027      	b.n	8007ccc <set_int_enable+0xd4>
        if (enable)
 8007c7c:	79fb      	ldrb	r3, [r7, #7]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d002      	beq.n	8007c88 <set_int_enable+0x90>
            tmp = BIT_DATA_RDY_EN;
 8007c82:	2301      	movs	r3, #1
 8007c84:	73fb      	strb	r3, [r7, #15]
 8007c86:	e001      	b.n	8007c8c <set_int_enable+0x94>
        else
            tmp = 0x00;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8007c8c:	4b11      	ldr	r3, [pc, #68]	; (8007cd4 <set_int_enable+0xdc>)
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	781b      	ldrb	r3, [r3, #0]
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	005b      	lsls	r3, r3, #1
 8007c96:	b299      	uxth	r1, r3
 8007c98:	4b0e      	ldr	r3, [pc, #56]	; (8007cd4 <set_int_enable+0xdc>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	7c5b      	ldrb	r3, [r3, #17]
 8007c9e:	b29a      	uxth	r2, r3
 8007ca0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007ca4:	9302      	str	r3, [sp, #8]
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	9301      	str	r3, [sp, #4]
 8007caa:	f107 030f 	add.w	r3, r7, #15
 8007cae:	9300      	str	r3, [sp, #0]
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	4809      	ldr	r0, [pc, #36]	; (8007cd8 <set_int_enable+0xe0>)
 8007cb4:	f7fd fd48 	bl	8005748 <HAL_I2C_Mem_Write>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d002      	beq.n	8007cc4 <set_int_enable+0xcc>
            return -1;
 8007cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8007cc2:	e003      	b.n	8007ccc <set_int_enable+0xd4>
        st.chip_cfg.int_enable = tmp;
 8007cc4:	7bfa      	ldrb	r2, [r7, #15]
 8007cc6:	4b03      	ldr	r3, [pc, #12]	; (8007cd4 <set_int_enable+0xdc>)
 8007cc8:	745a      	strb	r2, [r3, #17]
    }
    return 0;
 8007cca:	2300      	movs	r3, #0
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3710      	adds	r7, #16
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}
 8007cd4:	2000001c 	.word	0x2000001c
 8007cd8:	20000b20 	.word	0x20000b20

08007cdc <mpu_init>:
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(void)//struct int_param_s *int_param)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b086      	sub	sp, #24
 8007ce0:	af04      	add	r7, sp, #16
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
 8007ce2:	2380      	movs	r3, #128	; 0x80
 8007ce4:	703b      	strb	r3, [r7, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8007ce6:	4b5a      	ldr	r3, [pc, #360]	; (8007e50 <mpu_init+0x174>)
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	005b      	lsls	r3, r3, #1
 8007cf0:	b299      	uxth	r1, r3
 8007cf2:	4b57      	ldr	r3, [pc, #348]	; (8007e50 <mpu_init+0x174>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	7d5b      	ldrb	r3, [r3, #21]
 8007cf8:	b29a      	uxth	r2, r3
 8007cfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007cfe:	9302      	str	r3, [sp, #8]
 8007d00:	2301      	movs	r3, #1
 8007d02:	9301      	str	r3, [sp, #4]
 8007d04:	463b      	mov	r3, r7
 8007d06:	9300      	str	r3, [sp, #0]
 8007d08:	2301      	movs	r3, #1
 8007d0a:	4852      	ldr	r0, [pc, #328]	; (8007e54 <mpu_init+0x178>)
 8007d0c:	f7fd fd1c 	bl	8005748 <HAL_I2C_Mem_Write>
 8007d10:	4603      	mov	r3, r0
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d002      	beq.n	8007d1c <mpu_init+0x40>
        return -1;
 8007d16:	f04f 33ff 	mov.w	r3, #4294967295
 8007d1a:	e094      	b.n	8007e46 <mpu_init+0x16a>
    delay_ms(100);
 8007d1c:	2064      	movs	r0, #100	; 0x64
 8007d1e:	f7fd f883 	bl	8004e28 <HAL_Delay>

    /* Wake up chip. */
    data[0] = 0x00;
 8007d22:	2300      	movs	r3, #0
 8007d24:	703b      	strb	r3, [r7, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8007d26:	4b4a      	ldr	r3, [pc, #296]	; (8007e50 <mpu_init+0x174>)
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	005b      	lsls	r3, r3, #1
 8007d30:	b299      	uxth	r1, r3
 8007d32:	4b47      	ldr	r3, [pc, #284]	; (8007e50 <mpu_init+0x174>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	7d5b      	ldrb	r3, [r3, #21]
 8007d38:	b29a      	uxth	r2, r3
 8007d3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007d3e:	9302      	str	r3, [sp, #8]
 8007d40:	2301      	movs	r3, #1
 8007d42:	9301      	str	r3, [sp, #4]
 8007d44:	463b      	mov	r3, r7
 8007d46:	9300      	str	r3, [sp, #0]
 8007d48:	2301      	movs	r3, #1
 8007d4a:	4842      	ldr	r0, [pc, #264]	; (8007e54 <mpu_init+0x178>)
 8007d4c:	f7fd fcfc 	bl	8005748 <HAL_I2C_Mem_Write>
 8007d50:	4603      	mov	r3, r0
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d002      	beq.n	8007d5c <mpu_init+0x80>
        return -1;
 8007d56:	f04f 33ff 	mov.w	r3, #4294967295
 8007d5a:	e074      	b.n	8007e46 <mpu_init+0x16a>

   st.chip_cfg.accel_half = 0;
 8007d5c:	4b3c      	ldr	r3, [pc, #240]	; (8007e50 <mpu_init+0x174>)
 8007d5e:	2200      	movs	r2, #0
 8007d60:	74da      	strb	r2, [r3, #19]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
        return -1;
#endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
 8007d62:	4b3b      	ldr	r3, [pc, #236]	; (8007e50 <mpu_init+0x174>)
 8007d64:	22ff      	movs	r2, #255	; 0xff
 8007d66:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
 8007d68:	4b39      	ldr	r3, [pc, #228]	; (8007e50 <mpu_init+0x174>)
 8007d6a:	22ff      	movs	r2, #255	; 0xff
 8007d6c:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 8007d6e:	4b38      	ldr	r3, [pc, #224]	; (8007e50 <mpu_init+0x174>)
 8007d70:	22ff      	movs	r2, #255	; 0xff
 8007d72:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
 8007d74:	4b36      	ldr	r3, [pc, #216]	; (8007e50 <mpu_init+0x174>)
 8007d76:	22ff      	movs	r2, #255	; 0xff
 8007d78:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 8007d7a:	4b35      	ldr	r3, [pc, #212]	; (8007e50 <mpu_init+0x174>)
 8007d7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007d80:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.fifo_enable = 0xFF;
 8007d82:	4b33      	ldr	r3, [pc, #204]	; (8007e50 <mpu_init+0x174>)
 8007d84:	22ff      	movs	r2, #255	; 0xff
 8007d86:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.bypass_mode = 0xFF;
 8007d88:	4b31      	ldr	r3, [pc, #196]	; (8007e50 <mpu_init+0x174>)
 8007d8a:	22ff      	movs	r2, #255	; 0xff
 8007d8c:	749a      	strb	r2, [r3, #18]
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
 8007d8e:	4b30      	ldr	r3, [pc, #192]	; (8007e50 <mpu_init+0x174>)
 8007d90:	2201      	movs	r2, #1
 8007d92:	731a      	strb	r2, [r3, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 1;
 8007d94:	4b2e      	ldr	r3, [pc, #184]	; (8007e50 <mpu_init+0x174>)
 8007d96:	2201      	movs	r2, #1
 8007d98:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    st.chip_cfg.latched_int = 0;
 8007d9c:	4b2c      	ldr	r3, [pc, #176]	; (8007e50 <mpu_init+0x174>)
 8007d9e:	2200      	movs	r2, #0
 8007da0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    st.chip_cfg.int_motion_only = 0;
 8007da4:	4b2a      	ldr	r3, [pc, #168]	; (8007e50 <mpu_init+0x174>)
 8007da6:	2200      	movs	r2, #0
 8007da8:	755a      	strb	r2, [r3, #21]
    st.chip_cfg.lp_accel_mode = 0;
 8007daa:	4b29      	ldr	r3, [pc, #164]	; (8007e50 <mpu_init+0x174>)
 8007dac:	2200      	movs	r2, #0
 8007dae:	751a      	strb	r2, [r3, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
 8007db0:	220c      	movs	r2, #12
 8007db2:	2100      	movs	r1, #0
 8007db4:	4828      	ldr	r0, [pc, #160]	; (8007e58 <mpu_init+0x17c>)
 8007db6:	f005 f9bb 	bl	800d130 <memset>
    st.chip_cfg.dmp_on = 0;
 8007dba:	4b25      	ldr	r3, [pc, #148]	; (8007e50 <mpu_init+0x174>)
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    st.chip_cfg.dmp_loaded = 0;
 8007dc2:	4b23      	ldr	r3, [pc, #140]	; (8007e50 <mpu_init+0x174>)
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = 0;
 8007dca:	4b21      	ldr	r3, [pc, #132]	; (8007e50 <mpu_init+0x174>)
 8007dcc:	2200      	movs	r2, #0
 8007dce:	84da      	strh	r2, [r3, #38]	; 0x26

    if (mpu_set_gyro_fsr(2000))
 8007dd0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007dd4:	f000 fa90 	bl	80082f8 <mpu_set_gyro_fsr>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d002      	beq.n	8007de4 <mpu_init+0x108>
        return -1;
 8007dde:	f04f 33ff 	mov.w	r3, #4294967295
 8007de2:	e030      	b.n	8007e46 <mpu_init+0x16a>
    if (mpu_set_accel_fsr(2))
 8007de4:	2002      	movs	r0, #2
 8007de6:	f000 fb23 	bl	8008430 <mpu_set_accel_fsr>
 8007dea:	4603      	mov	r3, r0
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d002      	beq.n	8007df6 <mpu_init+0x11a>
        return -1;
 8007df0:	f04f 33ff 	mov.w	r3, #4294967295
 8007df4:	e027      	b.n	8007e46 <mpu_init+0x16a>
    if (mpu_set_lpf(42))
 8007df6:	202a      	movs	r0, #42	; 0x2a
 8007df8:	f000 fbcc 	bl	8008594 <mpu_set_lpf>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d002      	beq.n	8007e08 <mpu_init+0x12c>
        return -1;
 8007e02:	f04f 33ff 	mov.w	r3, #4294967295
 8007e06:	e01e      	b.n	8007e46 <mpu_init+0x16a>
    if (mpu_set_sample_rate(50))
 8007e08:	2032      	movs	r0, #50	; 0x32
 8007e0a:	f000 fc39 	bl	8008680 <mpu_set_sample_rate>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d002      	beq.n	8007e1a <mpu_init+0x13e>
        return -1;
 8007e14:	f04f 33ff 	mov.w	r3, #4294967295
 8007e18:	e015      	b.n	8007e46 <mpu_init+0x16a>
    if (mpu_configure_fifo(0))
 8007e1a:	2000      	movs	r0, #0
 8007e1c:	f000 fd2a 	bl	8008874 <mpu_configure_fifo>
 8007e20:	4603      	mov	r3, r0
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d002      	beq.n	8007e2c <mpu_init+0x150>
        return -1;
 8007e26:	f04f 33ff 	mov.w	r3, #4294967295
 8007e2a:	e00c      	b.n	8007e46 <mpu_init+0x16a>
    setup_compass();
    if (mpu_set_compass_sample_rate(10))
        return -1;
#else
    /* Already disabled by setup_compass. */
    if (mpu_set_bypass(0))
 8007e2c:	2000      	movs	r0, #0
 8007e2e:	f000 feb1 	bl	8008b94 <mpu_set_bypass>
 8007e32:	4603      	mov	r3, r0
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d002      	beq.n	8007e3e <mpu_init+0x162>
        return -1;
 8007e38:	f04f 33ff 	mov.w	r3, #4294967295
 8007e3c:	e003      	b.n	8007e46 <mpu_init+0x16a>
#endif

    mpu_set_sensors(0);
 8007e3e:	2000      	movs	r0, #0
 8007e40:	f000 fd6a 	bl	8008918 <mpu_set_sensors>
    return 0;
 8007e44:	2300      	movs	r3, #0
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3708      	adds	r7, #8
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
 8007e4e:	bf00      	nop
 8007e50:	2000001c 	.word	0x2000001c
 8007e54:	20000b20 	.word	0x20000b20
 8007e58:	20000032 	.word	0x20000032

08007e5c <mpu_lp_accel_mode>:
 *  @param[in]  rate        Minimum sampling rate, or zero to disable LP
 *                          accel mode.
 *  @return     0 if successful.
 */
int mpu_lp_accel_mode(unsigned short rate)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b088      	sub	sp, #32
 8007e60:	af04      	add	r7, sp, #16
 8007e62:	4603      	mov	r3, r0
 8007e64:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    if (rate > 40)
 8007e66:	88fb      	ldrh	r3, [r7, #6]
 8007e68:	2b28      	cmp	r3, #40	; 0x28
 8007e6a:	d902      	bls.n	8007e72 <mpu_lp_accel_mode+0x16>
        return -1;
 8007e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8007e70:	e080      	b.n	8007f74 <mpu_lp_accel_mode+0x118>

    if (!rate) {
 8007e72:	88fb      	ldrh	r3, [r7, #6]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d127      	bne.n	8007ec8 <mpu_lp_accel_mode+0x6c>
        mpu_set_int_latched(0);
 8007e78:	2000      	movs	r0, #0
 8007e7a:	f000 ff95 	bl	8008da8 <mpu_set_int_latched>
        tmp[0] = 0;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	733b      	strb	r3, [r7, #12]
        tmp[1] = BIT_STBY_XYZG;
 8007e82:	2307      	movs	r3, #7
 8007e84:	737b      	strb	r3, [r7, #13]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 8007e86:	4b3d      	ldr	r3, [pc, #244]	; (8007f7c <mpu_lp_accel_mode+0x120>)
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	005b      	lsls	r3, r3, #1
 8007e90:	b299      	uxth	r1, r3
 8007e92:	4b3a      	ldr	r3, [pc, #232]	; (8007f7c <mpu_lp_accel_mode+0x120>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	7d5b      	ldrb	r3, [r3, #21]
 8007e98:	b29a      	uxth	r2, r3
 8007e9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007e9e:	9302      	str	r3, [sp, #8]
 8007ea0:	2302      	movs	r3, #2
 8007ea2:	9301      	str	r3, [sp, #4]
 8007ea4:	f107 030c 	add.w	r3, r7, #12
 8007ea8:	9300      	str	r3, [sp, #0]
 8007eaa:	2301      	movs	r3, #1
 8007eac:	4834      	ldr	r0, [pc, #208]	; (8007f80 <mpu_lp_accel_mode+0x124>)
 8007eae:	f7fd fc4b 	bl	8005748 <HAL_I2C_Mem_Write>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d002      	beq.n	8007ebe <mpu_lp_accel_mode+0x62>
            return -1;
 8007eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8007ebc:	e05a      	b.n	8007f74 <mpu_lp_accel_mode+0x118>
        st.chip_cfg.lp_accel_mode = 0;
 8007ebe:	4b2f      	ldr	r3, [pc, #188]	; (8007f7c <mpu_lp_accel_mode+0x120>)
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	751a      	strb	r2, [r3, #20]
        return 0;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	e055      	b.n	8007f74 <mpu_lp_accel_mode+0x118>
     * it gets a chance to deassert the interrupt pin; therefore, we shift this
     * responsibility over to the MCU.
     *
     * Any register read will clear the interrupt.
     */
    mpu_set_int_latched(1);
 8007ec8:	2001      	movs	r0, #1
 8007eca:	f000 ff6d 	bl	8008da8 <mpu_set_int_latched>
#if defined MPU6050
    tmp[0] = BIT_LPA_CYCLE;
 8007ece:	2320      	movs	r3, #32
 8007ed0:	733b      	strb	r3, [r7, #12]
    if (rate == 1) {
 8007ed2:	88fb      	ldrh	r3, [r7, #6]
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d105      	bne.n	8007ee4 <mpu_lp_accel_mode+0x88>
        tmp[1] = INV_LPA_1_25HZ;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(5);
 8007edc:	2005      	movs	r0, #5
 8007ede:	f000 fb59 	bl	8008594 <mpu_set_lpf>
 8007ee2:	e016      	b.n	8007f12 <mpu_lp_accel_mode+0xb6>
    } else if (rate <= 5) {
 8007ee4:	88fb      	ldrh	r3, [r7, #6]
 8007ee6:	2b05      	cmp	r3, #5
 8007ee8:	d805      	bhi.n	8007ef6 <mpu_lp_accel_mode+0x9a>
        tmp[1] = INV_LPA_5HZ;
 8007eea:	2301      	movs	r3, #1
 8007eec:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(5);
 8007eee:	2005      	movs	r0, #5
 8007ef0:	f000 fb50 	bl	8008594 <mpu_set_lpf>
 8007ef4:	e00d      	b.n	8007f12 <mpu_lp_accel_mode+0xb6>
    } else if (rate <= 20) {
 8007ef6:	88fb      	ldrh	r3, [r7, #6]
 8007ef8:	2b14      	cmp	r3, #20
 8007efa:	d805      	bhi.n	8007f08 <mpu_lp_accel_mode+0xac>
        tmp[1] = INV_LPA_20HZ;
 8007efc:	2302      	movs	r3, #2
 8007efe:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(10);
 8007f00:	200a      	movs	r0, #10
 8007f02:	f000 fb47 	bl	8008594 <mpu_set_lpf>
 8007f06:	e004      	b.n	8007f12 <mpu_lp_accel_mode+0xb6>
    } else {
        tmp[1] = INV_LPA_40HZ;
 8007f08:	2303      	movs	r3, #3
 8007f0a:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(20);
 8007f0c:	2014      	movs	r0, #20
 8007f0e:	f000 fb41 	bl	8008594 <mpu_set_lpf>
    }
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
 8007f12:	7b7b      	ldrb	r3, [r7, #13]
 8007f14:	019b      	lsls	r3, r3, #6
 8007f16:	b25b      	sxtb	r3, r3
 8007f18:	f043 0307 	orr.w	r3, r3, #7
 8007f1c:	b25b      	sxtb	r3, r3
 8007f1e:	b2db      	uxtb	r3, r3
 8007f20:	737b      	strb	r3, [r7, #13]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 8007f22:	4b16      	ldr	r3, [pc, #88]	; (8007f7c <mpu_lp_accel_mode+0x120>)
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	005b      	lsls	r3, r3, #1
 8007f2c:	b299      	uxth	r1, r3
 8007f2e:	4b13      	ldr	r3, [pc, #76]	; (8007f7c <mpu_lp_accel_mode+0x120>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	7d5b      	ldrb	r3, [r3, #21]
 8007f34:	b29a      	uxth	r2, r3
 8007f36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007f3a:	9302      	str	r3, [sp, #8]
 8007f3c:	2302      	movs	r3, #2
 8007f3e:	9301      	str	r3, [sp, #4]
 8007f40:	f107 030c 	add.w	r3, r7, #12
 8007f44:	9300      	str	r3, [sp, #0]
 8007f46:	2301      	movs	r3, #1
 8007f48:	480d      	ldr	r0, [pc, #52]	; (8007f80 <mpu_lp_accel_mode+0x124>)
 8007f4a:	f7fd fbfd 	bl	8005748 <HAL_I2C_Mem_Write>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d002      	beq.n	8007f5a <mpu_lp_accel_mode+0xfe>
        return -1;
 8007f54:	f04f 33ff 	mov.w	r3, #4294967295
 8007f58:	e00c      	b.n	8007f74 <mpu_lp_accel_mode+0x118>
        return -1;
    tmp[0] = BIT_LPA_CYCLE;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
        return -1;
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
 8007f5a:	4b08      	ldr	r3, [pc, #32]	; (8007f7c <mpu_lp_accel_mode+0x120>)
 8007f5c:	2208      	movs	r2, #8
 8007f5e:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
 8007f60:	4b06      	ldr	r3, [pc, #24]	; (8007f7c <mpu_lp_accel_mode+0x120>)
 8007f62:	2200      	movs	r2, #0
 8007f64:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
 8007f66:	4b05      	ldr	r3, [pc, #20]	; (8007f7c <mpu_lp_accel_mode+0x120>)
 8007f68:	2201      	movs	r2, #1
 8007f6a:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
 8007f6c:	2000      	movs	r0, #0
 8007f6e:	f000 fc81 	bl	8008874 <mpu_configure_fifo>

    return 0;
 8007f72:	2300      	movs	r3, #0
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3710      	adds	r7, #16
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}
 8007f7c:	2000001c 	.word	0x2000001c
 8007f80:	20000b20 	.word	0x20000b20

08007f84 <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b086      	sub	sp, #24
 8007f88:	af04      	add	r7, sp, #16
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8007f8a:	4b9d      	ldr	r3, [pc, #628]	; (8008200 <mpu_reset_fifo+0x27c>)
 8007f8c:	7a9b      	ldrb	r3, [r3, #10]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d102      	bne.n	8007f98 <mpu_reset_fifo+0x14>
        return -1;
 8007f92:	f04f 33ff 	mov.w	r3, #4294967295
 8007f96:	e170      	b.n	800827a <mpu_reset_fifo+0x2f6>

    data = 0;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	71fb      	strb	r3, [r7, #7]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8007f9c:	4b98      	ldr	r3, [pc, #608]	; (8008200 <mpu_reset_fifo+0x27c>)
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	005b      	lsls	r3, r3, #1
 8007fa6:	b299      	uxth	r1, r3
 8007fa8:	4b95      	ldr	r3, [pc, #596]	; (8008200 <mpu_reset_fifo+0x27c>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	7c5b      	ldrb	r3, [r3, #17]
 8007fae:	b29a      	uxth	r2, r3
 8007fb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007fb4:	9302      	str	r3, [sp, #8]
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	9301      	str	r3, [sp, #4]
 8007fba:	1dfb      	adds	r3, r7, #7
 8007fbc:	9300      	str	r3, [sp, #0]
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	4890      	ldr	r0, [pc, #576]	; (8008204 <mpu_reset_fifo+0x280>)
 8007fc2:	f7fd fbc1 	bl	8005748 <HAL_I2C_Mem_Write>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d002      	beq.n	8007fd2 <mpu_reset_fifo+0x4e>
        return -1;
 8007fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8007fd0:	e153      	b.n	800827a <mpu_reset_fifo+0x2f6>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8007fd2:	4b8b      	ldr	r3, [pc, #556]	; (8008200 <mpu_reset_fifo+0x27c>)
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	b29b      	uxth	r3, r3
 8007fda:	005b      	lsls	r3, r3, #1
 8007fdc:	b299      	uxth	r1, r3
 8007fde:	4b88      	ldr	r3, [pc, #544]	; (8008200 <mpu_reset_fifo+0x27c>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	795b      	ldrb	r3, [r3, #5]
 8007fe4:	b29a      	uxth	r2, r3
 8007fe6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007fea:	9302      	str	r3, [sp, #8]
 8007fec:	2301      	movs	r3, #1
 8007fee:	9301      	str	r3, [sp, #4]
 8007ff0:	1dfb      	adds	r3, r7, #7
 8007ff2:	9300      	str	r3, [sp, #0]
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	4883      	ldr	r0, [pc, #524]	; (8008204 <mpu_reset_fifo+0x280>)
 8007ff8:	f7fd fba6 	bl	8005748 <HAL_I2C_Mem_Write>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d002      	beq.n	8008008 <mpu_reset_fifo+0x84>
        return -1;
 8008002:	f04f 33ff 	mov.w	r3, #4294967295
 8008006:	e138      	b.n	800827a <mpu_reset_fifo+0x2f6>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8008008:	4b7d      	ldr	r3, [pc, #500]	; (8008200 <mpu_reset_fifo+0x27c>)
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	b29b      	uxth	r3, r3
 8008010:	005b      	lsls	r3, r3, #1
 8008012:	b299      	uxth	r1, r3
 8008014:	4b7a      	ldr	r3, [pc, #488]	; (8008200 <mpu_reset_fifo+0x27c>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	791b      	ldrb	r3, [r3, #4]
 800801a:	b29a      	uxth	r2, r3
 800801c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008020:	9302      	str	r3, [sp, #8]
 8008022:	2301      	movs	r3, #1
 8008024:	9301      	str	r3, [sp, #4]
 8008026:	1dfb      	adds	r3, r7, #7
 8008028:	9300      	str	r3, [sp, #0]
 800802a:	2301      	movs	r3, #1
 800802c:	4875      	ldr	r0, [pc, #468]	; (8008204 <mpu_reset_fifo+0x280>)
 800802e:	f7fd fb8b 	bl	8005748 <HAL_I2C_Mem_Write>
 8008032:	4603      	mov	r3, r0
 8008034:	2b00      	cmp	r3, #0
 8008036:	d002      	beq.n	800803e <mpu_reset_fifo+0xba>
        return -1;
 8008038:	f04f 33ff 	mov.w	r3, #4294967295
 800803c:	e11d      	b.n	800827a <mpu_reset_fifo+0x2f6>

    if (st.chip_cfg.dmp_on) {
 800803e:	4b70      	ldr	r3, [pc, #448]	; (8008200 <mpu_reset_fifo+0x27c>)
 8008040:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008044:	2b00      	cmp	r3, #0
 8008046:	f000 808a 	beq.w	800815e <mpu_reset_fifo+0x1da>
        data = BIT_FIFO_RST | BIT_DMP_RST;
 800804a:	230c      	movs	r3, #12
 800804c:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 800804e:	4b6c      	ldr	r3, [pc, #432]	; (8008200 <mpu_reset_fifo+0x27c>)
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	781b      	ldrb	r3, [r3, #0]
 8008054:	b29b      	uxth	r3, r3
 8008056:	005b      	lsls	r3, r3, #1
 8008058:	b299      	uxth	r1, r3
 800805a:	4b69      	ldr	r3, [pc, #420]	; (8008200 <mpu_reset_fifo+0x27c>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	791b      	ldrb	r3, [r3, #4]
 8008060:	b29a      	uxth	r2, r3
 8008062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008066:	9302      	str	r3, [sp, #8]
 8008068:	2301      	movs	r3, #1
 800806a:	9301      	str	r3, [sp, #4]
 800806c:	1dfb      	adds	r3, r7, #7
 800806e:	9300      	str	r3, [sp, #0]
 8008070:	2301      	movs	r3, #1
 8008072:	4864      	ldr	r0, [pc, #400]	; (8008204 <mpu_reset_fifo+0x280>)
 8008074:	f7fd fb68 	bl	8005748 <HAL_I2C_Mem_Write>
 8008078:	4603      	mov	r3, r0
 800807a:	2b00      	cmp	r3, #0
 800807c:	d002      	beq.n	8008084 <mpu_reset_fifo+0x100>
            return -1;
 800807e:	f04f 33ff 	mov.w	r3, #4294967295
 8008082:	e0fa      	b.n	800827a <mpu_reset_fifo+0x2f6>
        delay_ms(50);
 8008084:	2032      	movs	r0, #50	; 0x32
 8008086:	f7fc fecf 	bl	8004e28 <HAL_Delay>
        data = BIT_DMP_EN | BIT_FIFO_EN;
 800808a:	23c0      	movs	r3, #192	; 0xc0
 800808c:	71fb      	strb	r3, [r7, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 800808e:	4b5c      	ldr	r3, [pc, #368]	; (8008200 <mpu_reset_fifo+0x27c>)
 8008090:	7a9b      	ldrb	r3, [r3, #10]
 8008092:	f003 0301 	and.w	r3, r3, #1
 8008096:	2b00      	cmp	r3, #0
 8008098:	d004      	beq.n	80080a4 <mpu_reset_fifo+0x120>
            data |= BIT_AUX_IF_EN;
 800809a:	79fb      	ldrb	r3, [r7, #7]
 800809c:	f043 0320 	orr.w	r3, r3, #32
 80080a0:	b2db      	uxtb	r3, r3
 80080a2:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 80080a4:	4b56      	ldr	r3, [pc, #344]	; (8008200 <mpu_reset_fifo+0x27c>)
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	781b      	ldrb	r3, [r3, #0]
 80080aa:	b29b      	uxth	r3, r3
 80080ac:	005b      	lsls	r3, r3, #1
 80080ae:	b299      	uxth	r1, r3
 80080b0:	4b53      	ldr	r3, [pc, #332]	; (8008200 <mpu_reset_fifo+0x27c>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	791b      	ldrb	r3, [r3, #4]
 80080b6:	b29a      	uxth	r2, r3
 80080b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80080bc:	9302      	str	r3, [sp, #8]
 80080be:	2301      	movs	r3, #1
 80080c0:	9301      	str	r3, [sp, #4]
 80080c2:	1dfb      	adds	r3, r7, #7
 80080c4:	9300      	str	r3, [sp, #0]
 80080c6:	2301      	movs	r3, #1
 80080c8:	484e      	ldr	r0, [pc, #312]	; (8008204 <mpu_reset_fifo+0x280>)
 80080ca:	f7fd fb3d 	bl	8005748 <HAL_I2C_Mem_Write>
 80080ce:	4603      	mov	r3, r0
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d002      	beq.n	80080da <mpu_reset_fifo+0x156>
            return -1;
 80080d4:	f04f 33ff 	mov.w	r3, #4294967295
 80080d8:	e0cf      	b.n	800827a <mpu_reset_fifo+0x2f6>
        if (st.chip_cfg.int_enable)
 80080da:	4b49      	ldr	r3, [pc, #292]	; (8008200 <mpu_reset_fifo+0x27c>)
 80080dc:	7c5b      	ldrb	r3, [r3, #17]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d002      	beq.n	80080e8 <mpu_reset_fifo+0x164>
            data = BIT_DMP_INT_EN;
 80080e2:	2302      	movs	r3, #2
 80080e4:	71fb      	strb	r3, [r7, #7]
 80080e6:	e001      	b.n	80080ec <mpu_reset_fifo+0x168>
        else
            data = 0;
 80080e8:	2300      	movs	r3, #0
 80080ea:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 80080ec:	4b44      	ldr	r3, [pc, #272]	; (8008200 <mpu_reset_fifo+0x27c>)
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	005b      	lsls	r3, r3, #1
 80080f6:	b299      	uxth	r1, r3
 80080f8:	4b41      	ldr	r3, [pc, #260]	; (8008200 <mpu_reset_fifo+0x27c>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	7c5b      	ldrb	r3, [r3, #17]
 80080fe:	b29a      	uxth	r2, r3
 8008100:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008104:	9302      	str	r3, [sp, #8]
 8008106:	2301      	movs	r3, #1
 8008108:	9301      	str	r3, [sp, #4]
 800810a:	1dfb      	adds	r3, r7, #7
 800810c:	9300      	str	r3, [sp, #0]
 800810e:	2301      	movs	r3, #1
 8008110:	483c      	ldr	r0, [pc, #240]	; (8008204 <mpu_reset_fifo+0x280>)
 8008112:	f7fd fb19 	bl	8005748 <HAL_I2C_Mem_Write>
 8008116:	4603      	mov	r3, r0
 8008118:	2b00      	cmp	r3, #0
 800811a:	d002      	beq.n	8008122 <mpu_reset_fifo+0x19e>
            return -1;
 800811c:	f04f 33ff 	mov.w	r3, #4294967295
 8008120:	e0ab      	b.n	800827a <mpu_reset_fifo+0x2f6>
        data = 0;
 8008122:	2300      	movs	r3, #0
 8008124:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8008126:	4b36      	ldr	r3, [pc, #216]	; (8008200 <mpu_reset_fifo+0x27c>)
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	b29b      	uxth	r3, r3
 800812e:	005b      	lsls	r3, r3, #1
 8008130:	b299      	uxth	r1, r3
 8008132:	4b33      	ldr	r3, [pc, #204]	; (8008200 <mpu_reset_fifo+0x27c>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	795b      	ldrb	r3, [r3, #5]
 8008138:	b29a      	uxth	r2, r3
 800813a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800813e:	9302      	str	r3, [sp, #8]
 8008140:	2301      	movs	r3, #1
 8008142:	9301      	str	r3, [sp, #4]
 8008144:	1dfb      	adds	r3, r7, #7
 8008146:	9300      	str	r3, [sp, #0]
 8008148:	2301      	movs	r3, #1
 800814a:	482e      	ldr	r0, [pc, #184]	; (8008204 <mpu_reset_fifo+0x280>)
 800814c:	f7fd fafc 	bl	8005748 <HAL_I2C_Mem_Write>
 8008150:	4603      	mov	r3, r0
 8008152:	2b00      	cmp	r3, #0
 8008154:	f000 8090 	beq.w	8008278 <mpu_reset_fifo+0x2f4>
            return -1;
 8008158:	f04f 33ff 	mov.w	r3, #4294967295
 800815c:	e08d      	b.n	800827a <mpu_reset_fifo+0x2f6>
    } else {
        data = BIT_FIFO_RST;
 800815e:	2304      	movs	r3, #4
 8008160:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8008162:	4b27      	ldr	r3, [pc, #156]	; (8008200 <mpu_reset_fifo+0x27c>)
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	b29b      	uxth	r3, r3
 800816a:	005b      	lsls	r3, r3, #1
 800816c:	b299      	uxth	r1, r3
 800816e:	4b24      	ldr	r3, [pc, #144]	; (8008200 <mpu_reset_fifo+0x27c>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	791b      	ldrb	r3, [r3, #4]
 8008174:	b29a      	uxth	r2, r3
 8008176:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800817a:	9302      	str	r3, [sp, #8]
 800817c:	2301      	movs	r3, #1
 800817e:	9301      	str	r3, [sp, #4]
 8008180:	1dfb      	adds	r3, r7, #7
 8008182:	9300      	str	r3, [sp, #0]
 8008184:	2301      	movs	r3, #1
 8008186:	481f      	ldr	r0, [pc, #124]	; (8008204 <mpu_reset_fifo+0x280>)
 8008188:	f7fd fade 	bl	8005748 <HAL_I2C_Mem_Write>
 800818c:	4603      	mov	r3, r0
 800818e:	2b00      	cmp	r3, #0
 8008190:	d002      	beq.n	8008198 <mpu_reset_fifo+0x214>
            return -1;
 8008192:	f04f 33ff 	mov.w	r3, #4294967295
 8008196:	e070      	b.n	800827a <mpu_reset_fifo+0x2f6>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 8008198:	4b19      	ldr	r3, [pc, #100]	; (8008200 <mpu_reset_fifo+0x27c>)
 800819a:	7c9b      	ldrb	r3, [r3, #18]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d105      	bne.n	80081ac <mpu_reset_fifo+0x228>
 80081a0:	4b17      	ldr	r3, [pc, #92]	; (8008200 <mpu_reset_fifo+0x27c>)
 80081a2:	7a9b      	ldrb	r3, [r3, #10]
 80081a4:	f003 0301 	and.w	r3, r3, #1
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d102      	bne.n	80081b2 <mpu_reset_fifo+0x22e>
            data = BIT_FIFO_EN;
 80081ac:	2340      	movs	r3, #64	; 0x40
 80081ae:	71fb      	strb	r3, [r7, #7]
 80081b0:	e001      	b.n	80081b6 <mpu_reset_fifo+0x232>
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
 80081b2:	2360      	movs	r3, #96	; 0x60
 80081b4:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 80081b6:	4b12      	ldr	r3, [pc, #72]	; (8008200 <mpu_reset_fifo+0x27c>)
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	b29b      	uxth	r3, r3
 80081be:	005b      	lsls	r3, r3, #1
 80081c0:	b299      	uxth	r1, r3
 80081c2:	4b0f      	ldr	r3, [pc, #60]	; (8008200 <mpu_reset_fifo+0x27c>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	791b      	ldrb	r3, [r3, #4]
 80081c8:	b29a      	uxth	r2, r3
 80081ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80081ce:	9302      	str	r3, [sp, #8]
 80081d0:	2301      	movs	r3, #1
 80081d2:	9301      	str	r3, [sp, #4]
 80081d4:	1dfb      	adds	r3, r7, #7
 80081d6:	9300      	str	r3, [sp, #0]
 80081d8:	2301      	movs	r3, #1
 80081da:	480a      	ldr	r0, [pc, #40]	; (8008204 <mpu_reset_fifo+0x280>)
 80081dc:	f7fd fab4 	bl	8005748 <HAL_I2C_Mem_Write>
 80081e0:	4603      	mov	r3, r0
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d002      	beq.n	80081ec <mpu_reset_fifo+0x268>
            return -1;
 80081e6:	f04f 33ff 	mov.w	r3, #4294967295
 80081ea:	e046      	b.n	800827a <mpu_reset_fifo+0x2f6>
        delay_ms(50);
 80081ec:	2032      	movs	r0, #50	; 0x32
 80081ee:	f7fc fe1b 	bl	8004e28 <HAL_Delay>
        if (st.chip_cfg.int_enable)
 80081f2:	4b03      	ldr	r3, [pc, #12]	; (8008200 <mpu_reset_fifo+0x27c>)
 80081f4:	7c5b      	ldrb	r3, [r3, #17]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d006      	beq.n	8008208 <mpu_reset_fifo+0x284>
            data = BIT_DATA_RDY_EN;
 80081fa:	2301      	movs	r3, #1
 80081fc:	71fb      	strb	r3, [r7, #7]
 80081fe:	e005      	b.n	800820c <mpu_reset_fifo+0x288>
 8008200:	2000001c 	.word	0x2000001c
 8008204:	20000b20 	.word	0x20000b20
        else
            data = 0;
 8008208:	2300      	movs	r3, #0
 800820a:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 800820c:	4b1d      	ldr	r3, [pc, #116]	; (8008284 <mpu_reset_fifo+0x300>)
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	b29b      	uxth	r3, r3
 8008214:	005b      	lsls	r3, r3, #1
 8008216:	b299      	uxth	r1, r3
 8008218:	4b1a      	ldr	r3, [pc, #104]	; (8008284 <mpu_reset_fifo+0x300>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	7c5b      	ldrb	r3, [r3, #17]
 800821e:	b29a      	uxth	r2, r3
 8008220:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008224:	9302      	str	r3, [sp, #8]
 8008226:	2301      	movs	r3, #1
 8008228:	9301      	str	r3, [sp, #4]
 800822a:	1dfb      	adds	r3, r7, #7
 800822c:	9300      	str	r3, [sp, #0]
 800822e:	2301      	movs	r3, #1
 8008230:	4815      	ldr	r0, [pc, #84]	; (8008288 <mpu_reset_fifo+0x304>)
 8008232:	f7fd fa89 	bl	8005748 <HAL_I2C_Mem_Write>
 8008236:	4603      	mov	r3, r0
 8008238:	2b00      	cmp	r3, #0
 800823a:	d002      	beq.n	8008242 <mpu_reset_fifo+0x2be>
            return -1;
 800823c:	f04f 33ff 	mov.w	r3, #4294967295
 8008240:	e01b      	b.n	800827a <mpu_reset_fifo+0x2f6>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 8008242:	4b10      	ldr	r3, [pc, #64]	; (8008284 <mpu_reset_fifo+0x300>)
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	781b      	ldrb	r3, [r3, #0]
 8008248:	b29b      	uxth	r3, r3
 800824a:	005b      	lsls	r3, r3, #1
 800824c:	b299      	uxth	r1, r3
 800824e:	4b0d      	ldr	r3, [pc, #52]	; (8008284 <mpu_reset_fifo+0x300>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	795b      	ldrb	r3, [r3, #5]
 8008254:	b29a      	uxth	r2, r3
 8008256:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800825a:	9302      	str	r3, [sp, #8]
 800825c:	2301      	movs	r3, #1
 800825e:	9301      	str	r3, [sp, #4]
 8008260:	4b0a      	ldr	r3, [pc, #40]	; (800828c <mpu_reset_fifo+0x308>)
 8008262:	9300      	str	r3, [sp, #0]
 8008264:	2301      	movs	r3, #1
 8008266:	4808      	ldr	r0, [pc, #32]	; (8008288 <mpu_reset_fifo+0x304>)
 8008268:	f7fd fa6e 	bl	8005748 <HAL_I2C_Mem_Write>
 800826c:	4603      	mov	r3, r0
 800826e:	2b00      	cmp	r3, #0
 8008270:	d002      	beq.n	8008278 <mpu_reset_fifo+0x2f4>
            return -1;
 8008272:	f04f 33ff 	mov.w	r3, #4294967295
 8008276:	e000      	b.n	800827a <mpu_reset_fifo+0x2f6>
    }
    return 0;
 8008278:	2300      	movs	r3, #0
}
 800827a:	4618      	mov	r0, r3
 800827c:	3708      	adds	r7, #8
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}
 8008282:	bf00      	nop
 8008284:	2000001c 	.word	0x2000001c
 8008288:	20000b20 	.word	0x20000b20
 800828c:	2000002c 	.word	0x2000002c

08008290 <mpu_get_gyro_fsr>:
 *  @brief      Get the gyro full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_gyro_fsr(unsigned short *fsr)
{
 8008290:	b480      	push	{r7}
 8008292:	b083      	sub	sp, #12
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.gyro_fsr) {
 8008298:	4b16      	ldr	r3, [pc, #88]	; (80082f4 <mpu_get_gyro_fsr+0x64>)
 800829a:	7a1b      	ldrb	r3, [r3, #8]
 800829c:	2b03      	cmp	r3, #3
 800829e:	d81e      	bhi.n	80082de <mpu_get_gyro_fsr+0x4e>
 80082a0:	a201      	add	r2, pc, #4	; (adr r2, 80082a8 <mpu_get_gyro_fsr+0x18>)
 80082a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a6:	bf00      	nop
 80082a8:	080082b9 	.word	0x080082b9
 80082ac:	080082c1 	.word	0x080082c1
 80082b0:	080082cb 	.word	0x080082cb
 80082b4:	080082d5 	.word	0x080082d5
    case INV_FSR_250DPS:
        fsr[0] = 250;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	22fa      	movs	r2, #250	; 0xfa
 80082bc:	801a      	strh	r2, [r3, #0]
        break;
 80082be:	e012      	b.n	80082e6 <mpu_get_gyro_fsr+0x56>
    case INV_FSR_500DPS:
        fsr[0] = 500;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80082c6:	801a      	strh	r2, [r3, #0]
        break;
 80082c8:	e00d      	b.n	80082e6 <mpu_get_gyro_fsr+0x56>
    case INV_FSR_1000DPS:
        fsr[0] = 1000;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80082d0:	801a      	strh	r2, [r3, #0]
        break;
 80082d2:	e008      	b.n	80082e6 <mpu_get_gyro_fsr+0x56>
    case INV_FSR_2000DPS:
        fsr[0] = 2000;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80082da:	801a      	strh	r2, [r3, #0]
        break;
 80082dc:	e003      	b.n	80082e6 <mpu_get_gyro_fsr+0x56>
    default:
        fsr[0] = 0;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	801a      	strh	r2, [r3, #0]
        break;
 80082e4:	bf00      	nop
    }
    return 0;
 80082e6:	2300      	movs	r3, #0
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	370c      	adds	r7, #12
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr
 80082f4:	2000001c 	.word	0x2000001c

080082f8 <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b088      	sub	sp, #32
 80082fc:	af04      	add	r7, sp, #16
 80082fe:	4603      	mov	r3, r0
 8008300:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8008302:	4b2c      	ldr	r3, [pc, #176]	; (80083b4 <mpu_set_gyro_fsr+0xbc>)
 8008304:	7a9b      	ldrb	r3, [r3, #10]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d102      	bne.n	8008310 <mpu_set_gyro_fsr+0x18>
        return -1;
 800830a:	f04f 33ff 	mov.w	r3, #4294967295
 800830e:	e04c      	b.n	80083aa <mpu_set_gyro_fsr+0xb2>

    switch (fsr) {
 8008310:	88fb      	ldrh	r3, [r7, #6]
 8008312:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008316:	d017      	beq.n	8008348 <mpu_set_gyro_fsr+0x50>
 8008318:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800831c:	dc17      	bgt.n	800834e <mpu_set_gyro_fsr+0x56>
 800831e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008322:	d00e      	beq.n	8008342 <mpu_set_gyro_fsr+0x4a>
 8008324:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008328:	dc11      	bgt.n	800834e <mpu_set_gyro_fsr+0x56>
 800832a:	2bfa      	cmp	r3, #250	; 0xfa
 800832c:	d003      	beq.n	8008336 <mpu_set_gyro_fsr+0x3e>
 800832e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008332:	d003      	beq.n	800833c <mpu_set_gyro_fsr+0x44>
 8008334:	e00b      	b.n	800834e <mpu_set_gyro_fsr+0x56>
    case 250:
        data = INV_FSR_250DPS << 3;
 8008336:	2300      	movs	r3, #0
 8008338:	73fb      	strb	r3, [r7, #15]
        break;
 800833a:	e00b      	b.n	8008354 <mpu_set_gyro_fsr+0x5c>
    case 500:
        data = INV_FSR_500DPS << 3;
 800833c:	2308      	movs	r3, #8
 800833e:	73fb      	strb	r3, [r7, #15]
        break;
 8008340:	e008      	b.n	8008354 <mpu_set_gyro_fsr+0x5c>
    case 1000:
        data = INV_FSR_1000DPS << 3;
 8008342:	2310      	movs	r3, #16
 8008344:	73fb      	strb	r3, [r7, #15]
        break;
 8008346:	e005      	b.n	8008354 <mpu_set_gyro_fsr+0x5c>
    case 2000:
        data = INV_FSR_2000DPS << 3;
 8008348:	2318      	movs	r3, #24
 800834a:	73fb      	strb	r3, [r7, #15]
        break;
 800834c:	e002      	b.n	8008354 <mpu_set_gyro_fsr+0x5c>
    default:
        return -1;
 800834e:	f04f 33ff 	mov.w	r3, #4294967295
 8008352:	e02a      	b.n	80083aa <mpu_set_gyro_fsr+0xb2>
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
 8008354:	4b17      	ldr	r3, [pc, #92]	; (80083b4 <mpu_set_gyro_fsr+0xbc>)
 8008356:	7a1a      	ldrb	r2, [r3, #8]
 8008358:	7bfb      	ldrb	r3, [r7, #15]
 800835a:	08db      	lsrs	r3, r3, #3
 800835c:	b2db      	uxtb	r3, r3
 800835e:	429a      	cmp	r2, r3
 8008360:	d101      	bne.n	8008366 <mpu_set_gyro_fsr+0x6e>
        return 0;
 8008362:	2300      	movs	r3, #0
 8008364:	e021      	b.n	80083aa <mpu_set_gyro_fsr+0xb2>
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
 8008366:	4b13      	ldr	r3, [pc, #76]	; (80083b4 <mpu_set_gyro_fsr+0xbc>)
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	781b      	ldrb	r3, [r3, #0]
 800836c:	b29b      	uxth	r3, r3
 800836e:	005b      	lsls	r3, r3, #1
 8008370:	b299      	uxth	r1, r3
 8008372:	4b10      	ldr	r3, [pc, #64]	; (80083b4 <mpu_set_gyro_fsr+0xbc>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	799b      	ldrb	r3, [r3, #6]
 8008378:	b29a      	uxth	r2, r3
 800837a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800837e:	9302      	str	r3, [sp, #8]
 8008380:	2301      	movs	r3, #1
 8008382:	9301      	str	r3, [sp, #4]
 8008384:	f107 030f 	add.w	r3, r7, #15
 8008388:	9300      	str	r3, [sp, #0]
 800838a:	2301      	movs	r3, #1
 800838c:	480a      	ldr	r0, [pc, #40]	; (80083b8 <mpu_set_gyro_fsr+0xc0>)
 800838e:	f7fd f9db 	bl	8005748 <HAL_I2C_Mem_Write>
 8008392:	4603      	mov	r3, r0
 8008394:	2b00      	cmp	r3, #0
 8008396:	d002      	beq.n	800839e <mpu_set_gyro_fsr+0xa6>
        return -1;
 8008398:	f04f 33ff 	mov.w	r3, #4294967295
 800839c:	e005      	b.n	80083aa <mpu_set_gyro_fsr+0xb2>
    st.chip_cfg.gyro_fsr = data >> 3;
 800839e:	7bfb      	ldrb	r3, [r7, #15]
 80083a0:	08db      	lsrs	r3, r3, #3
 80083a2:	b2da      	uxtb	r2, r3
 80083a4:	4b03      	ldr	r3, [pc, #12]	; (80083b4 <mpu_set_gyro_fsr+0xbc>)
 80083a6:	721a      	strb	r2, [r3, #8]
    return 0;
 80083a8:	2300      	movs	r3, #0
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3710      	adds	r7, #16
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}
 80083b2:	bf00      	nop
 80083b4:	2000001c 	.word	0x2000001c
 80083b8:	20000b20 	.word	0x20000b20

080083bc <mpu_get_accel_fsr>:
 *  @brief      Get the accel full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
 80083bc:	b480      	push	{r7}
 80083be:	b083      	sub	sp, #12
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
 80083c4:	4b19      	ldr	r3, [pc, #100]	; (800842c <mpu_get_accel_fsr+0x70>)
 80083c6:	7a5b      	ldrb	r3, [r3, #9]
 80083c8:	2b03      	cmp	r3, #3
 80083ca:	d81b      	bhi.n	8008404 <mpu_get_accel_fsr+0x48>
 80083cc:	a201      	add	r2, pc, #4	; (adr r2, 80083d4 <mpu_get_accel_fsr+0x18>)
 80083ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083d2:	bf00      	nop
 80083d4:	080083e5 	.word	0x080083e5
 80083d8:	080083ed 	.word	0x080083ed
 80083dc:	080083f5 	.word	0x080083f5
 80083e0:	080083fd 	.word	0x080083fd
    case INV_FSR_2G:
        fsr[0] = 2;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2202      	movs	r2, #2
 80083e8:	701a      	strb	r2, [r3, #0]
        break;
 80083ea:	e00e      	b.n	800840a <mpu_get_accel_fsr+0x4e>
    case INV_FSR_4G:
        fsr[0] = 4;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2204      	movs	r2, #4
 80083f0:	701a      	strb	r2, [r3, #0]
        break;
 80083f2:	e00a      	b.n	800840a <mpu_get_accel_fsr+0x4e>
    case INV_FSR_8G:
        fsr[0] = 8;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2208      	movs	r2, #8
 80083f8:	701a      	strb	r2, [r3, #0]
        break;
 80083fa:	e006      	b.n	800840a <mpu_get_accel_fsr+0x4e>
    case INV_FSR_16G:
        fsr[0] = 16;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2210      	movs	r2, #16
 8008400:	701a      	strb	r2, [r3, #0]
        break;
 8008402:	e002      	b.n	800840a <mpu_get_accel_fsr+0x4e>
    default:
        return -1;
 8008404:	f04f 33ff 	mov.w	r3, #4294967295
 8008408:	e00a      	b.n	8008420 <mpu_get_accel_fsr+0x64>
    }
    if (st.chip_cfg.accel_half)
 800840a:	4b08      	ldr	r3, [pc, #32]	; (800842c <mpu_get_accel_fsr+0x70>)
 800840c:	7cdb      	ldrb	r3, [r3, #19]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d005      	beq.n	800841e <mpu_get_accel_fsr+0x62>
        fsr[0] <<= 1;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	005b      	lsls	r3, r3, #1
 8008418:	b2da      	uxtb	r2, r3
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	701a      	strb	r2, [r3, #0]
    return 0;
 800841e:	2300      	movs	r3, #0
}
 8008420:	4618      	mov	r0, r3
 8008422:	370c      	adds	r7, #12
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr
 800842c:	2000001c 	.word	0x2000001c

08008430 <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b088      	sub	sp, #32
 8008434:	af04      	add	r7, sp, #16
 8008436:	4603      	mov	r3, r0
 8008438:	71fb      	strb	r3, [r7, #7]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 800843a:	4b35      	ldr	r3, [pc, #212]	; (8008510 <mpu_set_accel_fsr+0xe0>)
 800843c:	7a9b      	ldrb	r3, [r3, #10]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d102      	bne.n	8008448 <mpu_set_accel_fsr+0x18>
        return -1;
 8008442:	f04f 33ff 	mov.w	r3, #4294967295
 8008446:	e05f      	b.n	8008508 <mpu_set_accel_fsr+0xd8>

    switch (fsr) {
 8008448:	79fb      	ldrb	r3, [r7, #7]
 800844a:	3b02      	subs	r3, #2
 800844c:	2b0e      	cmp	r3, #14
 800844e:	d82d      	bhi.n	80084ac <mpu_set_accel_fsr+0x7c>
 8008450:	a201      	add	r2, pc, #4	; (adr r2, 8008458 <mpu_set_accel_fsr+0x28>)
 8008452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008456:	bf00      	nop
 8008458:	08008495 	.word	0x08008495
 800845c:	080084ad 	.word	0x080084ad
 8008460:	0800849b 	.word	0x0800849b
 8008464:	080084ad 	.word	0x080084ad
 8008468:	080084ad 	.word	0x080084ad
 800846c:	080084ad 	.word	0x080084ad
 8008470:	080084a1 	.word	0x080084a1
 8008474:	080084ad 	.word	0x080084ad
 8008478:	080084ad 	.word	0x080084ad
 800847c:	080084ad 	.word	0x080084ad
 8008480:	080084ad 	.word	0x080084ad
 8008484:	080084ad 	.word	0x080084ad
 8008488:	080084ad 	.word	0x080084ad
 800848c:	080084ad 	.word	0x080084ad
 8008490:	080084a7 	.word	0x080084a7
    case 2:
        data = INV_FSR_2G << 3;
 8008494:	2300      	movs	r3, #0
 8008496:	73fb      	strb	r3, [r7, #15]
        break;
 8008498:	e00b      	b.n	80084b2 <mpu_set_accel_fsr+0x82>
    case 4:
        data = INV_FSR_4G << 3;
 800849a:	2308      	movs	r3, #8
 800849c:	73fb      	strb	r3, [r7, #15]
        break;
 800849e:	e008      	b.n	80084b2 <mpu_set_accel_fsr+0x82>
    case 8:
        data = INV_FSR_8G << 3;
 80084a0:	2310      	movs	r3, #16
 80084a2:	73fb      	strb	r3, [r7, #15]
        break;
 80084a4:	e005      	b.n	80084b2 <mpu_set_accel_fsr+0x82>
    case 16:
        data = INV_FSR_16G << 3;
 80084a6:	2318      	movs	r3, #24
 80084a8:	73fb      	strb	r3, [r7, #15]
        break;
 80084aa:	e002      	b.n	80084b2 <mpu_set_accel_fsr+0x82>
    default:
        return -1;
 80084ac:	f04f 33ff 	mov.w	r3, #4294967295
 80084b0:	e02a      	b.n	8008508 <mpu_set_accel_fsr+0xd8>
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
 80084b2:	4b17      	ldr	r3, [pc, #92]	; (8008510 <mpu_set_accel_fsr+0xe0>)
 80084b4:	7a5a      	ldrb	r2, [r3, #9]
 80084b6:	7bfb      	ldrb	r3, [r7, #15]
 80084b8:	08db      	lsrs	r3, r3, #3
 80084ba:	b2db      	uxtb	r3, r3
 80084bc:	429a      	cmp	r2, r3
 80084be:	d101      	bne.n	80084c4 <mpu_set_accel_fsr+0x94>
        return 0;
 80084c0:	2300      	movs	r3, #0
 80084c2:	e021      	b.n	8008508 <mpu_set_accel_fsr+0xd8>
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
 80084c4:	4b12      	ldr	r3, [pc, #72]	; (8008510 <mpu_set_accel_fsr+0xe0>)
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	781b      	ldrb	r3, [r3, #0]
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	005b      	lsls	r3, r3, #1
 80084ce:	b299      	uxth	r1, r3
 80084d0:	4b0f      	ldr	r3, [pc, #60]	; (8008510 <mpu_set_accel_fsr+0xe0>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	79db      	ldrb	r3, [r3, #7]
 80084d6:	b29a      	uxth	r2, r3
 80084d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80084dc:	9302      	str	r3, [sp, #8]
 80084de:	2301      	movs	r3, #1
 80084e0:	9301      	str	r3, [sp, #4]
 80084e2:	f107 030f 	add.w	r3, r7, #15
 80084e6:	9300      	str	r3, [sp, #0]
 80084e8:	2301      	movs	r3, #1
 80084ea:	480a      	ldr	r0, [pc, #40]	; (8008514 <mpu_set_accel_fsr+0xe4>)
 80084ec:	f7fd f92c 	bl	8005748 <HAL_I2C_Mem_Write>
 80084f0:	4603      	mov	r3, r0
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d002      	beq.n	80084fc <mpu_set_accel_fsr+0xcc>
        return -1;
 80084f6:	f04f 33ff 	mov.w	r3, #4294967295
 80084fa:	e005      	b.n	8008508 <mpu_set_accel_fsr+0xd8>
    st.chip_cfg.accel_fsr = data >> 3;
 80084fc:	7bfb      	ldrb	r3, [r7, #15]
 80084fe:	08db      	lsrs	r3, r3, #3
 8008500:	b2da      	uxtb	r2, r3
 8008502:	4b03      	ldr	r3, [pc, #12]	; (8008510 <mpu_set_accel_fsr+0xe0>)
 8008504:	725a      	strb	r2, [r3, #9]
    return 0;
 8008506:	2300      	movs	r3, #0
}
 8008508:	4618      	mov	r0, r3
 800850a:	3710      	adds	r7, #16
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}
 8008510:	2000001c 	.word	0x2000001c
 8008514:	20000b20 	.word	0x20000b20

08008518 <mpu_get_lpf>:
 *  @brief      Get the current DLPF setting.
 *  @param[out] lpf Current LPF setting.
 *  0 if successful.
 */
int mpu_get_lpf(unsigned short *lpf)
{
 8008518:	b480      	push	{r7}
 800851a:	b083      	sub	sp, #12
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.lpf) {
 8008520:	4b1b      	ldr	r3, [pc, #108]	; (8008590 <mpu_get_lpf+0x78>)
 8008522:	7adb      	ldrb	r3, [r3, #11]
 8008524:	3b01      	subs	r3, #1
 8008526:	2b05      	cmp	r3, #5
 8008528:	d826      	bhi.n	8008578 <mpu_get_lpf+0x60>
 800852a:	a201      	add	r2, pc, #4	; (adr r2, 8008530 <mpu_get_lpf+0x18>)
 800852c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008530:	08008549 	.word	0x08008549
 8008534:	08008551 	.word	0x08008551
 8008538:	08008559 	.word	0x08008559
 800853c:	08008561 	.word	0x08008561
 8008540:	08008569 	.word	0x08008569
 8008544:	08008571 	.word	0x08008571
    case INV_FILTER_188HZ:
        lpf[0] = 188;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	22bc      	movs	r2, #188	; 0xbc
 800854c:	801a      	strh	r2, [r3, #0]
        break;
 800854e:	e017      	b.n	8008580 <mpu_get_lpf+0x68>
    case INV_FILTER_98HZ:
        lpf[0] = 98;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2262      	movs	r2, #98	; 0x62
 8008554:	801a      	strh	r2, [r3, #0]
        break;
 8008556:	e013      	b.n	8008580 <mpu_get_lpf+0x68>
    case INV_FILTER_42HZ:
        lpf[0] = 42;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	222a      	movs	r2, #42	; 0x2a
 800855c:	801a      	strh	r2, [r3, #0]
        break;
 800855e:	e00f      	b.n	8008580 <mpu_get_lpf+0x68>
    case INV_FILTER_20HZ:
        lpf[0] = 20;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2214      	movs	r2, #20
 8008564:	801a      	strh	r2, [r3, #0]
        break;
 8008566:	e00b      	b.n	8008580 <mpu_get_lpf+0x68>
    case INV_FILTER_10HZ:
        lpf[0] = 10;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	220a      	movs	r2, #10
 800856c:	801a      	strh	r2, [r3, #0]
        break;
 800856e:	e007      	b.n	8008580 <mpu_get_lpf+0x68>
    case INV_FILTER_5HZ:
        lpf[0] = 5;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2205      	movs	r2, #5
 8008574:	801a      	strh	r2, [r3, #0]
        break;
 8008576:	e003      	b.n	8008580 <mpu_get_lpf+0x68>
    case INV_FILTER_256HZ_NOLPF2:
    case INV_FILTER_2100HZ_NOLPF:
    default:
        lpf[0] = 0;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2200      	movs	r2, #0
 800857c:	801a      	strh	r2, [r3, #0]
        break;
 800857e:	bf00      	nop
    }
    return 0;
 8008580:	2300      	movs	r3, #0
}
 8008582:	4618      	mov	r0, r3
 8008584:	370c      	adds	r7, #12
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr
 800858e:	bf00      	nop
 8008590:	2000001c 	.word	0x2000001c

08008594 <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b088      	sub	sp, #32
 8008598:	af04      	add	r7, sp, #16
 800859a:	4603      	mov	r3, r0
 800859c:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 800859e:	4b29      	ldr	r3, [pc, #164]	; (8008644 <mpu_set_lpf+0xb0>)
 80085a0:	7a9b      	ldrb	r3, [r3, #10]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d102      	bne.n	80085ac <mpu_set_lpf+0x18>
        return -1;
 80085a6:	f04f 33ff 	mov.w	r3, #4294967295
 80085aa:	e046      	b.n	800863a <mpu_set_lpf+0xa6>

    if (lpf >= 188)
 80085ac:	88fb      	ldrh	r3, [r7, #6]
 80085ae:	2bbb      	cmp	r3, #187	; 0xbb
 80085b0:	d902      	bls.n	80085b8 <mpu_set_lpf+0x24>
        data = INV_FILTER_188HZ;
 80085b2:	2301      	movs	r3, #1
 80085b4:	73fb      	strb	r3, [r7, #15]
 80085b6:	e019      	b.n	80085ec <mpu_set_lpf+0x58>
    else if (lpf >= 98)
 80085b8:	88fb      	ldrh	r3, [r7, #6]
 80085ba:	2b61      	cmp	r3, #97	; 0x61
 80085bc:	d902      	bls.n	80085c4 <mpu_set_lpf+0x30>
        data = INV_FILTER_98HZ;
 80085be:	2302      	movs	r3, #2
 80085c0:	73fb      	strb	r3, [r7, #15]
 80085c2:	e013      	b.n	80085ec <mpu_set_lpf+0x58>
    else if (lpf >= 42)
 80085c4:	88fb      	ldrh	r3, [r7, #6]
 80085c6:	2b29      	cmp	r3, #41	; 0x29
 80085c8:	d902      	bls.n	80085d0 <mpu_set_lpf+0x3c>
        data = INV_FILTER_42HZ;
 80085ca:	2303      	movs	r3, #3
 80085cc:	73fb      	strb	r3, [r7, #15]
 80085ce:	e00d      	b.n	80085ec <mpu_set_lpf+0x58>
    else if (lpf >= 20)
 80085d0:	88fb      	ldrh	r3, [r7, #6]
 80085d2:	2b13      	cmp	r3, #19
 80085d4:	d902      	bls.n	80085dc <mpu_set_lpf+0x48>
        data = INV_FILTER_20HZ;
 80085d6:	2304      	movs	r3, #4
 80085d8:	73fb      	strb	r3, [r7, #15]
 80085da:	e007      	b.n	80085ec <mpu_set_lpf+0x58>
    else if (lpf >= 10)
 80085dc:	88fb      	ldrh	r3, [r7, #6]
 80085de:	2b09      	cmp	r3, #9
 80085e0:	d902      	bls.n	80085e8 <mpu_set_lpf+0x54>
        data = INV_FILTER_10HZ;
 80085e2:	2305      	movs	r3, #5
 80085e4:	73fb      	strb	r3, [r7, #15]
 80085e6:	e001      	b.n	80085ec <mpu_set_lpf+0x58>
    else
        data = INV_FILTER_5HZ;
 80085e8:	2306      	movs	r3, #6
 80085ea:	73fb      	strb	r3, [r7, #15]

    if (st.chip_cfg.lpf == data)
 80085ec:	4b15      	ldr	r3, [pc, #84]	; (8008644 <mpu_set_lpf+0xb0>)
 80085ee:	7ada      	ldrb	r2, [r3, #11]
 80085f0:	7bfb      	ldrb	r3, [r7, #15]
 80085f2:	429a      	cmp	r2, r3
 80085f4:	d101      	bne.n	80085fa <mpu_set_lpf+0x66>
        return 0;
 80085f6:	2300      	movs	r3, #0
 80085f8:	e01f      	b.n	800863a <mpu_set_lpf+0xa6>
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
 80085fa:	4b12      	ldr	r3, [pc, #72]	; (8008644 <mpu_set_lpf+0xb0>)
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	b29b      	uxth	r3, r3
 8008602:	005b      	lsls	r3, r3, #1
 8008604:	b299      	uxth	r1, r3
 8008606:	4b0f      	ldr	r3, [pc, #60]	; (8008644 <mpu_set_lpf+0xb0>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	789b      	ldrb	r3, [r3, #2]
 800860c:	b29a      	uxth	r2, r3
 800860e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008612:	9302      	str	r3, [sp, #8]
 8008614:	2301      	movs	r3, #1
 8008616:	9301      	str	r3, [sp, #4]
 8008618:	f107 030f 	add.w	r3, r7, #15
 800861c:	9300      	str	r3, [sp, #0]
 800861e:	2301      	movs	r3, #1
 8008620:	4809      	ldr	r0, [pc, #36]	; (8008648 <mpu_set_lpf+0xb4>)
 8008622:	f7fd f891 	bl	8005748 <HAL_I2C_Mem_Write>
 8008626:	4603      	mov	r3, r0
 8008628:	2b00      	cmp	r3, #0
 800862a:	d002      	beq.n	8008632 <mpu_set_lpf+0x9e>
        return -1;
 800862c:	f04f 33ff 	mov.w	r3, #4294967295
 8008630:	e003      	b.n	800863a <mpu_set_lpf+0xa6>
    st.chip_cfg.lpf = data;
 8008632:	7bfa      	ldrb	r2, [r7, #15]
 8008634:	4b03      	ldr	r3, [pc, #12]	; (8008644 <mpu_set_lpf+0xb0>)
 8008636:	72da      	strb	r2, [r3, #11]
    return 0;
 8008638:	2300      	movs	r3, #0
}
 800863a:	4618      	mov	r0, r3
 800863c:	3710      	adds	r7, #16
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}
 8008642:	bf00      	nop
 8008644:	2000001c 	.word	0x2000001c
 8008648:	20000b20 	.word	0x20000b20

0800864c <mpu_get_sample_rate>:
 *  @brief      Get sampling rate.
 *  @param[out] rate    Current sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
 800864c:	b480      	push	{r7}
 800864e:	b083      	sub	sp, #12
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
    if (st.chip_cfg.dmp_on)
 8008654:	4b09      	ldr	r3, [pc, #36]	; (800867c <mpu_get_sample_rate+0x30>)
 8008656:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800865a:	2b00      	cmp	r3, #0
 800865c:	d002      	beq.n	8008664 <mpu_get_sample_rate+0x18>
        return -1;
 800865e:	f04f 33ff 	mov.w	r3, #4294967295
 8008662:	e004      	b.n	800866e <mpu_get_sample_rate+0x22>
    else
        rate[0] = st.chip_cfg.sample_rate;
 8008664:	4b05      	ldr	r3, [pc, #20]	; (800867c <mpu_get_sample_rate+0x30>)
 8008666:	89da      	ldrh	r2, [r3, #14]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	801a      	strh	r2, [r3, #0]
    return 0;
 800866c:	2300      	movs	r3, #0
}
 800866e:	4618      	mov	r0, r3
 8008670:	370c      	adds	r7, #12
 8008672:	46bd      	mov	sp, r7
 8008674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008678:	4770      	bx	lr
 800867a:	bf00      	nop
 800867c:	2000001c 	.word	0x2000001c

08008680 <mpu_set_sample_rate>:
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b088      	sub	sp, #32
 8008684:	af04      	add	r7, sp, #16
 8008686:	4603      	mov	r3, r0
 8008688:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 800868a:	4b34      	ldr	r3, [pc, #208]	; (800875c <mpu_set_sample_rate+0xdc>)
 800868c:	7a9b      	ldrb	r3, [r3, #10]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d102      	bne.n	8008698 <mpu_set_sample_rate+0x18>
        return -1;
 8008692:	f04f 33ff 	mov.w	r3, #4294967295
 8008696:	e05d      	b.n	8008754 <mpu_set_sample_rate+0xd4>

    if (st.chip_cfg.dmp_on)
 8008698:	4b30      	ldr	r3, [pc, #192]	; (800875c <mpu_set_sample_rate+0xdc>)
 800869a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d002      	beq.n	80086a8 <mpu_set_sample_rate+0x28>
        return -1;
 80086a2:	f04f 33ff 	mov.w	r3, #4294967295
 80086a6:	e055      	b.n	8008754 <mpu_set_sample_rate+0xd4>
    else {
        if (st.chip_cfg.lp_accel_mode) {
 80086a8:	4b2c      	ldr	r3, [pc, #176]	; (800875c <mpu_set_sample_rate+0xdc>)
 80086aa:	7d1b      	ldrb	r3, [r3, #20]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d00e      	beq.n	80086ce <mpu_set_sample_rate+0x4e>
            if (rate && (rate <= 40)) {
 80086b0:	88fb      	ldrh	r3, [r7, #6]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d008      	beq.n	80086c8 <mpu_set_sample_rate+0x48>
 80086b6:	88fb      	ldrh	r3, [r7, #6]
 80086b8:	2b28      	cmp	r3, #40	; 0x28
 80086ba:	d805      	bhi.n	80086c8 <mpu_set_sample_rate+0x48>
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
 80086bc:	88fb      	ldrh	r3, [r7, #6]
 80086be:	4618      	mov	r0, r3
 80086c0:	f7ff fbcc 	bl	8007e5c <mpu_lp_accel_mode>
                return 0;
 80086c4:	2300      	movs	r3, #0
 80086c6:	e045      	b.n	8008754 <mpu_set_sample_rate+0xd4>
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
 80086c8:	2000      	movs	r0, #0
 80086ca:	f7ff fbc7 	bl	8007e5c <mpu_lp_accel_mode>
        }
        if (rate < 4)
 80086ce:	88fb      	ldrh	r3, [r7, #6]
 80086d0:	2b03      	cmp	r3, #3
 80086d2:	d802      	bhi.n	80086da <mpu_set_sample_rate+0x5a>
            rate = 4;
 80086d4:	2304      	movs	r3, #4
 80086d6:	80fb      	strh	r3, [r7, #6]
 80086d8:	e006      	b.n	80086e8 <mpu_set_sample_rate+0x68>
        else if (rate > 1000)
 80086da:	88fb      	ldrh	r3, [r7, #6]
 80086dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80086e0:	d902      	bls.n	80086e8 <mpu_set_sample_rate+0x68>
            rate = 1000;
 80086e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80086e6:	80fb      	strh	r3, [r7, #6]

        data = 1000 / rate - 1;
 80086e8:	88fb      	ldrh	r3, [r7, #6]
 80086ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80086ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80086f2:	b2db      	uxtb	r3, r3
 80086f4:	3b01      	subs	r3, #1
 80086f6:	b2db      	uxtb	r3, r3
 80086f8:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 80086fa:	4b18      	ldr	r3, [pc, #96]	; (800875c <mpu_set_sample_rate+0xdc>)
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	781b      	ldrb	r3, [r3, #0]
 8008700:	b29b      	uxth	r3, r3
 8008702:	005b      	lsls	r3, r3, #1
 8008704:	b299      	uxth	r1, r3
 8008706:	4b15      	ldr	r3, [pc, #84]	; (800875c <mpu_set_sample_rate+0xdc>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	785b      	ldrb	r3, [r3, #1]
 800870c:	b29a      	uxth	r2, r3
 800870e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008712:	9302      	str	r3, [sp, #8]
 8008714:	2301      	movs	r3, #1
 8008716:	9301      	str	r3, [sp, #4]
 8008718:	f107 030f 	add.w	r3, r7, #15
 800871c:	9300      	str	r3, [sp, #0]
 800871e:	2301      	movs	r3, #1
 8008720:	480f      	ldr	r0, [pc, #60]	; (8008760 <mpu_set_sample_rate+0xe0>)
 8008722:	f7fd f811 	bl	8005748 <HAL_I2C_Mem_Write>
 8008726:	4603      	mov	r3, r0
 8008728:	2b00      	cmp	r3, #0
 800872a:	d002      	beq.n	8008732 <mpu_set_sample_rate+0xb2>
            return -1;
 800872c:	f04f 33ff 	mov.w	r3, #4294967295
 8008730:	e010      	b.n	8008754 <mpu_set_sample_rate+0xd4>

        st.chip_cfg.sample_rate = 1000 / (1 + data);
 8008732:	7bfb      	ldrb	r3, [r7, #15]
 8008734:	3301      	adds	r3, #1
 8008736:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800873a:	fb92 f3f3 	sdiv	r3, r2, r3
 800873e:	b29a      	uxth	r2, r3
 8008740:	4b06      	ldr	r3, [pc, #24]	; (800875c <mpu_set_sample_rate+0xdc>)
 8008742:	81da      	strh	r2, [r3, #14]
#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
#endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
 8008744:	4b05      	ldr	r3, [pc, #20]	; (800875c <mpu_set_sample_rate+0xdc>)
 8008746:	89db      	ldrh	r3, [r3, #14]
 8008748:	085b      	lsrs	r3, r3, #1
 800874a:	b29b      	uxth	r3, r3
 800874c:	4618      	mov	r0, r3
 800874e:	f7ff ff21 	bl	8008594 <mpu_set_lpf>
        return 0;
 8008752:	2300      	movs	r3, #0
    }
}
 8008754:	4618      	mov	r0, r3
 8008756:	3710      	adds	r7, #16
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}
 800875c:	2000001c 	.word	0x2000001c
 8008760:	20000b20 	.word	0x20000b20

08008764 <mpu_get_gyro_sens>:
 *  @brief      Get gyro sensitivity scale factor.
 *  @param[out] sens    Conversion from hardware units to dps.
 *  @return     0 if successful.
 */
int mpu_get_gyro_sens(float *sens)
{
 8008764:	b480      	push	{r7}
 8008766:	b083      	sub	sp, #12
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.gyro_fsr) {
 800876c:	4b14      	ldr	r3, [pc, #80]	; (80087c0 <mpu_get_gyro_sens+0x5c>)
 800876e:	7a1b      	ldrb	r3, [r3, #8]
 8008770:	2b03      	cmp	r3, #3
 8008772:	d81b      	bhi.n	80087ac <mpu_get_gyro_sens+0x48>
 8008774:	a201      	add	r2, pc, #4	; (adr r2, 800877c <mpu_get_gyro_sens+0x18>)
 8008776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800877a:	bf00      	nop
 800877c:	0800878d 	.word	0x0800878d
 8008780:	08008795 	.word	0x08008795
 8008784:	0800879d 	.word	0x0800879d
 8008788:	080087a5 	.word	0x080087a5
    case INV_FSR_250DPS:
        sens[0] = 131.f;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	4a0d      	ldr	r2, [pc, #52]	; (80087c4 <mpu_get_gyro_sens+0x60>)
 8008790:	601a      	str	r2, [r3, #0]
        break;
 8008792:	e00e      	b.n	80087b2 <mpu_get_gyro_sens+0x4e>
    case INV_FSR_500DPS:
        sens[0] = 65.5f;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	4a0c      	ldr	r2, [pc, #48]	; (80087c8 <mpu_get_gyro_sens+0x64>)
 8008798:	601a      	str	r2, [r3, #0]
        break;
 800879a:	e00a      	b.n	80087b2 <mpu_get_gyro_sens+0x4e>
    case INV_FSR_1000DPS:
        sens[0] = 32.8f;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	4a0b      	ldr	r2, [pc, #44]	; (80087cc <mpu_get_gyro_sens+0x68>)
 80087a0:	601a      	str	r2, [r3, #0]
        break;
 80087a2:	e006      	b.n	80087b2 <mpu_get_gyro_sens+0x4e>
    case INV_FSR_2000DPS:
        sens[0] = 16.4f;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	4a0a      	ldr	r2, [pc, #40]	; (80087d0 <mpu_get_gyro_sens+0x6c>)
 80087a8:	601a      	str	r2, [r3, #0]
        break;
 80087aa:	e002      	b.n	80087b2 <mpu_get_gyro_sens+0x4e>
    default:
        return -1;
 80087ac:	f04f 33ff 	mov.w	r3, #4294967295
 80087b0:	e000      	b.n	80087b4 <mpu_get_gyro_sens+0x50>
    }
    return 0;
 80087b2:	2300      	movs	r3, #0
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	370c      	adds	r7, #12
 80087b8:	46bd      	mov	sp, r7
 80087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087be:	4770      	bx	lr
 80087c0:	2000001c 	.word	0x2000001c
 80087c4:	43030000 	.word	0x43030000
 80087c8:	42830000 	.word	0x42830000
 80087cc:	42033333 	.word	0x42033333
 80087d0:	41833333 	.word	0x41833333

080087d4 <mpu_get_accel_sens>:
 *  @brief      Get accel sensitivity scale factor.
 *  @param[out] sens    Conversion from hardware units to g's.
 *  @return     0 if successful.
 */
int mpu_get_accel_sens(unsigned short *sens)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b083      	sub	sp, #12
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
 80087dc:	4b1b      	ldr	r3, [pc, #108]	; (800884c <mpu_get_accel_sens+0x78>)
 80087de:	7a5b      	ldrb	r3, [r3, #9]
 80087e0:	2b03      	cmp	r3, #3
 80087e2:	d81f      	bhi.n	8008824 <mpu_get_accel_sens+0x50>
 80087e4:	a201      	add	r2, pc, #4	; (adr r2, 80087ec <mpu_get_accel_sens+0x18>)
 80087e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ea:	bf00      	nop
 80087ec:	080087fd 	.word	0x080087fd
 80087f0:	08008807 	.word	0x08008807
 80087f4:	08008811 	.word	0x08008811
 80087f8:	0800881b 	.word	0x0800881b
    case INV_FSR_2G:
        sens[0] = 16384;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008802:	801a      	strh	r2, [r3, #0]
        break;
 8008804:	e011      	b.n	800882a <mpu_get_accel_sens+0x56>
    case INV_FSR_4G:
        sens[0] = 8192;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800880c:	801a      	strh	r2, [r3, #0]
        break;
 800880e:	e00c      	b.n	800882a <mpu_get_accel_sens+0x56>
    case INV_FSR_8G:
        sens[0] = 4096;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008816:	801a      	strh	r2, [r3, #0]
        break;
 8008818:	e007      	b.n	800882a <mpu_get_accel_sens+0x56>
    case INV_FSR_16G:
        sens[0] = 2048;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008820:	801a      	strh	r2, [r3, #0]
        break;
 8008822:	e002      	b.n	800882a <mpu_get_accel_sens+0x56>
    default:
        return -1;
 8008824:	f04f 33ff 	mov.w	r3, #4294967295
 8008828:	e00a      	b.n	8008840 <mpu_get_accel_sens+0x6c>
    }
    if (st.chip_cfg.accel_half)
 800882a:	4b08      	ldr	r3, [pc, #32]	; (800884c <mpu_get_accel_sens+0x78>)
 800882c:	7cdb      	ldrb	r3, [r3, #19]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d005      	beq.n	800883e <mpu_get_accel_sens+0x6a>
        sens[0] >>= 1;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	881b      	ldrh	r3, [r3, #0]
 8008836:	085b      	lsrs	r3, r3, #1
 8008838:	b29a      	uxth	r2, r3
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	801a      	strh	r2, [r3, #0]
    return 0;
 800883e:	2300      	movs	r3, #0
}
 8008840:	4618      	mov	r0, r3
 8008842:	370c      	adds	r7, #12
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr
 800884c:	2000001c 	.word	0x2000001c

08008850 <mpu_get_fifo_config>:
 *  \n INV_XYZ_ACCEL
 *  @param[out] sensors Mask of sensors in FIFO.
 *  @return     0 if successful.
 */
int mpu_get_fifo_config(unsigned char *sensors)
{
 8008850:	b480      	push	{r7}
 8008852:	b083      	sub	sp, #12
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
    sensors[0] = st.chip_cfg.fifo_enable;
 8008858:	4b05      	ldr	r3, [pc, #20]	; (8008870 <mpu_get_fifo_config+0x20>)
 800885a:	7c1a      	ldrb	r2, [r3, #16]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	701a      	strb	r2, [r3, #0]
    return 0;
 8008860:	2300      	movs	r3, #0
}
 8008862:	4618      	mov	r0, r3
 8008864:	370c      	adds	r7, #12
 8008866:	46bd      	mov	sp, r7
 8008868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886c:	4770      	bx	lr
 800886e:	bf00      	nop
 8008870:	2000001c 	.word	0x2000001c

08008874 <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b084      	sub	sp, #16
 8008878:	af00      	add	r7, sp, #0
 800887a:	4603      	mov	r3, r0
 800887c:	71fb      	strb	r3, [r7, #7]
    unsigned char prev;
    int result = 0;
 800887e:	2300      	movs	r3, #0
 8008880:	60fb      	str	r3, [r7, #12]

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
 8008882:	79fb      	ldrb	r3, [r7, #7]
 8008884:	f023 0301 	bic.w	r3, r3, #1
 8008888:	71fb      	strb	r3, [r7, #7]

    if (st.chip_cfg.dmp_on)
 800888a:	4b22      	ldr	r3, [pc, #136]	; (8008914 <mpu_configure_fifo+0xa0>)
 800888c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008890:	2b00      	cmp	r3, #0
 8008892:	d001      	beq.n	8008898 <mpu_configure_fifo+0x24>
        return 0;
 8008894:	2300      	movs	r3, #0
 8008896:	e038      	b.n	800890a <mpu_configure_fifo+0x96>
    else {
        if (!(st.chip_cfg.sensors))
 8008898:	4b1e      	ldr	r3, [pc, #120]	; (8008914 <mpu_configure_fifo+0xa0>)
 800889a:	7a9b      	ldrb	r3, [r3, #10]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d102      	bne.n	80088a6 <mpu_configure_fifo+0x32>
            return -1;
 80088a0:	f04f 33ff 	mov.w	r3, #4294967295
 80088a4:	e031      	b.n	800890a <mpu_configure_fifo+0x96>
        prev = st.chip_cfg.fifo_enable;
 80088a6:	4b1b      	ldr	r3, [pc, #108]	; (8008914 <mpu_configure_fifo+0xa0>)
 80088a8:	7c1b      	ldrb	r3, [r3, #16]
 80088aa:	72fb      	strb	r3, [r7, #11]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 80088ac:	4b19      	ldr	r3, [pc, #100]	; (8008914 <mpu_configure_fifo+0xa0>)
 80088ae:	7a9a      	ldrb	r2, [r3, #10]
 80088b0:	79fb      	ldrb	r3, [r7, #7]
 80088b2:	4013      	ands	r3, r2
 80088b4:	b2da      	uxtb	r2, r3
 80088b6:	4b17      	ldr	r3, [pc, #92]	; (8008914 <mpu_configure_fifo+0xa0>)
 80088b8:	741a      	strb	r2, [r3, #16]
        if (st.chip_cfg.fifo_enable != sensors)
 80088ba:	4b16      	ldr	r3, [pc, #88]	; (8008914 <mpu_configure_fifo+0xa0>)
 80088bc:	7c1b      	ldrb	r3, [r3, #16]
 80088be:	79fa      	ldrb	r2, [r7, #7]
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d003      	beq.n	80088cc <mpu_configure_fifo+0x58>
            /* You're not getting what you asked for. Some sensors are
             * asleep.
             */
            result = -1;
 80088c4:	f04f 33ff 	mov.w	r3, #4294967295
 80088c8:	60fb      	str	r3, [r7, #12]
 80088ca:	e001      	b.n	80088d0 <mpu_configure_fifo+0x5c>
        else
            result = 0;
 80088cc:	2300      	movs	r3, #0
 80088ce:	60fb      	str	r3, [r7, #12]
        if (sensors || st.chip_cfg.lp_accel_mode)
 80088d0:	79fb      	ldrb	r3, [r7, #7]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d103      	bne.n	80088de <mpu_configure_fifo+0x6a>
 80088d6:	4b0f      	ldr	r3, [pc, #60]	; (8008914 <mpu_configure_fifo+0xa0>)
 80088d8:	7d1b      	ldrb	r3, [r3, #20]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d003      	beq.n	80088e6 <mpu_configure_fifo+0x72>
            set_int_enable(1);
 80088de:	2001      	movs	r0, #1
 80088e0:	f7ff f98a 	bl	8007bf8 <set_int_enable>
 80088e4:	e002      	b.n	80088ec <mpu_configure_fifo+0x78>
        else
            set_int_enable(0);
 80088e6:	2000      	movs	r0, #0
 80088e8:	f7ff f986 	bl	8007bf8 <set_int_enable>
        if (sensors) {
 80088ec:	79fb      	ldrb	r3, [r7, #7]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d00a      	beq.n	8008908 <mpu_configure_fifo+0x94>
            if (mpu_reset_fifo()) {
 80088f2:	f7ff fb47 	bl	8007f84 <mpu_reset_fifo>
 80088f6:	4603      	mov	r3, r0
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d005      	beq.n	8008908 <mpu_configure_fifo+0x94>
                st.chip_cfg.fifo_enable = prev;
 80088fc:	4a05      	ldr	r2, [pc, #20]	; (8008914 <mpu_configure_fifo+0xa0>)
 80088fe:	7afb      	ldrb	r3, [r7, #11]
 8008900:	7413      	strb	r3, [r2, #16]
                return -1;
 8008902:	f04f 33ff 	mov.w	r3, #4294967295
 8008906:	e000      	b.n	800890a <mpu_configure_fifo+0x96>
            }
        }
    }

    return result;
 8008908:	68fb      	ldr	r3, [r7, #12]
}
 800890a:	4618      	mov	r0, r3
 800890c:	3710      	adds	r7, #16
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
 8008912:	bf00      	nop
 8008914:	2000001c 	.word	0x2000001c

08008918 <mpu_set_sensors>:
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b088      	sub	sp, #32
 800891c:	af04      	add	r7, sp, #16
 800891e:	4603      	mov	r3, r0
 8008920:	71fb      	strb	r3, [r7, #7]
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
 8008922:	79fb      	ldrb	r3, [r7, #7]
 8008924:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008928:	2b00      	cmp	r3, #0
 800892a:	d002      	beq.n	8008932 <mpu_set_sensors+0x1a>
        data = INV_CLK_PLL;
 800892c:	2301      	movs	r3, #1
 800892e:	73fb      	strb	r3, [r7, #15]
 8008930:	e007      	b.n	8008942 <mpu_set_sensors+0x2a>
    else if (sensors)
 8008932:	79fb      	ldrb	r3, [r7, #7]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d002      	beq.n	800893e <mpu_set_sensors+0x26>
        data = 0;
 8008938:	2300      	movs	r3, #0
 800893a:	73fb      	strb	r3, [r7, #15]
 800893c:	e001      	b.n	8008942 <mpu_set_sensors+0x2a>
    else
        data = BIT_SLEEP;
 800893e:	2340      	movs	r3, #64	; 0x40
 8008940:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 8008942:	4b42      	ldr	r3, [pc, #264]	; (8008a4c <mpu_set_sensors+0x134>)
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	b29b      	uxth	r3, r3
 800894a:	005b      	lsls	r3, r3, #1
 800894c:	b299      	uxth	r1, r3
 800894e:	4b3f      	ldr	r3, [pc, #252]	; (8008a4c <mpu_set_sensors+0x134>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	7d5b      	ldrb	r3, [r3, #21]
 8008954:	b29a      	uxth	r2, r3
 8008956:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800895a:	9302      	str	r3, [sp, #8]
 800895c:	2301      	movs	r3, #1
 800895e:	9301      	str	r3, [sp, #4]
 8008960:	f107 030f 	add.w	r3, r7, #15
 8008964:	9300      	str	r3, [sp, #0]
 8008966:	2301      	movs	r3, #1
 8008968:	4839      	ldr	r0, [pc, #228]	; (8008a50 <mpu_set_sensors+0x138>)
 800896a:	f7fc feed 	bl	8005748 <HAL_I2C_Mem_Write>
 800896e:	4603      	mov	r3, r0
 8008970:	2b00      	cmp	r3, #0
 8008972:	d005      	beq.n	8008980 <mpu_set_sensors+0x68>
        st.chip_cfg.sensors = 0;
 8008974:	4b35      	ldr	r3, [pc, #212]	; (8008a4c <mpu_set_sensors+0x134>)
 8008976:	2200      	movs	r2, #0
 8008978:	729a      	strb	r2, [r3, #10]
        return -1;
 800897a:	f04f 33ff 	mov.w	r3, #4294967295
 800897e:	e061      	b.n	8008a44 <mpu_set_sensors+0x12c>
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 8008980:	7bfb      	ldrb	r3, [r7, #15]
 8008982:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008986:	b2da      	uxtb	r2, r3
 8008988:	4b30      	ldr	r3, [pc, #192]	; (8008a4c <mpu_set_sensors+0x134>)
 800898a:	731a      	strb	r2, [r3, #12]

    data = 0;
 800898c:	2300      	movs	r3, #0
 800898e:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_X_GYRO))
 8008990:	79fb      	ldrb	r3, [r7, #7]
 8008992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008996:	2b00      	cmp	r3, #0
 8008998:	d104      	bne.n	80089a4 <mpu_set_sensors+0x8c>
        data |= BIT_STBY_XG;
 800899a:	7bfb      	ldrb	r3, [r7, #15]
 800899c:	f043 0304 	orr.w	r3, r3, #4
 80089a0:	b2db      	uxtb	r3, r3
 80089a2:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Y_GYRO))
 80089a4:	79fb      	ldrb	r3, [r7, #7]
 80089a6:	f003 0320 	and.w	r3, r3, #32
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d104      	bne.n	80089b8 <mpu_set_sensors+0xa0>
        data |= BIT_STBY_YG;
 80089ae:	7bfb      	ldrb	r3, [r7, #15]
 80089b0:	f043 0302 	orr.w	r3, r3, #2
 80089b4:	b2db      	uxtb	r3, r3
 80089b6:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Z_GYRO))
 80089b8:	79fb      	ldrb	r3, [r7, #7]
 80089ba:	f003 0310 	and.w	r3, r3, #16
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d104      	bne.n	80089cc <mpu_set_sensors+0xb4>
        data |= BIT_STBY_ZG;
 80089c2:	7bfb      	ldrb	r3, [r7, #15]
 80089c4:	f043 0301 	orr.w	r3, r3, #1
 80089c8:	b2db      	uxtb	r3, r3
 80089ca:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_XYZ_ACCEL))
 80089cc:	79fb      	ldrb	r3, [r7, #7]
 80089ce:	f003 0308 	and.w	r3, r3, #8
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d104      	bne.n	80089e0 <mpu_set_sensors+0xc8>
        data |= BIT_STBY_XYZA;
 80089d6:	7bfb      	ldrb	r3, [r7, #15]
 80089d8:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 80089e0:	4b1a      	ldr	r3, [pc, #104]	; (8008a4c <mpu_set_sensors+0x134>)
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	781b      	ldrb	r3, [r3, #0]
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	005b      	lsls	r3, r3, #1
 80089ea:	b299      	uxth	r1, r3
 80089ec:	4b17      	ldr	r3, [pc, #92]	; (8008a4c <mpu_set_sensors+0x134>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	7d9b      	ldrb	r3, [r3, #22]
 80089f2:	b29a      	uxth	r2, r3
 80089f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80089f8:	9302      	str	r3, [sp, #8]
 80089fa:	2301      	movs	r3, #1
 80089fc:	9301      	str	r3, [sp, #4]
 80089fe:	f107 030f 	add.w	r3, r7, #15
 8008a02:	9300      	str	r3, [sp, #0]
 8008a04:	2301      	movs	r3, #1
 8008a06:	4812      	ldr	r0, [pc, #72]	; (8008a50 <mpu_set_sensors+0x138>)
 8008a08:	f7fc fe9e 	bl	8005748 <HAL_I2C_Mem_Write>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d005      	beq.n	8008a1e <mpu_set_sensors+0x106>
        st.chip_cfg.sensors = 0;
 8008a12:	4b0e      	ldr	r3, [pc, #56]	; (8008a4c <mpu_set_sensors+0x134>)
 8008a14:	2200      	movs	r2, #0
 8008a16:	729a      	strb	r2, [r3, #10]
        return -1;
 8008a18:	f04f 33ff 	mov.w	r3, #4294967295
 8008a1c:	e012      	b.n	8008a44 <mpu_set_sensors+0x12c>
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
 8008a1e:	79fb      	ldrb	r3, [r7, #7]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d005      	beq.n	8008a30 <mpu_set_sensors+0x118>
 8008a24:	79fb      	ldrb	r3, [r7, #7]
 8008a26:	2b08      	cmp	r3, #8
 8008a28:	d002      	beq.n	8008a30 <mpu_set_sensors+0x118>
        /* Latched interrupts only used in LP accel mode. */
        mpu_set_int_latched(0);
 8008a2a:	2000      	movs	r0, #0
 8008a2c:	f000 f9bc 	bl	8008da8 <mpu_set_int_latched>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
#endif
#endif

    st.chip_cfg.sensors = sensors;
 8008a30:	4a06      	ldr	r2, [pc, #24]	; (8008a4c <mpu_set_sensors+0x134>)
 8008a32:	79fb      	ldrb	r3, [r7, #7]
 8008a34:	7293      	strb	r3, [r2, #10]
    st.chip_cfg.lp_accel_mode = 0;
 8008a36:	4b05      	ldr	r3, [pc, #20]	; (8008a4c <mpu_set_sensors+0x134>)
 8008a38:	2200      	movs	r2, #0
 8008a3a:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
 8008a3c:	2032      	movs	r0, #50	; 0x32
 8008a3e:	f7fc f9f3 	bl	8004e28 <HAL_Delay>
    return 0;
 8008a42:	2300      	movs	r3, #0
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3710      	adds	r7, #16
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}
 8008a4c:	2000001c 	.word	0x2000001c
 8008a50:	20000b20 	.word	0x20000b20

08008a54 <mpu_read_fifo_stream>:
 *  @param[in]  data    FIFO packet.
 *  @param[in]  more    Number of remaining packets.
 */
int mpu_read_fifo_stream(unsigned short length, unsigned char *data,
    unsigned char *more)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b08a      	sub	sp, #40	; 0x28
 8008a58:	af04      	add	r7, sp, #16
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	60b9      	str	r1, [r7, #8]
 8008a5e:	607a      	str	r2, [r7, #4]
 8008a60:	81fb      	strh	r3, [r7, #14]
    unsigned char tmp[2];
    unsigned short fifo_count;
    if (!st.chip_cfg.dmp_on)
 8008a62:	4b4a      	ldr	r3, [pc, #296]	; (8008b8c <mpu_read_fifo_stream+0x138>)
 8008a64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d102      	bne.n	8008a72 <mpu_read_fifo_stream+0x1e>
        return -1;
 8008a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8008a70:	e088      	b.n	8008b84 <mpu_read_fifo_stream+0x130>
    if (!st.chip_cfg.sensors)
 8008a72:	4b46      	ldr	r3, [pc, #280]	; (8008b8c <mpu_read_fifo_stream+0x138>)
 8008a74:	7a9b      	ldrb	r3, [r3, #10]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d102      	bne.n	8008a80 <mpu_read_fifo_stream+0x2c>
        return -1;
 8008a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8008a7e:	e081      	b.n	8008b84 <mpu_read_fifo_stream+0x130>

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp))
 8008a80:	4b42      	ldr	r3, [pc, #264]	; (8008b8c <mpu_read_fifo_stream+0x138>)
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	781b      	ldrb	r3, [r3, #0]
 8008a86:	b29b      	uxth	r3, r3
 8008a88:	005b      	lsls	r3, r3, #1
 8008a8a:	b299      	uxth	r1, r3
 8008a8c:	4b3f      	ldr	r3, [pc, #252]	; (8008b8c <mpu_read_fifo_stream+0x138>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	7b1b      	ldrb	r3, [r3, #12]
 8008a92:	b29a      	uxth	r2, r3
 8008a94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008a98:	9302      	str	r3, [sp, #8]
 8008a9a:	2302      	movs	r3, #2
 8008a9c:	9301      	str	r3, [sp, #4]
 8008a9e:	f107 0314 	add.w	r3, r7, #20
 8008aa2:	9300      	str	r3, [sp, #0]
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	483a      	ldr	r0, [pc, #232]	; (8008b90 <mpu_read_fifo_stream+0x13c>)
 8008aa8:	f7fc ff48 	bl	800593c <HAL_I2C_Mem_Read>
 8008aac:	4603      	mov	r3, r0
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d002      	beq.n	8008ab8 <mpu_read_fifo_stream+0x64>
        return -1;
 8008ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8008ab6:	e065      	b.n	8008b84 <mpu_read_fifo_stream+0x130>
    fifo_count = (tmp[0] << 8) | tmp[1];
 8008ab8:	7d3b      	ldrb	r3, [r7, #20]
 8008aba:	021b      	lsls	r3, r3, #8
 8008abc:	b21a      	sxth	r2, r3
 8008abe:	7d7b      	ldrb	r3, [r7, #21]
 8008ac0:	b21b      	sxth	r3, r3
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	b21b      	sxth	r3, r3
 8008ac6:	82fb      	strh	r3, [r7, #22]
    if (fifo_count < length) {
 8008ac8:	8afa      	ldrh	r2, [r7, #22]
 8008aca:	89fb      	ldrh	r3, [r7, #14]
 8008acc:	429a      	cmp	r2, r3
 8008ace:	d205      	bcs.n	8008adc <mpu_read_fifo_stream+0x88>
        more[0] = 0;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	701a      	strb	r2, [r3, #0]
        return -1;
 8008ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8008ada:	e053      	b.n	8008b84 <mpu_read_fifo_stream+0x130>
    }
    if (fifo_count > (st.hw->max_fifo >> 1)) {
 8008adc:	4b2b      	ldr	r3, [pc, #172]	; (8008b8c <mpu_read_fifo_stream+0x138>)
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	885b      	ldrh	r3, [r3, #2]
 8008ae2:	085b      	lsrs	r3, r3, #1
 8008ae4:	b29b      	uxth	r3, r3
 8008ae6:	8afa      	ldrh	r2, [r7, #22]
 8008ae8:	429a      	cmp	r2, r3
 8008aea:	d925      	bls.n	8008b38 <mpu_read_fifo_stream+0xe4>
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, tmp))
 8008aec:	4b27      	ldr	r3, [pc, #156]	; (8008b8c <mpu_read_fifo_stream+0x138>)
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	781b      	ldrb	r3, [r3, #0]
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	005b      	lsls	r3, r3, #1
 8008af6:	b299      	uxth	r1, r3
 8008af8:	4b24      	ldr	r3, [pc, #144]	; (8008b8c <mpu_read_fifo_stream+0x138>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	7cdb      	ldrb	r3, [r3, #19]
 8008afe:	b29a      	uxth	r2, r3
 8008b00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008b04:	9302      	str	r3, [sp, #8]
 8008b06:	2301      	movs	r3, #1
 8008b08:	9301      	str	r3, [sp, #4]
 8008b0a:	f107 0314 	add.w	r3, r7, #20
 8008b0e:	9300      	str	r3, [sp, #0]
 8008b10:	2301      	movs	r3, #1
 8008b12:	481f      	ldr	r0, [pc, #124]	; (8008b90 <mpu_read_fifo_stream+0x13c>)
 8008b14:	f7fc ff12 	bl	800593c <HAL_I2C_Mem_Read>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d002      	beq.n	8008b24 <mpu_read_fifo_stream+0xd0>
            return -1;
 8008b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8008b22:	e02f      	b.n	8008b84 <mpu_read_fifo_stream+0x130>
        if (tmp[0] & BIT_FIFO_OVERFLOW) {
 8008b24:	7d3b      	ldrb	r3, [r7, #20]
 8008b26:	f003 0310 	and.w	r3, r3, #16
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d004      	beq.n	8008b38 <mpu_read_fifo_stream+0xe4>
            mpu_reset_fifo();
 8008b2e:	f7ff fa29 	bl	8007f84 <mpu_reset_fifo>
            return -2;
 8008b32:	f06f 0301 	mvn.w	r3, #1
 8008b36:	e025      	b.n	8008b84 <mpu_read_fifo_stream+0x130>
        }
    }

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data))
 8008b38:	4b14      	ldr	r3, [pc, #80]	; (8008b8c <mpu_read_fifo_stream+0x138>)
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	781b      	ldrb	r3, [r3, #0]
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	005b      	lsls	r3, r3, #1
 8008b42:	b299      	uxth	r1, r3
 8008b44:	4b11      	ldr	r3, [pc, #68]	; (8008b8c <mpu_read_fifo_stream+0x138>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	7b5b      	ldrb	r3, [r3, #13]
 8008b4a:	b29a      	uxth	r2, r3
 8008b4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008b50:	9302      	str	r3, [sp, #8]
 8008b52:	89fb      	ldrh	r3, [r7, #14]
 8008b54:	9301      	str	r3, [sp, #4]
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	9300      	str	r3, [sp, #0]
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	480c      	ldr	r0, [pc, #48]	; (8008b90 <mpu_read_fifo_stream+0x13c>)
 8008b5e:	f7fc feed 	bl	800593c <HAL_I2C_Mem_Read>
 8008b62:	4603      	mov	r3, r0
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d002      	beq.n	8008b6e <mpu_read_fifo_stream+0x11a>
        return -1;
 8008b68:	f04f 33ff 	mov.w	r3, #4294967295
 8008b6c:	e00a      	b.n	8008b84 <mpu_read_fifo_stream+0x130>
    more[0] = fifo_count / length - 1;
 8008b6e:	8afa      	ldrh	r2, [r7, #22]
 8008b70:	89fb      	ldrh	r3, [r7, #14]
 8008b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b76:	b29b      	uxth	r3, r3
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	3b01      	subs	r3, #1
 8008b7c:	b2da      	uxtb	r2, r3
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	701a      	strb	r2, [r3, #0]
    return 0;
 8008b82:	2300      	movs	r3, #0
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3718      	adds	r7, #24
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}
 8008b8c:	2000001c 	.word	0x2000001c
 8008b90:	20000b20 	.word	0x20000b20

08008b94 <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b088      	sub	sp, #32
 8008b98:	af04      	add	r7, sp, #16
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
 8008b9e:	4b80      	ldr	r3, [pc, #512]	; (8008da0 <mpu_set_bypass+0x20c>)
 8008ba0:	7c9b      	ldrb	r3, [r3, #18]
 8008ba2:	79fa      	ldrb	r2, [r7, #7]
 8008ba4:	429a      	cmp	r2, r3
 8008ba6:	d101      	bne.n	8008bac <mpu_set_bypass+0x18>
        return 0;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	e0f4      	b.n	8008d96 <mpu_set_bypass+0x202>

    if (bypass_on) {
 8008bac:	79fb      	ldrb	r3, [r7, #7]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d071      	beq.n	8008c96 <mpu_set_bypass+0x102>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8008bb2:	4b7b      	ldr	r3, [pc, #492]	; (8008da0 <mpu_set_bypass+0x20c>)
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	005b      	lsls	r3, r3, #1
 8008bbc:	b299      	uxth	r1, r3
 8008bbe:	4b78      	ldr	r3, [pc, #480]	; (8008da0 <mpu_set_bypass+0x20c>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	791b      	ldrb	r3, [r3, #4]
 8008bc4:	b29a      	uxth	r2, r3
 8008bc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008bca:	9302      	str	r3, [sp, #8]
 8008bcc:	2301      	movs	r3, #1
 8008bce:	9301      	str	r3, [sp, #4]
 8008bd0:	f107 030f 	add.w	r3, r7, #15
 8008bd4:	9300      	str	r3, [sp, #0]
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	4872      	ldr	r0, [pc, #456]	; (8008da4 <mpu_set_bypass+0x210>)
 8008bda:	f7fc feaf 	bl	800593c <HAL_I2C_Mem_Read>
 8008bde:	4603      	mov	r3, r0
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d002      	beq.n	8008bea <mpu_set_bypass+0x56>
            return -1;
 8008be4:	f04f 33ff 	mov.w	r3, #4294967295
 8008be8:	e0d5      	b.n	8008d96 <mpu_set_bypass+0x202>
        tmp &= ~BIT_AUX_IF_EN;
 8008bea:	7bfb      	ldrb	r3, [r7, #15]
 8008bec:	f023 0320 	bic.w	r3, r3, #32
 8008bf0:	b2db      	uxtb	r3, r3
 8008bf2:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8008bf4:	4b6a      	ldr	r3, [pc, #424]	; (8008da0 <mpu_set_bypass+0x20c>)
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	005b      	lsls	r3, r3, #1
 8008bfe:	b299      	uxth	r1, r3
 8008c00:	4b67      	ldr	r3, [pc, #412]	; (8008da0 <mpu_set_bypass+0x20c>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	791b      	ldrb	r3, [r3, #4]
 8008c06:	b29a      	uxth	r2, r3
 8008c08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008c0c:	9302      	str	r3, [sp, #8]
 8008c0e:	2301      	movs	r3, #1
 8008c10:	9301      	str	r3, [sp, #4]
 8008c12:	f107 030f 	add.w	r3, r7, #15
 8008c16:	9300      	str	r3, [sp, #0]
 8008c18:	2301      	movs	r3, #1
 8008c1a:	4862      	ldr	r0, [pc, #392]	; (8008da4 <mpu_set_bypass+0x210>)
 8008c1c:	f7fc fd94 	bl	8005748 <HAL_I2C_Mem_Write>
 8008c20:	4603      	mov	r3, r0
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d002      	beq.n	8008c2c <mpu_set_bypass+0x98>
            return -1;
 8008c26:	f04f 33ff 	mov.w	r3, #4294967295
 8008c2a:	e0b4      	b.n	8008d96 <mpu_set_bypass+0x202>
        delay_ms(3);
 8008c2c:	2003      	movs	r0, #3
 8008c2e:	f7fc f8fb 	bl	8004e28 <HAL_Delay>
        tmp = BIT_BYPASS_EN;
 8008c32:	2302      	movs	r3, #2
 8008c34:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.active_low_int)
 8008c36:	4b5a      	ldr	r3, [pc, #360]	; (8008da0 <mpu_set_bypass+0x20c>)
 8008c38:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d004      	beq.n	8008c4a <mpu_set_bypass+0xb6>
            tmp |= BIT_ACTL;
 8008c40:	7bfb      	ldrb	r3, [r7, #15]
 8008c42:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008c46:	b2db      	uxtb	r3, r3
 8008c48:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 8008c4a:	4b55      	ldr	r3, [pc, #340]	; (8008da0 <mpu_set_bypass+0x20c>)
 8008c4c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d004      	beq.n	8008c5e <mpu_set_bypass+0xca>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8008c54:	7bfb      	ldrb	r3, [r7, #15]
 8008c56:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8008c5a:	b2db      	uxtb	r3, r3
 8008c5c:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8008c5e:	4b50      	ldr	r3, [pc, #320]	; (8008da0 <mpu_set_bypass+0x20c>)
 8008c60:	685b      	ldr	r3, [r3, #4]
 8008c62:	781b      	ldrb	r3, [r3, #0]
 8008c64:	b29b      	uxth	r3, r3
 8008c66:	005b      	lsls	r3, r3, #1
 8008c68:	b299      	uxth	r1, r3
 8008c6a:	4b4d      	ldr	r3, [pc, #308]	; (8008da0 <mpu_set_bypass+0x20c>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	7ddb      	ldrb	r3, [r3, #23]
 8008c70:	b29a      	uxth	r2, r3
 8008c72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008c76:	9302      	str	r3, [sp, #8]
 8008c78:	2301      	movs	r3, #1
 8008c7a:	9301      	str	r3, [sp, #4]
 8008c7c:	f107 030f 	add.w	r3, r7, #15
 8008c80:	9300      	str	r3, [sp, #0]
 8008c82:	2301      	movs	r3, #1
 8008c84:	4847      	ldr	r0, [pc, #284]	; (8008da4 <mpu_set_bypass+0x210>)
 8008c86:	f7fc fd5f 	bl	8005748 <HAL_I2C_Mem_Write>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d07e      	beq.n	8008d8e <mpu_set_bypass+0x1fa>
            return -1;
 8008c90:	f04f 33ff 	mov.w	r3, #4294967295
 8008c94:	e07f      	b.n	8008d96 <mpu_set_bypass+0x202>
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8008c96:	4b42      	ldr	r3, [pc, #264]	; (8008da0 <mpu_set_bypass+0x20c>)
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	b29b      	uxth	r3, r3
 8008c9e:	005b      	lsls	r3, r3, #1
 8008ca0:	b299      	uxth	r1, r3
 8008ca2:	4b3f      	ldr	r3, [pc, #252]	; (8008da0 <mpu_set_bypass+0x20c>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	791b      	ldrb	r3, [r3, #4]
 8008ca8:	b29a      	uxth	r2, r3
 8008caa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008cae:	9302      	str	r3, [sp, #8]
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	9301      	str	r3, [sp, #4]
 8008cb4:	f107 030f 	add.w	r3, r7, #15
 8008cb8:	9300      	str	r3, [sp, #0]
 8008cba:	2301      	movs	r3, #1
 8008cbc:	4839      	ldr	r0, [pc, #228]	; (8008da4 <mpu_set_bypass+0x210>)
 8008cbe:	f7fc fe3d 	bl	800593c <HAL_I2C_Mem_Read>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d002      	beq.n	8008cce <mpu_set_bypass+0x13a>
            return -1;
 8008cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8008ccc:	e063      	b.n	8008d96 <mpu_set_bypass+0x202>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 8008cce:	4b34      	ldr	r3, [pc, #208]	; (8008da0 <mpu_set_bypass+0x20c>)
 8008cd0:	7a9b      	ldrb	r3, [r3, #10]
 8008cd2:	f003 0301 	and.w	r3, r3, #1
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d005      	beq.n	8008ce6 <mpu_set_bypass+0x152>
            tmp |= BIT_AUX_IF_EN;
 8008cda:	7bfb      	ldrb	r3, [r7, #15]
 8008cdc:	f043 0320 	orr.w	r3, r3, #32
 8008ce0:	b2db      	uxtb	r3, r3
 8008ce2:	73fb      	strb	r3, [r7, #15]
 8008ce4:	e004      	b.n	8008cf0 <mpu_set_bypass+0x15c>
        else
            tmp &= ~BIT_AUX_IF_EN;
 8008ce6:	7bfb      	ldrb	r3, [r7, #15]
 8008ce8:	f023 0320 	bic.w	r3, r3, #32
 8008cec:	b2db      	uxtb	r3, r3
 8008cee:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8008cf0:	4b2b      	ldr	r3, [pc, #172]	; (8008da0 <mpu_set_bypass+0x20c>)
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	781b      	ldrb	r3, [r3, #0]
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	005b      	lsls	r3, r3, #1
 8008cfa:	b299      	uxth	r1, r3
 8008cfc:	4b28      	ldr	r3, [pc, #160]	; (8008da0 <mpu_set_bypass+0x20c>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	791b      	ldrb	r3, [r3, #4]
 8008d02:	b29a      	uxth	r2, r3
 8008d04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008d08:	9302      	str	r3, [sp, #8]
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	9301      	str	r3, [sp, #4]
 8008d0e:	f107 030f 	add.w	r3, r7, #15
 8008d12:	9300      	str	r3, [sp, #0]
 8008d14:	2301      	movs	r3, #1
 8008d16:	4823      	ldr	r0, [pc, #140]	; (8008da4 <mpu_set_bypass+0x210>)
 8008d18:	f7fc fd16 	bl	8005748 <HAL_I2C_Mem_Write>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d002      	beq.n	8008d28 <mpu_set_bypass+0x194>
            return -1;
 8008d22:	f04f 33ff 	mov.w	r3, #4294967295
 8008d26:	e036      	b.n	8008d96 <mpu_set_bypass+0x202>
        delay_ms(3);
 8008d28:	2003      	movs	r0, #3
 8008d2a:	f7fc f87d 	bl	8004e28 <HAL_Delay>
        if (st.chip_cfg.active_low_int)
 8008d2e:	4b1c      	ldr	r3, [pc, #112]	; (8008da0 <mpu_set_bypass+0x20c>)
 8008d30:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d002      	beq.n	8008d3e <mpu_set_bypass+0x1aa>
            tmp = BIT_ACTL;
 8008d38:	2380      	movs	r3, #128	; 0x80
 8008d3a:	73fb      	strb	r3, [r7, #15]
 8008d3c:	e001      	b.n	8008d42 <mpu_set_bypass+0x1ae>
        else
            tmp = 0;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 8008d42:	4b17      	ldr	r3, [pc, #92]	; (8008da0 <mpu_set_bypass+0x20c>)
 8008d44:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d004      	beq.n	8008d56 <mpu_set_bypass+0x1c2>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8008d4c:	7bfb      	ldrb	r3, [r7, #15]
 8008d4e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8008d52:	b2db      	uxtb	r3, r3
 8008d54:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8008d56:	4b12      	ldr	r3, [pc, #72]	; (8008da0 <mpu_set_bypass+0x20c>)
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	781b      	ldrb	r3, [r3, #0]
 8008d5c:	b29b      	uxth	r3, r3
 8008d5e:	005b      	lsls	r3, r3, #1
 8008d60:	b299      	uxth	r1, r3
 8008d62:	4b0f      	ldr	r3, [pc, #60]	; (8008da0 <mpu_set_bypass+0x20c>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	7ddb      	ldrb	r3, [r3, #23]
 8008d68:	b29a      	uxth	r2, r3
 8008d6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008d6e:	9302      	str	r3, [sp, #8]
 8008d70:	2301      	movs	r3, #1
 8008d72:	9301      	str	r3, [sp, #4]
 8008d74:	f107 030f 	add.w	r3, r7, #15
 8008d78:	9300      	str	r3, [sp, #0]
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	4809      	ldr	r0, [pc, #36]	; (8008da4 <mpu_set_bypass+0x210>)
 8008d7e:	f7fc fce3 	bl	8005748 <HAL_I2C_Mem_Write>
 8008d82:	4603      	mov	r3, r0
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d002      	beq.n	8008d8e <mpu_set_bypass+0x1fa>
            return -1;
 8008d88:	f04f 33ff 	mov.w	r3, #4294967295
 8008d8c:	e003      	b.n	8008d96 <mpu_set_bypass+0x202>
    }
    st.chip_cfg.bypass_mode = bypass_on;
 8008d8e:	4a04      	ldr	r2, [pc, #16]	; (8008da0 <mpu_set_bypass+0x20c>)
 8008d90:	79fb      	ldrb	r3, [r7, #7]
 8008d92:	7493      	strb	r3, [r2, #18]
    return 0;
 8008d94:	2300      	movs	r3, #0
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3710      	adds	r7, #16
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}
 8008d9e:	bf00      	nop
 8008da0:	2000001c 	.word	0x2000001c
 8008da4:	20000b20 	.word	0x20000b20

08008da8 <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b088      	sub	sp, #32
 8008dac:	af04      	add	r7, sp, #16
 8008dae:	4603      	mov	r3, r0
 8008db0:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
 8008db2:	4b24      	ldr	r3, [pc, #144]	; (8008e44 <mpu_set_int_latched+0x9c>)
 8008db4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008db8:	79fa      	ldrb	r2, [r7, #7]
 8008dba:	429a      	cmp	r2, r3
 8008dbc:	d101      	bne.n	8008dc2 <mpu_set_int_latched+0x1a>
        return 0;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	e03b      	b.n	8008e3a <mpu_set_int_latched+0x92>

    if (enable)
 8008dc2:	79fb      	ldrb	r3, [r7, #7]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d002      	beq.n	8008dce <mpu_set_int_latched+0x26>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8008dc8:	2330      	movs	r3, #48	; 0x30
 8008dca:	73fb      	strb	r3, [r7, #15]
 8008dcc:	e001      	b.n	8008dd2 <mpu_set_int_latched+0x2a>
    else
        tmp = 0;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.bypass_mode)
 8008dd2:	4b1c      	ldr	r3, [pc, #112]	; (8008e44 <mpu_set_int_latched+0x9c>)
 8008dd4:	7c9b      	ldrb	r3, [r3, #18]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d004      	beq.n	8008de4 <mpu_set_int_latched+0x3c>
        tmp |= BIT_BYPASS_EN;
 8008dda:	7bfb      	ldrb	r3, [r7, #15]
 8008ddc:	f043 0302 	orr.w	r3, r3, #2
 8008de0:	b2db      	uxtb	r3, r3
 8008de2:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.active_low_int)
 8008de4:	4b17      	ldr	r3, [pc, #92]	; (8008e44 <mpu_set_int_latched+0x9c>)
 8008de6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d004      	beq.n	8008df8 <mpu_set_int_latched+0x50>
        tmp |= BIT_ACTL;
 8008dee:	7bfb      	ldrb	r3, [r7, #15]
 8008df0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008df4:	b2db      	uxtb	r3, r3
 8008df6:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8008df8:	4b12      	ldr	r3, [pc, #72]	; (8008e44 <mpu_set_int_latched+0x9c>)
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	781b      	ldrb	r3, [r3, #0]
 8008dfe:	b29b      	uxth	r3, r3
 8008e00:	005b      	lsls	r3, r3, #1
 8008e02:	b299      	uxth	r1, r3
 8008e04:	4b0f      	ldr	r3, [pc, #60]	; (8008e44 <mpu_set_int_latched+0x9c>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	7ddb      	ldrb	r3, [r3, #23]
 8008e0a:	b29a      	uxth	r2, r3
 8008e0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008e10:	9302      	str	r3, [sp, #8]
 8008e12:	2301      	movs	r3, #1
 8008e14:	9301      	str	r3, [sp, #4]
 8008e16:	f107 030f 	add.w	r3, r7, #15
 8008e1a:	9300      	str	r3, [sp, #0]
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	480a      	ldr	r0, [pc, #40]	; (8008e48 <mpu_set_int_latched+0xa0>)
 8008e20:	f7fc fc92 	bl	8005748 <HAL_I2C_Mem_Write>
 8008e24:	4603      	mov	r3, r0
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d002      	beq.n	8008e30 <mpu_set_int_latched+0x88>
        return -1;
 8008e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8008e2e:	e004      	b.n	8008e3a <mpu_set_int_latched+0x92>
    st.chip_cfg.latched_int = enable;
 8008e30:	4a04      	ldr	r2, [pc, #16]	; (8008e44 <mpu_set_int_latched+0x9c>)
 8008e32:	79fb      	ldrb	r3, [r7, #7]
 8008e34:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
    return 0;
 8008e38:	2300      	movs	r3, #0
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3710      	adds	r7, #16
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}
 8008e42:	bf00      	nop
 8008e44:	2000001c 	.word	0x2000001c
 8008e48:	20000b20 	.word	0x20000b20

08008e4c <get_accel_prod_shift>:

#ifdef MPU6050
static int get_accel_prod_shift(float *st_shift)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b08a      	sub	sp, #40	; 0x28
 8008e50:	af04      	add	r7, sp, #16
 8008e52:	6078      	str	r0, [r7, #4]
    unsigned char tmp[4], shift_code[3], ii;

    if (i2c_read(st.hw->addr, 0x0D, 4, tmp))
 8008e54:	4b47      	ldr	r3, [pc, #284]	; (8008f74 <get_accel_prod_shift+0x128>)
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	781b      	ldrb	r3, [r3, #0]
 8008e5a:	b29b      	uxth	r3, r3
 8008e5c:	005b      	lsls	r3, r3, #1
 8008e5e:	b299      	uxth	r1, r3
 8008e60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008e64:	9302      	str	r3, [sp, #8]
 8008e66:	2304      	movs	r3, #4
 8008e68:	9301      	str	r3, [sp, #4]
 8008e6a:	f107 0310 	add.w	r3, r7, #16
 8008e6e:	9300      	str	r3, [sp, #0]
 8008e70:	2301      	movs	r3, #1
 8008e72:	220d      	movs	r2, #13
 8008e74:	4840      	ldr	r0, [pc, #256]	; (8008f78 <get_accel_prod_shift+0x12c>)
 8008e76:	f7fc fd61 	bl	800593c <HAL_I2C_Mem_Read>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d001      	beq.n	8008e84 <get_accel_prod_shift+0x38>
        return 0x07;
 8008e80:	2307      	movs	r3, #7
 8008e82:	e073      	b.n	8008f6c <get_accel_prod_shift+0x120>

    shift_code[0] = ((tmp[0] & 0xE0) >> 3) | ((tmp[3] & 0x30) >> 4);
 8008e84:	7c3b      	ldrb	r3, [r7, #16]
 8008e86:	10db      	asrs	r3, r3, #3
 8008e88:	b25b      	sxtb	r3, r3
 8008e8a:	f003 031c 	and.w	r3, r3, #28
 8008e8e:	b25a      	sxtb	r2, r3
 8008e90:	7cfb      	ldrb	r3, [r7, #19]
 8008e92:	111b      	asrs	r3, r3, #4
 8008e94:	b25b      	sxtb	r3, r3
 8008e96:	f003 0303 	and.w	r3, r3, #3
 8008e9a:	b25b      	sxtb	r3, r3
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	b25b      	sxtb	r3, r3
 8008ea0:	b2db      	uxtb	r3, r3
 8008ea2:	733b      	strb	r3, [r7, #12]
    shift_code[1] = ((tmp[1] & 0xE0) >> 3) | ((tmp[3] & 0x0C) >> 2);
 8008ea4:	7c7b      	ldrb	r3, [r7, #17]
 8008ea6:	10db      	asrs	r3, r3, #3
 8008ea8:	b25b      	sxtb	r3, r3
 8008eaa:	f003 031c 	and.w	r3, r3, #28
 8008eae:	b25a      	sxtb	r2, r3
 8008eb0:	7cfb      	ldrb	r3, [r7, #19]
 8008eb2:	109b      	asrs	r3, r3, #2
 8008eb4:	b25b      	sxtb	r3, r3
 8008eb6:	f003 0303 	and.w	r3, r3, #3
 8008eba:	b25b      	sxtb	r3, r3
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	b25b      	sxtb	r3, r3
 8008ec0:	b2db      	uxtb	r3, r3
 8008ec2:	737b      	strb	r3, [r7, #13]
    shift_code[2] = ((tmp[2] & 0xE0) >> 3) | (tmp[3] & 0x03);
 8008ec4:	7cbb      	ldrb	r3, [r7, #18]
 8008ec6:	10db      	asrs	r3, r3, #3
 8008ec8:	b25b      	sxtb	r3, r3
 8008eca:	f003 031c 	and.w	r3, r3, #28
 8008ece:	b25a      	sxtb	r2, r3
 8008ed0:	7cfb      	ldrb	r3, [r7, #19]
 8008ed2:	b25b      	sxtb	r3, r3
 8008ed4:	f003 0303 	and.w	r3, r3, #3
 8008ed8:	b25b      	sxtb	r3, r3
 8008eda:	4313      	orrs	r3, r2
 8008edc:	b25b      	sxtb	r3, r3
 8008ede:	b2db      	uxtb	r3, r3
 8008ee0:	73bb      	strb	r3, [r7, #14]
    for (ii = 0; ii < 3; ii++) {
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	75fb      	strb	r3, [r7, #23]
 8008ee6:	e03d      	b.n	8008f64 <get_accel_prod_shift+0x118>
        if (!shift_code[ii]) {
 8008ee8:	7dfb      	ldrb	r3, [r7, #23]
 8008eea:	f107 0218 	add.w	r2, r7, #24
 8008eee:	4413      	add	r3, r2
 8008ef0:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d107      	bne.n	8008f08 <get_accel_prod_shift+0xbc>
            st_shift[ii] = 0.f;
 8008ef8:	7dfb      	ldrb	r3, [r7, #23]
 8008efa:	009b      	lsls	r3, r3, #2
 8008efc:	687a      	ldr	r2, [r7, #4]
 8008efe:	4413      	add	r3, r2
 8008f00:	f04f 0200 	mov.w	r2, #0
 8008f04:	601a      	str	r2, [r3, #0]
            continue;
 8008f06:	e02a      	b.n	8008f5e <get_accel_prod_shift+0x112>
        }
        /* Equivalent to..
         * st_shift[ii] = 0.34f * powf(0.92f/0.34f, (shift_code[ii]-1) / 30.f)
         */
        st_shift[ii] = 0.34f;
 8008f08:	7dfb      	ldrb	r3, [r7, #23]
 8008f0a:	009b      	lsls	r3, r3, #2
 8008f0c:	687a      	ldr	r2, [r7, #4]
 8008f0e:	4413      	add	r3, r2
 8008f10:	4a1a      	ldr	r2, [pc, #104]	; (8008f7c <get_accel_prod_shift+0x130>)
 8008f12:	601a      	str	r2, [r3, #0]
        while (--shift_code[ii])
 8008f14:	e00f      	b.n	8008f36 <get_accel_prod_shift+0xea>
            st_shift[ii] *= 1.034f;
 8008f16:	7dfb      	ldrb	r3, [r7, #23]
 8008f18:	009b      	lsls	r3, r3, #2
 8008f1a:	687a      	ldr	r2, [r7, #4]
 8008f1c:	4413      	add	r3, r2
 8008f1e:	edd3 7a00 	vldr	s15, [r3]
 8008f22:	7dfb      	ldrb	r3, [r7, #23]
 8008f24:	009b      	lsls	r3, r3, #2
 8008f26:	687a      	ldr	r2, [r7, #4]
 8008f28:	4413      	add	r3, r2
 8008f2a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8008f80 <get_accel_prod_shift+0x134>
 8008f2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008f32:	edc3 7a00 	vstr	s15, [r3]
        while (--shift_code[ii])
 8008f36:	7dfb      	ldrb	r3, [r7, #23]
 8008f38:	f107 0218 	add.w	r2, r7, #24
 8008f3c:	441a      	add	r2, r3
 8008f3e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008f42:	3a01      	subs	r2, #1
 8008f44:	b2d1      	uxtb	r1, r2
 8008f46:	f107 0218 	add.w	r2, r7, #24
 8008f4a:	441a      	add	r2, r3
 8008f4c:	f802 1c0c 	strb.w	r1, [r2, #-12]
 8008f50:	f107 0218 	add.w	r2, r7, #24
 8008f54:	4413      	add	r3, r2
 8008f56:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d1db      	bne.n	8008f16 <get_accel_prod_shift+0xca>
    for (ii = 0; ii < 3; ii++) {
 8008f5e:	7dfb      	ldrb	r3, [r7, #23]
 8008f60:	3301      	adds	r3, #1
 8008f62:	75fb      	strb	r3, [r7, #23]
 8008f64:	7dfb      	ldrb	r3, [r7, #23]
 8008f66:	2b02      	cmp	r3, #2
 8008f68:	d9be      	bls.n	8008ee8 <get_accel_prod_shift+0x9c>
    }
    return 0;
 8008f6a:	2300      	movs	r3, #0
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3718      	adds	r7, #24
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}
 8008f74:	2000001c 	.word	0x2000001c
 8008f78:	20000b20 	.word	0x20000b20
 8008f7c:	3eae147b 	.word	0x3eae147b
 8008f80:	3f845a1d 	.word	0x3f845a1d

08008f84 <accel_self_test>:

static int accel_self_test(long *bias_regular, long *bias_st)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b08a      	sub	sp, #40	; 0x28
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	6039      	str	r1, [r7, #0]
    int jj, result = 0;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	623b      	str	r3, [r7, #32]
    float st_shift[3], st_shift_cust, st_shift_var;

    get_accel_prod_shift(st_shift);
 8008f92:	f107 030c 	add.w	r3, r7, #12
 8008f96:	4618      	mov	r0, r3
 8008f98:	f7ff ff58 	bl	8008e4c <get_accel_prod_shift>
    for(jj = 0; jj < 3; jj++) {
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	627b      	str	r3, [r7, #36]	; 0x24
 8008fa0:	e065      	b.n	800906e <accel_self_test+0xea>
        st_shift_cust = labs(bias_regular[jj] - bias_st[jj]) / 65536.f;
 8008fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa4:	009b      	lsls	r3, r3, #2
 8008fa6:	687a      	ldr	r2, [r7, #4]
 8008fa8:	4413      	add	r3, r2
 8008faa:	681a      	ldr	r2, [r3, #0]
 8008fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fae:	009b      	lsls	r3, r3, #2
 8008fb0:	6839      	ldr	r1, [r7, #0]
 8008fb2:	440b      	add	r3, r1
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	1ad3      	subs	r3, r2, r3
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	bfb8      	it	lt
 8008fbc:	425b      	neglt	r3, r3
 8008fbe:	ee07 3a90 	vmov	s15, r3
 8008fc2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008fc6:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8009080 <accel_self_test+0xfc>
 8008fca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008fce:	edc7 7a07 	vstr	s15, [r7, #28]
        if (st_shift[jj]) {
 8008fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd4:	009b      	lsls	r3, r3, #2
 8008fd6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008fda:	4413      	add	r3, r2
 8008fdc:	3b1c      	subs	r3, #28
 8008fde:	edd3 7a00 	vldr	s15, [r3]
 8008fe2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fea:	d024      	beq.n	8009036 <accel_self_test+0xb2>
            st_shift_var = st_shift_cust / st_shift[jj] - 1.f;
 8008fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fee:	009b      	lsls	r3, r3, #2
 8008ff0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008ff4:	4413      	add	r3, r2
 8008ff6:	3b1c      	subs	r3, #28
 8008ff8:	ed93 7a00 	vldr	s14, [r3]
 8008ffc:	edd7 6a07 	vldr	s13, [r7, #28]
 8009000:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009004:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009008:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800900c:	edc7 7a06 	vstr	s15, [r7, #24]
            if (fabs(st_shift_var) > test.max_accel_var)
 8009010:	edd7 7a06 	vldr	s15, [r7, #24]
 8009014:	eef0 7ae7 	vabs.f32	s15, s15
 8009018:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8009084 <accel_self_test+0x100>
 800901c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009024:	dd20      	ble.n	8009068 <accel_self_test+0xe4>
                result |= 1 << jj;
 8009026:	2201      	movs	r2, #1
 8009028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800902a:	fa02 f303 	lsl.w	r3, r2, r3
 800902e:	6a3a      	ldr	r2, [r7, #32]
 8009030:	4313      	orrs	r3, r2
 8009032:	623b      	str	r3, [r7, #32]
 8009034:	e018      	b.n	8009068 <accel_self_test+0xe4>
        } else if ((st_shift_cust < test.min_g) ||
 8009036:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8009088 <accel_self_test+0x104>
 800903a:	edd7 7a07 	vldr	s15, [r7, #28]
 800903e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009046:	d408      	bmi.n	800905a <accel_self_test+0xd6>
            (st_shift_cust > test.max_g))
 8009048:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800908c <accel_self_test+0x108>
        } else if ((st_shift_cust < test.min_g) ||
 800904c:	edd7 7a07 	vldr	s15, [r7, #28]
 8009050:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009058:	dd06      	ble.n	8009068 <accel_self_test+0xe4>
            result |= 1 << jj;
 800905a:	2201      	movs	r2, #1
 800905c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905e:	fa02 f303 	lsl.w	r3, r2, r3
 8009062:	6a3a      	ldr	r2, [r7, #32]
 8009064:	4313      	orrs	r3, r2
 8009066:	623b      	str	r3, [r7, #32]
    for(jj = 0; jj < 3; jj++) {
 8009068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800906a:	3301      	adds	r3, #1
 800906c:	627b      	str	r3, [r7, #36]	; 0x24
 800906e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009070:	2b02      	cmp	r3, #2
 8009072:	dd96      	ble.n	8008fa2 <accel_self_test+0x1e>
    }

    return result;
 8009074:	6a3b      	ldr	r3, [r7, #32]
}
 8009076:	4618      	mov	r0, r3
 8009078:	3728      	adds	r7, #40	; 0x28
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}
 800907e:	bf00      	nop
 8009080:	47800000 	.word	0x47800000
 8009084:	3e0f5c29 	.word	0x3e0f5c29
 8009088:	3e99999a 	.word	0x3e99999a
 800908c:	3f733333 	.word	0x3f733333

08009090 <gyro_self_test>:

static int gyro_self_test(long *bias_regular, long *bias_st)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b08c      	sub	sp, #48	; 0x30
 8009094:	af04      	add	r7, sp, #16
 8009096:	6078      	str	r0, [r7, #4]
 8009098:	6039      	str	r1, [r7, #0]
    int jj, result = 0;
 800909a:	2300      	movs	r3, #0
 800909c:	61bb      	str	r3, [r7, #24]
    unsigned char tmp[3];
    float st_shift, st_shift_cust, st_shift_var;

    if (i2c_read(st.hw->addr, 0x0D, 3, tmp))
 800909e:	4b5a      	ldr	r3, [pc, #360]	; (8009208 <gyro_self_test+0x178>)
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	781b      	ldrb	r3, [r3, #0]
 80090a4:	b29b      	uxth	r3, r3
 80090a6:	005b      	lsls	r3, r3, #1
 80090a8:	b299      	uxth	r1, r3
 80090aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80090ae:	9302      	str	r3, [sp, #8]
 80090b0:	2303      	movs	r3, #3
 80090b2:	9301      	str	r3, [sp, #4]
 80090b4:	f107 0308 	add.w	r3, r7, #8
 80090b8:	9300      	str	r3, [sp, #0]
 80090ba:	2301      	movs	r3, #1
 80090bc:	220d      	movs	r2, #13
 80090be:	4853      	ldr	r0, [pc, #332]	; (800920c <gyro_self_test+0x17c>)
 80090c0:	f7fc fc3c 	bl	800593c <HAL_I2C_Mem_Read>
 80090c4:	4603      	mov	r3, r0
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d001      	beq.n	80090ce <gyro_self_test+0x3e>
        return 0x07;
 80090ca:	2307      	movs	r3, #7
 80090cc:	e097      	b.n	80091fe <gyro_self_test+0x16e>

    tmp[0] &= 0x1F;
 80090ce:	7a3b      	ldrb	r3, [r7, #8]
 80090d0:	f003 031f 	and.w	r3, r3, #31
 80090d4:	b2db      	uxtb	r3, r3
 80090d6:	723b      	strb	r3, [r7, #8]
    tmp[1] &= 0x1F;
 80090d8:	7a7b      	ldrb	r3, [r7, #9]
 80090da:	f003 031f 	and.w	r3, r3, #31
 80090de:	b2db      	uxtb	r3, r3
 80090e0:	727b      	strb	r3, [r7, #9]
    tmp[2] &= 0x1F;
 80090e2:	7abb      	ldrb	r3, [r7, #10]
 80090e4:	f003 031f 	and.w	r3, r3, #31
 80090e8:	b2db      	uxtb	r3, r3
 80090ea:	72bb      	strb	r3, [r7, #10]

    for (jj = 0; jj < 3; jj++) {
 80090ec:	2300      	movs	r3, #0
 80090ee:	61fb      	str	r3, [r7, #28]
 80090f0:	e080      	b.n	80091f4 <gyro_self_test+0x164>
        st_shift_cust = labs(bias_regular[jj] - bias_st[jj]) / 65536.f;
 80090f2:	69fb      	ldr	r3, [r7, #28]
 80090f4:	009b      	lsls	r3, r3, #2
 80090f6:	687a      	ldr	r2, [r7, #4]
 80090f8:	4413      	add	r3, r2
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	69fb      	ldr	r3, [r7, #28]
 80090fe:	009b      	lsls	r3, r3, #2
 8009100:	6839      	ldr	r1, [r7, #0]
 8009102:	440b      	add	r3, r1
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	1ad3      	subs	r3, r2, r3
 8009108:	2b00      	cmp	r3, #0
 800910a:	bfb8      	it	lt
 800910c:	425b      	neglt	r3, r3
 800910e:	ee07 3a90 	vmov	s15, r3
 8009112:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009116:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8009210 <gyro_self_test+0x180>
 800911a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800911e:	edc7 7a04 	vstr	s15, [r7, #16]
        if (tmp[jj]) {
 8009122:	f107 0208 	add.w	r2, r7, #8
 8009126:	69fb      	ldr	r3, [r7, #28]
 8009128:	4413      	add	r3, r2
 800912a:	781b      	ldrb	r3, [r3, #0]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d045      	beq.n	80091bc <gyro_self_test+0x12c>
            st_shift = 3275.f / test.gyro_sens;
 8009130:	eddf 7a38 	vldr	s15, [pc, #224]	; 8009214 <gyro_self_test+0x184>
 8009134:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009138:	eddf 6a37 	vldr	s13, [pc, #220]	; 8009218 <gyro_self_test+0x188>
 800913c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009140:	edc7 7a05 	vstr	s15, [r7, #20]
            while (--tmp[jj])
 8009144:	e007      	b.n	8009156 <gyro_self_test+0xc6>
                st_shift *= 1.046f;
 8009146:	edd7 7a05 	vldr	s15, [r7, #20]
 800914a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800921c <gyro_self_test+0x18c>
 800914e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009152:	edc7 7a05 	vstr	s15, [r7, #20]
            while (--tmp[jj])
 8009156:	f107 0208 	add.w	r2, r7, #8
 800915a:	69fb      	ldr	r3, [r7, #28]
 800915c:	4413      	add	r3, r2
 800915e:	781b      	ldrb	r3, [r3, #0]
 8009160:	3b01      	subs	r3, #1
 8009162:	b2d9      	uxtb	r1, r3
 8009164:	f107 0208 	add.w	r2, r7, #8
 8009168:	69fb      	ldr	r3, [r7, #28]
 800916a:	4413      	add	r3, r2
 800916c:	460a      	mov	r2, r1
 800916e:	701a      	strb	r2, [r3, #0]
 8009170:	f107 0208 	add.w	r2, r7, #8
 8009174:	69fb      	ldr	r3, [r7, #28]
 8009176:	4413      	add	r3, r2
 8009178:	781b      	ldrb	r3, [r3, #0]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d1e3      	bne.n	8009146 <gyro_self_test+0xb6>
            st_shift_var = st_shift_cust / st_shift - 1.f;
 800917e:	edd7 6a04 	vldr	s13, [r7, #16]
 8009182:	ed97 7a05 	vldr	s14, [r7, #20]
 8009186:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800918a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800918e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009192:	edc7 7a03 	vstr	s15, [r7, #12]
            if (fabs(st_shift_var) > test.max_gyro_var)
 8009196:	edd7 7a03 	vldr	s15, [r7, #12]
 800919a:	eef0 7ae7 	vabs.f32	s15, s15
 800919e:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8009220 <gyro_self_test+0x190>
 80091a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80091a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091aa:	dd20      	ble.n	80091ee <gyro_self_test+0x15e>
                result |= 1 << jj;
 80091ac:	2201      	movs	r2, #1
 80091ae:	69fb      	ldr	r3, [r7, #28]
 80091b0:	fa02 f303 	lsl.w	r3, r2, r3
 80091b4:	69ba      	ldr	r2, [r7, #24]
 80091b6:	4313      	orrs	r3, r2
 80091b8:	61bb      	str	r3, [r7, #24]
 80091ba:	e018      	b.n	80091ee <gyro_self_test+0x15e>
        } else if ((st_shift_cust < test.min_dps) ||
 80091bc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80091c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80091c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80091c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091cc:	d408      	bmi.n	80091e0 <gyro_self_test+0x150>
            (st_shift_cust > test.max_dps))
 80091ce:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8009224 <gyro_self_test+0x194>
        } else if ((st_shift_cust < test.min_dps) ||
 80091d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80091d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80091da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091de:	dd06      	ble.n	80091ee <gyro_self_test+0x15e>
            result |= 1 << jj;
 80091e0:	2201      	movs	r2, #1
 80091e2:	69fb      	ldr	r3, [r7, #28]
 80091e4:	fa02 f303 	lsl.w	r3, r2, r3
 80091e8:	69ba      	ldr	r2, [r7, #24]
 80091ea:	4313      	orrs	r3, r2
 80091ec:	61bb      	str	r3, [r7, #24]
    for (jj = 0; jj < 3; jj++) {
 80091ee:	69fb      	ldr	r3, [r7, #28]
 80091f0:	3301      	adds	r3, #1
 80091f2:	61fb      	str	r3, [r7, #28]
 80091f4:	69fb      	ldr	r3, [r7, #28]
 80091f6:	2b02      	cmp	r3, #2
 80091f8:	f77f af7b 	ble.w	80090f2 <gyro_self_test+0x62>
    }
    return result;
 80091fc:	69bb      	ldr	r3, [r7, #24]
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3720      	adds	r7, #32
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}
 8009206:	bf00      	nop
 8009208:	2000001c 	.word	0x2000001c
 800920c:	20000b20 	.word	0x20000b20
 8009210:	47800000 	.word	0x47800000
 8009214:	00000083 	.word	0x00000083
 8009218:	454cb000 	.word	0x454cb000
 800921c:	3f85e354 	.word	0x3f85e354
 8009220:	3e0f5c29 	.word	0x3e0f5c29
 8009224:	42d20000 	.word	0x42d20000

08009228 <get_st_biases>:
    return result;
}
#endif

static int get_st_biases(long *gyro, long *accel, unsigned char hw_test)
{
 8009228:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800922c:	b098      	sub	sp, #96	; 0x60
 800922e:	af04      	add	r7, sp, #16
 8009230:	6278      	str	r0, [r7, #36]	; 0x24
 8009232:	6239      	str	r1, [r7, #32]
 8009234:	4613      	mov	r3, r2
 8009236:	77fb      	strb	r3, [r7, #31]
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_count, ii;
    unsigned short fifo_count;

    data[0] = 0x01;
 8009238:	2301      	movs	r3, #1
 800923a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    data[1] = 0;
 800923e:	2300      	movs	r3, #0
 8009240:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, data))
 8009244:	4ba5      	ldr	r3, [pc, #660]	; (80094dc <get_st_biases+0x2b4>)
 8009246:	685b      	ldr	r3, [r3, #4]
 8009248:	781b      	ldrb	r3, [r3, #0]
 800924a:	b29b      	uxth	r3, r3
 800924c:	005b      	lsls	r3, r3, #1
 800924e:	b299      	uxth	r1, r3
 8009250:	4ba2      	ldr	r3, [pc, #648]	; (80094dc <get_st_biases+0x2b4>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	7d5b      	ldrb	r3, [r3, #21]
 8009256:	b29a      	uxth	r2, r3
 8009258:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800925c:	9302      	str	r3, [sp, #8]
 800925e:	2302      	movs	r3, #2
 8009260:	9301      	str	r3, [sp, #4]
 8009262:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009266:	9300      	str	r3, [sp, #0]
 8009268:	2301      	movs	r3, #1
 800926a:	489d      	ldr	r0, [pc, #628]	; (80094e0 <get_st_biases+0x2b8>)
 800926c:	f7fc fa6c 	bl	8005748 <HAL_I2C_Mem_Write>
 8009270:	4603      	mov	r3, r0
 8009272:	2b00      	cmp	r3, #0
 8009274:	d002      	beq.n	800927c <get_st_biases+0x54>
        return -1;
 8009276:	f04f 33ff 	mov.w	r3, #4294967295
 800927a:	e38d      	b.n	8009998 <get_st_biases+0x770>
    delay_ms(200);
 800927c:	20c8      	movs	r0, #200	; 0xc8
 800927e:	f7fb fdd3 	bl	8004e28 <HAL_Delay>
    data[0] = 0;
 8009282:	2300      	movs	r3, #0
 8009284:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, data))
 8009288:	4b94      	ldr	r3, [pc, #592]	; (80094dc <get_st_biases+0x2b4>)
 800928a:	685b      	ldr	r3, [r3, #4]
 800928c:	781b      	ldrb	r3, [r3, #0]
 800928e:	b29b      	uxth	r3, r3
 8009290:	005b      	lsls	r3, r3, #1
 8009292:	b299      	uxth	r1, r3
 8009294:	4b91      	ldr	r3, [pc, #580]	; (80094dc <get_st_biases+0x2b4>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	7c5b      	ldrb	r3, [r3, #17]
 800929a:	b29a      	uxth	r2, r3
 800929c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80092a0:	9302      	str	r3, [sp, #8]
 80092a2:	2301      	movs	r3, #1
 80092a4:	9301      	str	r3, [sp, #4]
 80092a6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80092aa:	9300      	str	r3, [sp, #0]
 80092ac:	2301      	movs	r3, #1
 80092ae:	488c      	ldr	r0, [pc, #560]	; (80094e0 <get_st_biases+0x2b8>)
 80092b0:	f7fc fa4a 	bl	8005748 <HAL_I2C_Mem_Write>
 80092b4:	4603      	mov	r3, r0
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d002      	beq.n	80092c0 <get_st_biases+0x98>
        return -1;
 80092ba:	f04f 33ff 	mov.w	r3, #4294967295
 80092be:	e36b      	b.n	8009998 <get_st_biases+0x770>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 80092c0:	4b86      	ldr	r3, [pc, #536]	; (80094dc <get_st_biases+0x2b4>)
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	781b      	ldrb	r3, [r3, #0]
 80092c6:	b29b      	uxth	r3, r3
 80092c8:	005b      	lsls	r3, r3, #1
 80092ca:	b299      	uxth	r1, r3
 80092cc:	4b83      	ldr	r3, [pc, #524]	; (80094dc <get_st_biases+0x2b4>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	795b      	ldrb	r3, [r3, #5]
 80092d2:	b29a      	uxth	r2, r3
 80092d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80092d8:	9302      	str	r3, [sp, #8]
 80092da:	2301      	movs	r3, #1
 80092dc:	9301      	str	r3, [sp, #4]
 80092de:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80092e2:	9300      	str	r3, [sp, #0]
 80092e4:	2301      	movs	r3, #1
 80092e6:	487e      	ldr	r0, [pc, #504]	; (80094e0 <get_st_biases+0x2b8>)
 80092e8:	f7fc fa2e 	bl	8005748 <HAL_I2C_Mem_Write>
 80092ec:	4603      	mov	r3, r0
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d002      	beq.n	80092f8 <get_st_biases+0xd0>
        return -1;
 80092f2:	f04f 33ff 	mov.w	r3, #4294967295
 80092f6:	e34f      	b.n	8009998 <get_st_biases+0x770>
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 80092f8:	4b78      	ldr	r3, [pc, #480]	; (80094dc <get_st_biases+0x2b4>)
 80092fa:	685b      	ldr	r3, [r3, #4]
 80092fc:	781b      	ldrb	r3, [r3, #0]
 80092fe:	b29b      	uxth	r3, r3
 8009300:	005b      	lsls	r3, r3, #1
 8009302:	b299      	uxth	r1, r3
 8009304:	4b75      	ldr	r3, [pc, #468]	; (80094dc <get_st_biases+0x2b4>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	7d5b      	ldrb	r3, [r3, #21]
 800930a:	b29a      	uxth	r2, r3
 800930c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009310:	9302      	str	r3, [sp, #8]
 8009312:	2301      	movs	r3, #1
 8009314:	9301      	str	r3, [sp, #4]
 8009316:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800931a:	9300      	str	r3, [sp, #0]
 800931c:	2301      	movs	r3, #1
 800931e:	4870      	ldr	r0, [pc, #448]	; (80094e0 <get_st_biases+0x2b8>)
 8009320:	f7fc fa12 	bl	8005748 <HAL_I2C_Mem_Write>
 8009324:	4603      	mov	r3, r0
 8009326:	2b00      	cmp	r3, #0
 8009328:	d002      	beq.n	8009330 <get_st_biases+0x108>
        return -1;
 800932a:	f04f 33ff 	mov.w	r3, #4294967295
 800932e:	e333      	b.n	8009998 <get_st_biases+0x770>
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 8009330:	4b6a      	ldr	r3, [pc, #424]	; (80094dc <get_st_biases+0x2b4>)
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	781b      	ldrb	r3, [r3, #0]
 8009336:	b29b      	uxth	r3, r3
 8009338:	005b      	lsls	r3, r3, #1
 800933a:	b299      	uxth	r1, r3
 800933c:	4b67      	ldr	r3, [pc, #412]	; (80094dc <get_st_biases+0x2b4>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	7e9b      	ldrb	r3, [r3, #26]
 8009342:	b29a      	uxth	r2, r3
 8009344:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009348:	9302      	str	r3, [sp, #8]
 800934a:	2301      	movs	r3, #1
 800934c:	9301      	str	r3, [sp, #4]
 800934e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009352:	9300      	str	r3, [sp, #0]
 8009354:	2301      	movs	r3, #1
 8009356:	4862      	ldr	r0, [pc, #392]	; (80094e0 <get_st_biases+0x2b8>)
 8009358:	f7fc f9f6 	bl	8005748 <HAL_I2C_Mem_Write>
 800935c:	4603      	mov	r3, r0
 800935e:	2b00      	cmp	r3, #0
 8009360:	d002      	beq.n	8009368 <get_st_biases+0x140>
        return -1;
 8009362:	f04f 33ff 	mov.w	r3, #4294967295
 8009366:	e317      	b.n	8009998 <get_st_biases+0x770>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 8009368:	4b5c      	ldr	r3, [pc, #368]	; (80094dc <get_st_biases+0x2b4>)
 800936a:	685b      	ldr	r3, [r3, #4]
 800936c:	781b      	ldrb	r3, [r3, #0]
 800936e:	b29b      	uxth	r3, r3
 8009370:	005b      	lsls	r3, r3, #1
 8009372:	b299      	uxth	r1, r3
 8009374:	4b59      	ldr	r3, [pc, #356]	; (80094dc <get_st_biases+0x2b4>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	791b      	ldrb	r3, [r3, #4]
 800937a:	b29a      	uxth	r2, r3
 800937c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009380:	9302      	str	r3, [sp, #8]
 8009382:	2301      	movs	r3, #1
 8009384:	9301      	str	r3, [sp, #4]
 8009386:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800938a:	9300      	str	r3, [sp, #0]
 800938c:	2301      	movs	r3, #1
 800938e:	4854      	ldr	r0, [pc, #336]	; (80094e0 <get_st_biases+0x2b8>)
 8009390:	f7fc f9da 	bl	8005748 <HAL_I2C_Mem_Write>
 8009394:	4603      	mov	r3, r0
 8009396:	2b00      	cmp	r3, #0
 8009398:	d002      	beq.n	80093a0 <get_st_biases+0x178>
        return -1;
 800939a:	f04f 33ff 	mov.w	r3, #4294967295
 800939e:	e2fb      	b.n	8009998 <get_st_biases+0x770>
    data[0] = BIT_FIFO_RST | BIT_DMP_RST;
 80093a0:	230c      	movs	r3, #12
 80093a2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 80093a6:	4b4d      	ldr	r3, [pc, #308]	; (80094dc <get_st_biases+0x2b4>)
 80093a8:	685b      	ldr	r3, [r3, #4]
 80093aa:	781b      	ldrb	r3, [r3, #0]
 80093ac:	b29b      	uxth	r3, r3
 80093ae:	005b      	lsls	r3, r3, #1
 80093b0:	b299      	uxth	r1, r3
 80093b2:	4b4a      	ldr	r3, [pc, #296]	; (80094dc <get_st_biases+0x2b4>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	791b      	ldrb	r3, [r3, #4]
 80093b8:	b29a      	uxth	r2, r3
 80093ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80093be:	9302      	str	r3, [sp, #8]
 80093c0:	2301      	movs	r3, #1
 80093c2:	9301      	str	r3, [sp, #4]
 80093c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80093c8:	9300      	str	r3, [sp, #0]
 80093ca:	2301      	movs	r3, #1
 80093cc:	4844      	ldr	r0, [pc, #272]	; (80094e0 <get_st_biases+0x2b8>)
 80093ce:	f7fc f9bb 	bl	8005748 <HAL_I2C_Mem_Write>
 80093d2:	4603      	mov	r3, r0
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d002      	beq.n	80093de <get_st_biases+0x1b6>
        return -1;
 80093d8:	f04f 33ff 	mov.w	r3, #4294967295
 80093dc:	e2dc      	b.n	8009998 <get_st_biases+0x770>
    delay_ms(15);
 80093de:	200f      	movs	r0, #15
 80093e0:	f7fb fd22 	bl	8004e28 <HAL_Delay>
    data[0] = st.test->reg_lpf;
 80093e4:	4b3d      	ldr	r3, [pc, #244]	; (80094dc <get_st_biases+0x2b4>)
 80093e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093e8:	7a5b      	ldrb	r3, [r3, #9]
 80093ea:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, data))
 80093ee:	4b3b      	ldr	r3, [pc, #236]	; (80094dc <get_st_biases+0x2b4>)
 80093f0:	685b      	ldr	r3, [r3, #4]
 80093f2:	781b      	ldrb	r3, [r3, #0]
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	005b      	lsls	r3, r3, #1
 80093f8:	b299      	uxth	r1, r3
 80093fa:	4b38      	ldr	r3, [pc, #224]	; (80094dc <get_st_biases+0x2b4>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	789b      	ldrb	r3, [r3, #2]
 8009400:	b29a      	uxth	r2, r3
 8009402:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009406:	9302      	str	r3, [sp, #8]
 8009408:	2301      	movs	r3, #1
 800940a:	9301      	str	r3, [sp, #4]
 800940c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009410:	9300      	str	r3, [sp, #0]
 8009412:	2301      	movs	r3, #1
 8009414:	4832      	ldr	r0, [pc, #200]	; (80094e0 <get_st_biases+0x2b8>)
 8009416:	f7fc f997 	bl	8005748 <HAL_I2C_Mem_Write>
 800941a:	4603      	mov	r3, r0
 800941c:	2b00      	cmp	r3, #0
 800941e:	d002      	beq.n	8009426 <get_st_biases+0x1fe>
        return -1;
 8009420:	f04f 33ff 	mov.w	r3, #4294967295
 8009424:	e2b8      	b.n	8009998 <get_st_biases+0x770>
    data[0] = st.test->reg_rate_div;
 8009426:	4b2d      	ldr	r3, [pc, #180]	; (80094dc <get_st_biases+0x2b4>)
 8009428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800942a:	7a1b      	ldrb	r3, [r3, #8]
 800942c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    if (i2c_write(st.hw->addr, st.reg->rate_div, 1, data))
 8009430:	4b2a      	ldr	r3, [pc, #168]	; (80094dc <get_st_biases+0x2b4>)
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	781b      	ldrb	r3, [r3, #0]
 8009436:	b29b      	uxth	r3, r3
 8009438:	005b      	lsls	r3, r3, #1
 800943a:	b299      	uxth	r1, r3
 800943c:	4b27      	ldr	r3, [pc, #156]	; (80094dc <get_st_biases+0x2b4>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	785b      	ldrb	r3, [r3, #1]
 8009442:	b29a      	uxth	r2, r3
 8009444:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009448:	9302      	str	r3, [sp, #8]
 800944a:	2301      	movs	r3, #1
 800944c:	9301      	str	r3, [sp, #4]
 800944e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009452:	9300      	str	r3, [sp, #0]
 8009454:	2301      	movs	r3, #1
 8009456:	4822      	ldr	r0, [pc, #136]	; (80094e0 <get_st_biases+0x2b8>)
 8009458:	f7fc f976 	bl	8005748 <HAL_I2C_Mem_Write>
 800945c:	4603      	mov	r3, r0
 800945e:	2b00      	cmp	r3, #0
 8009460:	d002      	beq.n	8009468 <get_st_biases+0x240>
        return -1;
 8009462:	f04f 33ff 	mov.w	r3, #4294967295
 8009466:	e297      	b.n	8009998 <get_st_biases+0x770>
    if (hw_test)
 8009468:	7ffb      	ldrb	r3, [r7, #31]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d008      	beq.n	8009480 <get_st_biases+0x258>
        data[0] = st.test->reg_gyro_fsr | 0xE0;
 800946e:	4b1b      	ldr	r3, [pc, #108]	; (80094dc <get_st_biases+0x2b4>)
 8009470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009472:	7a9b      	ldrb	r3, [r3, #10]
 8009474:	f063 031f 	orn	r3, r3, #31
 8009478:	b2db      	uxtb	r3, r3
 800947a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 800947e:	e004      	b.n	800948a <get_st_biases+0x262>
    else
        data[0] = st.test->reg_gyro_fsr;
 8009480:	4b16      	ldr	r3, [pc, #88]	; (80094dc <get_st_biases+0x2b4>)
 8009482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009484:	7a9b      	ldrb	r3, [r3, #10]
 8009486:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, data))
 800948a:	4b14      	ldr	r3, [pc, #80]	; (80094dc <get_st_biases+0x2b4>)
 800948c:	685b      	ldr	r3, [r3, #4]
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	b29b      	uxth	r3, r3
 8009492:	005b      	lsls	r3, r3, #1
 8009494:	b299      	uxth	r1, r3
 8009496:	4b11      	ldr	r3, [pc, #68]	; (80094dc <get_st_biases+0x2b4>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	799b      	ldrb	r3, [r3, #6]
 800949c:	b29a      	uxth	r2, r3
 800949e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80094a2:	9302      	str	r3, [sp, #8]
 80094a4:	2301      	movs	r3, #1
 80094a6:	9301      	str	r3, [sp, #4]
 80094a8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80094ac:	9300      	str	r3, [sp, #0]
 80094ae:	2301      	movs	r3, #1
 80094b0:	480b      	ldr	r0, [pc, #44]	; (80094e0 <get_st_biases+0x2b8>)
 80094b2:	f7fc f949 	bl	8005748 <HAL_I2C_Mem_Write>
 80094b6:	4603      	mov	r3, r0
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d002      	beq.n	80094c2 <get_st_biases+0x29a>
        return -1;
 80094bc:	f04f 33ff 	mov.w	r3, #4294967295
 80094c0:	e26a      	b.n	8009998 <get_st_biases+0x770>

    if (hw_test)
 80094c2:	7ffb      	ldrb	r3, [r7, #31]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d00d      	beq.n	80094e4 <get_st_biases+0x2bc>
        data[0] = st.test->reg_accel_fsr | 0xE0;
 80094c8:	4b04      	ldr	r3, [pc, #16]	; (80094dc <get_st_biases+0x2b4>)
 80094ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094cc:	7adb      	ldrb	r3, [r3, #11]
 80094ce:	f063 031f 	orn	r3, r3, #31
 80094d2:	b2db      	uxtb	r3, r3
 80094d4:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 80094d8:	e007      	b.n	80094ea <get_st_biases+0x2c2>
 80094da:	bf00      	nop
 80094dc:	2000001c 	.word	0x2000001c
 80094e0:	20000b20 	.word	0x20000b20
    else
        data[0] = test.reg_accel_fsr;
 80094e4:	2318      	movs	r3, #24
 80094e6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, data))
 80094ea:	4b75      	ldr	r3, [pc, #468]	; (80096c0 <get_st_biases+0x498>)
 80094ec:	685b      	ldr	r3, [r3, #4]
 80094ee:	781b      	ldrb	r3, [r3, #0]
 80094f0:	b29b      	uxth	r3, r3
 80094f2:	005b      	lsls	r3, r3, #1
 80094f4:	b299      	uxth	r1, r3
 80094f6:	4b72      	ldr	r3, [pc, #456]	; (80096c0 <get_st_biases+0x498>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	79db      	ldrb	r3, [r3, #7]
 80094fc:	b29a      	uxth	r2, r3
 80094fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009502:	9302      	str	r3, [sp, #8]
 8009504:	2301      	movs	r3, #1
 8009506:	9301      	str	r3, [sp, #4]
 8009508:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800950c:	9300      	str	r3, [sp, #0]
 800950e:	2301      	movs	r3, #1
 8009510:	486c      	ldr	r0, [pc, #432]	; (80096c4 <get_st_biases+0x49c>)
 8009512:	f7fc f919 	bl	8005748 <HAL_I2C_Mem_Write>
 8009516:	4603      	mov	r3, r0
 8009518:	2b00      	cmp	r3, #0
 800951a:	d002      	beq.n	8009522 <get_st_biases+0x2fa>
        return -1;
 800951c:	f04f 33ff 	mov.w	r3, #4294967295
 8009520:	e23a      	b.n	8009998 <get_st_biases+0x770>
    if (hw_test)
 8009522:	7ffb      	ldrb	r3, [r7, #31]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d002      	beq.n	800952e <get_st_biases+0x306>
        delay_ms(200);
 8009528:	20c8      	movs	r0, #200	; 0xc8
 800952a:	f7fb fc7d 	bl	8004e28 <HAL_Delay>

    /* Fill FIFO for test.wait_ms milliseconds. */
    data[0] = BIT_FIFO_EN;
 800952e:	2340      	movs	r3, #64	; 0x40
 8009530:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 8009534:	4b62      	ldr	r3, [pc, #392]	; (80096c0 <get_st_biases+0x498>)
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	781b      	ldrb	r3, [r3, #0]
 800953a:	b29b      	uxth	r3, r3
 800953c:	005b      	lsls	r3, r3, #1
 800953e:	b299      	uxth	r1, r3
 8009540:	4b5f      	ldr	r3, [pc, #380]	; (80096c0 <get_st_biases+0x498>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	791b      	ldrb	r3, [r3, #4]
 8009546:	b29a      	uxth	r2, r3
 8009548:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800954c:	9302      	str	r3, [sp, #8]
 800954e:	2301      	movs	r3, #1
 8009550:	9301      	str	r3, [sp, #4]
 8009552:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009556:	9300      	str	r3, [sp, #0]
 8009558:	2301      	movs	r3, #1
 800955a:	485a      	ldr	r0, [pc, #360]	; (80096c4 <get_st_biases+0x49c>)
 800955c:	f7fc f8f4 	bl	8005748 <HAL_I2C_Mem_Write>
 8009560:	4603      	mov	r3, r0
 8009562:	2b00      	cmp	r3, #0
 8009564:	d002      	beq.n	800956c <get_st_biases+0x344>
        return -1;
 8009566:	f04f 33ff 	mov.w	r3, #4294967295
 800956a:	e215      	b.n	8009998 <get_st_biases+0x770>

    data[0] = INV_XYZ_GYRO | INV_XYZ_ACCEL;
 800956c:	2378      	movs	r3, #120	; 0x78
 800956e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 8009572:	4b53      	ldr	r3, [pc, #332]	; (80096c0 <get_st_biases+0x498>)
 8009574:	685b      	ldr	r3, [r3, #4]
 8009576:	781b      	ldrb	r3, [r3, #0]
 8009578:	b29b      	uxth	r3, r3
 800957a:	005b      	lsls	r3, r3, #1
 800957c:	b299      	uxth	r1, r3
 800957e:	4b50      	ldr	r3, [pc, #320]	; (80096c0 <get_st_biases+0x498>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	795b      	ldrb	r3, [r3, #5]
 8009584:	b29a      	uxth	r2, r3
 8009586:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800958a:	9302      	str	r3, [sp, #8]
 800958c:	2301      	movs	r3, #1
 800958e:	9301      	str	r3, [sp, #4]
 8009590:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009594:	9300      	str	r3, [sp, #0]
 8009596:	2301      	movs	r3, #1
 8009598:	484a      	ldr	r0, [pc, #296]	; (80096c4 <get_st_biases+0x49c>)
 800959a:	f7fc f8d5 	bl	8005748 <HAL_I2C_Mem_Write>
 800959e:	4603      	mov	r3, r0
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d002      	beq.n	80095aa <get_st_biases+0x382>
        return -1;
 80095a4:	f04f 33ff 	mov.w	r3, #4294967295
 80095a8:	e1f6      	b.n	8009998 <get_st_biases+0x770>
    delay_ms(test.wait_ms);
 80095aa:	2332      	movs	r3, #50	; 0x32
 80095ac:	4618      	mov	r0, r3
 80095ae:	f7fb fc3b 	bl	8004e28 <HAL_Delay>
    data[0] = 0;
 80095b2:	2300      	movs	r3, #0
 80095b4:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 80095b8:	4b41      	ldr	r3, [pc, #260]	; (80096c0 <get_st_biases+0x498>)
 80095ba:	685b      	ldr	r3, [r3, #4]
 80095bc:	781b      	ldrb	r3, [r3, #0]
 80095be:	b29b      	uxth	r3, r3
 80095c0:	005b      	lsls	r3, r3, #1
 80095c2:	b299      	uxth	r1, r3
 80095c4:	4b3e      	ldr	r3, [pc, #248]	; (80096c0 <get_st_biases+0x498>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	795b      	ldrb	r3, [r3, #5]
 80095ca:	b29a      	uxth	r2, r3
 80095cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80095d0:	9302      	str	r3, [sp, #8]
 80095d2:	2301      	movs	r3, #1
 80095d4:	9301      	str	r3, [sp, #4]
 80095d6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80095da:	9300      	str	r3, [sp, #0]
 80095dc:	2301      	movs	r3, #1
 80095de:	4839      	ldr	r0, [pc, #228]	; (80096c4 <get_st_biases+0x49c>)
 80095e0:	f7fc f8b2 	bl	8005748 <HAL_I2C_Mem_Write>
 80095e4:	4603      	mov	r3, r0
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d002      	beq.n	80095f0 <get_st_biases+0x3c8>
        return -1;
 80095ea:	f04f 33ff 	mov.w	r3, #4294967295
 80095ee:	e1d3      	b.n	8009998 <get_st_biases+0x770>

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, data))
 80095f0:	4b33      	ldr	r3, [pc, #204]	; (80096c0 <get_st_biases+0x498>)
 80095f2:	685b      	ldr	r3, [r3, #4]
 80095f4:	781b      	ldrb	r3, [r3, #0]
 80095f6:	b29b      	uxth	r3, r3
 80095f8:	005b      	lsls	r3, r3, #1
 80095fa:	b299      	uxth	r1, r3
 80095fc:	4b30      	ldr	r3, [pc, #192]	; (80096c0 <get_st_biases+0x498>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	7b1b      	ldrb	r3, [r3, #12]
 8009602:	b29a      	uxth	r2, r3
 8009604:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009608:	9302      	str	r3, [sp, #8]
 800960a:	2302      	movs	r3, #2
 800960c:	9301      	str	r3, [sp, #4]
 800960e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009612:	9300      	str	r3, [sp, #0]
 8009614:	2301      	movs	r3, #1
 8009616:	482b      	ldr	r0, [pc, #172]	; (80096c4 <get_st_biases+0x49c>)
 8009618:	f7fc f990 	bl	800593c <HAL_I2C_Mem_Read>
 800961c:	4603      	mov	r3, r0
 800961e:	2b00      	cmp	r3, #0
 8009620:	d002      	beq.n	8009628 <get_st_biases+0x400>
        return -1;
 8009622:	f04f 33ff 	mov.w	r3, #4294967295
 8009626:	e1b7      	b.n	8009998 <get_st_biases+0x770>

    fifo_count = (data[0] << 8) | data[1];
 8009628:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800962c:	021b      	lsls	r3, r3, #8
 800962e:	b21a      	sxth	r2, r3
 8009630:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8009634:	b21b      	sxth	r3, r3
 8009636:	4313      	orrs	r3, r2
 8009638:	b21b      	sxth	r3, r3
 800963a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    packet_count = fifo_count / MAX_PACKET_LENGTH;
 800963e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8009642:	4a21      	ldr	r2, [pc, #132]	; (80096c8 <get_st_biases+0x4a0>)
 8009644:	fba2 2303 	umull	r2, r3, r2, r3
 8009648:	08db      	lsrs	r3, r3, #3
 800964a:	b29b      	uxth	r3, r3
 800964c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    gyro[0] = gyro[1] = gyro[2] = 0;
 8009650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009652:	f103 0108 	add.w	r1, r3, #8
 8009656:	2300      	movs	r3, #0
 8009658:	600b      	str	r3, [r1, #0]
 800965a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800965c:	1d1a      	adds	r2, r3, #4
 800965e:	680b      	ldr	r3, [r1, #0]
 8009660:	6013      	str	r3, [r2, #0]
 8009662:	6812      	ldr	r2, [r2, #0]
 8009664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009666:	601a      	str	r2, [r3, #0]
    accel[0] = accel[1] = accel[2] = 0;
 8009668:	6a3b      	ldr	r3, [r7, #32]
 800966a:	f103 0108 	add.w	r1, r3, #8
 800966e:	2300      	movs	r3, #0
 8009670:	600b      	str	r3, [r1, #0]
 8009672:	6a3b      	ldr	r3, [r7, #32]
 8009674:	1d1a      	adds	r2, r3, #4
 8009676:	680b      	ldr	r3, [r1, #0]
 8009678:	6013      	str	r3, [r2, #0]
 800967a:	6812      	ldr	r2, [r2, #0]
 800967c:	6a3b      	ldr	r3, [r7, #32]
 800967e:	601a      	str	r2, [r3, #0]

    for (ii = 0; ii < packet_count; ii++) {
 8009680:	2300      	movs	r3, #0
 8009682:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8009686:	e09a      	b.n	80097be <get_st_biases+0x596>
        short accel_cur[3], gyro_cur[3];
        if (i2c_read(st.hw->addr, st.reg->fifo_r_w, MAX_PACKET_LENGTH, data))
 8009688:	4b0d      	ldr	r3, [pc, #52]	; (80096c0 <get_st_biases+0x498>)
 800968a:	685b      	ldr	r3, [r3, #4]
 800968c:	781b      	ldrb	r3, [r3, #0]
 800968e:	b29b      	uxth	r3, r3
 8009690:	005b      	lsls	r3, r3, #1
 8009692:	b299      	uxth	r1, r3
 8009694:	4b0a      	ldr	r3, [pc, #40]	; (80096c0 <get_st_biases+0x498>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	7b5b      	ldrb	r3, [r3, #13]
 800969a:	b29a      	uxth	r2, r3
 800969c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80096a0:	9302      	str	r3, [sp, #8]
 80096a2:	230c      	movs	r3, #12
 80096a4:	9301      	str	r3, [sp, #4]
 80096a6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80096aa:	9300      	str	r3, [sp, #0]
 80096ac:	2301      	movs	r3, #1
 80096ae:	4805      	ldr	r0, [pc, #20]	; (80096c4 <get_st_biases+0x49c>)
 80096b0:	f7fc f944 	bl	800593c <HAL_I2C_Mem_Read>
 80096b4:	4603      	mov	r3, r0
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d008      	beq.n	80096cc <get_st_biases+0x4a4>
            return -1;
 80096ba:	f04f 33ff 	mov.w	r3, #4294967295
 80096be:	e16b      	b.n	8009998 <get_st_biases+0x770>
 80096c0:	2000001c 	.word	0x2000001c
 80096c4:	20000b20 	.word	0x20000b20
 80096c8:	aaaaaaab 	.word	0xaaaaaaab
        accel_cur[0] = ((short)data[0] << 8) | data[1];
 80096cc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80096d0:	021b      	lsls	r3, r3, #8
 80096d2:	b21a      	sxth	r2, r3
 80096d4:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80096d8:	b21b      	sxth	r3, r3
 80096da:	4313      	orrs	r3, r2
 80096dc:	b21b      	sxth	r3, r3
 80096de:	86bb      	strh	r3, [r7, #52]	; 0x34
        accel_cur[1] = ((short)data[2] << 8) | data[3];
 80096e0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80096e4:	021b      	lsls	r3, r3, #8
 80096e6:	b21a      	sxth	r2, r3
 80096e8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80096ec:	b21b      	sxth	r3, r3
 80096ee:	4313      	orrs	r3, r2
 80096f0:	b21b      	sxth	r3, r3
 80096f2:	86fb      	strh	r3, [r7, #54]	; 0x36
        accel_cur[2] = ((short)data[4] << 8) | data[5];
 80096f4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80096f8:	021b      	lsls	r3, r3, #8
 80096fa:	b21a      	sxth	r2, r3
 80096fc:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8009700:	b21b      	sxth	r3, r3
 8009702:	4313      	orrs	r3, r2
 8009704:	b21b      	sxth	r3, r3
 8009706:	873b      	strh	r3, [r7, #56]	; 0x38
        accel[0] += (long)accel_cur[0];
 8009708:	6a3b      	ldr	r3, [r7, #32]
 800970a:	681a      	ldr	r2, [r3, #0]
 800970c:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8009710:	441a      	add	r2, r3
 8009712:	6a3b      	ldr	r3, [r7, #32]
 8009714:	601a      	str	r2, [r3, #0]
        accel[1] += (long)accel_cur[1];
 8009716:	6a3b      	ldr	r3, [r7, #32]
 8009718:	3304      	adds	r3, #4
 800971a:	6819      	ldr	r1, [r3, #0]
 800971c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8009720:	4618      	mov	r0, r3
 8009722:	6a3b      	ldr	r3, [r7, #32]
 8009724:	1d1a      	adds	r2, r3, #4
 8009726:	180b      	adds	r3, r1, r0
 8009728:	6013      	str	r3, [r2, #0]
        accel[2] += (long)accel_cur[2];
 800972a:	6a3b      	ldr	r3, [r7, #32]
 800972c:	3308      	adds	r3, #8
 800972e:	6819      	ldr	r1, [r3, #0]
 8009730:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8009734:	4618      	mov	r0, r3
 8009736:	6a3b      	ldr	r3, [r7, #32]
 8009738:	f103 0208 	add.w	r2, r3, #8
 800973c:	180b      	adds	r3, r1, r0
 800973e:	6013      	str	r3, [r2, #0]
        gyro_cur[0] = (((short)data[6] << 8) | data[7]);
 8009740:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8009744:	021b      	lsls	r3, r3, #8
 8009746:	b21a      	sxth	r2, r3
 8009748:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800974c:	b21b      	sxth	r3, r3
 800974e:	4313      	orrs	r3, r2
 8009750:	b21b      	sxth	r3, r3
 8009752:	85bb      	strh	r3, [r7, #44]	; 0x2c
        gyro_cur[1] = (((short)data[8] << 8) | data[9]);
 8009754:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8009758:	021b      	lsls	r3, r3, #8
 800975a:	b21a      	sxth	r2, r3
 800975c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8009760:	b21b      	sxth	r3, r3
 8009762:	4313      	orrs	r3, r2
 8009764:	b21b      	sxth	r3, r3
 8009766:	85fb      	strh	r3, [r7, #46]	; 0x2e
        gyro_cur[2] = (((short)data[10] << 8) | data[11]);
 8009768:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800976c:	021b      	lsls	r3, r3, #8
 800976e:	b21a      	sxth	r2, r3
 8009770:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009774:	b21b      	sxth	r3, r3
 8009776:	4313      	orrs	r3, r2
 8009778:	b21b      	sxth	r3, r3
 800977a:	863b      	strh	r3, [r7, #48]	; 0x30
        gyro[0] += (long)gyro_cur[0];
 800977c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800977e:	681a      	ldr	r2, [r3, #0]
 8009780:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8009784:	441a      	add	r2, r3
 8009786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009788:	601a      	str	r2, [r3, #0]
        gyro[1] += (long)gyro_cur[1];
 800978a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800978c:	3304      	adds	r3, #4
 800978e:	6819      	ldr	r1, [r3, #0]
 8009790:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8009794:	4618      	mov	r0, r3
 8009796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009798:	1d1a      	adds	r2, r3, #4
 800979a:	180b      	adds	r3, r1, r0
 800979c:	6013      	str	r3, [r2, #0]
        gyro[2] += (long)gyro_cur[2];
 800979e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a0:	3308      	adds	r3, #8
 80097a2:	6819      	ldr	r1, [r3, #0]
 80097a4:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80097a8:	4618      	mov	r0, r3
 80097aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ac:	f103 0208 	add.w	r2, r3, #8
 80097b0:	180b      	adds	r3, r1, r0
 80097b2:	6013      	str	r3, [r2, #0]
    for (ii = 0; ii < packet_count; ii++) {
 80097b4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80097b8:	3301      	adds	r3, #1
 80097ba:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80097be:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80097c2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80097c6:	429a      	cmp	r2, r3
 80097c8:	f4ff af5e 	bcc.w	8009688 <get_st_biases+0x460>
            packet_count);
        /* Don't remove gravity! */
        accel[2] -= 65536L;
    }
#else
    gyro[0] = (long)(((long long)gyro[0]<<16) / test.gyro_sens / packet_count);
 80097cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	461a      	mov	r2, r3
 80097d2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80097d6:	1415      	asrs	r5, r2, #16
 80097d8:	0414      	lsls	r4, r2, #16
 80097da:	2383      	movs	r3, #131	; 0x83
 80097dc:	461a      	mov	r2, r3
 80097de:	f04f 0300 	mov.w	r3, #0
 80097e2:	4620      	mov	r0, r4
 80097e4:	4629      	mov	r1, r5
 80097e6:	f7fa f90d 	bl	8003a04 <__aeabi_ldivmod>
 80097ea:	4602      	mov	r2, r0
 80097ec:	460b      	mov	r3, r1
 80097ee:	4610      	mov	r0, r2
 80097f0:	4619      	mov	r1, r3
 80097f2:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 80097f6:	f04f 0300 	mov.w	r3, #0
 80097fa:	f7fa f903 	bl	8003a04 <__aeabi_ldivmod>
 80097fe:	4602      	mov	r2, r0
 8009800:	460b      	mov	r3, r1
 8009802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009804:	601a      	str	r2, [r3, #0]
    gyro[1] = (long)(((long long)gyro[1]<<16) / test.gyro_sens / packet_count);
 8009806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009808:	3304      	adds	r3, #4
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	461a      	mov	r2, r3
 800980e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8009812:	ea4f 4922 	mov.w	r9, r2, asr #16
 8009816:	ea4f 4802 	mov.w	r8, r2, lsl #16
 800981a:	2383      	movs	r3, #131	; 0x83
 800981c:	461a      	mov	r2, r3
 800981e:	f04f 0300 	mov.w	r3, #0
 8009822:	4640      	mov	r0, r8
 8009824:	4649      	mov	r1, r9
 8009826:	f7fa f8ed 	bl	8003a04 <__aeabi_ldivmod>
 800982a:	4602      	mov	r2, r0
 800982c:	460b      	mov	r3, r1
 800982e:	4610      	mov	r0, r2
 8009830:	4619      	mov	r1, r3
 8009832:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8009836:	f04f 0300 	mov.w	r3, #0
 800983a:	f7fa f8e3 	bl	8003a04 <__aeabi_ldivmod>
 800983e:	4602      	mov	r2, r0
 8009840:	460b      	mov	r3, r1
 8009842:	4610      	mov	r0, r2
 8009844:	4619      	mov	r1, r3
 8009846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009848:	3304      	adds	r3, #4
 800984a:	4602      	mov	r2, r0
 800984c:	601a      	str	r2, [r3, #0]
    gyro[2] = (long)(((long long)gyro[2]<<16) / test.gyro_sens / packet_count);
 800984e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009850:	3308      	adds	r3, #8
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	461a      	mov	r2, r3
 8009856:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800985a:	1411      	asrs	r1, r2, #16
 800985c:	6179      	str	r1, [r7, #20]
 800985e:	0413      	lsls	r3, r2, #16
 8009860:	613b      	str	r3, [r7, #16]
 8009862:	2383      	movs	r3, #131	; 0x83
 8009864:	461a      	mov	r2, r3
 8009866:	f04f 0300 	mov.w	r3, #0
 800986a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800986e:	f7fa f8c9 	bl	8003a04 <__aeabi_ldivmod>
 8009872:	4602      	mov	r2, r0
 8009874:	460b      	mov	r3, r1
 8009876:	4610      	mov	r0, r2
 8009878:	4619      	mov	r1, r3
 800987a:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 800987e:	f04f 0300 	mov.w	r3, #0
 8009882:	f7fa f8bf 	bl	8003a04 <__aeabi_ldivmod>
 8009886:	4602      	mov	r2, r0
 8009888:	460b      	mov	r3, r1
 800988a:	4610      	mov	r0, r2
 800988c:	4619      	mov	r1, r3
 800988e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009890:	3308      	adds	r3, #8
 8009892:	4602      	mov	r2, r0
 8009894:	601a      	str	r2, [r3, #0]
    accel[0] = (long)(((long long)accel[0]<<16) / test.accel_sens /
 8009896:	6a3b      	ldr	r3, [r7, #32]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	461a      	mov	r2, r3
 800989c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80098a0:	1411      	asrs	r1, r2, #16
 80098a2:	60f9      	str	r1, [r7, #12]
 80098a4:	0413      	lsls	r3, r2, #16
 80098a6:	60bb      	str	r3, [r7, #8]
 80098a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80098ac:	461a      	mov	r2, r3
 80098ae:	f04f 0300 	mov.w	r3, #0
 80098b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80098b6:	f7fa f8a5 	bl	8003a04 <__aeabi_ldivmod>
 80098ba:	4602      	mov	r2, r0
 80098bc:	460b      	mov	r3, r1
 80098be:	4610      	mov	r0, r2
 80098c0:	4619      	mov	r1, r3
 80098c2:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 80098c6:	f04f 0300 	mov.w	r3, #0
 80098ca:	f7fa f89b 	bl	8003a04 <__aeabi_ldivmod>
 80098ce:	4602      	mov	r2, r0
 80098d0:	460b      	mov	r3, r1
 80098d2:	6a3b      	ldr	r3, [r7, #32]
 80098d4:	601a      	str	r2, [r3, #0]
        packet_count);
    accel[1] = (long)(((long long)accel[1]<<16) / test.accel_sens /
 80098d6:	6a3b      	ldr	r3, [r7, #32]
 80098d8:	3304      	adds	r3, #4
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	461a      	mov	r2, r3
 80098de:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80098e2:	1411      	asrs	r1, r2, #16
 80098e4:	6079      	str	r1, [r7, #4]
 80098e6:	0413      	lsls	r3, r2, #16
 80098e8:	603b      	str	r3, [r7, #0]
 80098ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80098ee:	461a      	mov	r2, r3
 80098f0:	f04f 0300 	mov.w	r3, #0
 80098f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80098f8:	f7fa f884 	bl	8003a04 <__aeabi_ldivmod>
 80098fc:	4602      	mov	r2, r0
 80098fe:	460b      	mov	r3, r1
 8009900:	4610      	mov	r0, r2
 8009902:	4619      	mov	r1, r3
 8009904:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8009908:	f04f 0300 	mov.w	r3, #0
 800990c:	f7fa f87a 	bl	8003a04 <__aeabi_ldivmod>
 8009910:	4602      	mov	r2, r0
 8009912:	460b      	mov	r3, r1
 8009914:	4610      	mov	r0, r2
 8009916:	4619      	mov	r1, r3
 8009918:	6a3b      	ldr	r3, [r7, #32]
 800991a:	3304      	adds	r3, #4
 800991c:	4602      	mov	r2, r0
 800991e:	601a      	str	r2, [r3, #0]
        packet_count);
    accel[2] = (long)(((long long)accel[2]<<16) / test.accel_sens /
 8009920:	6a3b      	ldr	r3, [r7, #32]
 8009922:	3308      	adds	r3, #8
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	461a      	mov	r2, r3
 8009928:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800992c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009930:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8009934:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009938:	461a      	mov	r2, r3
 800993a:	f04f 0300 	mov.w	r3, #0
 800993e:	4650      	mov	r0, sl
 8009940:	4659      	mov	r1, fp
 8009942:	f7fa f85f 	bl	8003a04 <__aeabi_ldivmod>
 8009946:	4602      	mov	r2, r0
 8009948:	460b      	mov	r3, r1
 800994a:	4610      	mov	r0, r2
 800994c:	4619      	mov	r1, r3
 800994e:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8009952:	f04f 0300 	mov.w	r3, #0
 8009956:	f7fa f855 	bl	8003a04 <__aeabi_ldivmod>
 800995a:	4602      	mov	r2, r0
 800995c:	460b      	mov	r3, r1
 800995e:	4610      	mov	r0, r2
 8009960:	4619      	mov	r1, r3
 8009962:	6a3b      	ldr	r3, [r7, #32]
 8009964:	3308      	adds	r3, #8
 8009966:	4602      	mov	r2, r0
 8009968:	601a      	str	r2, [r3, #0]
        packet_count);
    /* Don't remove gravity! */
    if (accel[2] > 0L)
 800996a:	6a3b      	ldr	r3, [r7, #32]
 800996c:	3308      	adds	r3, #8
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	2b00      	cmp	r3, #0
 8009972:	dd08      	ble.n	8009986 <get_st_biases+0x75e>
        accel[2] -= 65536L;
 8009974:	6a3b      	ldr	r3, [r7, #32]
 8009976:	3308      	adds	r3, #8
 8009978:	681a      	ldr	r2, [r3, #0]
 800997a:	6a3b      	ldr	r3, [r7, #32]
 800997c:	3308      	adds	r3, #8
 800997e:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 8009982:	601a      	str	r2, [r3, #0]
 8009984:	e007      	b.n	8009996 <get_st_biases+0x76e>
    else
        accel[2] += 65536L;
 8009986:	6a3b      	ldr	r3, [r7, #32]
 8009988:	3308      	adds	r3, #8
 800998a:	681a      	ldr	r2, [r3, #0]
 800998c:	6a3b      	ldr	r3, [r7, #32]
 800998e:	3308      	adds	r3, #8
 8009990:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8009994:	601a      	str	r2, [r3, #0]
#endif

    return 0;
 8009996:	2300      	movs	r3, #0
}
 8009998:	4618      	mov	r0, r3
 800999a:	3750      	adds	r7, #80	; 0x50
 800999c:	46bd      	mov	sp, r7
 800999e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80099a2:	bf00      	nop

080099a4 <mpu_run_self_test>:
 *  @param[out] gyro        Gyro biases in q16 format.
 *  @param[out] accel       Accel biases (if applicable) in q16 format.
 *  @return     Result mask (see above).
 */
int mpu_run_self_test(long *gyro, long *accel)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b08e      	sub	sp, #56	; 0x38
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
 80099ac:	6039      	str	r1, [r7, #0]
#ifdef MPU6050
    const unsigned char tries = 2;
 80099ae:	2302      	movs	r3, #2
 80099b0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int result;
    unsigned char accel_fsr, fifo_sensors, sensors_on;
    unsigned short gyro_fsr, sample_rate, lpf;
    unsigned char dmp_was_on;

    if (st.chip_cfg.dmp_on) {
 80099b4:	4b65      	ldr	r3, [pc, #404]	; (8009b4c <mpu_run_self_test+0x1a8>)
 80099b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d006      	beq.n	80099cc <mpu_run_self_test+0x28>
        mpu_set_dmp_state(0);
 80099be:	2000      	movs	r0, #0
 80099c0:	f000 fa24 	bl	8009e0c <mpu_set_dmp_state>
        dmp_was_on = 1;
 80099c4:	2301      	movs	r3, #1
 80099c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80099ca:	e002      	b.n	80099d2 <mpu_run_self_test+0x2e>
    } else
        dmp_was_on = 0;
 80099cc:	2300      	movs	r3, #0
 80099ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Get initial settings. */
    mpu_get_gyro_fsr(&gyro_fsr);
 80099d2:	f107 030c 	add.w	r3, r7, #12
 80099d6:	4618      	mov	r0, r3
 80099d8:	f7fe fc5a 	bl	8008290 <mpu_get_gyro_fsr>
    mpu_get_accel_fsr(&accel_fsr);
 80099dc:	f107 030f 	add.w	r3, r7, #15
 80099e0:	4618      	mov	r0, r3
 80099e2:	f7fe fceb 	bl	80083bc <mpu_get_accel_fsr>
    mpu_get_lpf(&lpf);
 80099e6:	f107 0308 	add.w	r3, r7, #8
 80099ea:	4618      	mov	r0, r3
 80099ec:	f7fe fd94 	bl	8008518 <mpu_get_lpf>
    mpu_get_sample_rate(&sample_rate);
 80099f0:	f107 030a 	add.w	r3, r7, #10
 80099f4:	4618      	mov	r0, r3
 80099f6:	f7fe fe29 	bl	800864c <mpu_get_sample_rate>
    sensors_on = st.chip_cfg.sensors;
 80099fa:	4b54      	ldr	r3, [pc, #336]	; (8009b4c <mpu_run_self_test+0x1a8>)
 80099fc:	7a9b      	ldrb	r3, [r3, #10]
 80099fe:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    mpu_get_fifo_config(&fifo_sensors);
 8009a02:	f107 030e 	add.w	r3, r7, #14
 8009a06:	4618      	mov	r0, r3
 8009a08:	f7fe ff22 	bl	8008850 <mpu_get_fifo_config>

    /* For older chips, the self-test will be different. */
#if defined MPU6050
    for (ii = 0; ii < tries; ii++)
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	637b      	str	r3, [r7, #52]	; 0x34
 8009a10:	e00a      	b.n	8009a28 <mpu_run_self_test+0x84>
        if (!get_st_biases(gyro, accel, 0))
 8009a12:	2200      	movs	r2, #0
 8009a14:	6839      	ldr	r1, [r7, #0]
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f7ff fc06 	bl	8009228 <get_st_biases>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d008      	beq.n	8009a34 <mpu_run_self_test+0x90>
    for (ii = 0; ii < tries; ii++)
 8009a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a24:	3301      	adds	r3, #1
 8009a26:	637b      	str	r3, [r7, #52]	; 0x34
 8009a28:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009a2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a2e:	429a      	cmp	r2, r3
 8009a30:	dbef      	blt.n	8009a12 <mpu_run_self_test+0x6e>
 8009a32:	e000      	b.n	8009a36 <mpu_run_self_test+0x92>
            break;
 8009a34:	bf00      	nop
    if (ii == tries) {
 8009a36:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009a3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a3c:	429a      	cmp	r2, r3
 8009a3e:	d102      	bne.n	8009a46 <mpu_run_self_test+0xa2>
        /* If we reach this point, we most likely encountered an I2C error.
         * We'll just report an error for all three sensors.
         */
        result = 0;
 8009a40:	2300      	movs	r3, #0
 8009a42:	633b      	str	r3, [r7, #48]	; 0x30
        goto restore;
 8009a44:	e047      	b.n	8009ad6 <mpu_run_self_test+0x132>
    }
    for (ii = 0; ii < tries; ii++)
 8009a46:	2300      	movs	r3, #0
 8009a48:	637b      	str	r3, [r7, #52]	; 0x34
 8009a4a:	e00d      	b.n	8009a68 <mpu_run_self_test+0xc4>
        if (!get_st_biases(gyro_st, accel_st, 1))
 8009a4c:	f107 0110 	add.w	r1, r7, #16
 8009a50:	f107 031c 	add.w	r3, r7, #28
 8009a54:	2201      	movs	r2, #1
 8009a56:	4618      	mov	r0, r3
 8009a58:	f7ff fbe6 	bl	8009228 <get_st_biases>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d008      	beq.n	8009a74 <mpu_run_self_test+0xd0>
    for (ii = 0; ii < tries; ii++)
 8009a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a64:	3301      	adds	r3, #1
 8009a66:	637b      	str	r3, [r7, #52]	; 0x34
 8009a68:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009a6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a6e:	429a      	cmp	r2, r3
 8009a70:	dbec      	blt.n	8009a4c <mpu_run_self_test+0xa8>
 8009a72:	e000      	b.n	8009a76 <mpu_run_self_test+0xd2>
            break;
 8009a74:	bf00      	nop
    if (ii == tries) {
 8009a76:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009a7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a7c:	429a      	cmp	r2, r3
 8009a7e:	d102      	bne.n	8009a86 <mpu_run_self_test+0xe2>
        /* Again, probably an I2C error. */
        result = 0;
 8009a80:	2300      	movs	r3, #0
 8009a82:	633b      	str	r3, [r7, #48]	; 0x30
        goto restore;
 8009a84:	e027      	b.n	8009ad6 <mpu_run_self_test+0x132>
    }
    accel_result = accel_self_test(accel, accel_st);
 8009a86:	f107 0310 	add.w	r3, r7, #16
 8009a8a:	4619      	mov	r1, r3
 8009a8c:	6838      	ldr	r0, [r7, #0]
 8009a8e:	f7ff fa79 	bl	8008f84 <accel_self_test>
 8009a92:	4603      	mov	r3, r0
 8009a94:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    gyro_result = gyro_self_test(gyro, gyro_st);
 8009a98:	f107 031c 	add.w	r3, r7, #28
 8009a9c:	4619      	mov	r1, r3
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f7ff faf6 	bl	8009090 <gyro_self_test>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    result = 0;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	633b      	str	r3, [r7, #48]	; 0x30
    if (!gyro_result)
 8009aae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d103      	bne.n	8009abe <mpu_run_self_test+0x11a>
        result |= 0x01;
 8009ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab8:	f043 0301 	orr.w	r3, r3, #1
 8009abc:	633b      	str	r3, [r7, #48]	; 0x30
    if (!accel_result)
 8009abe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d103      	bne.n	8009ace <mpu_run_self_test+0x12a>
        result |= 0x02;
 8009ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ac8:	f043 0302 	orr.w	r3, r3, #2
 8009acc:	633b      	str	r3, [r7, #48]	; 0x30
#ifdef AK89xx_SECONDARY
    compass_result = compass_self_test();
    if (!compass_result)
        result |= 0x04;
#else
        result |= 0x04;
 8009ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad0:	f043 0304 	orr.w	r3, r3, #4
 8009ad4:	633b      	str	r3, [r7, #48]	; 0x30
     */
    get_st_biases(gyro, accel, 0);
    result = 0x7;
#endif
    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.gyro_fsr = 0xFF;
 8009ad6:	4b1d      	ldr	r3, [pc, #116]	; (8009b4c <mpu_run_self_test+0x1a8>)
 8009ad8:	22ff      	movs	r2, #255	; 0xff
 8009ada:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 8009adc:	4b1b      	ldr	r3, [pc, #108]	; (8009b4c <mpu_run_self_test+0x1a8>)
 8009ade:	22ff      	movs	r2, #255	; 0xff
 8009ae0:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
 8009ae2:	4b1a      	ldr	r3, [pc, #104]	; (8009b4c <mpu_run_self_test+0x1a8>)
 8009ae4:	22ff      	movs	r2, #255	; 0xff
 8009ae6:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 8009ae8:	4b18      	ldr	r3, [pc, #96]	; (8009b4c <mpu_run_self_test+0x1a8>)
 8009aea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009aee:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.sensors = 0xFF;
 8009af0:	4b16      	ldr	r3, [pc, #88]	; (8009b4c <mpu_run_self_test+0x1a8>)
 8009af2:	22ff      	movs	r2, #255	; 0xff
 8009af4:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.fifo_enable = 0xFF;
 8009af6:	4b15      	ldr	r3, [pc, #84]	; (8009b4c <mpu_run_self_test+0x1a8>)
 8009af8:	22ff      	movs	r2, #255	; 0xff
 8009afa:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.clk_src = INV_CLK_PLL;
 8009afc:	4b13      	ldr	r3, [pc, #76]	; (8009b4c <mpu_run_self_test+0x1a8>)
 8009afe:	2201      	movs	r2, #1
 8009b00:	731a      	strb	r2, [r3, #12]
    mpu_set_gyro_fsr(gyro_fsr);
 8009b02:	89bb      	ldrh	r3, [r7, #12]
 8009b04:	4618      	mov	r0, r3
 8009b06:	f7fe fbf7 	bl	80082f8 <mpu_set_gyro_fsr>
    mpu_set_accel_fsr(accel_fsr);
 8009b0a:	7bfb      	ldrb	r3, [r7, #15]
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f7fe fc8f 	bl	8008430 <mpu_set_accel_fsr>
    mpu_set_lpf(lpf);
 8009b12:	893b      	ldrh	r3, [r7, #8]
 8009b14:	4618      	mov	r0, r3
 8009b16:	f7fe fd3d 	bl	8008594 <mpu_set_lpf>
    mpu_set_sample_rate(sample_rate);
 8009b1a:	897b      	ldrh	r3, [r7, #10]
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f7fe fdaf 	bl	8008680 <mpu_set_sample_rate>
    mpu_set_sensors(sensors_on);
 8009b22:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8009b26:	4618      	mov	r0, r3
 8009b28:	f7fe fef6 	bl	8008918 <mpu_set_sensors>
    mpu_configure_fifo(fifo_sensors);
 8009b2c:	7bbb      	ldrb	r3, [r7, #14]
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f7fe fea0 	bl	8008874 <mpu_configure_fifo>

    if (dmp_was_on)
 8009b34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d002      	beq.n	8009b42 <mpu_run_self_test+0x19e>
        mpu_set_dmp_state(1);
 8009b3c:	2001      	movs	r0, #1
 8009b3e:	f000 f965 	bl	8009e0c <mpu_set_dmp_state>

    return result;
 8009b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	3738      	adds	r7, #56	; 0x38
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}
 8009b4c:	2000001c 	.word	0x2000001c

08009b50 <mpu_write_mem>:
 *  @param[in]  data        Bytes to write to memory.
 *  @return     0 if successful.
 */
int mpu_write_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b088      	sub	sp, #32
 8009b54:	af04      	add	r7, sp, #16
 8009b56:	4603      	mov	r3, r0
 8009b58:	603a      	str	r2, [r7, #0]
 8009b5a:	80fb      	strh	r3, [r7, #6]
 8009b5c:	460b      	mov	r3, r1
 8009b5e:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d102      	bne.n	8009b6c <mpu_write_mem+0x1c>
        return -1;
 8009b66:	f04f 33ff 	mov.w	r3, #4294967295
 8009b6a:	e052      	b.n	8009c12 <mpu_write_mem+0xc2>
    if (!st.chip_cfg.sensors)
 8009b6c:	4b2b      	ldr	r3, [pc, #172]	; (8009c1c <mpu_write_mem+0xcc>)
 8009b6e:	7a9b      	ldrb	r3, [r3, #10]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d102      	bne.n	8009b7a <mpu_write_mem+0x2a>
        return -1;
 8009b74:	f04f 33ff 	mov.w	r3, #4294967295
 8009b78:	e04b      	b.n	8009c12 <mpu_write_mem+0xc2>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 8009b7a:	88fb      	ldrh	r3, [r7, #6]
 8009b7c:	0a1b      	lsrs	r3, r3, #8
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	b2db      	uxtb	r3, r3
 8009b82:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8009b84:	88fb      	ldrh	r3, [r7, #6]
 8009b86:	b2db      	uxtb	r3, r3
 8009b88:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 8009b8a:	7b7b      	ldrb	r3, [r7, #13]
 8009b8c:	461a      	mov	r2, r3
 8009b8e:	88bb      	ldrh	r3, [r7, #4]
 8009b90:	4413      	add	r3, r2
 8009b92:	4a22      	ldr	r2, [pc, #136]	; (8009c1c <mpu_write_mem+0xcc>)
 8009b94:	6852      	ldr	r2, [r2, #4]
 8009b96:	8952      	ldrh	r2, [r2, #10]
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	dd02      	ble.n	8009ba2 <mpu_write_mem+0x52>
        return -1;
 8009b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8009ba0:	e037      	b.n	8009c12 <mpu_write_mem+0xc2>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 8009ba2:	4b1e      	ldr	r3, [pc, #120]	; (8009c1c <mpu_write_mem+0xcc>)
 8009ba4:	685b      	ldr	r3, [r3, #4]
 8009ba6:	781b      	ldrb	r3, [r3, #0]
 8009ba8:	b29b      	uxth	r3, r3
 8009baa:	005b      	lsls	r3, r3, #1
 8009bac:	b299      	uxth	r1, r3
 8009bae:	4b1b      	ldr	r3, [pc, #108]	; (8009c1c <mpu_write_mem+0xcc>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	7edb      	ldrb	r3, [r3, #27]
 8009bb4:	b29a      	uxth	r2, r3
 8009bb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009bba:	9302      	str	r3, [sp, #8]
 8009bbc:	2302      	movs	r3, #2
 8009bbe:	9301      	str	r3, [sp, #4]
 8009bc0:	f107 030c 	add.w	r3, r7, #12
 8009bc4:	9300      	str	r3, [sp, #0]
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	4815      	ldr	r0, [pc, #84]	; (8009c20 <mpu_write_mem+0xd0>)
 8009bca:	f7fb fdbd 	bl	8005748 <HAL_I2C_Mem_Write>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d002      	beq.n	8009bda <mpu_write_mem+0x8a>
        return -1;
 8009bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8009bd8:	e01b      	b.n	8009c12 <mpu_write_mem+0xc2>
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
 8009bda:	4b10      	ldr	r3, [pc, #64]	; (8009c1c <mpu_write_mem+0xcc>)
 8009bdc:	685b      	ldr	r3, [r3, #4]
 8009bde:	781b      	ldrb	r3, [r3, #0]
 8009be0:	b29b      	uxth	r3, r3
 8009be2:	005b      	lsls	r3, r3, #1
 8009be4:	b299      	uxth	r1, r3
 8009be6:	4b0d      	ldr	r3, [pc, #52]	; (8009c1c <mpu_write_mem+0xcc>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	7e1b      	ldrb	r3, [r3, #24]
 8009bec:	b29a      	uxth	r2, r3
 8009bee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009bf2:	9302      	str	r3, [sp, #8]
 8009bf4:	88bb      	ldrh	r3, [r7, #4]
 8009bf6:	9301      	str	r3, [sp, #4]
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	9300      	str	r3, [sp, #0]
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	4808      	ldr	r0, [pc, #32]	; (8009c20 <mpu_write_mem+0xd0>)
 8009c00:	f7fb fda2 	bl	8005748 <HAL_I2C_Mem_Write>
 8009c04:	4603      	mov	r3, r0
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d002      	beq.n	8009c10 <mpu_write_mem+0xc0>
        return -1;
 8009c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8009c0e:	e000      	b.n	8009c12 <mpu_write_mem+0xc2>
    return 0;
 8009c10:	2300      	movs	r3, #0
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	3710      	adds	r7, #16
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}
 8009c1a:	bf00      	nop
 8009c1c:	2000001c 	.word	0x2000001c
 8009c20:	20000b20 	.word	0x20000b20

08009c24 <mpu_read_mem>:
 *  @param[out] data        Bytes read from memory.
 *  @return     0 if successful.
 */
int mpu_read_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b088      	sub	sp, #32
 8009c28:	af04      	add	r7, sp, #16
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	603a      	str	r2, [r7, #0]
 8009c2e:	80fb      	strh	r3, [r7, #6]
 8009c30:	460b      	mov	r3, r1
 8009c32:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d102      	bne.n	8009c40 <mpu_read_mem+0x1c>
        return -1;
 8009c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8009c3e:	e052      	b.n	8009ce6 <mpu_read_mem+0xc2>
    if (!st.chip_cfg.sensors)
 8009c40:	4b2b      	ldr	r3, [pc, #172]	; (8009cf0 <mpu_read_mem+0xcc>)
 8009c42:	7a9b      	ldrb	r3, [r3, #10]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d102      	bne.n	8009c4e <mpu_read_mem+0x2a>
        return -1;
 8009c48:	f04f 33ff 	mov.w	r3, #4294967295
 8009c4c:	e04b      	b.n	8009ce6 <mpu_read_mem+0xc2>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 8009c4e:	88fb      	ldrh	r3, [r7, #6]
 8009c50:	0a1b      	lsrs	r3, r3, #8
 8009c52:	b29b      	uxth	r3, r3
 8009c54:	b2db      	uxtb	r3, r3
 8009c56:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8009c58:	88fb      	ldrh	r3, [r7, #6]
 8009c5a:	b2db      	uxtb	r3, r3
 8009c5c:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 8009c5e:	7b7b      	ldrb	r3, [r7, #13]
 8009c60:	461a      	mov	r2, r3
 8009c62:	88bb      	ldrh	r3, [r7, #4]
 8009c64:	4413      	add	r3, r2
 8009c66:	4a22      	ldr	r2, [pc, #136]	; (8009cf0 <mpu_read_mem+0xcc>)
 8009c68:	6852      	ldr	r2, [r2, #4]
 8009c6a:	8952      	ldrh	r2, [r2, #10]
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	dd02      	ble.n	8009c76 <mpu_read_mem+0x52>
        return -1;
 8009c70:	f04f 33ff 	mov.w	r3, #4294967295
 8009c74:	e037      	b.n	8009ce6 <mpu_read_mem+0xc2>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 8009c76:	4b1e      	ldr	r3, [pc, #120]	; (8009cf0 <mpu_read_mem+0xcc>)
 8009c78:	685b      	ldr	r3, [r3, #4]
 8009c7a:	781b      	ldrb	r3, [r3, #0]
 8009c7c:	b29b      	uxth	r3, r3
 8009c7e:	005b      	lsls	r3, r3, #1
 8009c80:	b299      	uxth	r1, r3
 8009c82:	4b1b      	ldr	r3, [pc, #108]	; (8009cf0 <mpu_read_mem+0xcc>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	7edb      	ldrb	r3, [r3, #27]
 8009c88:	b29a      	uxth	r2, r3
 8009c8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009c8e:	9302      	str	r3, [sp, #8]
 8009c90:	2302      	movs	r3, #2
 8009c92:	9301      	str	r3, [sp, #4]
 8009c94:	f107 030c 	add.w	r3, r7, #12
 8009c98:	9300      	str	r3, [sp, #0]
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	4815      	ldr	r0, [pc, #84]	; (8009cf4 <mpu_read_mem+0xd0>)
 8009c9e:	f7fb fd53 	bl	8005748 <HAL_I2C_Mem_Write>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d002      	beq.n	8009cae <mpu_read_mem+0x8a>
        return -1;
 8009ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8009cac:	e01b      	b.n	8009ce6 <mpu_read_mem+0xc2>
    if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
 8009cae:	4b10      	ldr	r3, [pc, #64]	; (8009cf0 <mpu_read_mem+0xcc>)
 8009cb0:	685b      	ldr	r3, [r3, #4]
 8009cb2:	781b      	ldrb	r3, [r3, #0]
 8009cb4:	b29b      	uxth	r3, r3
 8009cb6:	005b      	lsls	r3, r3, #1
 8009cb8:	b299      	uxth	r1, r3
 8009cba:	4b0d      	ldr	r3, [pc, #52]	; (8009cf0 <mpu_read_mem+0xcc>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	7e1b      	ldrb	r3, [r3, #24]
 8009cc0:	b29a      	uxth	r2, r3
 8009cc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009cc6:	9302      	str	r3, [sp, #8]
 8009cc8:	88bb      	ldrh	r3, [r7, #4]
 8009cca:	9301      	str	r3, [sp, #4]
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	9300      	str	r3, [sp, #0]
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	4808      	ldr	r0, [pc, #32]	; (8009cf4 <mpu_read_mem+0xd0>)
 8009cd4:	f7fb fe32 	bl	800593c <HAL_I2C_Mem_Read>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d002      	beq.n	8009ce4 <mpu_read_mem+0xc0>
        return -1;
 8009cde:	f04f 33ff 	mov.w	r3, #4294967295
 8009ce2:	e000      	b.n	8009ce6 <mpu_read_mem+0xc2>
    return 0;
 8009ce4:	2300      	movs	r3, #0
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3710      	adds	r7, #16
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}
 8009cee:	bf00      	nop
 8009cf0:	2000001c 	.word	0x2000001c
 8009cf4:	20000b20 	.word	0x20000b20

08009cf8 <mpu_load_firmware>:
 *  @param[in]  sample_rate Fixed sampling rate used when DMP is enabled.
 *  @return     0 if successful.
 */
int mpu_load_firmware(unsigned short length, const unsigned char *firmware,
    unsigned short start_addr, unsigned short sample_rate)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b08e      	sub	sp, #56	; 0x38
 8009cfc:	af04      	add	r7, sp, #16
 8009cfe:	60b9      	str	r1, [r7, #8]
 8009d00:	4611      	mov	r1, r2
 8009d02:	461a      	mov	r2, r3
 8009d04:	4603      	mov	r3, r0
 8009d06:	81fb      	strh	r3, [r7, #14]
 8009d08:	460b      	mov	r3, r1
 8009d0a:	81bb      	strh	r3, [r7, #12]
 8009d0c:	4613      	mov	r3, r2
 8009d0e:	80fb      	strh	r3, [r7, #6]
    unsigned short this_write;
    /* Must divide evenly into st.hw->bank_size to avoid bank crossings. */
#define LOAD_CHUNK  (16)
    unsigned char cur[LOAD_CHUNK], tmp[2];

    if (st.chip_cfg.dmp_loaded)
 8009d10:	4b3c      	ldr	r3, [pc, #240]	; (8009e04 <mpu_load_firmware+0x10c>)
 8009d12:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d002      	beq.n	8009d20 <mpu_load_firmware+0x28>
        /* DMP should only be loaded once. */
        return -1;
 8009d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8009d1e:	e06d      	b.n	8009dfc <mpu_load_firmware+0x104>

    if (!firmware)
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d102      	bne.n	8009d2c <mpu_load_firmware+0x34>
        return -1;
 8009d26:	f04f 33ff 	mov.w	r3, #4294967295
 8009d2a:	e067      	b.n	8009dfc <mpu_load_firmware+0x104>
    for (ii = 0; ii < length; ii += this_write) {
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009d30:	e034      	b.n	8009d9c <mpu_load_firmware+0xa4>
        this_write = min(LOAD_CHUNK, length - ii);
 8009d32:	89fa      	ldrh	r2, [r7, #14]
 8009d34:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009d36:	1ad3      	subs	r3, r2, r3
 8009d38:	2b10      	cmp	r3, #16
 8009d3a:	bfa8      	it	ge
 8009d3c:	2310      	movge	r3, #16
 8009d3e:	84bb      	strh	r3, [r7, #36]	; 0x24
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
 8009d40:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009d42:	68ba      	ldr	r2, [r7, #8]
 8009d44:	441a      	add	r2, r3
 8009d46:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8009d48:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f7ff ff00 	bl	8009b50 <mpu_write_mem>
 8009d50:	4603      	mov	r3, r0
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d002      	beq.n	8009d5c <mpu_load_firmware+0x64>
            return -1;
 8009d56:	f04f 33ff 	mov.w	r3, #4294967295
 8009d5a:	e04f      	b.n	8009dfc <mpu_load_firmware+0x104>
        if (mpu_read_mem(ii, this_write, cur))
 8009d5c:	f107 0214 	add.w	r2, r7, #20
 8009d60:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8009d62:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009d64:	4618      	mov	r0, r3
 8009d66:	f7ff ff5d 	bl	8009c24 <mpu_read_mem>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d002      	beq.n	8009d76 <mpu_load_firmware+0x7e>
            return -1;
 8009d70:	f04f 33ff 	mov.w	r3, #4294967295
 8009d74:	e042      	b.n	8009dfc <mpu_load_firmware+0x104>
        if (memcmp(firmware+ii, cur, this_write))
 8009d76:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009d78:	68ba      	ldr	r2, [r7, #8]
 8009d7a:	4413      	add	r3, r2
 8009d7c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009d7e:	f107 0114 	add.w	r1, r7, #20
 8009d82:	4618      	mov	r0, r3
 8009d84:	f003 f99e 	bl	800d0c4 <memcmp>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d002      	beq.n	8009d94 <mpu_load_firmware+0x9c>
            return -2;
 8009d8e:	f06f 0301 	mvn.w	r3, #1
 8009d92:	e033      	b.n	8009dfc <mpu_load_firmware+0x104>
    for (ii = 0; ii < length; ii += this_write) {
 8009d94:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009d96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d98:	4413      	add	r3, r2
 8009d9a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009d9c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009d9e:	89fb      	ldrh	r3, [r7, #14]
 8009da0:	429a      	cmp	r2, r3
 8009da2:	d3c6      	bcc.n	8009d32 <mpu_load_firmware+0x3a>
    }

    /* Set program start address. */
    tmp[0] = start_addr >> 8;
 8009da4:	89bb      	ldrh	r3, [r7, #12]
 8009da6:	0a1b      	lsrs	r3, r3, #8
 8009da8:	b29b      	uxth	r3, r3
 8009daa:	b2db      	uxtb	r3, r3
 8009dac:	743b      	strb	r3, [r7, #16]
    tmp[1] = start_addr & 0xFF;
 8009dae:	89bb      	ldrh	r3, [r7, #12]
 8009db0:	b2db      	uxtb	r3, r3
 8009db2:	747b      	strb	r3, [r7, #17]
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
 8009db4:	4b13      	ldr	r3, [pc, #76]	; (8009e04 <mpu_load_firmware+0x10c>)
 8009db6:	685b      	ldr	r3, [r3, #4]
 8009db8:	781b      	ldrb	r3, [r3, #0]
 8009dba:	b29b      	uxth	r3, r3
 8009dbc:	005b      	lsls	r3, r3, #1
 8009dbe:	b299      	uxth	r1, r3
 8009dc0:	4b10      	ldr	r3, [pc, #64]	; (8009e04 <mpu_load_firmware+0x10c>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	7f5b      	ldrb	r3, [r3, #29]
 8009dc6:	b29a      	uxth	r2, r3
 8009dc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009dcc:	9302      	str	r3, [sp, #8]
 8009dce:	2302      	movs	r3, #2
 8009dd0:	9301      	str	r3, [sp, #4]
 8009dd2:	f107 0310 	add.w	r3, r7, #16
 8009dd6:	9300      	str	r3, [sp, #0]
 8009dd8:	2301      	movs	r3, #1
 8009dda:	480b      	ldr	r0, [pc, #44]	; (8009e08 <mpu_load_firmware+0x110>)
 8009ddc:	f7fb fcb4 	bl	8005748 <HAL_I2C_Mem_Write>
 8009de0:	4603      	mov	r3, r0
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d002      	beq.n	8009dec <mpu_load_firmware+0xf4>
        return -1;
 8009de6:	f04f 33ff 	mov.w	r3, #4294967295
 8009dea:	e007      	b.n	8009dfc <mpu_load_firmware+0x104>

    st.chip_cfg.dmp_loaded = 1;
 8009dec:	4b05      	ldr	r3, [pc, #20]	; (8009e04 <mpu_load_firmware+0x10c>)
 8009dee:	2201      	movs	r2, #1
 8009df0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = sample_rate;
 8009df4:	4a03      	ldr	r2, [pc, #12]	; (8009e04 <mpu_load_firmware+0x10c>)
 8009df6:	88fb      	ldrh	r3, [r7, #6]
 8009df8:	84d3      	strh	r3, [r2, #38]	; 0x26
    return 0;
 8009dfa:	2300      	movs	r3, #0
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	3728      	adds	r7, #40	; 0x28
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}
 8009e04:	2000001c 	.word	0x2000001c
 8009e08:	20000b20 	.word	0x20000b20

08009e0c <mpu_set_dmp_state>:
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b088      	sub	sp, #32
 8009e10:	af04      	add	r7, sp, #16
 8009e12:	4603      	mov	r3, r0
 8009e14:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
 8009e16:	4b30      	ldr	r3, [pc, #192]	; (8009ed8 <mpu_set_dmp_state+0xcc>)
 8009e18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009e1c:	79fa      	ldrb	r2, [r7, #7]
 8009e1e:	429a      	cmp	r2, r3
 8009e20:	d101      	bne.n	8009e26 <mpu_set_dmp_state+0x1a>
        return 0;
 8009e22:	2300      	movs	r3, #0
 8009e24:	e054      	b.n	8009ed0 <mpu_set_dmp_state+0xc4>

    if (enable) {
 8009e26:	79fb      	ldrb	r3, [r7, #7]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d031      	beq.n	8009e90 <mpu_set_dmp_state+0x84>
        if (!st.chip_cfg.dmp_loaded)
 8009e2c:	4b2a      	ldr	r3, [pc, #168]	; (8009ed8 <mpu_set_dmp_state+0xcc>)
 8009e2e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d102      	bne.n	8009e3c <mpu_set_dmp_state+0x30>
            return -1;
 8009e36:	f04f 33ff 	mov.w	r3, #4294967295
 8009e3a:	e049      	b.n	8009ed0 <mpu_set_dmp_state+0xc4>
        /* Disable data ready interrupt. */
        set_int_enable(0);
 8009e3c:	2000      	movs	r0, #0
 8009e3e:	f7fd fedb 	bl	8007bf8 <set_int_enable>
        /* Disable bypass mode. */
        mpu_set_bypass(0);
 8009e42:	2000      	movs	r0, #0
 8009e44:	f7fe fea6 	bl	8008b94 <mpu_set_bypass>
        /* Keep constant sample rate, FIFO rate controlled by DMP. */
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
 8009e48:	4b23      	ldr	r3, [pc, #140]	; (8009ed8 <mpu_set_dmp_state+0xcc>)
 8009e4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f7fe fc17 	bl	8008680 <mpu_set_sample_rate>
        /* Remove FIFO elements. */
        tmp = 0;
 8009e52:	2300      	movs	r3, #0
 8009e54:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8009e56:	4b20      	ldr	r3, [pc, #128]	; (8009ed8 <mpu_set_dmp_state+0xcc>)
 8009e58:	685b      	ldr	r3, [r3, #4]
 8009e5a:	781b      	ldrb	r3, [r3, #0]
 8009e5c:	b29b      	uxth	r3, r3
 8009e5e:	005b      	lsls	r3, r3, #1
 8009e60:	b299      	uxth	r1, r3
 8009e62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009e66:	9302      	str	r3, [sp, #8]
 8009e68:	2301      	movs	r3, #1
 8009e6a:	9301      	str	r3, [sp, #4]
 8009e6c:	f107 030f 	add.w	r3, r7, #15
 8009e70:	9300      	str	r3, [sp, #0]
 8009e72:	2301      	movs	r3, #1
 8009e74:	2223      	movs	r2, #35	; 0x23
 8009e76:	4819      	ldr	r0, [pc, #100]	; (8009edc <mpu_set_dmp_state+0xd0>)
 8009e78:	f7fb fc66 	bl	8005748 <HAL_I2C_Mem_Write>
        st.chip_cfg.dmp_on = 1;
 8009e7c:	4b16      	ldr	r3, [pc, #88]	; (8009ed8 <mpu_set_dmp_state+0xcc>)
 8009e7e:	2201      	movs	r2, #1
 8009e80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        /* Enable DMP interrupt. */
        set_int_enable(1);
 8009e84:	2001      	movs	r0, #1
 8009e86:	f7fd feb7 	bl	8007bf8 <set_int_enable>
        mpu_reset_fifo();
 8009e8a:	f7fe f87b 	bl	8007f84 <mpu_reset_fifo>
 8009e8e:	e01e      	b.n	8009ece <mpu_set_dmp_state+0xc2>
    } else {
        /* Disable DMP interrupt. */
        set_int_enable(0);
 8009e90:	2000      	movs	r0, #0
 8009e92:	f7fd feb1 	bl	8007bf8 <set_int_enable>
        /* Restore FIFO settings. */
        tmp = st.chip_cfg.fifo_enable;
 8009e96:	4b10      	ldr	r3, [pc, #64]	; (8009ed8 <mpu_set_dmp_state+0xcc>)
 8009e98:	7c1b      	ldrb	r3, [r3, #16]
 8009e9a:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8009e9c:	4b0e      	ldr	r3, [pc, #56]	; (8009ed8 <mpu_set_dmp_state+0xcc>)
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	781b      	ldrb	r3, [r3, #0]
 8009ea2:	b29b      	uxth	r3, r3
 8009ea4:	005b      	lsls	r3, r3, #1
 8009ea6:	b299      	uxth	r1, r3
 8009ea8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009eac:	9302      	str	r3, [sp, #8]
 8009eae:	2301      	movs	r3, #1
 8009eb0:	9301      	str	r3, [sp, #4]
 8009eb2:	f107 030f 	add.w	r3, r7, #15
 8009eb6:	9300      	str	r3, [sp, #0]
 8009eb8:	2301      	movs	r3, #1
 8009eba:	2223      	movs	r2, #35	; 0x23
 8009ebc:	4807      	ldr	r0, [pc, #28]	; (8009edc <mpu_set_dmp_state+0xd0>)
 8009ebe:	f7fb fc43 	bl	8005748 <HAL_I2C_Mem_Write>
        st.chip_cfg.dmp_on = 0;
 8009ec2:	4b05      	ldr	r3, [pc, #20]	; (8009ed8 <mpu_set_dmp_state+0xcc>)
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        mpu_reset_fifo();
 8009eca:	f7fe f85b 	bl	8007f84 <mpu_reset_fifo>
    }
    return 0;
 8009ece:	2300      	movs	r3, #0
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	3710      	adds	r7, #16
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}
 8009ed8:	2000001c 	.word	0x2000001c
 8009edc:	20000b20 	.word	0x20000b20

08009ee0 <dmp_load_motion_driver_firmware>:
/**
 *  @brief  Load the DMP with this image.
 *  @return 0 if successful.
 */
int dmp_load_motion_driver_firmware(void)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	af00      	add	r7, sp, #0
    return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
 8009ee4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009ee8:	23c8      	movs	r3, #200	; 0xc8
 8009eea:	4904      	ldr	r1, [pc, #16]	; (8009efc <dmp_load_motion_driver_firmware+0x1c>)
 8009eec:	f640 30f6 	movw	r0, #3062	; 0xbf6
 8009ef0:	f7ff ff02 	bl	8009cf8 <mpu_load_firmware>
 8009ef4:	4603      	mov	r3, r0
        DMP_SAMPLE_RATE);
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	bd80      	pop	{r7, pc}
 8009efa:	bf00      	nop
 8009efc:	08012b34 	.word	0x08012b34

08009f00 <dmp_set_orientation>:
 *  @e inv_orientation_matrix_to_scalar.
 *  @param[in]  orient  Gyro and accel orientation in body frame.
 *  @return     0 if successful.
 */
int dmp_set_orientation(unsigned short orient)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b088      	sub	sp, #32
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	4603      	mov	r3, r0
 8009f08:	80fb      	strh	r3, [r7, #6]
    unsigned char gyro_regs[3], accel_regs[3];
    const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
 8009f0a:	4a71      	ldr	r2, [pc, #452]	; (800a0d0 <dmp_set_orientation+0x1d0>)
 8009f0c:	f107 0314 	add.w	r3, r7, #20
 8009f10:	6812      	ldr	r2, [r2, #0]
 8009f12:	4611      	mov	r1, r2
 8009f14:	8019      	strh	r1, [r3, #0]
 8009f16:	3302      	adds	r3, #2
 8009f18:	0c12      	lsrs	r2, r2, #16
 8009f1a:	701a      	strb	r2, [r3, #0]
    const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
 8009f1c:	4a6d      	ldr	r2, [pc, #436]	; (800a0d4 <dmp_set_orientation+0x1d4>)
 8009f1e:	f107 0310 	add.w	r3, r7, #16
 8009f22:	6812      	ldr	r2, [r2, #0]
 8009f24:	4611      	mov	r1, r2
 8009f26:	8019      	strh	r1, [r3, #0]
 8009f28:	3302      	adds	r3, #2
 8009f2a:	0c12      	lsrs	r2, r2, #16
 8009f2c:	701a      	strb	r2, [r3, #0]
    const unsigned char gyro_sign[3] = {DINA36, DINA56, DINA76};
 8009f2e:	4a6a      	ldr	r2, [pc, #424]	; (800a0d8 <dmp_set_orientation+0x1d8>)
 8009f30:	f107 030c 	add.w	r3, r7, #12
 8009f34:	6812      	ldr	r2, [r2, #0]
 8009f36:	4611      	mov	r1, r2
 8009f38:	8019      	strh	r1, [r3, #0]
 8009f3a:	3302      	adds	r3, #2
 8009f3c:	0c12      	lsrs	r2, r2, #16
 8009f3e:	701a      	strb	r2, [r3, #0]
    const unsigned char accel_sign[3] = {DINA26, DINA46, DINA66};
 8009f40:	4a66      	ldr	r2, [pc, #408]	; (800a0dc <dmp_set_orientation+0x1dc>)
 8009f42:	f107 0308 	add.w	r3, r7, #8
 8009f46:	6812      	ldr	r2, [r2, #0]
 8009f48:	4611      	mov	r1, r2
 8009f4a:	8019      	strh	r1, [r3, #0]
 8009f4c:	3302      	adds	r3, #2
 8009f4e:	0c12      	lsrs	r2, r2, #16
 8009f50:	701a      	strb	r2, [r3, #0]

    gyro_regs[0] = gyro_axes[orient & 3];
 8009f52:	88fb      	ldrh	r3, [r7, #6]
 8009f54:	f003 0303 	and.w	r3, r3, #3
 8009f58:	f107 0220 	add.w	r2, r7, #32
 8009f5c:	4413      	add	r3, r2
 8009f5e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8009f62:	773b      	strb	r3, [r7, #28]
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 8009f64:	88fb      	ldrh	r3, [r7, #6]
 8009f66:	08db      	lsrs	r3, r3, #3
 8009f68:	b29b      	uxth	r3, r3
 8009f6a:	f003 0303 	and.w	r3, r3, #3
 8009f6e:	f107 0220 	add.w	r2, r7, #32
 8009f72:	4413      	add	r3, r2
 8009f74:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8009f78:	777b      	strb	r3, [r7, #29]
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
 8009f7a:	88fb      	ldrh	r3, [r7, #6]
 8009f7c:	099b      	lsrs	r3, r3, #6
 8009f7e:	b29b      	uxth	r3, r3
 8009f80:	f003 0303 	and.w	r3, r3, #3
 8009f84:	f107 0220 	add.w	r2, r7, #32
 8009f88:	4413      	add	r3, r2
 8009f8a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8009f8e:	77bb      	strb	r3, [r7, #30]
    accel_regs[0] = accel_axes[orient & 3];
 8009f90:	88fb      	ldrh	r3, [r7, #6]
 8009f92:	f003 0303 	and.w	r3, r3, #3
 8009f96:	f107 0220 	add.w	r2, r7, #32
 8009f9a:	4413      	add	r3, r2
 8009f9c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8009fa0:	763b      	strb	r3, [r7, #24]
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
 8009fa2:	88fb      	ldrh	r3, [r7, #6]
 8009fa4:	08db      	lsrs	r3, r3, #3
 8009fa6:	b29b      	uxth	r3, r3
 8009fa8:	f003 0303 	and.w	r3, r3, #3
 8009fac:	f107 0220 	add.w	r2, r7, #32
 8009fb0:	4413      	add	r3, r2
 8009fb2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8009fb6:	767b      	strb	r3, [r7, #25]
    accel_regs[2] = accel_axes[(orient >> 6) & 3];
 8009fb8:	88fb      	ldrh	r3, [r7, #6]
 8009fba:	099b      	lsrs	r3, r3, #6
 8009fbc:	b29b      	uxth	r3, r3
 8009fbe:	f003 0303 	and.w	r3, r3, #3
 8009fc2:	f107 0220 	add.w	r2, r7, #32
 8009fc6:	4413      	add	r3, r2
 8009fc8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8009fcc:	76bb      	strb	r3, [r7, #26]

    /* Chip-to-body, axes only. */
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
 8009fce:	f107 031c 	add.w	r3, r7, #28
 8009fd2:	461a      	mov	r2, r3
 8009fd4:	2103      	movs	r1, #3
 8009fd6:	f240 4026 	movw	r0, #1062	; 0x426
 8009fda:	f7ff fdb9 	bl	8009b50 <mpu_write_mem>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d002      	beq.n	8009fea <dmp_set_orientation+0xea>
        return -1;
 8009fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8009fe8:	e06e      	b.n	800a0c8 <dmp_set_orientation+0x1c8>
    if (mpu_write_mem(FCFG_2, 3, accel_regs))
 8009fea:	f107 0318 	add.w	r3, r7, #24
 8009fee:	461a      	mov	r2, r3
 8009ff0:	2103      	movs	r1, #3
 8009ff2:	f240 402a 	movw	r0, #1066	; 0x42a
 8009ff6:	f7ff fdab 	bl	8009b50 <mpu_write_mem>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d002      	beq.n	800a006 <dmp_set_orientation+0x106>
        return -1;
 800a000:	f04f 33ff 	mov.w	r3, #4294967295
 800a004:	e060      	b.n	800a0c8 <dmp_set_orientation+0x1c8>

    memcpy(gyro_regs, gyro_sign, 3);
 800a006:	f107 031c 	add.w	r3, r7, #28
 800a00a:	f107 020c 	add.w	r2, r7, #12
 800a00e:	6812      	ldr	r2, [r2, #0]
 800a010:	4611      	mov	r1, r2
 800a012:	8019      	strh	r1, [r3, #0]
 800a014:	3302      	adds	r3, #2
 800a016:	0c12      	lsrs	r2, r2, #16
 800a018:	701a      	strb	r2, [r3, #0]
    memcpy(accel_regs, accel_sign, 3);
 800a01a:	f107 0318 	add.w	r3, r7, #24
 800a01e:	f107 0208 	add.w	r2, r7, #8
 800a022:	6812      	ldr	r2, [r2, #0]
 800a024:	4611      	mov	r1, r2
 800a026:	8019      	strh	r1, [r3, #0]
 800a028:	3302      	adds	r3, #2
 800a02a:	0c12      	lsrs	r2, r2, #16
 800a02c:	701a      	strb	r2, [r3, #0]
    if (orient & 4) {
 800a02e:	88fb      	ldrh	r3, [r7, #6]
 800a030:	f003 0304 	and.w	r3, r3, #4
 800a034:	2b00      	cmp	r3, #0
 800a036:	d009      	beq.n	800a04c <dmp_set_orientation+0x14c>
        gyro_regs[0] |= 1;
 800a038:	7f3b      	ldrb	r3, [r7, #28]
 800a03a:	f043 0301 	orr.w	r3, r3, #1
 800a03e:	b2db      	uxtb	r3, r3
 800a040:	773b      	strb	r3, [r7, #28]
        accel_regs[0] |= 1;
 800a042:	7e3b      	ldrb	r3, [r7, #24]
 800a044:	f043 0301 	orr.w	r3, r3, #1
 800a048:	b2db      	uxtb	r3, r3
 800a04a:	763b      	strb	r3, [r7, #24]
    }
    if (orient & 0x20) {
 800a04c:	88fb      	ldrh	r3, [r7, #6]
 800a04e:	f003 0320 	and.w	r3, r3, #32
 800a052:	2b00      	cmp	r3, #0
 800a054:	d009      	beq.n	800a06a <dmp_set_orientation+0x16a>
        gyro_regs[1] |= 1;
 800a056:	7f7b      	ldrb	r3, [r7, #29]
 800a058:	f043 0301 	orr.w	r3, r3, #1
 800a05c:	b2db      	uxtb	r3, r3
 800a05e:	777b      	strb	r3, [r7, #29]
        accel_regs[1] |= 1;
 800a060:	7e7b      	ldrb	r3, [r7, #25]
 800a062:	f043 0301 	orr.w	r3, r3, #1
 800a066:	b2db      	uxtb	r3, r3
 800a068:	767b      	strb	r3, [r7, #25]
    }
    if (orient & 0x100) {
 800a06a:	88fb      	ldrh	r3, [r7, #6]
 800a06c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a070:	2b00      	cmp	r3, #0
 800a072:	d009      	beq.n	800a088 <dmp_set_orientation+0x188>
        gyro_regs[2] |= 1;
 800a074:	7fbb      	ldrb	r3, [r7, #30]
 800a076:	f043 0301 	orr.w	r3, r3, #1
 800a07a:	b2db      	uxtb	r3, r3
 800a07c:	77bb      	strb	r3, [r7, #30]
        accel_regs[2] |= 1;
 800a07e:	7ebb      	ldrb	r3, [r7, #26]
 800a080:	f043 0301 	orr.w	r3, r3, #1
 800a084:	b2db      	uxtb	r3, r3
 800a086:	76bb      	strb	r3, [r7, #26]
    }

    /* Chip-to-body, sign only. */
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
 800a088:	f107 031c 	add.w	r3, r7, #28
 800a08c:	461a      	mov	r2, r3
 800a08e:	2103      	movs	r1, #3
 800a090:	f44f 6088 	mov.w	r0, #1088	; 0x440
 800a094:	f7ff fd5c 	bl	8009b50 <mpu_write_mem>
 800a098:	4603      	mov	r3, r0
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d002      	beq.n	800a0a4 <dmp_set_orientation+0x1a4>
        return -1;
 800a09e:	f04f 33ff 	mov.w	r3, #4294967295
 800a0a2:	e011      	b.n	800a0c8 <dmp_set_orientation+0x1c8>
    if (mpu_write_mem(FCFG_7, 3, accel_regs))
 800a0a4:	f107 0318 	add.w	r3, r7, #24
 800a0a8:	461a      	mov	r2, r3
 800a0aa:	2103      	movs	r1, #3
 800a0ac:	f240 4031 	movw	r0, #1073	; 0x431
 800a0b0:	f7ff fd4e 	bl	8009b50 <mpu_write_mem>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d002      	beq.n	800a0c0 <dmp_set_orientation+0x1c0>
        return -1;
 800a0ba:	f04f 33ff 	mov.w	r3, #4294967295
 800a0be:	e003      	b.n	800a0c8 <dmp_set_orientation+0x1c8>
    dmp.orient = orient;
 800a0c0:	4a07      	ldr	r2, [pc, #28]	; (800a0e0 <dmp_set_orientation+0x1e0>)
 800a0c2:	88fb      	ldrh	r3, [r7, #6]
 800a0c4:	8113      	strh	r3, [r2, #8]
    return 0;
 800a0c6:	2300      	movs	r3, #0
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	3720      	adds	r7, #32
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}
 800a0d0:	080129f8 	.word	0x080129f8
 800a0d4:	080129fc 	.word	0x080129fc
 800a0d8:	08012a00 	.word	0x08012a00
 800a0dc:	08012a04 	.word	0x08012a04
 800a0e0:	20000590 	.word	0x20000590

0800a0e4 <dmp_set_fifo_rate>:
 *  Only used when DMP is on.
 *  @param[in]  rate    Desired fifo rate (Hz).
 *  @return     0 if successful.
 */
int dmp_set_fifo_rate(unsigned short rate)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b088      	sub	sp, #32
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	80fb      	strh	r3, [r7, #6]
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 800a0ee:	4a1f      	ldr	r2, [pc, #124]	; (800a16c <dmp_set_fifo_rate+0x88>)
 800a0f0:	f107 0310 	add.w	r3, r7, #16
 800a0f4:	ca07      	ldmia	r2, {r0, r1, r2}
 800a0f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
 800a0fa:	88fb      	ldrh	r3, [r7, #6]
 800a0fc:	2bc8      	cmp	r3, #200	; 0xc8
 800a0fe:	d902      	bls.n	800a106 <dmp_set_fifo_rate+0x22>
        return -1;
 800a100:	f04f 33ff 	mov.w	r3, #4294967295
 800a104:	e02e      	b.n	800a164 <dmp_set_fifo_rate+0x80>
    div = DMP_SAMPLE_RATE / rate - 1;
 800a106:	88fb      	ldrh	r3, [r7, #6]
 800a108:	22c8      	movs	r2, #200	; 0xc8
 800a10a:	fb92 f3f3 	sdiv	r3, r2, r3
 800a10e:	b29b      	uxth	r3, r3
 800a110:	3b01      	subs	r3, #1
 800a112:	83fb      	strh	r3, [r7, #30]
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
 800a114:	8bfb      	ldrh	r3, [r7, #30]
 800a116:	0a1b      	lsrs	r3, r3, #8
 800a118:	b29b      	uxth	r3, r3
 800a11a:	b2db      	uxtb	r3, r3
 800a11c:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(div & 0xFF);
 800a11e:	8bfb      	ldrh	r3, [r7, #30]
 800a120:	b2db      	uxtb	r3, r3
 800a122:	727b      	strb	r3, [r7, #9]
    if (mpu_write_mem(D_0_22, 2, tmp))
 800a124:	f107 0308 	add.w	r3, r7, #8
 800a128:	461a      	mov	r2, r3
 800a12a:	2102      	movs	r1, #2
 800a12c:	f240 2016 	movw	r0, #534	; 0x216
 800a130:	f7ff fd0e 	bl	8009b50 <mpu_write_mem>
 800a134:	4603      	mov	r3, r0
 800a136:	2b00      	cmp	r3, #0
 800a138:	d002      	beq.n	800a140 <dmp_set_fifo_rate+0x5c>
        return -1;
 800a13a:	f04f 33ff 	mov.w	r3, #4294967295
 800a13e:	e011      	b.n	800a164 <dmp_set_fifo_rate+0x80>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
 800a140:	f107 0310 	add.w	r3, r7, #16
 800a144:	461a      	mov	r2, r3
 800a146:	210c      	movs	r1, #12
 800a148:	f640 20c1 	movw	r0, #2753	; 0xac1
 800a14c:	f7ff fd00 	bl	8009b50 <mpu_write_mem>
 800a150:	4603      	mov	r3, r0
 800a152:	2b00      	cmp	r3, #0
 800a154:	d002      	beq.n	800a15c <dmp_set_fifo_rate+0x78>
        return -1;
 800a156:	f04f 33ff 	mov.w	r3, #4294967295
 800a15a:	e003      	b.n	800a164 <dmp_set_fifo_rate+0x80>

    dmp.fifo_rate = rate;
 800a15c:	4a04      	ldr	r2, [pc, #16]	; (800a170 <dmp_set_fifo_rate+0x8c>)
 800a15e:	88fb      	ldrh	r3, [r7, #6]
 800a160:	8193      	strh	r3, [r2, #12]
    return 0;
 800a162:	2300      	movs	r3, #0
}
 800a164:	4618      	mov	r0, r3
 800a166:	3720      	adds	r7, #32
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}
 800a16c:	08012a08 	.word	0x08012a08
 800a170:	20000590 	.word	0x20000590

0800a174 <dmp_set_tap_thresh>:
 *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
 *  @param[in]  thresh  Tap threshold, in mg/ms.
 *  @return     0 if successful.
 */
int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b086      	sub	sp, #24
 800a178:	af00      	add	r7, sp, #0
 800a17a:	4603      	mov	r3, r0
 800a17c:	460a      	mov	r2, r1
 800a17e:	71fb      	strb	r3, [r7, #7]
 800a180:	4613      	mov	r3, r2
 800a182:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
 800a184:	79fb      	ldrb	r3, [r7, #7]
 800a186:	f003 0307 	and.w	r3, r3, #7
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d003      	beq.n	800a196 <dmp_set_tap_thresh+0x22>
 800a18e:	88bb      	ldrh	r3, [r7, #4]
 800a190:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a194:	d902      	bls.n	800a19c <dmp_set_tap_thresh+0x28>
        return -1;
 800a196:	f04f 33ff 	mov.w	r3, #4294967295
 800a19a:	e10b      	b.n	800a3b4 <dmp_set_tap_thresh+0x240>

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
 800a19c:	88bb      	ldrh	r3, [r7, #4]
 800a19e:	ee07 3a90 	vmov	s15, r3
 800a1a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a1a6:	eddf 6a85 	vldr	s13, [pc, #532]	; 800a3bc <dmp_set_tap_thresh+0x248>
 800a1aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a1ae:	edc7 7a04 	vstr	s15, [r7, #16]

    mpu_get_accel_fsr(&accel_fsr);
 800a1b2:	f107 030b 	add.w	r3, r7, #11
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f7fe f900 	bl	80083bc <mpu_get_accel_fsr>
    switch (accel_fsr) {
 800a1bc:	7afb      	ldrb	r3, [r7, #11]
 800a1be:	3b02      	subs	r3, #2
 800a1c0:	2b0e      	cmp	r3, #14
 800a1c2:	d87d      	bhi.n	800a2c0 <dmp_set_tap_thresh+0x14c>
 800a1c4:	a201      	add	r2, pc, #4	; (adr r2, 800a1cc <dmp_set_tap_thresh+0x58>)
 800a1c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ca:	bf00      	nop
 800a1cc:	0800a209 	.word	0x0800a209
 800a1d0:	0800a2c1 	.word	0x0800a2c1
 800a1d4:	0800a237 	.word	0x0800a237
 800a1d8:	0800a2c1 	.word	0x0800a2c1
 800a1dc:	0800a2c1 	.word	0x0800a2c1
 800a1e0:	0800a2c1 	.word	0x0800a2c1
 800a1e4:	0800a265 	.word	0x0800a265
 800a1e8:	0800a2c1 	.word	0x0800a2c1
 800a1ec:	0800a2c1 	.word	0x0800a2c1
 800a1f0:	0800a2c1 	.word	0x0800a2c1
 800a1f4:	0800a2c1 	.word	0x0800a2c1
 800a1f8:	0800a2c1 	.word	0x0800a2c1
 800a1fc:	0800a2c1 	.word	0x0800a2c1
 800a200:	0800a2c1 	.word	0x0800a2c1
 800a204:	0800a293 	.word	0x0800a293
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
 800a208:	edd7 7a04 	vldr	s15, [r7, #16]
 800a20c:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 800a3c0 <dmp_set_tap_thresh+0x24c>
 800a210:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a214:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a218:	ee17 3a90 	vmov	r3, s15
 800a21c:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
 800a21e:	edd7 7a04 	vldr	s15, [r7, #16]
 800a222:	ed9f 7a68 	vldr	s14, [pc, #416]	; 800a3c4 <dmp_set_tap_thresh+0x250>
 800a226:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a22a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a22e:	ee17 3a90 	vmov	r3, s15
 800a232:	82bb      	strh	r3, [r7, #20]
        break;
 800a234:	e047      	b.n	800a2c6 <dmp_set_tap_thresh+0x152>
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
 800a236:	edd7 7a04 	vldr	s15, [r7, #16]
 800a23a:	ed9f 7a63 	vldr	s14, [pc, #396]	; 800a3c8 <dmp_set_tap_thresh+0x254>
 800a23e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a242:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a246:	ee17 3a90 	vmov	r3, s15
 800a24a:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
 800a24c:	edd7 7a04 	vldr	s15, [r7, #16]
 800a250:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 800a3cc <dmp_set_tap_thresh+0x258>
 800a254:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a258:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a25c:	ee17 3a90 	vmov	r3, s15
 800a260:	82bb      	strh	r3, [r7, #20]
        break;
 800a262:	e030      	b.n	800a2c6 <dmp_set_tap_thresh+0x152>
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
 800a264:	edd7 7a04 	vldr	s15, [r7, #16]
 800a268:	ed9f 7a59 	vldr	s14, [pc, #356]	; 800a3d0 <dmp_set_tap_thresh+0x25c>
 800a26c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a270:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a274:	ee17 3a90 	vmov	r3, s15
 800a278:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
 800a27a:	edd7 7a04 	vldr	s15, [r7, #16]
 800a27e:	ed9f 7a55 	vldr	s14, [pc, #340]	; 800a3d4 <dmp_set_tap_thresh+0x260>
 800a282:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a286:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a28a:	ee17 3a90 	vmov	r3, s15
 800a28e:	82bb      	strh	r3, [r7, #20]
        break;
 800a290:	e019      	b.n	800a2c6 <dmp_set_tap_thresh+0x152>
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
 800a292:	edd7 7a04 	vldr	s15, [r7, #16]
 800a296:	ed9f 7a50 	vldr	s14, [pc, #320]	; 800a3d8 <dmp_set_tap_thresh+0x264>
 800a29a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a29e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2a2:	ee17 3a90 	vmov	r3, s15
 800a2a6:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
 800a2a8:	edd7 7a04 	vldr	s15, [r7, #16]
 800a2ac:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800a3dc <dmp_set_tap_thresh+0x268>
 800a2b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a2b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2b8:	ee17 3a90 	vmov	r3, s15
 800a2bc:	82bb      	strh	r3, [r7, #20]
        break;
 800a2be:	e002      	b.n	800a2c6 <dmp_set_tap_thresh+0x152>
    default:
        return -1;
 800a2c0:	f04f 33ff 	mov.w	r3, #4294967295
 800a2c4:	e076      	b.n	800a3b4 <dmp_set_tap_thresh+0x240>
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
 800a2c6:	8afb      	ldrh	r3, [r7, #22]
 800a2c8:	0a1b      	lsrs	r3, r3, #8
 800a2ca:	b29b      	uxth	r3, r3
 800a2cc:	b2db      	uxtb	r3, r3
 800a2ce:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
 800a2d0:	8afb      	ldrh	r3, [r7, #22]
 800a2d2:	b2db      	uxtb	r3, r3
 800a2d4:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
 800a2d6:	8abb      	ldrh	r3, [r7, #20]
 800a2d8:	0a1b      	lsrs	r3, r3, #8
 800a2da:	b29b      	uxth	r3, r3
 800a2dc:	b2db      	uxtb	r3, r3
 800a2de:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
 800a2e0:	8abb      	ldrh	r3, [r7, #20]
 800a2e2:	b2db      	uxtb	r3, r3
 800a2e4:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X) {
 800a2e6:	79fb      	ldrb	r3, [r7, #7]
 800a2e8:	f003 0301 	and.w	r3, r3, #1
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d01c      	beq.n	800a32a <dmp_set_tap_thresh+0x1b6>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
 800a2f0:	f107 030c 	add.w	r3, r7, #12
 800a2f4:	461a      	mov	r2, r3
 800a2f6:	2102      	movs	r1, #2
 800a2f8:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
 800a2fc:	f7ff fc28 	bl	8009b50 <mpu_write_mem>
 800a300:	4603      	mov	r3, r0
 800a302:	2b00      	cmp	r3, #0
 800a304:	d002      	beq.n	800a30c <dmp_set_tap_thresh+0x198>
            return -1;
 800a306:	f04f 33ff 	mov.w	r3, #4294967295
 800a30a:	e053      	b.n	800a3b4 <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_36, 2, tmp+2))
 800a30c:	f107 030c 	add.w	r3, r7, #12
 800a310:	3302      	adds	r3, #2
 800a312:	461a      	mov	r2, r3
 800a314:	2102      	movs	r1, #2
 800a316:	f44f 7092 	mov.w	r0, #292	; 0x124
 800a31a:	f7ff fc19 	bl	8009b50 <mpu_write_mem>
 800a31e:	4603      	mov	r3, r0
 800a320:	2b00      	cmp	r3, #0
 800a322:	d002      	beq.n	800a32a <dmp_set_tap_thresh+0x1b6>
            return -1;
 800a324:	f04f 33ff 	mov.w	r3, #4294967295
 800a328:	e044      	b.n	800a3b4 <dmp_set_tap_thresh+0x240>
    }
    if (axis & TAP_Y) {
 800a32a:	79fb      	ldrb	r3, [r7, #7]
 800a32c:	f003 0302 	and.w	r3, r3, #2
 800a330:	2b00      	cmp	r3, #0
 800a332:	d01c      	beq.n	800a36e <dmp_set_tap_thresh+0x1fa>
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
 800a334:	f107 030c 	add.w	r3, r7, #12
 800a338:	461a      	mov	r2, r3
 800a33a:	2102      	movs	r1, #2
 800a33c:	f44f 70ec 	mov.w	r0, #472	; 0x1d8
 800a340:	f7ff fc06 	bl	8009b50 <mpu_write_mem>
 800a344:	4603      	mov	r3, r0
 800a346:	2b00      	cmp	r3, #0
 800a348:	d002      	beq.n	800a350 <dmp_set_tap_thresh+0x1dc>
            return -1;
 800a34a:	f04f 33ff 	mov.w	r3, #4294967295
 800a34e:	e031      	b.n	800a3b4 <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_40, 2, tmp+2))
 800a350:	f107 030c 	add.w	r3, r7, #12
 800a354:	3302      	adds	r3, #2
 800a356:	461a      	mov	r2, r3
 800a358:	2102      	movs	r1, #2
 800a35a:	f44f 7094 	mov.w	r0, #296	; 0x128
 800a35e:	f7ff fbf7 	bl	8009b50 <mpu_write_mem>
 800a362:	4603      	mov	r3, r0
 800a364:	2b00      	cmp	r3, #0
 800a366:	d002      	beq.n	800a36e <dmp_set_tap_thresh+0x1fa>
            return -1;
 800a368:	f04f 33ff 	mov.w	r3, #4294967295
 800a36c:	e022      	b.n	800a3b4 <dmp_set_tap_thresh+0x240>
    }
    if (axis & TAP_Z) {
 800a36e:	79fb      	ldrb	r3, [r7, #7]
 800a370:	f003 0304 	and.w	r3, r3, #4
 800a374:	2b00      	cmp	r3, #0
 800a376:	d01c      	beq.n	800a3b2 <dmp_set_tap_thresh+0x23e>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
 800a378:	f107 030c 	add.w	r3, r7, #12
 800a37c:	461a      	mov	r2, r3
 800a37e:	2102      	movs	r1, #2
 800a380:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
 800a384:	f7ff fbe4 	bl	8009b50 <mpu_write_mem>
 800a388:	4603      	mov	r3, r0
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d002      	beq.n	800a394 <dmp_set_tap_thresh+0x220>
            return -1;
 800a38e:	f04f 33ff 	mov.w	r3, #4294967295
 800a392:	e00f      	b.n	800a3b4 <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_44, 2, tmp+2))
 800a394:	f107 030c 	add.w	r3, r7, #12
 800a398:	3302      	adds	r3, #2
 800a39a:	461a      	mov	r2, r3
 800a39c:	2102      	movs	r1, #2
 800a39e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800a3a2:	f7ff fbd5 	bl	8009b50 <mpu_write_mem>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d002      	beq.n	800a3b2 <dmp_set_tap_thresh+0x23e>
            return -1;
 800a3ac:	f04f 33ff 	mov.w	r3, #4294967295
 800a3b0:	e000      	b.n	800a3b4 <dmp_set_tap_thresh+0x240>
    }
    return 0;
 800a3b2:	2300      	movs	r3, #0
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3718      	adds	r7, #24
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}
 800a3bc:	43480000 	.word	0x43480000
 800a3c0:	46800000 	.word	0x46800000
 800a3c4:	46400000 	.word	0x46400000
 800a3c8:	46000000 	.word	0x46000000
 800a3cc:	45c00000 	.word	0x45c00000
 800a3d0:	45800000 	.word	0x45800000
 800a3d4:	45400000 	.word	0x45400000
 800a3d8:	45000000 	.word	0x45000000
 800a3dc:	44c00000 	.word	0x44c00000

0800a3e0 <dmp_set_tap_axes>:
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b084      	sub	sp, #16
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp = 0;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X)
 800a3ee:	79fb      	ldrb	r3, [r7, #7]
 800a3f0:	f003 0301 	and.w	r3, r3, #1
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d004      	beq.n	800a402 <dmp_set_tap_axes+0x22>
        tmp |= 0x30;
 800a3f8:	7bfb      	ldrb	r3, [r7, #15]
 800a3fa:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800a3fe:	b2db      	uxtb	r3, r3
 800a400:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Y)
 800a402:	79fb      	ldrb	r3, [r7, #7]
 800a404:	f003 0302 	and.w	r3, r3, #2
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d004      	beq.n	800a416 <dmp_set_tap_axes+0x36>
        tmp |= 0x0C;
 800a40c:	7bfb      	ldrb	r3, [r7, #15]
 800a40e:	f043 030c 	orr.w	r3, r3, #12
 800a412:	b2db      	uxtb	r3, r3
 800a414:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Z)
 800a416:	79fb      	ldrb	r3, [r7, #7]
 800a418:	f003 0304 	and.w	r3, r3, #4
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d004      	beq.n	800a42a <dmp_set_tap_axes+0x4a>
        tmp |= 0x03;
 800a420:	7bfb      	ldrb	r3, [r7, #15]
 800a422:	f043 0303 	orr.w	r3, r3, #3
 800a426:	b2db      	uxtb	r3, r3
 800a428:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_72, 1, &tmp);
 800a42a:	f107 030f 	add.w	r3, r7, #15
 800a42e:	461a      	mov	r2, r3
 800a430:	2101      	movs	r1, #1
 800a432:	f44f 70a4 	mov.w	r0, #328	; 0x148
 800a436:	f7ff fb8b 	bl	8009b50 <mpu_write_mem>
 800a43a:	4603      	mov	r3, r0
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	3710      	adds	r7, #16
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <dmp_set_tap_count>:
 *  @brief      Set minimum number of taps needed for an interrupt.
 *  @param[in]  min_taps    Minimum consecutive taps (1-4).
 *  @return     0 if successful.
 */
int dmp_set_tap_count(unsigned char min_taps)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b084      	sub	sp, #16
 800a448:	af00      	add	r7, sp, #0
 800a44a:	4603      	mov	r3, r0
 800a44c:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (min_taps < 1)
 800a44e:	79fb      	ldrb	r3, [r7, #7]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d102      	bne.n	800a45a <dmp_set_tap_count+0x16>
        min_taps = 1;
 800a454:	2301      	movs	r3, #1
 800a456:	71fb      	strb	r3, [r7, #7]
 800a458:	e004      	b.n	800a464 <dmp_set_tap_count+0x20>
    else if (min_taps > 4)
 800a45a:	79fb      	ldrb	r3, [r7, #7]
 800a45c:	2b04      	cmp	r3, #4
 800a45e:	d901      	bls.n	800a464 <dmp_set_tap_count+0x20>
        min_taps = 4;
 800a460:	2304      	movs	r3, #4
 800a462:	71fb      	strb	r3, [r7, #7]

    tmp = min_taps - 1;
 800a464:	79fb      	ldrb	r3, [r7, #7]
 800a466:	3b01      	subs	r3, #1
 800a468:	b2db      	uxtb	r3, r3
 800a46a:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_79, 1, &tmp);
 800a46c:	f107 030f 	add.w	r3, r7, #15
 800a470:	461a      	mov	r2, r3
 800a472:	2101      	movs	r1, #1
 800a474:	f240 104f 	movw	r0, #335	; 0x14f
 800a478:	f7ff fb6a 	bl	8009b50 <mpu_write_mem>
 800a47c:	4603      	mov	r3, r0
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3710      	adds	r7, #16
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}
	...

0800a488 <dmp_set_tap_time>:
 *  @brief      Set length between valid taps.
 *  @param[in]  time    Milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time(unsigned short time)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b084      	sub	sp, #16
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	4603      	mov	r3, r0
 800a490:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 800a492:	88fb      	ldrh	r3, [r7, #6]
 800a494:	4a0c      	ldr	r2, [pc, #48]	; (800a4c8 <dmp_set_tap_time+0x40>)
 800a496:	fba2 2303 	umull	r2, r3, r2, r3
 800a49a:	089b      	lsrs	r3, r3, #2
 800a49c:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 800a49e:	89fb      	ldrh	r3, [r7, #14]
 800a4a0:	0a1b      	lsrs	r3, r3, #8
 800a4a2:	b29b      	uxth	r3, r3
 800a4a4:	b2db      	uxtb	r3, r3
 800a4a6:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 800a4a8:	89fb      	ldrh	r3, [r7, #14]
 800a4aa:	b2db      	uxtb	r3, r3
 800a4ac:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
 800a4ae:	f107 030c 	add.w	r3, r7, #12
 800a4b2:	461a      	mov	r2, r3
 800a4b4:	2102      	movs	r1, #2
 800a4b6:	f44f 70ef 	mov.w	r0, #478	; 0x1de
 800a4ba:	f7ff fb49 	bl	8009b50 <mpu_write_mem>
 800a4be:	4603      	mov	r3, r0
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3710      	adds	r7, #16
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}
 800a4c8:	cccccccd 	.word	0xcccccccd

0800a4cc <dmp_set_tap_time_multi>:
 *  @brief      Set max time between taps to register as a multi-tap.
 *  @param[in]  time    Max milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time_multi(unsigned short time)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b084      	sub	sp, #16
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 800a4d6:	88fb      	ldrh	r3, [r7, #6]
 800a4d8:	4a0c      	ldr	r2, [pc, #48]	; (800a50c <dmp_set_tap_time_multi+0x40>)
 800a4da:	fba2 2303 	umull	r2, r3, r2, r3
 800a4de:	089b      	lsrs	r3, r3, #2
 800a4e0:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 800a4e2:	89fb      	ldrh	r3, [r7, #14]
 800a4e4:	0a1b      	lsrs	r3, r3, #8
 800a4e6:	b29b      	uxth	r3, r3
 800a4e8:	b2db      	uxtb	r3, r3
 800a4ea:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 800a4ec:	89fb      	ldrh	r3, [r7, #14]
 800a4ee:	b2db      	uxtb	r3, r3
 800a4f0:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_218, 2, tmp);
 800a4f2:	f107 030c 	add.w	r3, r7, #12
 800a4f6:	461a      	mov	r2, r3
 800a4f8:	2102      	movs	r1, #2
 800a4fa:	f44f 70ed 	mov.w	r0, #474	; 0x1da
 800a4fe:	f7ff fb27 	bl	8009b50 <mpu_write_mem>
 800a502:	4603      	mov	r3, r0
}
 800a504:	4618      	mov	r0, r3
 800a506:	3710      	adds	r7, #16
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}
 800a50c:	cccccccd 	.word	0xcccccccd

0800a510 <dmp_set_shake_reject_thresh>:
 *  @param[in]  sf      Gyro scale factor.
 *  @param[in]  thresh  Gyro threshold in dps.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b084      	sub	sp, #16
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
 800a518:	460b      	mov	r3, r1
 800a51a:	807b      	strh	r3, [r7, #2]
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	4a13      	ldr	r2, [pc, #76]	; (800a56c <dmp_set_shake_reject_thresh+0x5c>)
 800a520:	fb82 1203 	smull	r1, r2, r2, r3
 800a524:	1192      	asrs	r2, r2, #6
 800a526:	17db      	asrs	r3, r3, #31
 800a528:	1ad3      	subs	r3, r2, r3
 800a52a:	887a      	ldrh	r2, [r7, #2]
 800a52c:	fb02 f303 	mul.w	r3, r2, r3
 800a530:	60fb      	str	r3, [r7, #12]
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	161b      	asrs	r3, r3, #24
 800a536:	b2db      	uxtb	r3, r3
 800a538:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	141b      	asrs	r3, r3, #16
 800a53e:	b2db      	uxtb	r3, r3
 800a540:	727b      	strb	r3, [r7, #9]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	121b      	asrs	r3, r3, #8
 800a546:	b2db      	uxtb	r3, r3
 800a548:	72bb      	strb	r3, [r7, #10]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	b2db      	uxtb	r3, r3
 800a54e:	72fb      	strb	r3, [r7, #11]
    return mpu_write_mem(D_1_92, 4, tmp);
 800a550:	f107 0308 	add.w	r3, r7, #8
 800a554:	461a      	mov	r2, r3
 800a556:	2104      	movs	r1, #4
 800a558:	f44f 70ae 	mov.w	r0, #348	; 0x15c
 800a55c:	f7ff faf8 	bl	8009b50 <mpu_write_mem>
 800a560:	4603      	mov	r3, r0
}
 800a562:	4618      	mov	r0, r3
 800a564:	3710      	adds	r7, #16
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}
 800a56a:	bf00      	nop
 800a56c:	10624dd3 	.word	0x10624dd3

0800a570 <dmp_set_shake_reject_time>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_time(unsigned short time)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b084      	sub	sp, #16
 800a574:	af00      	add	r7, sp, #0
 800a576:	4603      	mov	r3, r0
 800a578:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 800a57a:	88fb      	ldrh	r3, [r7, #6]
 800a57c:	4a0c      	ldr	r2, [pc, #48]	; (800a5b0 <dmp_set_shake_reject_time+0x40>)
 800a57e:	fba2 2303 	umull	r2, r3, r2, r3
 800a582:	089b      	lsrs	r3, r3, #2
 800a584:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 800a586:	88fb      	ldrh	r3, [r7, #6]
 800a588:	0a1b      	lsrs	r3, r3, #8
 800a58a:	b29b      	uxth	r3, r3
 800a58c:	b2db      	uxtb	r3, r3
 800a58e:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 800a590:	88fb      	ldrh	r3, [r7, #6]
 800a592:	b2db      	uxtb	r3, r3
 800a594:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_90,2,tmp);
 800a596:	f107 030c 	add.w	r3, r7, #12
 800a59a:	461a      	mov	r2, r3
 800a59c:	2102      	movs	r1, #2
 800a59e:	f44f 70ad 	mov.w	r0, #346	; 0x15a
 800a5a2:	f7ff fad5 	bl	8009b50 <mpu_write_mem>
 800a5a6:	4603      	mov	r3, r0
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3710      	adds	r7, #16
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}
 800a5b0:	cccccccd 	.word	0xcccccccd

0800a5b4 <dmp_set_shake_reject_timeout>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_timeout(unsigned short time)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b084      	sub	sp, #16
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 800a5be:	88fb      	ldrh	r3, [r7, #6]
 800a5c0:	4a0c      	ldr	r2, [pc, #48]	; (800a5f4 <dmp_set_shake_reject_timeout+0x40>)
 800a5c2:	fba2 2303 	umull	r2, r3, r2, r3
 800a5c6:	089b      	lsrs	r3, r3, #2
 800a5c8:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 800a5ca:	88fb      	ldrh	r3, [r7, #6]
 800a5cc:	0a1b      	lsrs	r3, r3, #8
 800a5ce:	b29b      	uxth	r3, r3
 800a5d0:	b2db      	uxtb	r3, r3
 800a5d2:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 800a5d4:	88fb      	ldrh	r3, [r7, #6]
 800a5d6:	b2db      	uxtb	r3, r3
 800a5d8:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_88,2,tmp);
 800a5da:	f107 030c 	add.w	r3, r7, #12
 800a5de:	461a      	mov	r2, r3
 800a5e0:	2102      	movs	r1, #2
 800a5e2:	f44f 70ac 	mov.w	r0, #344	; 0x158
 800a5e6:	f7ff fab3 	bl	8009b50 <mpu_write_mem>
 800a5ea:	4603      	mov	r3, r0
}
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	3710      	adds	r7, #16
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}
 800a5f4:	cccccccd 	.word	0xcccccccd

0800a5f8 <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b086      	sub	sp, #24
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	4603      	mov	r3, r0
 800a600:	80fb      	strh	r3, [r7, #6]

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
 800a602:	2302      	movs	r3, #2
 800a604:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
 800a606:	23ca      	movs	r3, #202	; 0xca
 800a608:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
 800a60a:	23e3      	movs	r3, #227	; 0xe3
 800a60c:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
 800a60e:	2309      	movs	r3, #9
 800a610:	73fb      	strb	r3, [r7, #15]
    mpu_write_mem(D_0_104, 4, tmp);
 800a612:	f107 030c 	add.w	r3, r7, #12
 800a616:	461a      	mov	r2, r3
 800a618:	2104      	movs	r1, #4
 800a61a:	2068      	movs	r0, #104	; 0x68
 800a61c:	f7ff fa98 	bl	8009b50 <mpu_write_mem>

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
 800a620:	23a3      	movs	r3, #163	; 0xa3
 800a622:	733b      	strb	r3, [r7, #12]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 800a624:	88fb      	ldrh	r3, [r7, #6]
 800a626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d006      	beq.n	800a63c <dmp_enable_feature+0x44>
        tmp[1] = 0xC0;
 800a62e:	23c0      	movs	r3, #192	; 0xc0
 800a630:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xC8;
 800a632:	23c8      	movs	r3, #200	; 0xc8
 800a634:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xC2;
 800a636:	23c2      	movs	r3, #194	; 0xc2
 800a638:	73fb      	strb	r3, [r7, #15]
 800a63a:	e005      	b.n	800a648 <dmp_enable_feature+0x50>
    } else {
        tmp[1] = 0xA3;
 800a63c:	23a3      	movs	r3, #163	; 0xa3
 800a63e:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xA3;
 800a640:	23a3      	movs	r3, #163	; 0xa3
 800a642:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xA3;
 800a644:	23a3      	movs	r3, #163	; 0xa3
 800a646:	73fb      	strb	r3, [r7, #15]
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 800a648:	88fb      	ldrh	r3, [r7, #6]
 800a64a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d006      	beq.n	800a660 <dmp_enable_feature+0x68>
        tmp[4] = 0xC4;
 800a652:	23c4      	movs	r3, #196	; 0xc4
 800a654:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xCC;
 800a656:	23cc      	movs	r3, #204	; 0xcc
 800a658:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xC6;
 800a65a:	23c6      	movs	r3, #198	; 0xc6
 800a65c:	74bb      	strb	r3, [r7, #18]
 800a65e:	e005      	b.n	800a66c <dmp_enable_feature+0x74>
    } else {
        tmp[4] = 0xA3;
 800a660:	23a3      	movs	r3, #163	; 0xa3
 800a662:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xA3;
 800a664:	23a3      	movs	r3, #163	; 0xa3
 800a666:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xA3;
 800a668:	23a3      	movs	r3, #163	; 0xa3
 800a66a:	74bb      	strb	r3, [r7, #18]
    }
    tmp[7] = 0xA3;
 800a66c:	23a3      	movs	r3, #163	; 0xa3
 800a66e:	74fb      	strb	r3, [r7, #19]
    tmp[8] = 0xA3;
 800a670:	23a3      	movs	r3, #163	; 0xa3
 800a672:	753b      	strb	r3, [r7, #20]
    tmp[9] = 0xA3;
 800a674:	23a3      	movs	r3, #163	; 0xa3
 800a676:	757b      	strb	r3, [r7, #21]
    mpu_write_mem(CFG_15,10,tmp);
 800a678:	f107 030c 	add.w	r3, r7, #12
 800a67c:	461a      	mov	r2, r3
 800a67e:	210a      	movs	r1, #10
 800a680:	f640 20a7 	movw	r0, #2727	; 0xaa7
 800a684:	f7ff fa64 	bl	8009b50 <mpu_write_mem>

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 800a688:	88fb      	ldrh	r3, [r7, #6]
 800a68a:	f003 0303 	and.w	r3, r3, #3
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d002      	beq.n	800a698 <dmp_enable_feature+0xa0>
        tmp[0] = DINA20;
 800a692:	2320      	movs	r3, #32
 800a694:	733b      	strb	r3, [r7, #12]
 800a696:	e001      	b.n	800a69c <dmp_enable_feature+0xa4>
    else
        tmp[0] = 0xD8;
 800a698:	23d8      	movs	r3, #216	; 0xd8
 800a69a:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_27,1,tmp);
 800a69c:	f107 030c 	add.w	r3, r7, #12
 800a6a0:	461a      	mov	r2, r3
 800a6a2:	2101      	movs	r1, #1
 800a6a4:	f640 20b6 	movw	r0, #2742	; 0xab6
 800a6a8:	f7ff fa52 	bl	8009b50 <mpu_write_mem>

    if (mask & DMP_FEATURE_GYRO_CAL)
 800a6ac:	88fb      	ldrh	r3, [r7, #6]
 800a6ae:	f003 0320 	and.w	r3, r3, #32
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d003      	beq.n	800a6be <dmp_enable_feature+0xc6>
        dmp_enable_gyro_cal(1);
 800a6b6:	2001      	movs	r0, #1
 800a6b8:	f000 f8c6 	bl	800a848 <dmp_enable_gyro_cal>
 800a6bc:	e002      	b.n	800a6c4 <dmp_enable_feature+0xcc>
    else
        dmp_enable_gyro_cal(0);
 800a6be:	2000      	movs	r0, #0
 800a6c0:	f000 f8c2 	bl	800a848 <dmp_enable_gyro_cal>

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 800a6c4:	88fb      	ldrh	r3, [r7, #6]
 800a6c6:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d01d      	beq.n	800a70a <dmp_enable_feature+0x112>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
 800a6ce:	88fb      	ldrh	r3, [r7, #6]
 800a6d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d008      	beq.n	800a6ea <dmp_enable_feature+0xf2>
            tmp[0] = 0xB2;
 800a6d8:	23b2      	movs	r3, #178	; 0xb2
 800a6da:	733b      	strb	r3, [r7, #12]
            tmp[1] = 0x8B;
 800a6dc:	238b      	movs	r3, #139	; 0x8b
 800a6de:	737b      	strb	r3, [r7, #13]
            tmp[2] = 0xB6;
 800a6e0:	23b6      	movs	r3, #182	; 0xb6
 800a6e2:	73bb      	strb	r3, [r7, #14]
            tmp[3] = 0x9B;
 800a6e4:	239b      	movs	r3, #155	; 0x9b
 800a6e6:	73fb      	strb	r3, [r7, #15]
 800a6e8:	e007      	b.n	800a6fa <dmp_enable_feature+0x102>
        } else {
            tmp[0] = DINAC0;
 800a6ea:	23b0      	movs	r3, #176	; 0xb0
 800a6ec:	733b      	strb	r3, [r7, #12]
            tmp[1] = DINA80;
 800a6ee:	2380      	movs	r3, #128	; 0x80
 800a6f0:	737b      	strb	r3, [r7, #13]
            tmp[2] = DINAC2;
 800a6f2:	23b4      	movs	r3, #180	; 0xb4
 800a6f4:	73bb      	strb	r3, [r7, #14]
            tmp[3] = DINA90;
 800a6f6:	2390      	movs	r3, #144	; 0x90
 800a6f8:	73fb      	strb	r3, [r7, #15]
        }
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
 800a6fa:	f107 030c 	add.w	r3, r7, #12
 800a6fe:	461a      	mov	r2, r3
 800a700:	2104      	movs	r1, #4
 800a702:	f640 20a2 	movw	r0, #2722	; 0xaa2
 800a706:	f7ff fa23 	bl	8009b50 <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_TAP) {
 800a70a:	88fb      	ldrh	r3, [r7, #6]
 800a70c:	f003 0301 	and.w	r3, r3, #1
 800a710:	2b00      	cmp	r3, #0
 800a712:	d025      	beq.n	800a760 <dmp_enable_feature+0x168>
        /* Enable tap. */
        tmp[0] = 0xF8;
 800a714:	23f8      	movs	r3, #248	; 0xf8
 800a716:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 800a718:	f107 030c 	add.w	r3, r7, #12
 800a71c:	461a      	mov	r2, r3
 800a71e:	2101      	movs	r1, #1
 800a720:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
 800a724:	f7ff fa14 	bl	8009b50 <mpu_write_mem>
        dmp_set_tap_thresh(TAP_XYZ, 250);
 800a728:	21fa      	movs	r1, #250	; 0xfa
 800a72a:	2007      	movs	r0, #7
 800a72c:	f7ff fd22 	bl	800a174 <dmp_set_tap_thresh>
        dmp_set_tap_axes(TAP_XYZ);
 800a730:	2007      	movs	r0, #7
 800a732:	f7ff fe55 	bl	800a3e0 <dmp_set_tap_axes>
        dmp_set_tap_count(1);
 800a736:	2001      	movs	r0, #1
 800a738:	f7ff fe84 	bl	800a444 <dmp_set_tap_count>
        dmp_set_tap_time(100);
 800a73c:	2064      	movs	r0, #100	; 0x64
 800a73e:	f7ff fea3 	bl	800a488 <dmp_set_tap_time>
        dmp_set_tap_time_multi(500);
 800a742:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a746:	f7ff fec1 	bl	800a4cc <dmp_set_tap_time_multi>

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
 800a74a:	21c8      	movs	r1, #200	; 0xc8
 800a74c:	483c      	ldr	r0, [pc, #240]	; (800a840 <dmp_enable_feature+0x248>)
 800a74e:	f7ff fedf 	bl	800a510 <dmp_set_shake_reject_thresh>
        dmp_set_shake_reject_time(40);
 800a752:	2028      	movs	r0, #40	; 0x28
 800a754:	f7ff ff0c 	bl	800a570 <dmp_set_shake_reject_time>
        dmp_set_shake_reject_timeout(10);
 800a758:	200a      	movs	r0, #10
 800a75a:	f7ff ff2b 	bl	800a5b4 <dmp_set_shake_reject_timeout>
 800a75e:	e009      	b.n	800a774 <dmp_enable_feature+0x17c>
    } else {
        tmp[0] = 0xD8;
 800a760:	23d8      	movs	r3, #216	; 0xd8
 800a762:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 800a764:	f107 030c 	add.w	r3, r7, #12
 800a768:	461a      	mov	r2, r3
 800a76a:	2101      	movs	r1, #1
 800a76c:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
 800a770:	f7ff f9ee 	bl	8009b50 <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
 800a774:	88fb      	ldrh	r3, [r7, #6]
 800a776:	f003 0302 	and.w	r3, r3, #2
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d002      	beq.n	800a784 <dmp_enable_feature+0x18c>
        tmp[0] = 0xD9;
 800a77e:	23d9      	movs	r3, #217	; 0xd9
 800a780:	733b      	strb	r3, [r7, #12]
 800a782:	e001      	b.n	800a788 <dmp_enable_feature+0x190>
    } else
        tmp[0] = 0xD8;
 800a784:	23d8      	movs	r3, #216	; 0xd8
 800a786:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
 800a788:	f107 030c 	add.w	r3, r7, #12
 800a78c:	461a      	mov	r2, r3
 800a78e:	2101      	movs	r1, #1
 800a790:	f240 703d 	movw	r0, #1853	; 0x73d
 800a794:	f7ff f9dc 	bl	8009b50 <mpu_write_mem>

    if (mask & DMP_FEATURE_LP_QUAT)
 800a798:	88fb      	ldrh	r3, [r7, #6]
 800a79a:	f003 0304 	and.w	r3, r3, #4
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d003      	beq.n	800a7aa <dmp_enable_feature+0x1b2>
        dmp_enable_lp_quat(1);
 800a7a2:	2001      	movs	r0, #1
 800a7a4:	f000 f880 	bl	800a8a8 <dmp_enable_lp_quat>
 800a7a8:	e002      	b.n	800a7b0 <dmp_enable_feature+0x1b8>
    else
        dmp_enable_lp_quat(0);
 800a7aa:	2000      	movs	r0, #0
 800a7ac:	f000 f87c 	bl	800a8a8 <dmp_enable_lp_quat>

    if (mask & DMP_FEATURE_6X_LP_QUAT)
 800a7b0:	88fb      	ldrh	r3, [r7, #6]
 800a7b2:	f003 0310 	and.w	r3, r3, #16
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d003      	beq.n	800a7c2 <dmp_enable_feature+0x1ca>
        dmp_enable_6x_lp_quat(1);
 800a7ba:	2001      	movs	r0, #1
 800a7bc:	f000 f89b 	bl	800a8f6 <dmp_enable_6x_lp_quat>
 800a7c0:	e002      	b.n	800a7c8 <dmp_enable_feature+0x1d0>
    else
        dmp_enable_6x_lp_quat(0);
 800a7c2:	2000      	movs	r0, #0
 800a7c4:	f000 f897 	bl	800a8f6 <dmp_enable_6x_lp_quat>

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
 800a7c8:	88fb      	ldrh	r3, [r7, #6]
 800a7ca:	f043 0308 	orr.w	r3, r3, #8
 800a7ce:	b29a      	uxth	r2, r3
 800a7d0:	4b1c      	ldr	r3, [pc, #112]	; (800a844 <dmp_enable_feature+0x24c>)
 800a7d2:	815a      	strh	r2, [r3, #10]
    mpu_reset_fifo();
 800a7d4:	f7fd fbd6 	bl	8007f84 <mpu_reset_fifo>

    dmp.packet_length = 0;
 800a7d8:	4b1a      	ldr	r3, [pc, #104]	; (800a844 <dmp_enable_feature+0x24c>)
 800a7da:	2200      	movs	r2, #0
 800a7dc:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
 800a7de:	88fb      	ldrh	r3, [r7, #6]
 800a7e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d005      	beq.n	800a7f4 <dmp_enable_feature+0x1fc>
        dmp.packet_length += 6;
 800a7e8:	4b16      	ldr	r3, [pc, #88]	; (800a844 <dmp_enable_feature+0x24c>)
 800a7ea:	7b9b      	ldrb	r3, [r3, #14]
 800a7ec:	3306      	adds	r3, #6
 800a7ee:	b2da      	uxtb	r2, r3
 800a7f0:	4b14      	ldr	r3, [pc, #80]	; (800a844 <dmp_enable_feature+0x24c>)
 800a7f2:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
 800a7f4:	88fb      	ldrh	r3, [r7, #6]
 800a7f6:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d005      	beq.n	800a80a <dmp_enable_feature+0x212>
        dmp.packet_length += 6;
 800a7fe:	4b11      	ldr	r3, [pc, #68]	; (800a844 <dmp_enable_feature+0x24c>)
 800a800:	7b9b      	ldrb	r3, [r3, #14]
 800a802:	3306      	adds	r3, #6
 800a804:	b2da      	uxtb	r2, r3
 800a806:	4b0f      	ldr	r3, [pc, #60]	; (800a844 <dmp_enable_feature+0x24c>)
 800a808:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
 800a80a:	88fb      	ldrh	r3, [r7, #6]
 800a80c:	f003 0314 	and.w	r3, r3, #20
 800a810:	2b00      	cmp	r3, #0
 800a812:	d005      	beq.n	800a820 <dmp_enable_feature+0x228>
        dmp.packet_length += 16;
 800a814:	4b0b      	ldr	r3, [pc, #44]	; (800a844 <dmp_enable_feature+0x24c>)
 800a816:	7b9b      	ldrb	r3, [r3, #14]
 800a818:	3310      	adds	r3, #16
 800a81a:	b2da      	uxtb	r2, r3
 800a81c:	4b09      	ldr	r3, [pc, #36]	; (800a844 <dmp_enable_feature+0x24c>)
 800a81e:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 800a820:	88fb      	ldrh	r3, [r7, #6]
 800a822:	f003 0303 	and.w	r3, r3, #3
 800a826:	2b00      	cmp	r3, #0
 800a828:	d005      	beq.n	800a836 <dmp_enable_feature+0x23e>
        dmp.packet_length += 4;
 800a82a:	4b06      	ldr	r3, [pc, #24]	; (800a844 <dmp_enable_feature+0x24c>)
 800a82c:	7b9b      	ldrb	r3, [r3, #14]
 800a82e:	3304      	adds	r3, #4
 800a830:	b2da      	uxtb	r2, r3
 800a832:	4b04      	ldr	r3, [pc, #16]	; (800a844 <dmp_enable_feature+0x24c>)
 800a834:	739a      	strb	r2, [r3, #14]

    return 0;
 800a836:	2300      	movs	r3, #0
}
 800a838:	4618      	mov	r0, r3
 800a83a:	3718      	adds	r7, #24
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}
 800a840:	02cae309 	.word	0x02cae309
 800a844:	20000590 	.word	0x20000590

0800a848 <dmp_enable_gyro_cal>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b088      	sub	sp, #32
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	4603      	mov	r3, r0
 800a850:	71fb      	strb	r3, [r7, #7]
    if (enable) {
 800a852:	79fb      	ldrb	r3, [r7, #7]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d00f      	beq.n	800a878 <dmp_enable_gyro_cal+0x30>
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
 800a858:	4a11      	ldr	r2, [pc, #68]	; (800a8a0 <dmp_enable_gyro_cal+0x58>)
 800a85a:	f107 0314 	add.w	r3, r7, #20
 800a85e:	ca07      	ldmia	r2, {r0, r1, r2}
 800a860:	c303      	stmia	r3!, {r0, r1}
 800a862:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 800a864:	f107 0314 	add.w	r3, r7, #20
 800a868:	461a      	mov	r2, r3
 800a86a:	2109      	movs	r1, #9
 800a86c:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 800a870:	f7ff f96e 	bl	8009b50 <mpu_write_mem>
 800a874:	4603      	mov	r3, r0
 800a876:	e00e      	b.n	800a896 <dmp_enable_gyro_cal+0x4e>
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 800a878:	4a0a      	ldr	r2, [pc, #40]	; (800a8a4 <dmp_enable_gyro_cal+0x5c>)
 800a87a:	f107 0308 	add.w	r3, r7, #8
 800a87e:	ca07      	ldmia	r2, {r0, r1, r2}
 800a880:	c303      	stmia	r3!, {r0, r1}
 800a882:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 800a884:	f107 0308 	add.w	r3, r7, #8
 800a888:	461a      	mov	r2, r3
 800a88a:	2109      	movs	r1, #9
 800a88c:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 800a890:	f7ff f95e 	bl	8009b50 <mpu_write_mem>
 800a894:	4603      	mov	r3, r0
    }
}
 800a896:	4618      	mov	r0, r3
 800a898:	3720      	adds	r7, #32
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd80      	pop	{r7, pc}
 800a89e:	bf00      	nop
 800a8a0:	08012a14 	.word	0x08012a14
 800a8a4:	08012a20 	.word	0x08012a20

0800a8a8 <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b084      	sub	sp, #16
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
 800a8b2:	79fb      	ldrb	r3, [r7, #7]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d008      	beq.n	800a8ca <dmp_enable_lp_quat+0x22>
        regs[0] = DINBC0;
 800a8b8:	23c0      	movs	r3, #192	; 0xc0
 800a8ba:	733b      	strb	r3, [r7, #12]
        regs[1] = DINBC2;
 800a8bc:	23c2      	movs	r3, #194	; 0xc2
 800a8be:	737b      	strb	r3, [r7, #13]
        regs[2] = DINBC4;
 800a8c0:	23c4      	movs	r3, #196	; 0xc4
 800a8c2:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINBC6;
 800a8c4:	23c6      	movs	r3, #198	; 0xc6
 800a8c6:	73fb      	strb	r3, [r7, #15]
 800a8c8:	e006      	b.n	800a8d8 <dmp_enable_lp_quat+0x30>
    }
    else
        memset(regs, 0x8B, 4);
 800a8ca:	f107 030c 	add.w	r3, r7, #12
 800a8ce:	2204      	movs	r2, #4
 800a8d0:	218b      	movs	r1, #139	; 0x8b
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f002 fc2c 	bl	800d130 <memset>

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
 800a8d8:	f107 030c 	add.w	r3, r7, #12
 800a8dc:	461a      	mov	r2, r3
 800a8de:	2104      	movs	r1, #4
 800a8e0:	f640 2098 	movw	r0, #2712	; 0xa98
 800a8e4:	f7ff f934 	bl	8009b50 <mpu_write_mem>

    return mpu_reset_fifo();
 800a8e8:	f7fd fb4c 	bl	8007f84 <mpu_reset_fifo>
 800a8ec:	4603      	mov	r3, r0
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3710      	adds	r7, #16
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}

0800a8f6 <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
 800a8f6:	b580      	push	{r7, lr}
 800a8f8:	b084      	sub	sp, #16
 800a8fa:	af00      	add	r7, sp, #0
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
 800a900:	79fb      	ldrb	r3, [r7, #7]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d008      	beq.n	800a918 <dmp_enable_6x_lp_quat+0x22>
        regs[0] = DINA20;
 800a906:	2320      	movs	r3, #32
 800a908:	733b      	strb	r3, [r7, #12]
        regs[1] = DINA28;
 800a90a:	2328      	movs	r3, #40	; 0x28
 800a90c:	737b      	strb	r3, [r7, #13]
        regs[2] = DINA30;
 800a90e:	2330      	movs	r3, #48	; 0x30
 800a910:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINA38;
 800a912:	2338      	movs	r3, #56	; 0x38
 800a914:	73fb      	strb	r3, [r7, #15]
 800a916:	e006      	b.n	800a926 <dmp_enable_6x_lp_quat+0x30>
    } else
        memset(regs, 0xA3, 4);
 800a918:	f107 030c 	add.w	r3, r7, #12
 800a91c:	2204      	movs	r2, #4
 800a91e:	21a3      	movs	r1, #163	; 0xa3
 800a920:	4618      	mov	r0, r3
 800a922:	f002 fc05 	bl	800d130 <memset>

    mpu_write_mem(CFG_8, 4, regs);
 800a926:	f107 030c 	add.w	r3, r7, #12
 800a92a:	461a      	mov	r2, r3
 800a92c:	2104      	movs	r1, #4
 800a92e:	f640 209e 	movw	r0, #2718	; 0xa9e
 800a932:	f7ff f90d 	bl	8009b50 <mpu_write_mem>

    return mpu_reset_fifo();
 800a936:	f7fd fb25 	bl	8007f84 <mpu_reset_fifo>
 800a93a:	4603      	mov	r3, r0
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	3710      	adds	r7, #16
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}

0800a944 <decode_gesture>:
 *  @brief      Decode the four-byte gesture data and execute any callbacks.
 *  @param[in]  gesture Gesture data from DMP packet.
 *  @return     0 if successful.
 */
static int decode_gesture(unsigned char *gesture)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b084      	sub	sp, #16
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
    unsigned char tap, android_orient;

    android_orient = gesture[3] & 0xC0;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	3303      	adds	r3, #3
 800a950:	781b      	ldrb	r3, [r3, #0]
 800a952:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a956:	73fb      	strb	r3, [r7, #15]
    tap = 0x3F & gesture[3];
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	3303      	adds	r3, #3
 800a95c:	781b      	ldrb	r3, [r3, #0]
 800a95e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a962:	73bb      	strb	r3, [r7, #14]

    if (gesture[1] & INT_SRC_TAP) {
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	3301      	adds	r3, #1
 800a968:	781b      	ldrb	r3, [r3, #0]
 800a96a:	f003 0301 	and.w	r3, r3, #1
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d012      	beq.n	800a998 <decode_gesture+0x54>
        unsigned char direction, count;
        direction = tap >> 3;
 800a972:	7bbb      	ldrb	r3, [r7, #14]
 800a974:	08db      	lsrs	r3, r3, #3
 800a976:	737b      	strb	r3, [r7, #13]
        count = (tap % 8) + 1;
 800a978:	7bbb      	ldrb	r3, [r7, #14]
 800a97a:	f003 0307 	and.w	r3, r3, #7
 800a97e:	b2db      	uxtb	r3, r3
 800a980:	3301      	adds	r3, #1
 800a982:	733b      	strb	r3, [r7, #12]
        if (dmp.tap_cb)
 800a984:	4b10      	ldr	r3, [pc, #64]	; (800a9c8 <decode_gesture+0x84>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d005      	beq.n	800a998 <decode_gesture+0x54>
            dmp.tap_cb(direction, count);
 800a98c:	4b0e      	ldr	r3, [pc, #56]	; (800a9c8 <decode_gesture+0x84>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	7b39      	ldrb	r1, [r7, #12]
 800a992:	7b7a      	ldrb	r2, [r7, #13]
 800a994:	4610      	mov	r0, r2
 800a996:	4798      	blx	r3
    }

    if (gesture[1] & INT_SRC_ANDROID_ORIENT) {
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	3301      	adds	r3, #1
 800a99c:	781b      	ldrb	r3, [r3, #0]
 800a99e:	f003 0308 	and.w	r3, r3, #8
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d00a      	beq.n	800a9bc <decode_gesture+0x78>
        if (dmp.android_orient_cb)
 800a9a6:	4b08      	ldr	r3, [pc, #32]	; (800a9c8 <decode_gesture+0x84>)
 800a9a8:	685b      	ldr	r3, [r3, #4]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d006      	beq.n	800a9bc <decode_gesture+0x78>
            dmp.android_orient_cb(android_orient >> 6);
 800a9ae:	4b06      	ldr	r3, [pc, #24]	; (800a9c8 <decode_gesture+0x84>)
 800a9b0:	685b      	ldr	r3, [r3, #4]
 800a9b2:	7bfa      	ldrb	r2, [r7, #15]
 800a9b4:	0992      	lsrs	r2, r2, #6
 800a9b6:	b2d2      	uxtb	r2, r2
 800a9b8:	4610      	mov	r0, r2
 800a9ba:	4798      	blx	r3
    }

    return 0;
 800a9bc:	2300      	movs	r3, #0
}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	3710      	adds	r7, #16
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bd80      	pop	{r7, pc}
 800a9c6:	bf00      	nop
 800a9c8:	20000590 	.word	0x20000590

0800a9cc <dmp_read_fifo>:
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int dmp_read_fifo(short *gyro, short *accel, long *quat,
    unsigned long *timestamp, short *sensors, unsigned char *more)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b092      	sub	sp, #72	; 0x48
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	60f8      	str	r0, [r7, #12]
 800a9d4:	60b9      	str	r1, [r7, #8]
 800a9d6:	607a      	str	r2, [r7, #4]
 800a9d8:	603b      	str	r3, [r7, #0]
    unsigned char fifo_data[MAX_PACKET_LENGTH];
    unsigned char ii = 0;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* TODO: sensors[0] only changes when dmp_enable_feature is called. We can
     * cache this value and save some cycles.
     */
    sensors[0] = 0;
 800a9e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	801a      	strh	r2, [r3, #0]

    /* Get a packet. */
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
 800a9e6:	4bb5      	ldr	r3, [pc, #724]	; (800acbc <dmp_read_fifo+0x2f0>)
 800a9e8:	7b9b      	ldrb	r3, [r3, #14]
 800a9ea:	b29b      	uxth	r3, r3
 800a9ec:	f107 0120 	add.w	r1, r7, #32
 800a9f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f7fe f82e 	bl	8008a54 <mpu_read_fifo_stream>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d002      	beq.n	800aa04 <dmp_read_fifo+0x38>
        return -1;
 800a9fe:	f04f 33ff 	mov.w	r3, #4294967295
 800aa02:	e156      	b.n	800acb2 <dmp_read_fifo+0x2e6>

    /* Parse DMP packet. */
    if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
 800aa04:	4bad      	ldr	r3, [pc, #692]	; (800acbc <dmp_read_fifo+0x2f0>)
 800aa06:	895b      	ldrh	r3, [r3, #10]
 800aa08:	f003 0314 	and.w	r3, r3, #20
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	f000 808a 	beq.w	800ab26 <dmp_read_fifo+0x15a>
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 800aa12:	f897 3020 	ldrb.w	r3, [r7, #32]
 800aa16:	061a      	lsls	r2, r3, #24
 800aa18:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800aa1c:	041b      	lsls	r3, r3, #16
 800aa1e:	431a      	orrs	r2, r3
            ((long)fifo_data[2] << 8) | fifo_data[3];
 800aa20:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800aa24:	021b      	lsls	r3, r3, #8
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 800aa26:	4313      	orrs	r3, r2
            ((long)fifo_data[2] << 8) | fifo_data[3];
 800aa28:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800aa2c:	431a      	orrs	r2, r3
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	601a      	str	r2, [r3, #0]
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 800aa32:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800aa36:	061a      	lsls	r2, r3, #24
 800aa38:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800aa3c:	041b      	lsls	r3, r3, #16
 800aa3e:	431a      	orrs	r2, r3
            ((long)fifo_data[6] << 8) | fifo_data[7];
 800aa40:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800aa44:	021b      	lsls	r3, r3, #8
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 800aa46:	431a      	orrs	r2, r3
            ((long)fifo_data[6] << 8) | fifo_data[7];
 800aa48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa4c:	4619      	mov	r1, r3
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	3304      	adds	r3, #4
            ((long)fifo_data[6] << 8) | fifo_data[7];
 800aa52:	430a      	orrs	r2, r1
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 800aa54:	601a      	str	r2, [r3, #0]
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 800aa56:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800aa5a:	061a      	lsls	r2, r3, #24
 800aa5c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800aa60:	041b      	lsls	r3, r3, #16
 800aa62:	431a      	orrs	r2, r3
            ((long)fifo_data[10] << 8) | fifo_data[11];
 800aa64:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800aa68:	021b      	lsls	r3, r3, #8
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 800aa6a:	431a      	orrs	r2, r3
            ((long)fifo_data[10] << 8) | fifo_data[11];
 800aa6c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aa70:	4619      	mov	r1, r3
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	3308      	adds	r3, #8
            ((long)fifo_data[10] << 8) | fifo_data[11];
 800aa76:	430a      	orrs	r2, r1
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 800aa78:	601a      	str	r2, [r3, #0]
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 800aa7a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800aa7e:	061a      	lsls	r2, r3, #24
 800aa80:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800aa84:	041b      	lsls	r3, r3, #16
 800aa86:	431a      	orrs	r2, r3
            ((long)fifo_data[14] << 8) | fifo_data[15];
 800aa88:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800aa8c:	021b      	lsls	r3, r3, #8
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 800aa8e:	431a      	orrs	r2, r3
            ((long)fifo_data[14] << 8) | fifo_data[15];
 800aa90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aa94:	4619      	mov	r1, r3
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	330c      	adds	r3, #12
            ((long)fifo_data[14] << 8) | fifo_data[15];
 800aa9a:	430a      	orrs	r2, r1
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 800aa9c:	601a      	str	r2, [r3, #0]
        ii += 16;
 800aa9e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800aaa2:	3310      	adds	r3, #16
 800aaa4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
         * the FIFO reads might become misaligned.
         *
         * Let's start by scaling down the quaternion data to avoid long long
         * math.
         */
        quat_q14[0] = quat[0] >> 16;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	141b      	asrs	r3, r3, #16
 800aaae:	613b      	str	r3, [r7, #16]
        quat_q14[1] = quat[1] >> 16;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	3304      	adds	r3, #4
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	141b      	asrs	r3, r3, #16
 800aab8:	617b      	str	r3, [r7, #20]
        quat_q14[2] = quat[2] >> 16;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	3308      	adds	r3, #8
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	141b      	asrs	r3, r3, #16
 800aac2:	61bb      	str	r3, [r7, #24]
        quat_q14[3] = quat[3] >> 16;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	330c      	adds	r3, #12
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	141b      	asrs	r3, r3, #16
 800aacc:	61fb      	str	r3, [r7, #28]
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 800aace:	693b      	ldr	r3, [r7, #16]
 800aad0:	693a      	ldr	r2, [r7, #16]
 800aad2:	fb02 f203 	mul.w	r2, r2, r3
 800aad6:	697b      	ldr	r3, [r7, #20]
 800aad8:	6979      	ldr	r1, [r7, #20]
 800aada:	fb01 f303 	mul.w	r3, r1, r3
 800aade:	441a      	add	r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
 800aae0:	69bb      	ldr	r3, [r7, #24]
 800aae2:	69b9      	ldr	r1, [r7, #24]
 800aae4:	fb01 f303 	mul.w	r3, r1, r3
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 800aae8:	441a      	add	r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
 800aaea:	69fb      	ldr	r3, [r7, #28]
 800aaec:	69f9      	ldr	r1, [r7, #28]
 800aaee:	fb01 f303 	mul.w	r3, r1, r3
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 800aaf2:	4413      	add	r3, r2
 800aaf4:	643b      	str	r3, [r7, #64]	; 0x40
        if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
 800aaf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aaf8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800aafc:	db03      	blt.n	800ab06 <dmp_read_fifo+0x13a>
 800aafe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab00:	f1b3 5f88 	cmp.w	r3, #285212672	; 0x11000000
 800ab04:	dd07      	ble.n	800ab16 <dmp_read_fifo+0x14a>
            (quat_mag_sq > QUAT_MAG_SQ_MAX)) {
            /* Quaternion is outside of the acceptable threshold. */
            mpu_reset_fifo();
 800ab06:	f7fd fa3d 	bl	8007f84 <mpu_reset_fifo>
            sensors[0] = 0;
 800ab0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	801a      	strh	r2, [r3, #0]
            return -1;
 800ab10:	f04f 33ff 	mov.w	r3, #4294967295
 800ab14:	e0cd      	b.n	800acb2 <dmp_read_fifo+0x2e6>
        }
        sensors[0] |= INV_WXYZ_QUAT;
 800ab16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab18:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ab1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab20:	b21a      	sxth	r2, r3
 800ab22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab24:	801a      	strh	r2, [r3, #0]
#endif
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 800ab26:	4b65      	ldr	r3, [pc, #404]	; (800acbc <dmp_read_fifo+0x2f0>)
 800ab28:	895b      	ldrh	r3, [r3, #10]
 800ab2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d052      	beq.n	800abd8 <dmp_read_fifo+0x20c>
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 800ab32:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ab36:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800ab3a:	4413      	add	r3, r2
 800ab3c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800ab40:	021b      	lsls	r3, r3, #8
 800ab42:	b21a      	sxth	r2, r3
 800ab44:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ab48:	3301      	adds	r3, #1
 800ab4a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800ab4e:	440b      	add	r3, r1
 800ab50:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800ab54:	b21b      	sxth	r3, r3
 800ab56:	4313      	orrs	r3, r2
 800ab58:	b21a      	sxth	r2, r3
 800ab5a:	68bb      	ldr	r3, [r7, #8]
 800ab5c:	801a      	strh	r2, [r3, #0]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 800ab5e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ab62:	3302      	adds	r3, #2
 800ab64:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800ab68:	4413      	add	r3, r2
 800ab6a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800ab6e:	021b      	lsls	r3, r3, #8
 800ab70:	b219      	sxth	r1, r3
 800ab72:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ab76:	3303      	adds	r3, #3
 800ab78:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800ab7c:	4413      	add	r3, r2
 800ab7e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800ab82:	b21a      	sxth	r2, r3
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	3302      	adds	r3, #2
 800ab88:	430a      	orrs	r2, r1
 800ab8a:	b212      	sxth	r2, r2
 800ab8c:	801a      	strh	r2, [r3, #0]
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 800ab8e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ab92:	3304      	adds	r3, #4
 800ab94:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800ab98:	4413      	add	r3, r2
 800ab9a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800ab9e:	021b      	lsls	r3, r3, #8
 800aba0:	b219      	sxth	r1, r3
 800aba2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800aba6:	3305      	adds	r3, #5
 800aba8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800abac:	4413      	add	r3, r2
 800abae:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800abb2:	b21a      	sxth	r2, r3
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	3304      	adds	r3, #4
 800abb8:	430a      	orrs	r2, r1
 800abba:	b212      	sxth	r2, r2
 800abbc:	801a      	strh	r2, [r3, #0]
        ii += 6;
 800abbe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800abc2:	3306      	adds	r3, #6
 800abc4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        sensors[0] |= INV_XYZ_ACCEL;
 800abc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800abca:	f9b3 3000 	ldrsh.w	r3, [r3]
 800abce:	f043 0308 	orr.w	r3, r3, #8
 800abd2:	b21a      	sxth	r2, r3
 800abd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800abd6:	801a      	strh	r2, [r3, #0]
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO) {
 800abd8:	4b38      	ldr	r3, [pc, #224]	; (800acbc <dmp_read_fifo+0x2f0>)
 800abda:	895b      	ldrh	r3, [r3, #10]
 800abdc:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d052      	beq.n	800ac8a <dmp_read_fifo+0x2be>
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 800abe4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800abe8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800abec:	4413      	add	r3, r2
 800abee:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800abf2:	021b      	lsls	r3, r3, #8
 800abf4:	b21a      	sxth	r2, r3
 800abf6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800abfa:	3301      	adds	r3, #1
 800abfc:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800ac00:	440b      	add	r3, r1
 800ac02:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800ac06:	b21b      	sxth	r3, r3
 800ac08:	4313      	orrs	r3, r2
 800ac0a:	b21a      	sxth	r2, r3
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	801a      	strh	r2, [r3, #0]
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 800ac10:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ac14:	3302      	adds	r3, #2
 800ac16:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800ac1a:	4413      	add	r3, r2
 800ac1c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800ac20:	021b      	lsls	r3, r3, #8
 800ac22:	b219      	sxth	r1, r3
 800ac24:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ac28:	3303      	adds	r3, #3
 800ac2a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800ac2e:	4413      	add	r3, r2
 800ac30:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800ac34:	b21a      	sxth	r2, r3
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	3302      	adds	r3, #2
 800ac3a:	430a      	orrs	r2, r1
 800ac3c:	b212      	sxth	r2, r2
 800ac3e:	801a      	strh	r2, [r3, #0]
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 800ac40:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ac44:	3304      	adds	r3, #4
 800ac46:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800ac4a:	4413      	add	r3, r2
 800ac4c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800ac50:	021b      	lsls	r3, r3, #8
 800ac52:	b219      	sxth	r1, r3
 800ac54:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ac58:	3305      	adds	r3, #5
 800ac5a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800ac5e:	4413      	add	r3, r2
 800ac60:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800ac64:	b21a      	sxth	r2, r3
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	3304      	adds	r3, #4
 800ac6a:	430a      	orrs	r2, r1
 800ac6c:	b212      	sxth	r2, r2
 800ac6e:	801a      	strh	r2, [r3, #0]
        ii += 6;
 800ac70:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ac74:	3306      	adds	r3, #6
 800ac76:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        sensors[0] |= INV_XYZ_GYRO;
 800ac7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ac80:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800ac84:	b21a      	sxth	r2, r3
 800ac86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac88:	801a      	strh	r2, [r3, #0]
    }

    /* Gesture data is at the end of the DMP packet. Parse it and call
     * the gesture callbacks (if registered).
     */
    if (dmp.feature_mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 800ac8a:	4b0c      	ldr	r3, [pc, #48]	; (800acbc <dmp_read_fifo+0x2f0>)
 800ac8c:	895b      	ldrh	r3, [r3, #10]
 800ac8e:	f003 0303 	and.w	r3, r3, #3
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d007      	beq.n	800aca6 <dmp_read_fifo+0x2da>
        decode_gesture(fifo_data + ii);
 800ac96:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ac9a:	f107 0220 	add.w	r2, r7, #32
 800ac9e:	4413      	add	r3, r2
 800aca0:	4618      	mov	r0, r3
 800aca2:	f7ff fe4f 	bl	800a944 <decode_gesture>

    get_ms(timestamp);
 800aca6:	f7fa f8b3 	bl	8004e10 <HAL_GetTick>
 800acaa:	4602      	mov	r2, r0
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	601a      	str	r2, [r3, #0]
    return 0;
 800acb0:	2300      	movs	r3, #0
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	3748      	adds	r7, #72	; 0x48
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}
 800acba:	bf00      	nop
 800acbc:	20000590 	.word	0x20000590

0800acc0 <_MLPrintLog>:
 *  @param[in]  fmt         String of text with optional format tags.
 *
 *  @return     0 if successful.
 */
int _MLPrintLog (int priority, const char* tag, const char* fmt, ...)
{
 800acc0:	b40c      	push	{r2, r3}
 800acc2:	b580      	push	{r7, lr}
 800acc4:	b0ce      	sub	sp, #312	; 0x138
 800acc6:	af00      	add	r7, sp, #0
 800acc8:	1d3b      	adds	r3, r7, #4
 800acca:	6018      	str	r0, [r3, #0]
 800accc:	463b      	mov	r3, r7
 800acce:	6019      	str	r1, [r3, #0]
    va_list args;
    int length, ii, i;
    char buf[BUF_SIZE], out[PACKET_LENGTH], this_length;

    /* This can be modified to exit for unsupported priorities. */
    switch (priority) {
 800acd0:	1d3b      	adds	r3, r7, #4
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	2b06      	cmp	r3, #6
 800acd6:	dc04      	bgt.n	800ace2 <_MLPrintLog+0x22>
 800acd8:	1d3b      	adds	r3, r7, #4
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	da06      	bge.n	800acee <_MLPrintLog+0x2e>
 800ace0:	e003      	b.n	800acea <_MLPrintLog+0x2a>
 800ace2:	1d3b      	adds	r3, r7, #4
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	2b08      	cmp	r3, #8
 800ace8:	d001      	beq.n	800acee <_MLPrintLog+0x2e>
    case MPL_LOG_WARN:
    case MPL_LOG_ERROR:
    case MPL_LOG_SILENT:
        break;
    default:
        return 0;
 800acea:	2300      	movs	r3, #0
 800acec:	e07a      	b.n	800ade4 <_MLPrintLog+0x124>
        break;
 800acee:	bf00      	nop
    }

    va_start(args, fmt);
 800acf0:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800acf4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

    length = vsprintf(buf, fmt, args);
 800acf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800acfc:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800ad00:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800ad04:	4618      	mov	r0, r3
 800ad06:	f002 fe9b 	bl	800da40 <vsiprintf>
 800ad0a:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
    if (length <= 0) {
 800ad0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	dc02      	bgt.n	800ad1c <_MLPrintLog+0x5c>
        va_end(args);
        return length;
 800ad16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad1a:	e063      	b.n	800ade4 <_MLPrintLog+0x124>
    }

    memset(out, 0, PACKET_LENGTH);
 800ad1c:	f107 030c 	add.w	r3, r7, #12
 800ad20:	2217      	movs	r2, #23
 800ad22:	2100      	movs	r1, #0
 800ad24:	4618      	mov	r0, r3
 800ad26:	f002 fa03 	bl	800d130 <memset>
    out[0] = '$';
 800ad2a:	f107 030c 	add.w	r3, r7, #12
 800ad2e:	2224      	movs	r2, #36	; 0x24
 800ad30:	701a      	strb	r2, [r3, #0]
    out[1] = PACKET_DEBUG;
 800ad32:	f107 030c 	add.w	r3, r7, #12
 800ad36:	2201      	movs	r2, #1
 800ad38:	705a      	strb	r2, [r3, #1]
    out[2] = priority;
 800ad3a:	1d3b      	adds	r3, r7, #4
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	b2da      	uxtb	r2, r3
 800ad40:	f107 030c 	add.w	r3, r7, #12
 800ad44:	709a      	strb	r2, [r3, #2]
    out[21] = '\r';
 800ad46:	f107 030c 	add.w	r3, r7, #12
 800ad4a:	220d      	movs	r2, #13
 800ad4c:	755a      	strb	r2, [r3, #21]
    out[22] = '\n';
 800ad4e:	f107 030c 	add.w	r3, r7, #12
 800ad52:	220a      	movs	r2, #10
 800ad54:	759a      	strb	r2, [r3, #22]
    for (ii = 0; ii < length; ii += (PACKET_LENGTH-5)) {
 800ad56:	2300      	movs	r3, #0
 800ad58:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800ad5c:	e03b      	b.n	800add6 <_MLPrintLog+0x116>
        this_length = min(length-ii, PACKET_LENGTH-5);
 800ad5e:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800ad62:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ad66:	1ad3      	subs	r3, r2, r3
 800ad68:	2b12      	cmp	r3, #18
 800ad6a:	bfa8      	it	ge
 800ad6c:	2312      	movge	r3, #18
 800ad6e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
        memset(out+3, 0, 18);
 800ad72:	f107 030c 	add.w	r3, r7, #12
 800ad76:	3303      	adds	r3, #3
 800ad78:	2212      	movs	r2, #18
 800ad7a:	2100      	movs	r1, #0
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f002 f9d7 	bl	800d130 <memset>
        memcpy(out+3, buf+ii, this_length);
 800ad82:	f107 030c 	add.w	r3, r7, #12
 800ad86:	3303      	adds	r3, #3
 800ad88:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800ad8c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800ad90:	4411      	add	r1, r2
 800ad92:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 800ad96:	4618      	mov	r0, r3
 800ad98:	f002 f9a2 	bl	800d0e0 <memcpy>
        for (i=0; i<PACKET_LENGTH; i++) {
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800ada2:	e00f      	b.n	800adc4 <_MLPrintLog+0x104>
          fputc(out[i]);
 800ada4:	f107 020c 	add.w	r2, r7, #12
 800ada8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800adac:	18d1      	adds	r1, r2, r3
 800adae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800adb2:	2201      	movs	r2, #1
 800adb4:	480f      	ldr	r0, [pc, #60]	; (800adf4 <_MLPrintLog+0x134>)
 800adb6:	f7fc f804 	bl	8006dc2 <HAL_UART_Transmit>
        for (i=0; i<PACKET_LENGTH; i++) {
 800adba:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800adbe:	3301      	adds	r3, #1
 800adc0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800adc4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800adc8:	2b16      	cmp	r3, #22
 800adca:	ddeb      	ble.n	800ada4 <_MLPrintLog+0xe4>
    for (ii = 0; ii < length; ii += (PACKET_LENGTH-5)) {
 800adcc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800add0:	3312      	adds	r3, #18
 800add2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800add6:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800adda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800adde:	429a      	cmp	r2, r3
 800ade0:	dbbd      	blt.n	800ad5e <_MLPrintLog+0x9e>
    }
    
            
    va_end(args);

    return 0;
 800ade2:	2300      	movs	r3, #0
}
 800ade4:	4618      	mov	r0, r3
 800ade6:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800adea:	46bd      	mov	sp, r7
 800adec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800adf0:	b002      	add	sp, #8
 800adf2:	4770      	bx	lr
 800adf4:	20000b74 	.word	0x20000b74

0800adf8 <eMPL_send_quat>:

void eMPL_send_quat(long *quat)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b08a      	sub	sp, #40	; 0x28
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
    char out[PACKET_LENGTH];
    int i;
    if (!quat)
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d07c      	beq.n	800af00 <eMPL_send_quat+0x108>
        return;
    memset(out, 0, PACKET_LENGTH);
 800ae06:	f107 030c 	add.w	r3, r7, #12
 800ae0a:	2217      	movs	r2, #23
 800ae0c:	2100      	movs	r1, #0
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f002 f98e 	bl	800d130 <memset>
    out[0] = '$';
 800ae14:	2324      	movs	r3, #36	; 0x24
 800ae16:	733b      	strb	r3, [r7, #12]
    out[1] = PACKET_QUAT;
 800ae18:	2302      	movs	r3, #2
 800ae1a:	737b      	strb	r3, [r7, #13]
    out[3] = (char)(quat[0] >> 24);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	161b      	asrs	r3, r3, #24
 800ae22:	b2db      	uxtb	r3, r3
 800ae24:	73fb      	strb	r3, [r7, #15]
    out[4] = (char)(quat[0] >> 16);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	141b      	asrs	r3, r3, #16
 800ae2c:	b2db      	uxtb	r3, r3
 800ae2e:	743b      	strb	r3, [r7, #16]
    out[5] = (char)(quat[0] >> 8);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	121b      	asrs	r3, r3, #8
 800ae36:	b2db      	uxtb	r3, r3
 800ae38:	747b      	strb	r3, [r7, #17]
    out[6] = (char)quat[0];
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	b2db      	uxtb	r3, r3
 800ae40:	74bb      	strb	r3, [r7, #18]
    out[7] = (char)(quat[1] >> 24);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	3304      	adds	r3, #4
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	161b      	asrs	r3, r3, #24
 800ae4a:	b2db      	uxtb	r3, r3
 800ae4c:	74fb      	strb	r3, [r7, #19]
    out[8] = (char)(quat[1] >> 16);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	3304      	adds	r3, #4
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	141b      	asrs	r3, r3, #16
 800ae56:	b2db      	uxtb	r3, r3
 800ae58:	753b      	strb	r3, [r7, #20]
    out[9] = (char)(quat[1] >> 8);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	3304      	adds	r3, #4
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	121b      	asrs	r3, r3, #8
 800ae62:	b2db      	uxtb	r3, r3
 800ae64:	757b      	strb	r3, [r7, #21]
    out[10] = (char)quat[1];
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	3304      	adds	r3, #4
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	b2db      	uxtb	r3, r3
 800ae6e:	75bb      	strb	r3, [r7, #22]
    out[11] = (char)(quat[2] >> 24);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	3308      	adds	r3, #8
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	161b      	asrs	r3, r3, #24
 800ae78:	b2db      	uxtb	r3, r3
 800ae7a:	75fb      	strb	r3, [r7, #23]
    out[12] = (char)(quat[2] >> 16);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	3308      	adds	r3, #8
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	141b      	asrs	r3, r3, #16
 800ae84:	b2db      	uxtb	r3, r3
 800ae86:	763b      	strb	r3, [r7, #24]
    out[13] = (char)(quat[2] >> 8);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	3308      	adds	r3, #8
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	121b      	asrs	r3, r3, #8
 800ae90:	b2db      	uxtb	r3, r3
 800ae92:	767b      	strb	r3, [r7, #25]
    out[14] = (char)quat[2];
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	3308      	adds	r3, #8
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	b2db      	uxtb	r3, r3
 800ae9c:	76bb      	strb	r3, [r7, #26]
    out[15] = (char)(quat[3] >> 24);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	330c      	adds	r3, #12
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	161b      	asrs	r3, r3, #24
 800aea6:	b2db      	uxtb	r3, r3
 800aea8:	76fb      	strb	r3, [r7, #27]
    out[16] = (char)(quat[3] >> 16);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	330c      	adds	r3, #12
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	141b      	asrs	r3, r3, #16
 800aeb2:	b2db      	uxtb	r3, r3
 800aeb4:	773b      	strb	r3, [r7, #28]
    out[17] = (char)(quat[3] >> 8);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	330c      	adds	r3, #12
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	121b      	asrs	r3, r3, #8
 800aebe:	b2db      	uxtb	r3, r3
 800aec0:	777b      	strb	r3, [r7, #29]
    out[18] = (char)quat[3];
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	330c      	adds	r3, #12
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	b2db      	uxtb	r3, r3
 800aeca:	77bb      	strb	r3, [r7, #30]
    out[21] = '\r';
 800aecc:	230d      	movs	r3, #13
 800aece:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    out[22] = '\n';
 800aed2:	230a      	movs	r3, #10
 800aed4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    
    for (i=0; i<PACKET_LENGTH; i++) {
 800aed8:	2300      	movs	r3, #0
 800aeda:	627b      	str	r3, [r7, #36]	; 0x24
 800aedc:	e00c      	b.n	800aef8 <eMPL_send_quat+0x100>
      fputc(out[i]);
 800aede:	f107 020c 	add.w	r2, r7, #12
 800aee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee4:	18d1      	adds	r1, r2, r3
 800aee6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800aeea:	2201      	movs	r2, #1
 800aeec:	4806      	ldr	r0, [pc, #24]	; (800af08 <eMPL_send_quat+0x110>)
 800aeee:	f7fb ff68 	bl	8006dc2 <HAL_UART_Transmit>
    for (i=0; i<PACKET_LENGTH; i++) {
 800aef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aef4:	3301      	adds	r3, #1
 800aef6:	627b      	str	r3, [r7, #36]	; 0x24
 800aef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aefa:	2b16      	cmp	r3, #22
 800aefc:	ddef      	ble.n	800aede <eMPL_send_quat+0xe6>
 800aefe:	e000      	b.n	800af02 <eMPL_send_quat+0x10a>
        return;
 800af00:	bf00      	nop
    }
}
 800af02:	3728      	adds	r7, #40	; 0x28
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}
 800af08:	20000b74 	.word	0x20000b74

0800af0c <inv_generate_eMPL_outputs>:
    return eMPL_out.nine_axis_status;
}

static inv_error_t inv_generate_eMPL_outputs
    (struct inv_sensor_cal_t *sensor_cal)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b084      	sub	sp, #16
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
    int use_sensor;
    long sr = 1000;
 800af14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800af18:	60bb      	str	r3, [r7, #8]
    inv_get_quaternion_set(eMPL_out.quat, &eMPL_out.quat_accuracy, &eMPL_out.nine_axis_timestamp);
 800af1a:	4a4c      	ldr	r2, [pc, #304]	; (800b04c <inv_generate_eMPL_outputs+0x140>)
 800af1c:	494c      	ldr	r1, [pc, #304]	; (800b050 <inv_generate_eMPL_outputs+0x144>)
 800af1e:	484d      	ldr	r0, [pc, #308]	; (800b054 <inv_generate_eMPL_outputs+0x148>)
 800af20:	f001 fec0 	bl	800cca4 <inv_get_quaternion_set>
    eMPL_out.gyro_status = sensor_cal->gyro.status;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af28:	4a4a      	ldr	r2, [pc, #296]	; (800b054 <inv_generate_eMPL_outputs+0x148>)
 800af2a:	6153      	str	r3, [r2, #20]
    eMPL_out.accel_status = sensor_cal->accel.status;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af30:	4a48      	ldr	r2, [pc, #288]	; (800b054 <inv_generate_eMPL_outputs+0x148>)
 800af32:	6193      	str	r3, [r2, #24]
    eMPL_out.compass_status = sensor_cal->compass.status;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800af3a:	4a46      	ldr	r2, [pc, #280]	; (800b054 <inv_generate_eMPL_outputs+0x148>)
 800af3c:	61d3      	str	r3, [r2, #28]
    
    /* Find the highest sample rate and tie sensor fusion timestamps to that one. */
    if (sensor_cal->gyro.status & INV_SENSOR_ON) {
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af46:	2b00      	cmp	r3, #0
 800af48:	d004      	beq.n	800af54 <inv_generate_eMPL_outputs+0x48>
        sr = sensor_cal->gyro.sample_rate_ms;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af4e:	60bb      	str	r3, [r7, #8]
        use_sensor = 0;
 800af50:	2300      	movs	r3, #0
 800af52:	60fb      	str	r3, [r7, #12]
    }
    if ((sensor_cal->accel.status & INV_SENSOR_ON) && (sr > sensor_cal->accel.sample_rate_ms)) {
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d009      	beq.n	800af74 <inv_generate_eMPL_outputs+0x68>
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af64:	68ba      	ldr	r2, [r7, #8]
 800af66:	429a      	cmp	r2, r3
 800af68:	dd04      	ble.n	800af74 <inv_generate_eMPL_outputs+0x68>
        sr = sensor_cal->accel.sample_rate_ms;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af6e:	60bb      	str	r3, [r7, #8]
        use_sensor = 1;
 800af70:	2301      	movs	r3, #1
 800af72:	60fb      	str	r3, [r7, #12]
    }
    if ((sensor_cal->compass.status & INV_SENSOR_ON) && (sr > sensor_cal->compass.sample_rate_ms)) {
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800af7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d00b      	beq.n	800af9a <inv_generate_eMPL_outputs+0x8e>
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800af88:	68ba      	ldr	r2, [r7, #8]
 800af8a:	429a      	cmp	r2, r3
 800af8c:	dd05      	ble.n	800af9a <inv_generate_eMPL_outputs+0x8e>
        sr = sensor_cal->compass.sample_rate_ms;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800af94:	60bb      	str	r3, [r7, #8]
        use_sensor = 2;
 800af96:	2302      	movs	r3, #2
 800af98:	60fb      	str	r3, [r7, #12]
    }
    if ((sensor_cal->quat.status & INV_SENSOR_ON) && (sr > sensor_cal->quat.sample_rate_ms)) {
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800afa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d00b      	beq.n	800afc0 <inv_generate_eMPL_outputs+0xb4>
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800afae:	68ba      	ldr	r2, [r7, #8]
 800afb0:	429a      	cmp	r2, r3
 800afb2:	dd05      	ble.n	800afc0 <inv_generate_eMPL_outputs+0xb4>
        sr = sensor_cal->quat.sample_rate_ms;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800afba:	60bb      	str	r3, [r7, #8]
        use_sensor = 3;
 800afbc:	2303      	movs	r3, #3
 800afbe:	60fb      	str	r3, [r7, #12]
    }

    switch (use_sensor) {
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	2b03      	cmp	r3, #3
 800afc4:	d02e      	beq.n	800b024 <inv_generate_eMPL_outputs+0x118>
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	2b03      	cmp	r3, #3
 800afca:	dc05      	bgt.n	800afd8 <inv_generate_eMPL_outputs+0xcc>
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	2b01      	cmp	r3, #1
 800afd0:	d00e      	beq.n	800aff0 <inv_generate_eMPL_outputs+0xe4>
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	2b02      	cmp	r3, #2
 800afd6:	d017      	beq.n	800b008 <inv_generate_eMPL_outputs+0xfc>
    default:
    case 0:
        eMPL_out.nine_axis_status = (sensor_cal->gyro.status & INV_NEW_DATA) ? 1 : 0;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afdc:	119b      	asrs	r3, r3, #6
 800afde:	f003 0301 	and.w	r3, r3, #1
 800afe2:	4a1c      	ldr	r2, [pc, #112]	; (800b054 <inv_generate_eMPL_outputs+0x148>)
 800afe4:	6213      	str	r3, [r2, #32]
        eMPL_out.nine_axis_timestamp = sensor_cal->gyro.timestamp;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afea:	4a1a      	ldr	r2, [pc, #104]	; (800b054 <inv_generate_eMPL_outputs+0x148>)
 800afec:	6253      	str	r3, [r2, #36]	; 0x24
        break;
 800afee:	e027      	b.n	800b040 <inv_generate_eMPL_outputs+0x134>
    case 1:
        eMPL_out.nine_axis_status = (sensor_cal->accel.status & INV_NEW_DATA) ? 1 : 0;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aff4:	119b      	asrs	r3, r3, #6
 800aff6:	f003 0301 	and.w	r3, r3, #1
 800affa:	4a16      	ldr	r2, [pc, #88]	; (800b054 <inv_generate_eMPL_outputs+0x148>)
 800affc:	6213      	str	r3, [r2, #32]
        eMPL_out.nine_axis_timestamp = sensor_cal->accel.timestamp;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b002:	4a14      	ldr	r2, [pc, #80]	; (800b054 <inv_generate_eMPL_outputs+0x148>)
 800b004:	6253      	str	r3, [r2, #36]	; 0x24
        break;
 800b006:	e01b      	b.n	800b040 <inv_generate_eMPL_outputs+0x134>
    case 2:
        eMPL_out.nine_axis_status = (sensor_cal->compass.status & INV_NEW_DATA) ? 1 : 0;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b00e:	119b      	asrs	r3, r3, #6
 800b010:	f003 0301 	and.w	r3, r3, #1
 800b014:	4a0f      	ldr	r2, [pc, #60]	; (800b054 <inv_generate_eMPL_outputs+0x148>)
 800b016:	6213      	str	r3, [r2, #32]
        eMPL_out.nine_axis_timestamp = sensor_cal->compass.timestamp;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800b01e:	4a0d      	ldr	r2, [pc, #52]	; (800b054 <inv_generate_eMPL_outputs+0x148>)
 800b020:	6253      	str	r3, [r2, #36]	; 0x24
        break;
 800b022:	e00d      	b.n	800b040 <inv_generate_eMPL_outputs+0x134>
    case 3:
        eMPL_out.nine_axis_status = (sensor_cal->quat.status & INV_NEW_DATA) ? 1 : 0;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800b02a:	119b      	asrs	r3, r3, #6
 800b02c:	f003 0301 	and.w	r3, r3, #1
 800b030:	4a08      	ldr	r2, [pc, #32]	; (800b054 <inv_generate_eMPL_outputs+0x148>)
 800b032:	6213      	str	r3, [r2, #32]
        eMPL_out.nine_axis_timestamp = sensor_cal->quat.timestamp;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800b03a:	4a06      	ldr	r2, [pc, #24]	; (800b054 <inv_generate_eMPL_outputs+0x148>)
 800b03c:	6253      	str	r3, [r2, #36]	; 0x24
        break;
 800b03e:	bf00      	nop
    }
    
    
    return INV_SUCCESS;
 800b040:	2300      	movs	r3, #0
}
 800b042:	4618      	mov	r0, r3
 800b044:	3710      	adds	r7, #16
 800b046:	46bd      	mov	sp, r7
 800b048:	bd80      	pop	{r7, pc}
 800b04a:	bf00      	nop
 800b04c:	200005c4 	.word	0x200005c4
 800b050:	200005b0 	.word	0x200005b0
 800b054:	200005a0 	.word	0x200005a0

0800b058 <inv_start_eMPL_outputs>:

static inv_error_t inv_start_eMPL_outputs(void)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	af00      	add	r7, sp, #0
    return inv_register_data_cb(inv_generate_eMPL_outputs,
 800b05c:	2207      	movs	r2, #7
 800b05e:	f44f 7161 	mov.w	r1, #900	; 0x384
 800b062:	4803      	ldr	r0, [pc, #12]	; (800b070 <inv_start_eMPL_outputs+0x18>)
 800b064:	f000 fab8 	bl	800b5d8 <inv_register_data_cb>
 800b068:	4603      	mov	r3, r0
        INV_PRIORITY_HAL_OUTPUTS, INV_GYRO_NEW | INV_ACCEL_NEW | INV_MAG_NEW);
}
 800b06a:	4618      	mov	r0, r3
 800b06c:	bd80      	pop	{r7, pc}
 800b06e:	bf00      	nop
 800b070:	0800af0d 	.word	0x0800af0d

0800b074 <inv_init_eMPL_outputs>:
{
    return inv_unregister_data_cb(inv_generate_eMPL_outputs);
}

static inv_error_t inv_init_eMPL_outputs(void)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	af00      	add	r7, sp, #0
    memset(&eMPL_out, 0, sizeof(eMPL_out));
 800b078:	2228      	movs	r2, #40	; 0x28
 800b07a:	2100      	movs	r1, #0
 800b07c:	4802      	ldr	r0, [pc, #8]	; (800b088 <inv_init_eMPL_outputs+0x14>)
 800b07e:	f002 f857 	bl	800d130 <memset>
    return INV_SUCCESS;
 800b082:	2300      	movs	r3, #0
}
 800b084:	4618      	mov	r0, r3
 800b086:	bd80      	pop	{r7, pc}
 800b088:	200005a0 	.word	0x200005a0

0800b08c <inv_enable_eMPL_outputs>:

/**
 *  @brief  Turns on creation and storage of HAL type results.
 */
inv_error_t inv_enable_eMPL_outputs(void)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b082      	sub	sp, #8
 800b090:	af00      	add	r7, sp, #0
    inv_error_t result;
    result = inv_init_eMPL_outputs();
 800b092:	f7ff ffef 	bl	800b074 <inv_init_eMPL_outputs>
 800b096:	6078      	str	r0, [r7, #4]
    if (result)
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d001      	beq.n	800b0a2 <inv_enable_eMPL_outputs+0x16>
        return result;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	e003      	b.n	800b0aa <inv_enable_eMPL_outputs+0x1e>
    return inv_register_mpl_start_notification(inv_start_eMPL_outputs);
 800b0a2:	4804      	ldr	r0, [pc, #16]	; (800b0b4 <inv_enable_eMPL_outputs+0x28>)
 800b0a4:	f001 ff2e 	bl	800cf04 <inv_register_mpl_start_notification>
 800b0a8:	4603      	mov	r3, r0
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	3708      	adds	r7, #8
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}
 800b0b2:	bf00      	nop
 800b0b4:	0800b059 	.word	0x0800b059

0800b0b8 <inv_db_load_func>:
}
#endif

/** This function receives the data that was stored in non-volatile memory between power off */
static inv_error_t inv_db_load_func(const unsigned char *data)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b082      	sub	sp, #8
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
    memcpy(&inv_data_builder.save, data, sizeof(inv_data_builder.save));
 800b0c0:	2248      	movs	r2, #72	; 0x48
 800b0c2:	6879      	ldr	r1, [r7, #4]
 800b0c4:	480f      	ldr	r0, [pc, #60]	; (800b104 <inv_db_load_func+0x4c>)
 800b0c6:	f002 f80b 	bl	800d0e0 <memcpy>
    // copy in the saved accuracy in the actual sensors accuracy
    sensors.gyro.accuracy = inv_data_builder.save.gyro_accuracy;
 800b0ca:	4b0f      	ldr	r3, [pc, #60]	; (800b108 <inv_db_load_func+0x50>)
 800b0cc:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800b0d0:	4a0e      	ldr	r2, [pc, #56]	; (800b10c <inv_db_load_func+0x54>)
 800b0d2:	6353      	str	r3, [r2, #52]	; 0x34
    sensors.accel.accuracy = inv_data_builder.save.accel_accuracy;
 800b0d4:	4b0c      	ldr	r3, [pc, #48]	; (800b108 <inv_db_load_func+0x50>)
 800b0d6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800b0da:	4a0c      	ldr	r2, [pc, #48]	; (800b10c <inv_db_load_func+0x54>)
 800b0dc:	6793      	str	r3, [r2, #120]	; 0x78
    sensors.compass.accuracy = inv_data_builder.save.compass_accuracy;
 800b0de:	4b0a      	ldr	r3, [pc, #40]	; (800b108 <inv_db_load_func+0x50>)
 800b0e0:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800b0e4:	4a09      	ldr	r2, [pc, #36]	; (800b10c <inv_db_load_func+0x54>)
 800b0e6:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
    // TODO
    if (sensors.compass.accuracy == 3) {
 800b0ea:	4b08      	ldr	r3, [pc, #32]	; (800b10c <inv_db_load_func+0x54>)
 800b0ec:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b0f0:	2b03      	cmp	r3, #3
 800b0f2:	d102      	bne.n	800b0fa <inv_db_load_func+0x42>
        inv_set_compass_bias_found(1);
 800b0f4:	2001      	movs	r0, #1
 800b0f6:	f001 fe77 	bl	800cde8 <inv_set_compass_bias_found>
    }
    return INV_SUCCESS;
 800b0fa:	2300      	movs	r3, #0
}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	3708      	adds	r7, #8
 800b100:	46bd      	mov	sp, r7
 800b102:	bd80      	pop	{r7, pc}
 800b104:	200006bc 	.word	0x200006bc
 800b108:	200005c8 	.word	0x200005c8
 800b10c:	20000708 	.word	0x20000708

0800b110 <inv_db_save_func>:

/** This function returns the data to be stored in non-volatile memory between power off */
static inv_error_t inv_db_save_func(unsigned char *data)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b082      	sub	sp, #8
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
    memcpy(data, &inv_data_builder.save, sizeof(inv_data_builder.save));
 800b118:	2248      	movs	r2, #72	; 0x48
 800b11a:	4904      	ldr	r1, [pc, #16]	; (800b12c <inv_db_save_func+0x1c>)
 800b11c:	6878      	ldr	r0, [r7, #4]
 800b11e:	f001 ffdf 	bl	800d0e0 <memcpy>
    return INV_SUCCESS;
 800b122:	2300      	movs	r3, #0
}
 800b124:	4618      	mov	r0, r3
 800b126:	3708      	adds	r7, #8
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}
 800b12c:	200006bc 	.word	0x200006bc

0800b130 <inv_init_data_builder>:

/** Initialize the data builder
*/
inv_error_t inv_init_data_builder(void)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	af00      	add	r7, sp, #0
    /* TODO: Hardcode temperature scale/offset here. */
    memset(&inv_data_builder, 0, sizeof(inv_data_builder));
 800b134:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800b138:	2100      	movs	r1, #0
 800b13a:	480a      	ldr	r0, [pc, #40]	; (800b164 <inv_init_data_builder+0x34>)
 800b13c:	f001 fff8 	bl	800d130 <memset>
    memset(&sensors, 0, sizeof(sensors));
 800b140:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800b144:	2100      	movs	r1, #0
 800b146:	4808      	ldr	r0, [pc, #32]	; (800b168 <inv_init_data_builder+0x38>)
 800b148:	f001 fff2 	bl	800d130 <memset>

    // disable the soft iron transform process
    inv_reset_compass_soft_iron_matrix();
 800b14c:	f000 fca6 	bl	800ba9c <inv_reset_compass_soft_iron_matrix>

    return inv_register_load_store(inv_db_load_func, inv_db_save_func,
 800b150:	f24d 0393 	movw	r3, #53395	; 0xd093
 800b154:	2248      	movs	r2, #72	; 0x48
 800b156:	4905      	ldr	r1, [pc, #20]	; (800b16c <inv_init_data_builder+0x3c>)
 800b158:	4805      	ldr	r0, [pc, #20]	; (800b170 <inv_init_data_builder+0x40>)
 800b15a:	f001 ff29 	bl	800cfb0 <inv_register_load_store>
 800b15e:	4603      	mov	r3, r0
                                   sizeof(inv_data_builder.save),
                                   INV_DB_SAVE_KEY);
}
 800b160:	4618      	mov	r0, r3
 800b162:	bd80      	pop	{r7, pc}
 800b164:	200005c8 	.word	0x200005c8
 800b168:	20000708 	.word	0x20000708
 800b16c:	0800b111 	.word	0x0800b111
 800b170:	0800b0b9 	.word	0x0800b0b9

0800b174 <set_sensor_orientation_and_scale>:
* @param[in] sensitivity A Scale factor to convert from hardware units to
*            standard units (dps, uT, g).
*/
void set_sensor_orientation_and_scale(struct inv_single_sensor_t *sensor,
                                 int orientation, long sensitivity)
{
 800b174:	b480      	push	{r7}
 800b176:	b085      	sub	sp, #20
 800b178:	af00      	add	r7, sp, #0
 800b17a:	60f8      	str	r0, [r7, #12]
 800b17c:	60b9      	str	r1, [r7, #8]
 800b17e:	607a      	str	r2, [r7, #4]
    sensor->sensitivity = sensitivity;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	687a      	ldr	r2, [r7, #4]
 800b184:	625a      	str	r2, [r3, #36]	; 0x24
    sensor->orientation = orientation;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	68ba      	ldr	r2, [r7, #8]
 800b18a:	601a      	str	r2, [r3, #0]
}
 800b18c:	bf00      	nop
 800b18e:	3714      	adds	r7, #20
 800b190:	46bd      	mov	sp, r7
 800b192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b196:	4770      	bx	lr

0800b198 <inv_set_gyro_orientation_and_scale>:
* @param[in] sensitivity A scale factor to convert device units to degrees per second scaled by 2^16
*            such that degrees_per_second  = device_units * sensitivity / 2^30. Typically
*            it works out to be the maximum rate * 2^15.
*/
void inv_set_gyro_orientation_and_scale(int orientation, long sensitivity)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b082      	sub	sp, #8
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
 800b1a0:	6039      	str	r1, [r7, #0]
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&orientation, sizeof(orientation), 1, inv_data_builder.file);
        fwrite(&sensitivity, sizeof(sensitivity), 1, inv_data_builder.file);
    }
#endif
    set_sensor_orientation_and_scale(&sensors.gyro, orientation,
 800b1a2:	683a      	ldr	r2, [r7, #0]
 800b1a4:	6879      	ldr	r1, [r7, #4]
 800b1a6:	4803      	ldr	r0, [pc, #12]	; (800b1b4 <inv_set_gyro_orientation_and_scale+0x1c>)
 800b1a8:	f7ff ffe4 	bl	800b174 <set_sensor_orientation_and_scale>
                                     sensitivity);
}
 800b1ac:	bf00      	nop
 800b1ae:	3708      	adds	r7, #8
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}
 800b1b4:	20000708 	.word	0x20000708

0800b1b8 <inv_set_gyro_sample_rate>:

/** Set Gyro Sample rate in micro seconds.
* @param[in] sample_rate_us Set Gyro Sample rate in us
*/
void inv_set_gyro_sample_rate(long sample_rate_us)
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	b083      	sub	sp, #12
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
        int type = PLAYBACK_DBG_TYPE_G_SAMPLE_RATE;
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&sample_rate_us, sizeof(sample_rate_us), 1, inv_data_builder.file);
    }
#endif
    sensors.gyro.sample_rate_us = sample_rate_us;
 800b1c0:	4a0d      	ldr	r2, [pc, #52]	; (800b1f8 <inv_set_gyro_sample_rate+0x40>)
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6293      	str	r3, [r2, #40]	; 0x28
    sensors.gyro.sample_rate_ms = sample_rate_us / 1000;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	4a0c      	ldr	r2, [pc, #48]	; (800b1fc <inv_set_gyro_sample_rate+0x44>)
 800b1ca:	fb82 1203 	smull	r1, r2, r2, r3
 800b1ce:	1192      	asrs	r2, r2, #6
 800b1d0:	17db      	asrs	r3, r3, #31
 800b1d2:	1ad3      	subs	r3, r2, r3
 800b1d4:	4a08      	ldr	r2, [pc, #32]	; (800b1f8 <inv_set_gyro_sample_rate+0x40>)
 800b1d6:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (sensors.gyro.bandwidth == 0) {
 800b1d8:	4b07      	ldr	r3, [pc, #28]	; (800b1f8 <inv_set_gyro_sample_rate+0x40>)
 800b1da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d105      	bne.n	800b1ec <inv_set_gyro_sample_rate+0x34>
        sensors.gyro.bandwidth = (int)(1000000L / sample_rate_us);
 800b1e0:	4a07      	ldr	r2, [pc, #28]	; (800b200 <inv_set_gyro_sample_rate+0x48>)
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	fb92 f3f3 	sdiv	r3, r2, r3
 800b1e8:	4a03      	ldr	r2, [pc, #12]	; (800b1f8 <inv_set_gyro_sample_rate+0x40>)
 800b1ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
}
 800b1ec:	bf00      	nop
 800b1ee:	370c      	adds	r7, #12
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f6:	4770      	bx	lr
 800b1f8:	20000708 	.word	0x20000708
 800b1fc:	10624dd3 	.word	0x10624dd3
 800b200:	000f4240 	.word	0x000f4240

0800b204 <inv_set_accel_sample_rate>:

/** Set Accel Sample rate in micro seconds.
* @param[in] sample_rate_us Set Accel Sample rate in us
*/
void inv_set_accel_sample_rate(long sample_rate_us)
{
 800b204:	b480      	push	{r7}
 800b206:	b083      	sub	sp, #12
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
        int type = PLAYBACK_DBG_TYPE_A_SAMPLE_RATE;
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&sample_rate_us, sizeof(sample_rate_us), 1, inv_data_builder.file);
    }
#endif
    sensors.accel.sample_rate_us = sample_rate_us;
 800b20c:	4a0e      	ldr	r2, [pc, #56]	; (800b248 <inv_set_accel_sample_rate+0x44>)
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	66d3      	str	r3, [r2, #108]	; 0x6c
    sensors.accel.sample_rate_ms = sample_rate_us / 1000;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	4a0d      	ldr	r2, [pc, #52]	; (800b24c <inv_set_accel_sample_rate+0x48>)
 800b216:	fb82 1203 	smull	r1, r2, r2, r3
 800b21a:	1192      	asrs	r2, r2, #6
 800b21c:	17db      	asrs	r3, r3, #31
 800b21e:	1ad3      	subs	r3, r2, r3
 800b220:	4a09      	ldr	r2, [pc, #36]	; (800b248 <inv_set_accel_sample_rate+0x44>)
 800b222:	6713      	str	r3, [r2, #112]	; 0x70
    if (sensors.accel.bandwidth == 0) {
 800b224:	4b08      	ldr	r3, [pc, #32]	; (800b248 <inv_set_accel_sample_rate+0x44>)
 800b226:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d106      	bne.n	800b23c <inv_set_accel_sample_rate+0x38>
        sensors.accel.bandwidth = (int)(1000000L / sample_rate_us);
 800b22e:	4a08      	ldr	r2, [pc, #32]	; (800b250 <inv_set_accel_sample_rate+0x4c>)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	fb92 f3f3 	sdiv	r3, r2, r3
 800b236:	4a04      	ldr	r2, [pc, #16]	; (800b248 <inv_set_accel_sample_rate+0x44>)
 800b238:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }
}
 800b23c:	bf00      	nop
 800b23e:	370c      	adds	r7, #12
 800b240:	46bd      	mov	sp, r7
 800b242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b246:	4770      	bx	lr
 800b248:	20000708 	.word	0x20000708
 800b24c:	10624dd3 	.word	0x10624dd3
 800b250:	000f4240 	.word	0x000f4240

0800b254 <inv_get_compass_on>:

/** Helper function stating whether the compass is on or off.
 * @return TRUE if compass if on, 0 if compass if off
*/
int inv_get_compass_on()
{
 800b254:	b480      	push	{r7}
 800b256:	af00      	add	r7, sp, #0
    return (sensors.compass.status & INV_SENSOR_ON) == INV_SENSOR_ON;
 800b258:	4b07      	ldr	r3, [pc, #28]	; (800b278 <inv_get_compass_on+0x24>)
 800b25a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b25e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b262:	2b00      	cmp	r3, #0
 800b264:	bf14      	ite	ne
 800b266:	2301      	movne	r3, #1
 800b268:	2300      	moveq	r3, #0
 800b26a:	b2db      	uxtb	r3, r3
}
 800b26c:	4618      	mov	r0, r3
 800b26e:	46bd      	mov	sp, r7
 800b270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b274:	4770      	bx	lr
 800b276:	bf00      	nop
 800b278:	20000708 	.word	0x20000708

0800b27c <inv_get_gyro_on>:

/** Helper function stating whether the gyro is on or off.
 * @return TRUE if gyro if on, 0 if gyro if off
*/
int inv_get_gyro_on()
{
 800b27c:	b480      	push	{r7}
 800b27e:	af00      	add	r7, sp, #0
    return (sensors.gyro.status & INV_SENSOR_ON) == INV_SENSOR_ON;
 800b280:	4b06      	ldr	r3, [pc, #24]	; (800b29c <inv_get_gyro_on+0x20>)
 800b282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b288:	2b00      	cmp	r3, #0
 800b28a:	bf14      	ite	ne
 800b28c:	2301      	movne	r3, #1
 800b28e:	2300      	moveq	r3, #0
 800b290:	b2db      	uxtb	r3, r3
}
 800b292:	4618      	mov	r0, r3
 800b294:	46bd      	mov	sp, r7
 800b296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29a:	4770      	bx	lr
 800b29c:	20000708 	.word	0x20000708

0800b2a0 <inv_get_accel_on>:

/** Helper function stating whether the acceleromter is on or off.
 * @return TRUE if accel if on, 0 if accel if off
*/
int inv_get_accel_on()
{
 800b2a0:	b480      	push	{r7}
 800b2a2:	af00      	add	r7, sp, #0
    return (sensors.accel.status & INV_SENSOR_ON) == INV_SENSOR_ON;
 800b2a4:	4b06      	ldr	r3, [pc, #24]	; (800b2c0 <inv_get_accel_on+0x20>)
 800b2a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	bf14      	ite	ne
 800b2b0:	2301      	movne	r3, #1
 800b2b2:	2300      	moveq	r3, #0
 800b2b4:	b2db      	uxtb	r3, r3
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2be:	4770      	bx	lr
 800b2c0:	20000708 	.word	0x20000708

0800b2c4 <inv_get_last_timestamp>:
/** Get last timestamp across all 3 sensors that are on.
* This find out which timestamp has the largest value for sensors that are on.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_time_t inv_get_last_timestamp()
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b083      	sub	sp, #12
 800b2c8:	af00      	add	r7, sp, #0
    inv_time_t timestamp = 0;
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	607b      	str	r3, [r7, #4]
    if (sensors.accel.status & INV_SENSOR_ON) {
 800b2ce:	4b20      	ldr	r3, [pc, #128]	; (800b350 <inv_get_last_timestamp+0x8c>)
 800b2d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d002      	beq.n	800b2e0 <inv_get_last_timestamp+0x1c>
        timestamp = sensors.accel.timestamp;
 800b2da:	4b1d      	ldr	r3, [pc, #116]	; (800b350 <inv_get_last_timestamp+0x8c>)
 800b2dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b2de:	607b      	str	r3, [r7, #4]
    }
    if (sensors.gyro.status & INV_SENSOR_ON) {
 800b2e0:	4b1b      	ldr	r3, [pc, #108]	; (800b350 <inv_get_last_timestamp+0x8c>)
 800b2e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d007      	beq.n	800b2fc <inv_get_last_timestamp+0x38>
        if (timestamp < sensors.gyro.timestamp) {
 800b2ec:	4b18      	ldr	r3, [pc, #96]	; (800b350 <inv_get_last_timestamp+0x8c>)
 800b2ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2f0:	687a      	ldr	r2, [r7, #4]
 800b2f2:	429a      	cmp	r2, r3
 800b2f4:	d202      	bcs.n	800b2fc <inv_get_last_timestamp+0x38>
            timestamp = sensors.gyro.timestamp;
 800b2f6:	4b16      	ldr	r3, [pc, #88]	; (800b350 <inv_get_last_timestamp+0x8c>)
 800b2f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2fa:	607b      	str	r3, [r7, #4]
        }
    }
    if (sensors.compass.status & INV_SENSOR_ON) {
 800b2fc:	4b14      	ldr	r3, [pc, #80]	; (800b350 <inv_get_last_timestamp+0x8c>)
 800b2fe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b306:	2b00      	cmp	r3, #0
 800b308:	d009      	beq.n	800b31e <inv_get_last_timestamp+0x5a>
        if (timestamp < sensors.compass.timestamp) {
 800b30a:	4b11      	ldr	r3, [pc, #68]	; (800b350 <inv_get_last_timestamp+0x8c>)
 800b30c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800b310:	687a      	ldr	r2, [r7, #4]
 800b312:	429a      	cmp	r2, r3
 800b314:	d203      	bcs.n	800b31e <inv_get_last_timestamp+0x5a>
            timestamp = sensors.compass.timestamp;
 800b316:	4b0e      	ldr	r3, [pc, #56]	; (800b350 <inv_get_last_timestamp+0x8c>)
 800b318:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800b31c:	607b      	str	r3, [r7, #4]
        }
    }
    if (sensors.temp.status & INV_SENSOR_ON) {
 800b31e:	4b0c      	ldr	r3, [pc, #48]	; (800b350 <inv_get_last_timestamp+0x8c>)
 800b320:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800b324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d009      	beq.n	800b340 <inv_get_last_timestamp+0x7c>
        if (timestamp < sensors.temp.timestamp)
 800b32c:	4b08      	ldr	r3, [pc, #32]	; (800b350 <inv_get_last_timestamp+0x8c>)
 800b32e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800b332:	687a      	ldr	r2, [r7, #4]
 800b334:	429a      	cmp	r2, r3
 800b336:	d203      	bcs.n	800b340 <inv_get_last_timestamp+0x7c>
            timestamp = sensors.temp.timestamp;
 800b338:	4b05      	ldr	r3, [pc, #20]	; (800b350 <inv_get_last_timestamp+0x8c>)
 800b33a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800b33e:	607b      	str	r3, [r7, #4]
    }
    return timestamp;
 800b340:	687b      	ldr	r3, [r7, #4]
}
 800b342:	4618      	mov	r0, r3
 800b344:	370c      	adds	r7, #12
 800b346:	46bd      	mov	sp, r7
 800b348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34c:	4770      	bx	lr
 800b34e:	bf00      	nop
 800b350:	20000708 	.word	0x20000708

0800b354 <inv_set_accel_orientation_and_scale>:
* @param[in] sensitivity A scale factor to convert device units to g's
*            such that g's = device_units * sensitivity / 2^30. Typically
*            it works out to be the maximum g_value * 2^15.
*/
void inv_set_accel_orientation_and_scale(int orientation, long sensitivity)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b082      	sub	sp, #8
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
 800b35c:	6039      	str	r1, [r7, #0]
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&orientation, sizeof(orientation), 1, inv_data_builder.file);
        fwrite(&sensitivity, sizeof(sensitivity), 1, inv_data_builder.file);
    }
#endif
    set_sensor_orientation_and_scale(&sensors.accel, orientation,
 800b35e:	683a      	ldr	r2, [r7, #0]
 800b360:	6879      	ldr	r1, [r7, #4]
 800b362:	4803      	ldr	r0, [pc, #12]	; (800b370 <inv_set_accel_orientation_and_scale+0x1c>)
 800b364:	f7ff ff06 	bl	800b174 <set_sensor_orientation_and_scale>
                                     sensitivity);
}
 800b368:	bf00      	nop
 800b36a:	3708      	adds	r7, #8
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd80      	pop	{r7, pc}
 800b370:	2000074c 	.word	0x2000074c

0800b374 <inv_apply_calibration>:
* @param[in,out] sensor structure to modify
* @param[in] bias bias in the mounting frame, in hardware units scaled by
*                 2^16. Length 3.
*/
void inv_apply_calibration(struct inv_single_sensor_t *sensor, const long *bias)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b086      	sub	sp, #24
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
 800b37c:	6039      	str	r1, [r7, #0]
    long raw32[3];

    // Convert raw to calibrated
    raw32[0] = (long)sensor->raw[0] << 15;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b384:	03db      	lsls	r3, r3, #15
 800b386:	60fb      	str	r3, [r7, #12]
    raw32[1] = (long)sensor->raw[1] << 15;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b38e:	03db      	lsls	r3, r3, #15
 800b390:	613b      	str	r3, [r7, #16]
    raw32[2] = (long)sensor->raw[2] << 15;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b398:	03db      	lsls	r3, r3, #15
 800b39a:	617b      	str	r3, [r7, #20]

    inv_convert_to_body_with_scale(sensor->orientation, sensor->sensitivity << 1, raw32, sensor->raw_scaled);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	b298      	uxth	r0, r3
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3a6:	0059      	lsls	r1, r3, #1
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	330c      	adds	r3, #12
 800b3ac:	f107 020c 	add.w	r2, r7, #12
 800b3b0:	f001 fa76 	bl	800c8a0 <inv_convert_to_body_with_scale>

    raw32[0] -= bias[0] >> 1;
 800b3b4:	68fa      	ldr	r2, [r7, #12]
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	105b      	asrs	r3, r3, #1
 800b3bc:	1ad3      	subs	r3, r2, r3
 800b3be:	60fb      	str	r3, [r7, #12]
    raw32[1] -= bias[1] >> 1;
 800b3c0:	693a      	ldr	r2, [r7, #16]
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	3304      	adds	r3, #4
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	105b      	asrs	r3, r3, #1
 800b3ca:	1ad3      	subs	r3, r2, r3
 800b3cc:	613b      	str	r3, [r7, #16]
    raw32[2] -= bias[2] >> 1;
 800b3ce:	697a      	ldr	r2, [r7, #20]
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	3308      	adds	r3, #8
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	105b      	asrs	r3, r3, #1
 800b3d8:	1ad3      	subs	r3, r2, r3
 800b3da:	617b      	str	r3, [r7, #20]

    inv_convert_to_body_with_scale(sensor->orientation, sensor->sensitivity << 1, raw32, sensor->calibrated);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	b298      	uxth	r0, r3
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3e6:	0059      	lsls	r1, r3, #1
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	3318      	adds	r3, #24
 800b3ec:	f107 020c 	add.w	r2, r7, #12
 800b3f0:	f001 fa56 	bl	800c8a0 <inv_convert_to_body_with_scale>

    sensor->status |= INV_CALIBRATED;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3f8:	f043 0220 	orr.w	r2, r3, #32
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b400:	bf00      	nop
 800b402:	3718      	adds	r7, #24
 800b404:	46bd      	mov	sp, r7
 800b406:	bd80      	pop	{r7, pc}

0800b408 <inv_set_compass_disturbance>:

/** Set the state of a compass disturbance
* @param[in] dist 1=disturbance, 0=no disturbance
*/
void inv_set_compass_disturbance(int dist)
{
 800b408:	b480      	push	{r7}
 800b40a:	b083      	sub	sp, #12
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
    inv_data_builder.compass_disturbance = dist;
 800b410:	4a04      	ldr	r2, [pc, #16]	; (800b424 <inv_set_compass_disturbance+0x1c>)
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
}
 800b418:	bf00      	nop
 800b41a:	370c      	adds	r7, #12
 800b41c:	46bd      	mov	sp, r7
 800b41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b422:	4770      	bx	lr
 800b424:	200005c8 	.word	0x200005c8

0800b428 <inv_set_accel_bias>:
/** Sets the accel bias.
* @param[in] bias Accel bias, length 3. In HW units scaled by 2^16 in body frame
* @param[in] accuracy Accuracy rating from 0 to 3, with 3 being most accurate.
*/
void inv_set_accel_bias(const long *bias, int accuracy)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b082      	sub	sp, #8
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
 800b430:	6039      	str	r1, [r7, #0]
    if (bias) {
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d010      	beq.n	800b45a <inv_set_accel_bias+0x32>
        if (memcmp(inv_data_builder.save.accel_bias, bias, sizeof(inv_data_builder.save.accel_bias))) {
 800b438:	220c      	movs	r2, #12
 800b43a:	6879      	ldr	r1, [r7, #4]
 800b43c:	480f      	ldr	r0, [pc, #60]	; (800b47c <inv_set_accel_bias+0x54>)
 800b43e:	f001 fe41 	bl	800d0c4 <memcmp>
 800b442:	4603      	mov	r3, r0
 800b444:	2b00      	cmp	r3, #0
 800b446:	d008      	beq.n	800b45a <inv_set_accel_bias+0x32>
            memcpy(inv_data_builder.save.accel_bias, bias, sizeof(inv_data_builder.save.accel_bias));
 800b448:	220c      	movs	r2, #12
 800b44a:	6879      	ldr	r1, [r7, #4]
 800b44c:	480b      	ldr	r0, [pc, #44]	; (800b47c <inv_set_accel_bias+0x54>)
 800b44e:	f001 fe47 	bl	800d0e0 <memcpy>
            inv_apply_calibration(&sensors.accel, inv_data_builder.save.accel_bias);
 800b452:	490a      	ldr	r1, [pc, #40]	; (800b47c <inv_set_accel_bias+0x54>)
 800b454:	480a      	ldr	r0, [pc, #40]	; (800b480 <inv_set_accel_bias+0x58>)
 800b456:	f7ff ff8d 	bl	800b374 <inv_apply_calibration>
        }
    }
    sensors.accel.accuracy = accuracy;
 800b45a:	4a0a      	ldr	r2, [pc, #40]	; (800b484 <inv_set_accel_bias+0x5c>)
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	6793      	str	r3, [r2, #120]	; 0x78
    inv_data_builder.save.accel_accuracy = accuracy;
 800b460:	4a09      	ldr	r2, [pc, #36]	; (800b488 <inv_set_accel_bias+0x60>)
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
    inv_set_message(INV_MSG_NEW_AB_EVENT, INV_MSG_NEW_AB_EVENT, 0);
 800b468:	2200      	movs	r2, #0
 800b46a:	2110      	movs	r1, #16
 800b46c:	2010      	movs	r0, #16
 800b46e:	f000 fb63 	bl	800bb38 <inv_set_message>
}
 800b472:	bf00      	nop
 800b474:	3708      	adds	r7, #8
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}
 800b47a:	bf00      	nop
 800b47c:	200006dc 	.word	0x200006dc
 800b480:	2000074c 	.word	0x2000074c
 800b484:	20000708 	.word	0x20000708
 800b488:	200005c8 	.word	0x200005c8

0800b48c <inv_set_gyro_bias>:
* @param[in] bias Gyro bias in hardware units scaled by 2^16. In chip mounting frame.
*            Length 3.
* @param[in] accuracy Accuracy of bias. 0 = least accurate, 3 = most accurate.
*/
void inv_set_gyro_bias(const long *bias, int accuracy)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b082      	sub	sp, #8
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
 800b494:	6039      	str	r1, [r7, #0]
    if (bias != NULL) {
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d010      	beq.n	800b4be <inv_set_gyro_bias+0x32>
        if (memcmp(inv_data_builder.save.gyro_bias, bias, sizeof(inv_data_builder.save.gyro_bias))) {
 800b49c:	220c      	movs	r2, #12
 800b49e:	6879      	ldr	r1, [r7, #4]
 800b4a0:	4819      	ldr	r0, [pc, #100]	; (800b508 <inv_set_gyro_bias+0x7c>)
 800b4a2:	f001 fe0f 	bl	800d0c4 <memcmp>
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d008      	beq.n	800b4be <inv_set_gyro_bias+0x32>
            memcpy(inv_data_builder.save.gyro_bias, bias, sizeof(inv_data_builder.save.gyro_bias));
 800b4ac:	220c      	movs	r2, #12
 800b4ae:	6879      	ldr	r1, [r7, #4]
 800b4b0:	4815      	ldr	r0, [pc, #84]	; (800b508 <inv_set_gyro_bias+0x7c>)
 800b4b2:	f001 fe15 	bl	800d0e0 <memcpy>
            inv_apply_calibration(&sensors.gyro, inv_data_builder.save.gyro_bias);
 800b4b6:	4914      	ldr	r1, [pc, #80]	; (800b508 <inv_set_gyro_bias+0x7c>)
 800b4b8:	4814      	ldr	r0, [pc, #80]	; (800b50c <inv_set_gyro_bias+0x80>)
 800b4ba:	f7ff ff5b 	bl	800b374 <inv_apply_calibration>
        }
    }
    sensors.gyro.accuracy = accuracy;
 800b4be:	4a13      	ldr	r2, [pc, #76]	; (800b50c <inv_set_gyro_bias+0x80>)
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	6353      	str	r3, [r2, #52]	; 0x34
    inv_data_builder.save.gyro_accuracy = accuracy;
 800b4c4:	4a12      	ldr	r2, [pc, #72]	; (800b510 <inv_set_gyro_bias+0x84>)
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

    /* TODO: What should we do if there's no temperature data? */
    if (sensors.temp.calibrated[0])
 800b4cc:	4b0f      	ldr	r3, [pc, #60]	; (800b50c <inv_set_gyro_bias+0x80>)
 800b4ce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d006      	beq.n	800b4e4 <inv_set_gyro_bias+0x58>
        inv_data_builder.save.gyro_temp = sensors.temp.calibrated[0];
 800b4d6:	4b0d      	ldr	r3, [pc, #52]	; (800b50c <inv_set_gyro_bias+0x80>)
 800b4d8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b4dc:	4a0c      	ldr	r2, [pc, #48]	; (800b510 <inv_set_gyro_bias+0x84>)
 800b4de:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 800b4e2:	e004      	b.n	800b4ee <inv_set_gyro_bias+0x62>
    else
        /* Set to 27 deg C for now until we've got a better solution. */
        inv_data_builder.save.gyro_temp = 1769472L;
 800b4e4:	4b0a      	ldr	r3, [pc, #40]	; (800b510 <inv_set_gyro_bias+0x84>)
 800b4e6:	f44f 12d8 	mov.w	r2, #1769472	; 0x1b0000
 800b4ea:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    inv_set_message(INV_MSG_NEW_GB_EVENT, INV_MSG_NEW_GB_EVENT, 0);
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	2104      	movs	r1, #4
 800b4f2:	2004      	movs	r0, #4
 800b4f4:	f000 fb20 	bl	800bb38 <inv_set_message>

    /* TODO: this flag works around the synchronization problem seen with using
       the user-exposed message layer to signal the temperature compensation
       module that gyro biases were set.
       A better, cleaner method is certainly needed. */
    inv_data_builder.save.gyro_bias_tc_set = true;
 800b4f8:	4b05      	ldr	r3, [pc, #20]	; (800b510 <inv_set_gyro_bias+0x84>)
 800b4fa:	2201      	movs	r2, #1
 800b4fc:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
 800b500:	bf00      	nop
 800b502:	3708      	adds	r7, #8
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}
 800b508:	200006c8 	.word	0x200006c8
 800b50c:	20000708 	.word	0x20000708
 800b510:	200005c8 	.word	0x200005c8

0800b514 <inv_get_gyro_bias_tc_set>:
 *          The flag clear automatically after is read.
 *  @return true if the flag was set, indicating gyro biases were set.
 *          false if the flag was not set.
 */
int inv_get_gyro_bias_tc_set(void)
{
 800b514:	b480      	push	{r7}
 800b516:	b083      	sub	sp, #12
 800b518:	af00      	add	r7, sp, #0
    int flag = (inv_data_builder.save.gyro_bias_tc_set == true);
 800b51a:	4b0a      	ldr	r3, [pc, #40]	; (800b544 <inv_get_gyro_bias_tc_set+0x30>)
 800b51c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800b520:	2b01      	cmp	r3, #1
 800b522:	bf0c      	ite	eq
 800b524:	2301      	moveq	r3, #1
 800b526:	2300      	movne	r3, #0
 800b528:	b2db      	uxtb	r3, r3
 800b52a:	607b      	str	r3, [r7, #4]
    inv_data_builder.save.gyro_bias_tc_set = false;
 800b52c:	4b05      	ldr	r3, [pc, #20]	; (800b544 <inv_get_gyro_bias_tc_set+0x30>)
 800b52e:	2200      	movs	r2, #0
 800b530:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    return flag;
 800b534:	687b      	ldr	r3, [r7, #4]
}
 800b536:	4618      	mov	r0, r3
 800b538:	370c      	adds	r7, #12
 800b53a:	46bd      	mov	sp, r7
 800b53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b540:	4770      	bx	lr
 800b542:	bf00      	nop
 800b544:	200005c8 	.word	0x200005c8

0800b548 <inv_get_gyro_bias>:
 *              Length 3.
 *  @param[in] temp
 *              Tempearature in degrees C.
 */
void inv_get_gyro_bias(long *bias, long *temp)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b082      	sub	sp, #8
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
 800b550:	6039      	str	r1, [r7, #0]
    if (bias != NULL)
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d004      	beq.n	800b562 <inv_get_gyro_bias+0x1a>
        memcpy(bias, inv_data_builder.save.gyro_bias,
 800b558:	220c      	movs	r2, #12
 800b55a:	4908      	ldr	r1, [pc, #32]	; (800b57c <inv_get_gyro_bias+0x34>)
 800b55c:	6878      	ldr	r0, [r7, #4]
 800b55e:	f001 fdbf 	bl	800d0e0 <memcpy>
               sizeof(inv_data_builder.save.gyro_bias));
    if (temp != NULL)
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d004      	beq.n	800b572 <inv_get_gyro_bias+0x2a>
        temp[0] = inv_data_builder.save.gyro_temp;
 800b568:	4b05      	ldr	r3, [pc, #20]	; (800b580 <inv_get_gyro_bias+0x38>)
 800b56a:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	601a      	str	r2, [r3, #0]
}
 800b572:	bf00      	nop
 800b574:	3708      	adds	r7, #8
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}
 800b57a:	bf00      	nop
 800b57c:	200006c8 	.word	0x200006c8
 800b580:	200005c8 	.word	0x200005c8

0800b584 <inv_build_quat>:
*                         nanoseconds.
* @param[out] executed Set to 1 if data processing was done.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_build_quat(const long *quat, int status, inv_time_t timestamp)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b084      	sub	sp, #16
 800b588:	af00      	add	r7, sp, #0
 800b58a:	60f8      	str	r0, [r7, #12]
 800b58c:	60b9      	str	r1, [r7, #8]
 800b58e:	607a      	str	r2, [r7, #4]
        fwrite(quat, sizeof(quat[0]), 4, inv_data_builder.file);
        fwrite(&timestamp, sizeof(timestamp), 1, inv_data_builder.file);
    }
#endif
    
    memcpy(sensors.quat.raw, quat, sizeof(sensors.quat.raw));
 800b590:	2210      	movs	r2, #16
 800b592:	68f9      	ldr	r1, [r7, #12]
 800b594:	480e      	ldr	r0, [pc, #56]	; (800b5d0 <inv_build_quat+0x4c>)
 800b596:	f001 fda3 	bl	800d0e0 <memcpy>
    sensors.quat.timestamp = timestamp;
 800b59a:	4a0e      	ldr	r2, [pc, #56]	; (800b5d4 <inv_build_quat+0x50>)
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    sensors.quat.status |= INV_NEW_DATA | INV_RAW_DATA | INV_SENSOR_ON;
 800b5a2:	4b0c      	ldr	r3, [pc, #48]	; (800b5d4 <inv_build_quat+0x50>)
 800b5a4:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800b5a8:	f443 73e0 	orr.w	r3, r3, #448	; 0x1c0
 800b5ac:	4a09      	ldr	r2, [pc, #36]	; (800b5d4 <inv_build_quat+0x50>)
 800b5ae:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
    sensors.quat.status |= (INV_BIAS_APPLIED & status);
 800b5b2:	4b08      	ldr	r3, [pc, #32]	; (800b5d4 <inv_build_quat+0x50>)
 800b5b4:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b5be:	4313      	orrs	r3, r2
 800b5c0:	4a04      	ldr	r2, [pc, #16]	; (800b5d4 <inv_build_quat+0x50>)
 800b5c2:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    return INV_SUCCESS;
 800b5c6:	2300      	movs	r3, #0
}
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	3710      	adds	r7, #16
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd80      	pop	{r7, pc}
 800b5d0:	20000818 	.word	0x20000818
 800b5d4:	20000708 	.word	0x20000708

0800b5d8 <inv_register_data_cb>:
*            callback would be generated if there was new magnetomer data OR new accel data.
*/
inv_error_t inv_register_data_cb(
    inv_error_t (*func)(struct inv_sensor_cal_t *data),
    int priority, int sensor_type)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b088      	sub	sp, #32
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	60f8      	str	r0, [r7, #12]
 800b5e0:	60b9      	str	r1, [r7, #8]
 800b5e2:	607a      	str	r2, [r7, #4]
    inv_error_t result = INV_SUCCESS;
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	61fb      	str	r3, [r7, #28]
    int kk, nn;

    // Make sure we haven't registered this function already
    // Or used the same priority
    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	61bb      	str	r3, [r7, #24]
 800b5ec:	e01c      	b.n	800b628 <inv_register_data_cb+0x50>
        if ((inv_data_builder.process[kk].func == func) ||
 800b5ee:	494a      	ldr	r1, [pc, #296]	; (800b718 <inv_register_data_cb+0x140>)
 800b5f0:	69ba      	ldr	r2, [r7, #24]
 800b5f2:	4613      	mov	r3, r2
 800b5f4:	005b      	lsls	r3, r3, #1
 800b5f6:	4413      	add	r3, r2
 800b5f8:	009b      	lsls	r3, r3, #2
 800b5fa:	440b      	add	r3, r1
 800b5fc:	3304      	adds	r3, #4
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	68fa      	ldr	r2, [r7, #12]
 800b602:	429a      	cmp	r2, r3
 800b604:	d00b      	beq.n	800b61e <inv_register_data_cb+0x46>
                (inv_data_builder.process[kk].priority == priority)) {
 800b606:	4944      	ldr	r1, [pc, #272]	; (800b718 <inv_register_data_cb+0x140>)
 800b608:	69ba      	ldr	r2, [r7, #24]
 800b60a:	4613      	mov	r3, r2
 800b60c:	005b      	lsls	r3, r3, #1
 800b60e:	4413      	add	r3, r2
 800b610:	009b      	lsls	r3, r3, #2
 800b612:	440b      	add	r3, r1
 800b614:	3308      	adds	r3, #8
 800b616:	681b      	ldr	r3, [r3, #0]
        if ((inv_data_builder.process[kk].func == func) ||
 800b618:	68ba      	ldr	r2, [r7, #8]
 800b61a:	429a      	cmp	r2, r3
 800b61c:	d101      	bne.n	800b622 <inv_register_data_cb+0x4a>
            return INV_ERROR_INVALID_PARAMETER;    //fixme give a warning
 800b61e:	2316      	movs	r3, #22
 800b620:	e076      	b.n	800b710 <inv_register_data_cb+0x138>
    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
 800b622:	69bb      	ldr	r3, [r7, #24]
 800b624:	3301      	adds	r3, #1
 800b626:	61bb      	str	r3, [r7, #24]
 800b628:	4b3b      	ldr	r3, [pc, #236]	; (800b718 <inv_register_data_cb+0x140>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	69ba      	ldr	r2, [r7, #24]
 800b62e:	429a      	cmp	r2, r3
 800b630:	dbdd      	blt.n	800b5ee <inv_register_data_cb+0x16>
        }
    }

    // Make sure we have not filled up our number of allowable callbacks
    if (inv_data_builder.num_cb <= INV_MAX_DATA_CB - 1) {
 800b632:	4b39      	ldr	r3, [pc, #228]	; (800b718 <inv_register_data_cb+0x140>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	2b13      	cmp	r3, #19
 800b638:	dc62      	bgt.n	800b700 <inv_register_data_cb+0x128>
        kk = 0;
 800b63a:	2300      	movs	r3, #0
 800b63c:	61bb      	str	r3, [r7, #24]
        if (inv_data_builder.num_cb != 0) {
 800b63e:	4b36      	ldr	r3, [pc, #216]	; (800b718 <inv_register_data_cb+0x140>)
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d038      	beq.n	800b6b8 <inv_register_data_cb+0xe0>
            // set kk to be where this new callback goes in the array
            while ((kk < inv_data_builder.num_cb) &&
 800b646:	e002      	b.n	800b64e <inv_register_data_cb+0x76>
                    (inv_data_builder.process[kk].priority < priority)) {
                kk++;
 800b648:	69bb      	ldr	r3, [r7, #24]
 800b64a:	3301      	adds	r3, #1
 800b64c:	61bb      	str	r3, [r7, #24]
            while ((kk < inv_data_builder.num_cb) &&
 800b64e:	4b32      	ldr	r3, [pc, #200]	; (800b718 <inv_register_data_cb+0x140>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	69ba      	ldr	r2, [r7, #24]
 800b654:	429a      	cmp	r2, r3
 800b656:	da0b      	bge.n	800b670 <inv_register_data_cb+0x98>
                    (inv_data_builder.process[kk].priority < priority)) {
 800b658:	492f      	ldr	r1, [pc, #188]	; (800b718 <inv_register_data_cb+0x140>)
 800b65a:	69ba      	ldr	r2, [r7, #24]
 800b65c:	4613      	mov	r3, r2
 800b65e:	005b      	lsls	r3, r3, #1
 800b660:	4413      	add	r3, r2
 800b662:	009b      	lsls	r3, r3, #2
 800b664:	440b      	add	r3, r1
 800b666:	3308      	adds	r3, #8
 800b668:	681b      	ldr	r3, [r3, #0]
            while ((kk < inv_data_builder.num_cb) &&
 800b66a:	68ba      	ldr	r2, [r7, #8]
 800b66c:	429a      	cmp	r2, r3
 800b66e:	dceb      	bgt.n	800b648 <inv_register_data_cb+0x70>
            }
            if (kk != inv_data_builder.num_cb) {
 800b670:	4b29      	ldr	r3, [pc, #164]	; (800b718 <inv_register_data_cb+0x140>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	69ba      	ldr	r2, [r7, #24]
 800b676:	429a      	cmp	r2, r3
 800b678:	d01e      	beq.n	800b6b8 <inv_register_data_cb+0xe0>
                // We need to move the others
                for (nn = inv_data_builder.num_cb; nn > kk; --nn) {
 800b67a:	4b27      	ldr	r3, [pc, #156]	; (800b718 <inv_register_data_cb+0x140>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	617b      	str	r3, [r7, #20]
 800b680:	e016      	b.n	800b6b0 <inv_register_data_cb+0xd8>
                    inv_data_builder.process[nn] =
                        inv_data_builder.process[nn - 1];
 800b682:	697b      	ldr	r3, [r7, #20]
 800b684:	1e5a      	subs	r2, r3, #1
                    inv_data_builder.process[nn] =
 800b686:	4824      	ldr	r0, [pc, #144]	; (800b718 <inv_register_data_cb+0x140>)
 800b688:	6979      	ldr	r1, [r7, #20]
 800b68a:	460b      	mov	r3, r1
 800b68c:	005b      	lsls	r3, r3, #1
 800b68e:	440b      	add	r3, r1
 800b690:	009b      	lsls	r3, r3, #2
 800b692:	18c1      	adds	r1, r0, r3
 800b694:	4820      	ldr	r0, [pc, #128]	; (800b718 <inv_register_data_cb+0x140>)
 800b696:	4613      	mov	r3, r2
 800b698:	005b      	lsls	r3, r3, #1
 800b69a:	4413      	add	r3, r2
 800b69c:	009b      	lsls	r3, r3, #2
 800b69e:	18c2      	adds	r2, r0, r3
 800b6a0:	1d0b      	adds	r3, r1, #4
 800b6a2:	3204      	adds	r2, #4
 800b6a4:	ca07      	ldmia	r2, {r0, r1, r2}
 800b6a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                for (nn = inv_data_builder.num_cb; nn > kk; --nn) {
 800b6aa:	697b      	ldr	r3, [r7, #20]
 800b6ac:	3b01      	subs	r3, #1
 800b6ae:	617b      	str	r3, [r7, #20]
 800b6b0:	697a      	ldr	r2, [r7, #20]
 800b6b2:	69bb      	ldr	r3, [r7, #24]
 800b6b4:	429a      	cmp	r2, r3
 800b6b6:	dce4      	bgt.n	800b682 <inv_register_data_cb+0xaa>
                }
            }
        }
        // Add new callback
        inv_data_builder.process[kk].func = func;
 800b6b8:	4917      	ldr	r1, [pc, #92]	; (800b718 <inv_register_data_cb+0x140>)
 800b6ba:	69ba      	ldr	r2, [r7, #24]
 800b6bc:	4613      	mov	r3, r2
 800b6be:	005b      	lsls	r3, r3, #1
 800b6c0:	4413      	add	r3, r2
 800b6c2:	009b      	lsls	r3, r3, #2
 800b6c4:	440b      	add	r3, r1
 800b6c6:	3304      	adds	r3, #4
 800b6c8:	68fa      	ldr	r2, [r7, #12]
 800b6ca:	601a      	str	r2, [r3, #0]
        inv_data_builder.process[kk].priority = priority;
 800b6cc:	4912      	ldr	r1, [pc, #72]	; (800b718 <inv_register_data_cb+0x140>)
 800b6ce:	69ba      	ldr	r2, [r7, #24]
 800b6d0:	4613      	mov	r3, r2
 800b6d2:	005b      	lsls	r3, r3, #1
 800b6d4:	4413      	add	r3, r2
 800b6d6:	009b      	lsls	r3, r3, #2
 800b6d8:	440b      	add	r3, r1
 800b6da:	3308      	adds	r3, #8
 800b6dc:	68ba      	ldr	r2, [r7, #8]
 800b6de:	601a      	str	r2, [r3, #0]
        inv_data_builder.process[kk].data_required = sensor_type;
 800b6e0:	490d      	ldr	r1, [pc, #52]	; (800b718 <inv_register_data_cb+0x140>)
 800b6e2:	69ba      	ldr	r2, [r7, #24]
 800b6e4:	4613      	mov	r3, r2
 800b6e6:	005b      	lsls	r3, r3, #1
 800b6e8:	4413      	add	r3, r2
 800b6ea:	009b      	lsls	r3, r3, #2
 800b6ec:	440b      	add	r3, r1
 800b6ee:	330c      	adds	r3, #12
 800b6f0:	687a      	ldr	r2, [r7, #4]
 800b6f2:	601a      	str	r2, [r3, #0]
        inv_data_builder.num_cb++;
 800b6f4:	4b08      	ldr	r3, [pc, #32]	; (800b718 <inv_register_data_cb+0x140>)
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	3301      	adds	r3, #1
 800b6fa:	4a07      	ldr	r2, [pc, #28]	; (800b718 <inv_register_data_cb+0x140>)
 800b6fc:	6013      	str	r3, [r2, #0]
 800b6fe:	e006      	b.n	800b70e <inv_register_data_cb+0x136>
    } else {
        MPL_LOGE("Unable to add feature callback as too many were already registered\n");
 800b700:	4a06      	ldr	r2, [pc, #24]	; (800b71c <inv_register_data_cb+0x144>)
 800b702:	4907      	ldr	r1, [pc, #28]	; (800b720 <inv_register_data_cb+0x148>)
 800b704:	2006      	movs	r0, #6
 800b706:	f7ff fadb 	bl	800acc0 <_MLPrintLog>
        result = INV_ERROR_MEMORY_EXAUSTED;
 800b70a:	230c      	movs	r3, #12
 800b70c:	61fb      	str	r3, [r7, #28]
    }

    return result;
 800b70e:	69fb      	ldr	r3, [r7, #28]
}
 800b710:	4618      	mov	r0, r3
 800b712:	3720      	adds	r7, #32
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}
 800b718:	200005c8 	.word	0x200005c8
 800b71c:	08012a44 	.word	0x08012a44
 800b720:	08012a88 	.word	0x08012a88

0800b724 <inv_unregister_data_cb>:
*            INV_ACCEL_NEW | INV_MAG_NEW, a
*            callback would be generated if there was new magnetomer data OR new accel data.
*/
inv_error_t inv_unregister_data_cb(
    inv_error_t (*func)(struct inv_sensor_cal_t *data))
{
 800b724:	b480      	push	{r7}
 800b726:	b085      	sub	sp, #20
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
    int kk, nn;

    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
 800b72c:	2300      	movs	r3, #0
 800b72e:	60fb      	str	r3, [r7, #12]
 800b730:	e035      	b.n	800b79e <inv_unregister_data_cb+0x7a>
        if (inv_data_builder.process[kk].func == func) {
 800b732:	4921      	ldr	r1, [pc, #132]	; (800b7b8 <inv_unregister_data_cb+0x94>)
 800b734:	68fa      	ldr	r2, [r7, #12]
 800b736:	4613      	mov	r3, r2
 800b738:	005b      	lsls	r3, r3, #1
 800b73a:	4413      	add	r3, r2
 800b73c:	009b      	lsls	r3, r3, #2
 800b73e:	440b      	add	r3, r1
 800b740:	3304      	adds	r3, #4
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	687a      	ldr	r2, [r7, #4]
 800b746:	429a      	cmp	r2, r3
 800b748:	d126      	bne.n	800b798 <inv_unregister_data_cb+0x74>
            // Delete this callback
            for (nn = kk + 1; nn < inv_data_builder.num_cb; ++nn) {
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	3301      	adds	r3, #1
 800b74e:	60bb      	str	r3, [r7, #8]
 800b750:	e016      	b.n	800b780 <inv_unregister_data_cb+0x5c>
                inv_data_builder.process[nn - 1] =
 800b752:	68bb      	ldr	r3, [r7, #8]
 800b754:	1e5a      	subs	r2, r3, #1
 800b756:	4918      	ldr	r1, [pc, #96]	; (800b7b8 <inv_unregister_data_cb+0x94>)
 800b758:	4613      	mov	r3, r2
 800b75a:	005b      	lsls	r3, r3, #1
 800b75c:	4413      	add	r3, r2
 800b75e:	009b      	lsls	r3, r3, #2
 800b760:	4419      	add	r1, r3
 800b762:	4815      	ldr	r0, [pc, #84]	; (800b7b8 <inv_unregister_data_cb+0x94>)
 800b764:	68ba      	ldr	r2, [r7, #8]
 800b766:	4613      	mov	r3, r2
 800b768:	005b      	lsls	r3, r3, #1
 800b76a:	4413      	add	r3, r2
 800b76c:	009b      	lsls	r3, r3, #2
 800b76e:	18c2      	adds	r2, r0, r3
 800b770:	1d0b      	adds	r3, r1, #4
 800b772:	3204      	adds	r2, #4
 800b774:	ca07      	ldmia	r2, {r0, r1, r2}
 800b776:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            for (nn = kk + 1; nn < inv_data_builder.num_cb; ++nn) {
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	3301      	adds	r3, #1
 800b77e:	60bb      	str	r3, [r7, #8]
 800b780:	4b0d      	ldr	r3, [pc, #52]	; (800b7b8 <inv_unregister_data_cb+0x94>)
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	68ba      	ldr	r2, [r7, #8]
 800b786:	429a      	cmp	r2, r3
 800b788:	dbe3      	blt.n	800b752 <inv_unregister_data_cb+0x2e>
                    inv_data_builder.process[nn];
            }
            inv_data_builder.num_cb--;
 800b78a:	4b0b      	ldr	r3, [pc, #44]	; (800b7b8 <inv_unregister_data_cb+0x94>)
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	3b01      	subs	r3, #1
 800b790:	4a09      	ldr	r2, [pc, #36]	; (800b7b8 <inv_unregister_data_cb+0x94>)
 800b792:	6013      	str	r3, [r2, #0]
            return INV_SUCCESS;
 800b794:	2300      	movs	r3, #0
 800b796:	e008      	b.n	800b7aa <inv_unregister_data_cb+0x86>
    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	3301      	adds	r3, #1
 800b79c:	60fb      	str	r3, [r7, #12]
 800b79e:	4b06      	ldr	r3, [pc, #24]	; (800b7b8 <inv_unregister_data_cb+0x94>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	68fa      	ldr	r2, [r7, #12]
 800b7a4:	429a      	cmp	r2, r3
 800b7a6:	dbc4      	blt.n	800b732 <inv_unregister_data_cb+0xe>
        }
    }

    return INV_SUCCESS;    // We did not find the callback
 800b7a8:	2300      	movs	r3, #0
}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	3714      	adds	r7, #20
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b4:	4770      	bx	lr
 800b7b6:	bf00      	nop
 800b7b8:	200005c8 	.word	0x200005c8

0800b7bc <inv_execute_on_data>:
* It will process the data it has received and update all the internal states
* and features that have been turned on.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_execute_on_data(void)
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b084      	sub	sp, #16
 800b7c0:	af00      	add	r7, sp, #0
        int type = PLAYBACK_DBG_TYPE_EXECUTE;
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
    }
#endif
    // Determine what new data we have
    mode = 0;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	607b      	str	r3, [r7, #4]
    if (sensors.gyro.status & INV_NEW_DATA)
 800b7c6:	4b35      	ldr	r3, [pc, #212]	; (800b89c <inv_execute_on_data+0xe0>)
 800b7c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d003      	beq.n	800b7da <inv_execute_on_data+0x1e>
        mode |= INV_GYRO_NEW;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f043 0302 	orr.w	r3, r3, #2
 800b7d8:	607b      	str	r3, [r7, #4]
    if (sensors.accel.status & INV_NEW_DATA)
 800b7da:	4b30      	ldr	r3, [pc, #192]	; (800b89c <inv_execute_on_data+0xe0>)
 800b7dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b7de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d003      	beq.n	800b7ee <inv_execute_on_data+0x32>
        mode |= INV_ACCEL_NEW;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	f043 0301 	orr.w	r3, r3, #1
 800b7ec:	607b      	str	r3, [r7, #4]
    if (sensors.compass.status & INV_NEW_DATA)
 800b7ee:	4b2b      	ldr	r3, [pc, #172]	; (800b89c <inv_execute_on_data+0xe0>)
 800b7f0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b7f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d003      	beq.n	800b804 <inv_execute_on_data+0x48>
        mode |= INV_MAG_NEW;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f043 0304 	orr.w	r3, r3, #4
 800b802:	607b      	str	r3, [r7, #4]
    if (sensors.temp.status & INV_NEW_DATA)
 800b804:	4b25      	ldr	r3, [pc, #148]	; (800b89c <inv_execute_on_data+0xe0>)
 800b806:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800b80a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d003      	beq.n	800b81a <inv_execute_on_data+0x5e>
        mode |= INV_TEMP_NEW;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	f043 0308 	orr.w	r3, r3, #8
 800b818:	607b      	str	r3, [r7, #4]
    if (sensors.quat.status & INV_NEW_DATA)
 800b81a:	4b20      	ldr	r3, [pc, #128]	; (800b89c <inv_execute_on_data+0xe0>)
 800b81c:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800b820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b824:	2b00      	cmp	r3, #0
 800b826:	d003      	beq.n	800b830 <inv_execute_on_data+0x74>
        mode |= INV_QUAT_NEW;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f043 0310 	orr.w	r3, r3, #16
 800b82e:	607b      	str	r3, [r7, #4]

    first_error = INV_SUCCESS;
 800b830:	2300      	movs	r3, #0
 800b832:	60fb      	str	r3, [r7, #12]

    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
 800b834:	2300      	movs	r3, #0
 800b836:	60bb      	str	r3, [r7, #8]
 800b838:	e023      	b.n	800b882 <inv_execute_on_data+0xc6>
        if (mode & inv_data_builder.process[kk].data_required) {
 800b83a:	4919      	ldr	r1, [pc, #100]	; (800b8a0 <inv_execute_on_data+0xe4>)
 800b83c:	68ba      	ldr	r2, [r7, #8]
 800b83e:	4613      	mov	r3, r2
 800b840:	005b      	lsls	r3, r3, #1
 800b842:	4413      	add	r3, r2
 800b844:	009b      	lsls	r3, r3, #2
 800b846:	440b      	add	r3, r1
 800b848:	330c      	adds	r3, #12
 800b84a:	681a      	ldr	r2, [r3, #0]
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	4013      	ands	r3, r2
 800b850:	2b00      	cmp	r3, #0
 800b852:	d013      	beq.n	800b87c <inv_execute_on_data+0xc0>
            result = inv_data_builder.process[kk].func(&sensors);
 800b854:	4912      	ldr	r1, [pc, #72]	; (800b8a0 <inv_execute_on_data+0xe4>)
 800b856:	68ba      	ldr	r2, [r7, #8]
 800b858:	4613      	mov	r3, r2
 800b85a:	005b      	lsls	r3, r3, #1
 800b85c:	4413      	add	r3, r2
 800b85e:	009b      	lsls	r3, r3, #2
 800b860:	440b      	add	r3, r1
 800b862:	3304      	adds	r3, #4
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	480d      	ldr	r0, [pc, #52]	; (800b89c <inv_execute_on_data+0xe0>)
 800b868:	4798      	blx	r3
 800b86a:	6038      	str	r0, [r7, #0]
            if (result && !first_error) {
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d004      	beq.n	800b87c <inv_execute_on_data+0xc0>
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d101      	bne.n	800b87c <inv_execute_on_data+0xc0>
                first_error = result;
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	60fb      	str	r3, [r7, #12]
    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	3301      	adds	r3, #1
 800b880:	60bb      	str	r3, [r7, #8]
 800b882:	4b07      	ldr	r3, [pc, #28]	; (800b8a0 <inv_execute_on_data+0xe4>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	68ba      	ldr	r2, [r7, #8]
 800b888:	429a      	cmp	r2, r3
 800b88a:	dbd6      	blt.n	800b83a <inv_execute_on_data+0x7e>
            }
        }
    }

    inv_set_contiguous();
 800b88c:	f000 f80a 	bl	800b8a4 <inv_set_contiguous>

    return first_error;
 800b890:	68fb      	ldr	r3, [r7, #12]
}
 800b892:	4618      	mov	r0, r3
 800b894:	3710      	adds	r7, #16
 800b896:	46bd      	mov	sp, r7
 800b898:	bd80      	pop	{r7, pc}
 800b89a:	bf00      	nop
 800b89c:	20000708 	.word	0x20000708
 800b8a0:	200005c8 	.word	0x200005c8

0800b8a4 <inv_set_contiguous>:

/** Cleans up status bits after running all the callbacks. It sets the contiguous flag.
*
*/
static void inv_set_contiguous(void)
{
 800b8a4:	b480      	push	{r7}
 800b8a6:	b083      	sub	sp, #12
 800b8a8:	af00      	add	r7, sp, #0
    inv_time_t current_time = 0;
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	607b      	str	r3, [r7, #4]
    if (sensors.gyro.status & INV_NEW_DATA) {
 800b8ae:	4b48      	ldr	r3, [pc, #288]	; (800b9d0 <inv_set_contiguous+0x12c>)
 800b8b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d008      	beq.n	800b8cc <inv_set_contiguous+0x28>
        sensors.gyro.status |= INV_CONTIGUOUS;
 800b8ba:	4b45      	ldr	r3, [pc, #276]	; (800b9d0 <inv_set_contiguous+0x12c>)
 800b8bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8be:	f043 0310 	orr.w	r3, r3, #16
 800b8c2:	4a43      	ldr	r2, [pc, #268]	; (800b9d0 <inv_set_contiguous+0x12c>)
 800b8c4:	6313      	str	r3, [r2, #48]	; 0x30
        current_time = sensors.gyro.timestamp;
 800b8c6:	4b42      	ldr	r3, [pc, #264]	; (800b9d0 <inv_set_contiguous+0x12c>)
 800b8c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8ca:	607b      	str	r3, [r7, #4]
    }
    if (sensors.accel.status & INV_NEW_DATA) {
 800b8cc:	4b40      	ldr	r3, [pc, #256]	; (800b9d0 <inv_set_contiguous+0x12c>)
 800b8ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d00c      	beq.n	800b8f2 <inv_set_contiguous+0x4e>
        sensors.accel.status |= INV_CONTIGUOUS;
 800b8d8:	4b3d      	ldr	r3, [pc, #244]	; (800b9d0 <inv_set_contiguous+0x12c>)
 800b8da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8dc:	f043 0310 	orr.w	r3, r3, #16
 800b8e0:	4a3b      	ldr	r2, [pc, #236]	; (800b9d0 <inv_set_contiguous+0x12c>)
 800b8e2:	6753      	str	r3, [r2, #116]	; 0x74
        current_time = MAX(current_time, sensors.accel.timestamp);
 800b8e4:	4b3a      	ldr	r3, [pc, #232]	; (800b9d0 <inv_set_contiguous+0x12c>)
 800b8e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b8e8:	687a      	ldr	r2, [r7, #4]
 800b8ea:	4293      	cmp	r3, r2
 800b8ec:	bf38      	it	cc
 800b8ee:	4613      	movcc	r3, r2
 800b8f0:	607b      	str	r3, [r7, #4]
    }
    if (sensors.compass.status & INV_NEW_DATA) {
 800b8f2:	4b37      	ldr	r3, [pc, #220]	; (800b9d0 <inv_set_contiguous+0x12c>)
 800b8f4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b8f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d00f      	beq.n	800b920 <inv_set_contiguous+0x7c>
        sensors.compass.status |= INV_CONTIGUOUS;
 800b900:	4b33      	ldr	r3, [pc, #204]	; (800b9d0 <inv_set_contiguous+0x12c>)
 800b902:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b906:	f043 0310 	orr.w	r3, r3, #16
 800b90a:	4a31      	ldr	r2, [pc, #196]	; (800b9d0 <inv_set_contiguous+0x12c>)
 800b90c:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
        current_time = MAX(current_time, sensors.compass.timestamp);
 800b910:	4b2f      	ldr	r3, [pc, #188]	; (800b9d0 <inv_set_contiguous+0x12c>)
 800b912:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800b916:	687a      	ldr	r2, [r7, #4]
 800b918:	4293      	cmp	r3, r2
 800b91a:	bf38      	it	cc
 800b91c:	4613      	movcc	r3, r2
 800b91e:	607b      	str	r3, [r7, #4]
    }
    if (sensors.temp.status & INV_NEW_DATA) {
 800b920:	4b2b      	ldr	r3, [pc, #172]	; (800b9d0 <inv_set_contiguous+0x12c>)
 800b922:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800b926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d00f      	beq.n	800b94e <inv_set_contiguous+0xaa>
        sensors.temp.status |= INV_CONTIGUOUS;
 800b92e:	4b28      	ldr	r3, [pc, #160]	; (800b9d0 <inv_set_contiguous+0x12c>)
 800b930:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800b934:	f043 0310 	orr.w	r3, r3, #16
 800b938:	4a25      	ldr	r2, [pc, #148]	; (800b9d0 <inv_set_contiguous+0x12c>)
 800b93a:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
        current_time = MAX(current_time, sensors.temp.timestamp);
 800b93e:	4b24      	ldr	r3, [pc, #144]	; (800b9d0 <inv_set_contiguous+0x12c>)
 800b940:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800b944:	687a      	ldr	r2, [r7, #4]
 800b946:	4293      	cmp	r3, r2
 800b948:	bf38      	it	cc
 800b94a:	4613      	movcc	r3, r2
 800b94c:	607b      	str	r3, [r7, #4]
    }
    if (sensors.quat.status & INV_NEW_DATA) {
 800b94e:	4b20      	ldr	r3, [pc, #128]	; (800b9d0 <inv_set_contiguous+0x12c>)
 800b950:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800b954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d00f      	beq.n	800b97c <inv_set_contiguous+0xd8>
        sensors.quat.status |= INV_CONTIGUOUS;
 800b95c:	4b1c      	ldr	r3, [pc, #112]	; (800b9d0 <inv_set_contiguous+0x12c>)
 800b95e:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800b962:	f043 0310 	orr.w	r3, r3, #16
 800b966:	4a1a      	ldr	r2, [pc, #104]	; (800b9d0 <inv_set_contiguous+0x12c>)
 800b968:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
        current_time = MAX(current_time, sensors.quat.timestamp);
 800b96c:	4b18      	ldr	r3, [pc, #96]	; (800b9d0 <inv_set_contiguous+0x12c>)
 800b96e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800b972:	687a      	ldr	r2, [r7, #4]
 800b974:	4293      	cmp	r3, r2
 800b976:	bf38      	it	cc
 800b978:	4613      	movcc	r3, r2
 800b97a:	607b      	str	r3, [r7, #4]
    if (inv_delta_time_ms(current_time, sensors.temp.timestamp) >= 2000)
        inv_temperature_was_turned_off();
#endif

    /* clear bits */
    sensors.gyro.status &= ~INV_NEW_DATA;
 800b97c:	4b14      	ldr	r3, [pc, #80]	; (800b9d0 <inv_set_contiguous+0x12c>)
 800b97e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b980:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b984:	4a12      	ldr	r2, [pc, #72]	; (800b9d0 <inv_set_contiguous+0x12c>)
 800b986:	6313      	str	r3, [r2, #48]	; 0x30
    sensors.accel.status &= ~INV_NEW_DATA;
 800b988:	4b11      	ldr	r3, [pc, #68]	; (800b9d0 <inv_set_contiguous+0x12c>)
 800b98a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b98c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b990:	4a0f      	ldr	r2, [pc, #60]	; (800b9d0 <inv_set_contiguous+0x12c>)
 800b992:	6753      	str	r3, [r2, #116]	; 0x74
    sensors.compass.status &= ~INV_NEW_DATA;
 800b994:	4b0e      	ldr	r3, [pc, #56]	; (800b9d0 <inv_set_contiguous+0x12c>)
 800b996:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b99a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b99e:	4a0c      	ldr	r2, [pc, #48]	; (800b9d0 <inv_set_contiguous+0x12c>)
 800b9a0:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
    sensors.temp.status &= ~INV_NEW_DATA;
 800b9a4:	4b0a      	ldr	r3, [pc, #40]	; (800b9d0 <inv_set_contiguous+0x12c>)
 800b9a6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800b9aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b9ae:	4a08      	ldr	r2, [pc, #32]	; (800b9d0 <inv_set_contiguous+0x12c>)
 800b9b0:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    sensors.quat.status &= ~INV_NEW_DATA;
 800b9b4:	4b06      	ldr	r3, [pc, #24]	; (800b9d0 <inv_set_contiguous+0x12c>)
 800b9b6:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800b9ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b9be:	4a04      	ldr	r2, [pc, #16]	; (800b9d0 <inv_set_contiguous+0x12c>)
 800b9c0:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
}
 800b9c4:	bf00      	nop
 800b9c6:	370c      	adds	r7, #12
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ce:	4770      	bx	lr
 800b9d0:	20000708 	.word	0x20000708

0800b9d4 <inv_get_accel_set>:
 * @param[out] data Accel Data where 1g = 2^16
 * @param[out] accuracy Accuracy 0 being not accurate, and 3 being most accurate.
 * @param[out] timestamp The timestamp of the data sample.
*/
void inv_get_accel_set(long *data, int8_t *accuracy, inv_time_t *timestamp)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b084      	sub	sp, #16
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	60f8      	str	r0, [r7, #12]
 800b9dc:	60b9      	str	r1, [r7, #8]
 800b9de:	607a      	str	r2, [r7, #4]
    if (data != NULL) {
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d004      	beq.n	800b9f0 <inv_get_accel_set+0x1c>
        memcpy(data, sensors.accel.calibrated, sizeof(sensors.accel.calibrated));
 800b9e6:	220c      	movs	r2, #12
 800b9e8:	490b      	ldr	r1, [pc, #44]	; (800ba18 <inv_get_accel_set+0x44>)
 800b9ea:	68f8      	ldr	r0, [r7, #12]
 800b9ec:	f001 fb78 	bl	800d0e0 <memcpy>
    }
    if (timestamp != NULL) {
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d003      	beq.n	800b9fe <inv_get_accel_set+0x2a>
        *timestamp = sensors.accel.timestamp;
 800b9f6:	4b09      	ldr	r3, [pc, #36]	; (800ba1c <inv_get_accel_set+0x48>)
 800b9f8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	601a      	str	r2, [r3, #0]
    }
    if (accuracy != NULL) {
 800b9fe:	68bb      	ldr	r3, [r7, #8]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d004      	beq.n	800ba0e <inv_get_accel_set+0x3a>
        *accuracy = sensors.accel.accuracy;
 800ba04:	4b05      	ldr	r3, [pc, #20]	; (800ba1c <inv_get_accel_set+0x48>)
 800ba06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba08:	b25a      	sxtb	r2, r3
 800ba0a:	68bb      	ldr	r3, [r7, #8]
 800ba0c:	701a      	strb	r2, [r3, #0]
    }
}
 800ba0e:	bf00      	nop
 800ba10:	3710      	adds	r7, #16
 800ba12:	46bd      	mov	sp, r7
 800ba14:	bd80      	pop	{r7, pc}
 800ba16:	bf00      	nop
 800ba18:	20000764 	.word	0x20000764
 800ba1c:	20000708 	.word	0x20000708

0800ba20 <inv_get_gyro>:

/** Get's latest gyro data.
* @param[out] gyro Gyro Data, Length 3. 1 dps = 2^16.
*/
void inv_get_gyro(long *gyro)
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b082      	sub	sp, #8
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
    memcpy(gyro, sensors.gyro.calibrated, sizeof(sensors.gyro.calibrated));
 800ba28:	220c      	movs	r2, #12
 800ba2a:	4904      	ldr	r1, [pc, #16]	; (800ba3c <inv_get_gyro+0x1c>)
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f001 fb57 	bl	800d0e0 <memcpy>
}
 800ba32:	bf00      	nop
 800ba34:	3708      	adds	r7, #8
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bd80      	pop	{r7, pc}
 800ba3a:	bf00      	nop
 800ba3c:	20000720 	.word	0x20000720

0800ba40 <inv_get_gyro_accuracy>:

/** Returns accuracy of gyro.
 * @return Accuracy of gyro with 0 being not accurate, and 3 being most accurate.
*/
int inv_get_gyro_accuracy(void)
{
 800ba40:	b480      	push	{r7}
 800ba42:	af00      	add	r7, sp, #0
    return sensors.gyro.accuracy;
 800ba44:	4b03      	ldr	r3, [pc, #12]	; (800ba54 <inv_get_gyro_accuracy+0x14>)
 800ba46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 800ba48:	4618      	mov	r0, r3
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba50:	4770      	bx	lr
 800ba52:	bf00      	nop
 800ba54:	20000708 	.word	0x20000708

0800ba58 <inv_get_mag_accuracy>:

/** Returns accuracy of compass.
 * @return Accuracy of compass with 0 being not accurate, and 3 being most accurate.
*/
int inv_get_mag_accuracy(void)
{
 800ba58:	b480      	push	{r7}
 800ba5a:	af00      	add	r7, sp, #0
    if (inv_data_builder.compass_disturbance)
 800ba5c:	4b07      	ldr	r3, [pc, #28]	; (800ba7c <inv_get_mag_accuracy+0x24>)
 800ba5e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d001      	beq.n	800ba6a <inv_get_mag_accuracy+0x12>
        return 0;
 800ba66:	2300      	movs	r3, #0
 800ba68:	e002      	b.n	800ba70 <inv_get_mag_accuracy+0x18>
    return sensors.compass.accuracy;
 800ba6a:	4b05      	ldr	r3, [pc, #20]	; (800ba80 <inv_get_mag_accuracy+0x28>)
 800ba6c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	46bd      	mov	sp, r7
 800ba74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba78:	4770      	bx	lr
 800ba7a:	bf00      	nop
 800ba7c:	200005c8 	.word	0x200005c8
 800ba80:	20000708 	.word	0x20000708

0800ba84 <inv_get_accel_accuracy>:

/** Returns accuracy of accel.
 * @return Accuracy of accel with 0 being not accurate, and 3 being most accurate.
*/
int inv_get_accel_accuracy(void)
{
 800ba84:	b480      	push	{r7}
 800ba86:	af00      	add	r7, sp, #0
    return sensors.accel.accuracy;
 800ba88:	4b03      	ldr	r3, [pc, #12]	; (800ba98 <inv_get_accel_accuracy+0x14>)
 800ba8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
}
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba94:	4770      	bx	lr
 800ba96:	bf00      	nop
 800ba98:	20000708 	.word	0x20000708

0800ba9c <inv_reset_compass_soft_iron_matrix>:
}

/** This subroutine resets the the soft iron transformation to unity matrix and
 * disable the soft iron transformation process by default.
*/
void inv_reset_compass_soft_iron_matrix(void)  {
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b082      	sub	sp, #8
 800baa0:	af00      	add	r7, sp, #0
    int i;
    for (i=0; i<9; i++) {
 800baa2:	2300      	movs	r3, #0
 800baa4:	607b      	str	r3, [r7, #4]
 800baa6:	e00b      	b.n	800bac0 <inv_reset_compass_soft_iron_matrix+0x24>
        sensors.soft_iron.matrix_f[i] = 0.0f;
 800baa8:	4a1a      	ldr	r2, [pc, #104]	; (800bb14 <inv_reset_compass_soft_iron_matrix+0x78>)
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	335a      	adds	r3, #90	; 0x5a
 800baae:	009b      	lsls	r3, r3, #2
 800bab0:	4413      	add	r3, r2
 800bab2:	3304      	adds	r3, #4
 800bab4:	f04f 0200 	mov.w	r2, #0
 800bab8:	601a      	str	r2, [r3, #0]
    for (i=0; i<9; i++) {
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	3301      	adds	r3, #1
 800babe:	607b      	str	r3, [r7, #4]
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2b08      	cmp	r3, #8
 800bac4:	ddf0      	ble.n	800baa8 <inv_reset_compass_soft_iron_matrix+0xc>
    }

    memset(&sensors.soft_iron.matrix_d,0,sizeof(sensors.soft_iron.matrix_d));
 800bac6:	2224      	movs	r2, #36	; 0x24
 800bac8:	2100      	movs	r1, #0
 800baca:	4813      	ldr	r0, [pc, #76]	; (800bb18 <inv_reset_compass_soft_iron_matrix+0x7c>)
 800bacc:	f001 fb30 	bl	800d130 <memset>

    for (i=0; i<3; i++)  {
 800bad0:	2300      	movs	r3, #0
 800bad2:	607b      	str	r3, [r7, #4]
 800bad4:	e014      	b.n	800bb00 <inv_reset_compass_soft_iron_matrix+0x64>
        // set the floating point matrix
        sensors.soft_iron.matrix_f[i*4] = 1.0;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	009b      	lsls	r3, r3, #2
 800bada:	4a0e      	ldr	r2, [pc, #56]	; (800bb14 <inv_reset_compass_soft_iron_matrix+0x78>)
 800badc:	335a      	adds	r3, #90	; 0x5a
 800bade:	009b      	lsls	r3, r3, #2
 800bae0:	4413      	add	r3, r2
 800bae2:	3304      	adds	r3, #4
 800bae4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800bae8:	601a      	str	r2, [r3, #0]
        // set the fixed point matrix
        sensors.soft_iron.matrix_d[i*4] = ROT_MATRIX_SCALE_LONG;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	009b      	lsls	r3, r3, #2
 800baee:	4a09      	ldr	r2, [pc, #36]	; (800bb14 <inv_reset_compass_soft_iron_matrix+0x78>)
 800baf0:	3352      	adds	r3, #82	; 0x52
 800baf2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800baf6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (i=0; i<3; i++)  {
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	3301      	adds	r3, #1
 800bafe:	607b      	str	r3, [r7, #4]
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2b02      	cmp	r3, #2
 800bb04:	dde7      	ble.n	800bad6 <inv_reset_compass_soft_iron_matrix+0x3a>
    }

    inv_disable_compass_soft_iron_matrix();
 800bb06:	f000 f809 	bl	800bb1c <inv_disable_compass_soft_iron_matrix>
}
 800bb0a:	bf00      	nop
 800bb0c:	3708      	adds	r7, #8
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bd80      	pop	{r7, pc}
 800bb12:	bf00      	nop
 800bb14:	20000708 	.word	0x20000708
 800bb18:	20000850 	.word	0x20000850

0800bb1c <inv_disable_compass_soft_iron_matrix>:
    sensors.soft_iron.enable = 1;
}

/** This subroutine disables the the soft iron transformation process.
*/
void inv_disable_compass_soft_iron_matrix(void)   {
 800bb1c:	b480      	push	{r7}
 800bb1e:	af00      	add	r7, sp, #0
    sensors.soft_iron.enable = 0;
 800bb20:	4b04      	ldr	r3, [pc, #16]	; (800bb34 <inv_disable_compass_soft_iron_matrix+0x18>)
 800bb22:	2200      	movs	r2, #0
 800bb24:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
}
 800bb28:	bf00      	nop
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb30:	4770      	bx	lr
 800bb32:	bf00      	nop
 800bb34:	20000708 	.word	0x20000708

0800bb38 <inv_set_message>:
*                  a motion or no motion message.
* @param[in] level Level of the messages. It starts at 0, and may increase
*            in the future to allow more messages if the bit storage runs out.
*/
void inv_set_message(long set, long clear, int level)
{
 800bb38:	b480      	push	{r7}
 800bb3a:	b085      	sub	sp, #20
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	60f8      	str	r0, [r7, #12]
 800bb40:	60b9      	str	r1, [r7, #8]
 800bb42:	607a      	str	r2, [r7, #4]
    if (level == 0) {
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d10c      	bne.n	800bb64 <inv_set_message+0x2c>
        mh.message &= ~clear;
 800bb4a:	4b09      	ldr	r3, [pc, #36]	; (800bb70 <inv_set_message+0x38>)
 800bb4c:	681a      	ldr	r2, [r3, #0]
 800bb4e:	68bb      	ldr	r3, [r7, #8]
 800bb50:	43db      	mvns	r3, r3
 800bb52:	4013      	ands	r3, r2
 800bb54:	4a06      	ldr	r2, [pc, #24]	; (800bb70 <inv_set_message+0x38>)
 800bb56:	6013      	str	r3, [r2, #0]
        mh.message |= set;
 800bb58:	4b05      	ldr	r3, [pc, #20]	; (800bb70 <inv_set_message+0x38>)
 800bb5a:	681a      	ldr	r2, [r3, #0]
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	4313      	orrs	r3, r2
 800bb60:	4a03      	ldr	r2, [pc, #12]	; (800bb70 <inv_set_message+0x38>)
 800bb62:	6013      	str	r3, [r2, #0]
    }
}
 800bb64:	bf00      	nop
 800bb66:	3714      	adds	r7, #20
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6e:	4770      	bx	lr
 800bb70:	200008a0 	.word	0x200008a0

0800bb74 <inv_q30_to_float>:
        float input;
        float output;
    }   inv_biquad_filter_t;

    static inline float inv_q30_to_float(long q30)
    {
 800bb74:	b480      	push	{r7}
 800bb76:	b083      	sub	sp, #12
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
        return (float) q30 / ((float)(1L << 30));
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	ee07 3a90 	vmov	s15, r3
 800bb82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bb86:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800bba0 <inv_q30_to_float+0x2c>
 800bb8a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800bb8e:	eef0 7a66 	vmov.f32	s15, s13
    }
 800bb92:	eeb0 0a67 	vmov.f32	s0, s15
 800bb96:	370c      	adds	r7, #12
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9e:	4770      	bx	lr
 800bba0:	4e800000 	.word	0x4e800000

0800bba4 <inv_compass_angle>:
 * @param[in] grav Gravity Vector (Body Frame), length 3
 * @param[in] quat Quaternion, Length 4
 * @return Angle Cross Product makes after quaternion rotation.
 */
float inv_compass_angle(const long *compass, const long *grav, const long *quat)
{
 800bba4:	b590      	push	{r4, r7, lr}
 800bba6:	ed2d 8b02 	vpush	{d8}
 800bbaa:	b097      	sub	sp, #92	; 0x5c
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	60f8      	str	r0, [r7, #12]
 800bbb0:	60b9      	str	r1, [r7, #8]
 800bbb2:	607a      	str	r2, [r7, #4]
    long cgcross[4], q1[4], q2[4], qi[4];
    float angW;

    // Compass cross Gravity
    cgcross[0] = 0L;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	647b      	str	r3, [r7, #68]	; 0x44
    cgcross[1] = inv_q30_mult(compass[1], grav[2]) - inv_q30_mult(compass[2], grav[1]);
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	3304      	adds	r3, #4
 800bbbc:	681a      	ldr	r2, [r3, #0]
 800bbbe:	68bb      	ldr	r3, [r7, #8]
 800bbc0:	3308      	adds	r3, #8
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	4619      	mov	r1, r3
 800bbc6:	4610      	mov	r0, r2
 800bbc8:	f000 f8cc 	bl	800bd64 <inv_q30_mult>
 800bbcc:	4604      	mov	r4, r0
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	3308      	adds	r3, #8
 800bbd2:	681a      	ldr	r2, [r3, #0]
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	3304      	adds	r3, #4
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	4619      	mov	r1, r3
 800bbdc:	4610      	mov	r0, r2
 800bbde:	f000 f8c1 	bl	800bd64 <inv_q30_mult>
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	1ae3      	subs	r3, r4, r3
 800bbe6:	64bb      	str	r3, [r7, #72]	; 0x48
    cgcross[2] = inv_q30_mult(compass[2], grav[0]) - inv_q30_mult(compass[0], grav[2]);
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	3308      	adds	r3, #8
 800bbec:	681a      	ldr	r2, [r3, #0]
 800bbee:	68bb      	ldr	r3, [r7, #8]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	4619      	mov	r1, r3
 800bbf4:	4610      	mov	r0, r2
 800bbf6:	f000 f8b5 	bl	800bd64 <inv_q30_mult>
 800bbfa:	4604      	mov	r4, r0
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	681a      	ldr	r2, [r3, #0]
 800bc00:	68bb      	ldr	r3, [r7, #8]
 800bc02:	3308      	adds	r3, #8
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	4619      	mov	r1, r3
 800bc08:	4610      	mov	r0, r2
 800bc0a:	f000 f8ab 	bl	800bd64 <inv_q30_mult>
 800bc0e:	4603      	mov	r3, r0
 800bc10:	1ae3      	subs	r3, r4, r3
 800bc12:	64fb      	str	r3, [r7, #76]	; 0x4c
    cgcross[3] = inv_q30_mult(compass[0], grav[1]) - inv_q30_mult(compass[1], grav[0]);
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	681a      	ldr	r2, [r3, #0]
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	3304      	adds	r3, #4
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	4619      	mov	r1, r3
 800bc20:	4610      	mov	r0, r2
 800bc22:	f000 f89f 	bl	800bd64 <inv_q30_mult>
 800bc26:	4604      	mov	r4, r0
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	3304      	adds	r3, #4
 800bc2c:	681a      	ldr	r2, [r3, #0]
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	4619      	mov	r1, r3
 800bc34:	4610      	mov	r0, r2
 800bc36:	f000 f895 	bl	800bd64 <inv_q30_mult>
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	1ae3      	subs	r3, r4, r3
 800bc3e:	653b      	str	r3, [r7, #80]	; 0x50

    // Now convert cross product into world frame
    inv_q_mult(quat, cgcross, q1);
 800bc40:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800bc44:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800bc48:	4619      	mov	r1, r3
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f000 f8b6 	bl	800bdbc <inv_q_mult>
    inv_q_invert(quat, qi);
 800bc50:	f107 0314 	add.w	r3, r7, #20
 800bc54:	4619      	mov	r1, r3
 800bc56:	6878      	ldr	r0, [r7, #4]
 800bc58:	f000 f9aa 	bl	800bfb0 <inv_q_invert>
    inv_q_mult(q1, qi, q2);
 800bc5c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800bc60:	f107 0114 	add.w	r1, r7, #20
 800bc64:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800bc68:	4618      	mov	r0, r3
 800bc6a:	f000 f8a7 	bl	800bdbc <inv_q_mult>

    // Protect against atan2 of 0,0
    if ((q2[2] == 0L) && (q2[1] == 0L))
 800bc6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d105      	bne.n	800bc80 <inv_compass_angle+0xdc>
 800bc74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d102      	bne.n	800bc80 <inv_compass_angle+0xdc>
        return 0.f;
 800bc7a:	f04f 0300 	mov.w	r3, #0
 800bc7e:	e018      	b.n	800bcb2 <inv_compass_angle+0x10e>

    // This is the unfiltered heading correction
    angW = -atan2f(inv_q30_to_float(q2[2]), inv_q30_to_float(q2[1]));
 800bc80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc82:	4618      	mov	r0, r3
 800bc84:	f7ff ff76 	bl	800bb74 <inv_q30_to_float>
 800bc88:	eeb0 8a40 	vmov.f32	s16, s0
 800bc8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f7ff ff70 	bl	800bb74 <inv_q30_to_float>
 800bc94:	eef0 7a40 	vmov.f32	s15, s0
 800bc98:	eef0 0a67 	vmov.f32	s1, s15
 800bc9c:	eeb0 0a48 	vmov.f32	s0, s16
 800bca0:	f004 fc06 	bl	80104b0 <atan2f>
 800bca4:	eef0 7a40 	vmov.f32	s15, s0
 800bca8:	eef1 7a67 	vneg.f32	s15, s15
 800bcac:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    return angW;
 800bcb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bcb2:	ee07 3a90 	vmov	s15, r3
}
 800bcb6:	eeb0 0a67 	vmov.f32	s0, s15
 800bcba:	375c      	adds	r7, #92	; 0x5c
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	ecbd 8b02 	vpop	{d8}
 800bcc2:	bd90      	pop	{r4, r7, pc}

0800bcc4 <inv_get_gyro_sum_of_sqr>:
 *          (1 degree per second)^2 = 2^6 = 2^GYRO_MAG_SQR_SHIFT.
 * @param[in] gyro Gyro data scaled with 1 dps = 2^16
 *  @return the computed magnitude squared output of the gyroscope.
 */
unsigned long inv_get_gyro_sum_of_sqr(const long *gyro)
{
 800bcc4:	b480      	push	{r7}
 800bcc6:	b087      	sub	sp, #28
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
    unsigned long gmag = 0;
 800bccc:	2300      	movs	r3, #0
 800bcce:	617b      	str	r3, [r7, #20]
    long temp;
    int kk;

    for (kk = 0; kk < 3; ++kk) {
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	613b      	str	r3, [r7, #16]
 800bcd4:	e010      	b.n	800bcf8 <inv_get_gyro_sum_of_sqr+0x34>
        temp = gyro[kk] >> (16 - (GYRO_MAG_SQR_SHIFT / 2));
 800bcd6:	693b      	ldr	r3, [r7, #16]
 800bcd8:	009b      	lsls	r3, r3, #2
 800bcda:	687a      	ldr	r2, [r7, #4]
 800bcdc:	4413      	add	r3, r2
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	135b      	asrs	r3, r3, #13
 800bce2:	60fb      	str	r3, [r7, #12]
        gmag += temp * temp;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	fb03 f303 	mul.w	r3, r3, r3
 800bcea:	461a      	mov	r2, r3
 800bcec:	697b      	ldr	r3, [r7, #20]
 800bcee:	4413      	add	r3, r2
 800bcf0:	617b      	str	r3, [r7, #20]
    for (kk = 0; kk < 3; ++kk) {
 800bcf2:	693b      	ldr	r3, [r7, #16]
 800bcf4:	3301      	adds	r3, #1
 800bcf6:	613b      	str	r3, [r7, #16]
 800bcf8:	693b      	ldr	r3, [r7, #16]
 800bcfa:	2b02      	cmp	r3, #2
 800bcfc:	ddeb      	ble.n	800bcd6 <inv_get_gyro_sum_of_sqr+0x12>
    }

    return gmag;
 800bcfe:	697b      	ldr	r3, [r7, #20]
}
 800bd00:	4618      	mov	r0, r3
 800bd02:	371c      	adds	r7, #28
 800bd04:	46bd      	mov	sp, r7
 800bd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0a:	4770      	bx	lr

0800bd0c <inv_q29_mult>:
 * @param[in] a
 * @param[in] b
 * @return ((long long)a*b)>>29
*/
long inv_q29_mult(long a, long b)
{
 800bd0c:	b4b0      	push	{r4, r5, r7}
 800bd0e:	b087      	sub	sp, #28
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
 800bd14:	6039      	str	r1, [r7, #0]
    result = (long)((float)a * b / (1L << 29));
    return result;
#else
    long long temp;
    long result;
    temp = (long long)a * b;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	4618      	mov	r0, r3
 800bd1a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800bd1e:	683b      	ldr	r3, [r7, #0]
 800bd20:	461a      	mov	r2, r3
 800bd22:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800bd26:	fb02 f501 	mul.w	r5, r2, r1
 800bd2a:	fb00 f403 	mul.w	r4, r0, r3
 800bd2e:	442c      	add	r4, r5
 800bd30:	fba0 2302 	umull	r2, r3, r0, r2
 800bd34:	18e1      	adds	r1, r4, r3
 800bd36:	460b      	mov	r3, r1
 800bd38:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800bd3c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    result = (long)(temp >> 29);
 800bd40:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800bd44:	f04f 0200 	mov.w	r2, #0
 800bd48:	f04f 0300 	mov.w	r3, #0
 800bd4c:	0f42      	lsrs	r2, r0, #29
 800bd4e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800bd52:	174b      	asrs	r3, r1, #29
 800bd54:	4613      	mov	r3, r2
 800bd56:	60fb      	str	r3, [r7, #12]
    return result;
 800bd58:	68fb      	ldr	r3, [r7, #12]
#endif
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	371c      	adds	r7, #28
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bcb0      	pop	{r4, r5, r7}
 800bd62:	4770      	bx	lr

0800bd64 <inv_q30_mult>:
 * @param[in] a
 * @param[in] b
 * @return ((long long)a*b)>>30
*/
long inv_q30_mult(long a, long b)
{
 800bd64:	b4b0      	push	{r4, r5, r7}
 800bd66:	b087      	sub	sp, #28
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
 800bd6c:	6039      	str	r1, [r7, #0]
    result = (long)((float)a * b / (1L << 30));
    return result;
#else
    long long temp;
    long result;
    temp = (long long)a * b;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	4618      	mov	r0, r3
 800bd72:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	461a      	mov	r2, r3
 800bd7a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800bd7e:	fb02 f501 	mul.w	r5, r2, r1
 800bd82:	fb00 f403 	mul.w	r4, r0, r3
 800bd86:	442c      	add	r4, r5
 800bd88:	fba0 2302 	umull	r2, r3, r0, r2
 800bd8c:	18e1      	adds	r1, r4, r3
 800bd8e:	460b      	mov	r3, r1
 800bd90:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800bd94:	e9c7 2304 	strd	r2, r3, [r7, #16]
    result = (long)(temp >> 30);
 800bd98:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800bd9c:	f04f 0200 	mov.w	r2, #0
 800bda0:	f04f 0300 	mov.w	r3, #0
 800bda4:	0f82      	lsrs	r2, r0, #30
 800bda6:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 800bdaa:	178b      	asrs	r3, r1, #30
 800bdac:	4613      	mov	r3, r2
 800bdae:	60fb      	str	r3, [r7, #12]
    return result;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
#endif
}
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	371c      	adds	r7, #28
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bcb0      	pop	{r4, r5, r7}
 800bdba:	4770      	bx	lr

0800bdbc <inv_q_mult>:
*            to 2^30
* @param[out] qProd Product after quaternion multiply. Length 4.
*             1.0 scaled to 2^30.
*/
void inv_q_mult(const long *q1, const long *q2, long *qProd)
{
 800bdbc:	b590      	push	{r4, r7, lr}
 800bdbe:	b085      	sub	sp, #20
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	60f8      	str	r0, [r7, #12]
 800bdc4:	60b9      	str	r1, [r7, #8]
 800bdc6:	607a      	str	r2, [r7, #4]
    INVENSENSE_FUNC_START;
    qProd[0] = inv_q30_mult(q1[0], q2[0]) - inv_q30_mult(q1[1], q2[1]) -
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	681a      	ldr	r2, [r3, #0]
 800bdcc:	68bb      	ldr	r3, [r7, #8]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	4619      	mov	r1, r3
 800bdd2:	4610      	mov	r0, r2
 800bdd4:	f7ff ffc6 	bl	800bd64 <inv_q30_mult>
 800bdd8:	4604      	mov	r4, r0
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	3304      	adds	r3, #4
 800bdde:	681a      	ldr	r2, [r3, #0]
 800bde0:	68bb      	ldr	r3, [r7, #8]
 800bde2:	3304      	adds	r3, #4
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	4619      	mov	r1, r3
 800bde8:	4610      	mov	r0, r2
 800bdea:	f7ff ffbb 	bl	800bd64 <inv_q30_mult>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	1ae4      	subs	r4, r4, r3
               inv_q30_mult(q1[2], q2[2]) - inv_q30_mult(q1[3], q2[3]);
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	3308      	adds	r3, #8
 800bdf6:	681a      	ldr	r2, [r3, #0]
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	3308      	adds	r3, #8
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	4619      	mov	r1, r3
 800be00:	4610      	mov	r0, r2
 800be02:	f7ff ffaf 	bl	800bd64 <inv_q30_mult>
 800be06:	4603      	mov	r3, r0
    qProd[0] = inv_q30_mult(q1[0], q2[0]) - inv_q30_mult(q1[1], q2[1]) -
 800be08:	1ae4      	subs	r4, r4, r3
               inv_q30_mult(q1[2], q2[2]) - inv_q30_mult(q1[3], q2[3]);
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	330c      	adds	r3, #12
 800be0e:	681a      	ldr	r2, [r3, #0]
 800be10:	68bb      	ldr	r3, [r7, #8]
 800be12:	330c      	adds	r3, #12
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	4619      	mov	r1, r3
 800be18:	4610      	mov	r0, r2
 800be1a:	f7ff ffa3 	bl	800bd64 <inv_q30_mult>
 800be1e:	4603      	mov	r3, r0
 800be20:	1ae2      	subs	r2, r4, r3
    qProd[0] = inv_q30_mult(q1[0], q2[0]) - inv_q30_mult(q1[1], q2[1]) -
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	601a      	str	r2, [r3, #0]

    qProd[1] = inv_q30_mult(q1[0], q2[1]) + inv_q30_mult(q1[1], q2[0]) +
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	681a      	ldr	r2, [r3, #0]
 800be2a:	68bb      	ldr	r3, [r7, #8]
 800be2c:	3304      	adds	r3, #4
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	4619      	mov	r1, r3
 800be32:	4610      	mov	r0, r2
 800be34:	f7ff ff96 	bl	800bd64 <inv_q30_mult>
 800be38:	4604      	mov	r4, r0
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	3304      	adds	r3, #4
 800be3e:	681a      	ldr	r2, [r3, #0]
 800be40:	68bb      	ldr	r3, [r7, #8]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	4619      	mov	r1, r3
 800be46:	4610      	mov	r0, r2
 800be48:	f7ff ff8c 	bl	800bd64 <inv_q30_mult>
 800be4c:	4603      	mov	r3, r0
 800be4e:	441c      	add	r4, r3
               inv_q30_mult(q1[2], q2[3]) - inv_q30_mult(q1[3], q2[2]);
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	3308      	adds	r3, #8
 800be54:	681a      	ldr	r2, [r3, #0]
 800be56:	68bb      	ldr	r3, [r7, #8]
 800be58:	330c      	adds	r3, #12
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	4619      	mov	r1, r3
 800be5e:	4610      	mov	r0, r2
 800be60:	f7ff ff80 	bl	800bd64 <inv_q30_mult>
 800be64:	4603      	mov	r3, r0
    qProd[1] = inv_q30_mult(q1[0], q2[1]) + inv_q30_mult(q1[1], q2[0]) +
 800be66:	441c      	add	r4, r3
               inv_q30_mult(q1[2], q2[3]) - inv_q30_mult(q1[3], q2[2]);
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	330c      	adds	r3, #12
 800be6c:	681a      	ldr	r2, [r3, #0]
 800be6e:	68bb      	ldr	r3, [r7, #8]
 800be70:	3308      	adds	r3, #8
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	4619      	mov	r1, r3
 800be76:	4610      	mov	r0, r2
 800be78:	f7ff ff74 	bl	800bd64 <inv_q30_mult>
 800be7c:	4602      	mov	r2, r0
    qProd[1] = inv_q30_mult(q1[0], q2[1]) + inv_q30_mult(q1[1], q2[0]) +
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	3304      	adds	r3, #4
               inv_q30_mult(q1[2], q2[3]) - inv_q30_mult(q1[3], q2[2]);
 800be82:	1aa2      	subs	r2, r4, r2
    qProd[1] = inv_q30_mult(q1[0], q2[1]) + inv_q30_mult(q1[1], q2[0]) +
 800be84:	601a      	str	r2, [r3, #0]

    qProd[2] = inv_q30_mult(q1[0], q2[2]) - inv_q30_mult(q1[1], q2[3]) +
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	681a      	ldr	r2, [r3, #0]
 800be8a:	68bb      	ldr	r3, [r7, #8]
 800be8c:	3308      	adds	r3, #8
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	4619      	mov	r1, r3
 800be92:	4610      	mov	r0, r2
 800be94:	f7ff ff66 	bl	800bd64 <inv_q30_mult>
 800be98:	4604      	mov	r4, r0
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	3304      	adds	r3, #4
 800be9e:	681a      	ldr	r2, [r3, #0]
 800bea0:	68bb      	ldr	r3, [r7, #8]
 800bea2:	330c      	adds	r3, #12
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	4619      	mov	r1, r3
 800bea8:	4610      	mov	r0, r2
 800beaa:	f7ff ff5b 	bl	800bd64 <inv_q30_mult>
 800beae:	4603      	mov	r3, r0
 800beb0:	1ae4      	subs	r4, r4, r3
               inv_q30_mult(q1[2], q2[0]) + inv_q30_mult(q1[3], q2[1]);
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	3308      	adds	r3, #8
 800beb6:	681a      	ldr	r2, [r3, #0]
 800beb8:	68bb      	ldr	r3, [r7, #8]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	4619      	mov	r1, r3
 800bebe:	4610      	mov	r0, r2
 800bec0:	f7ff ff50 	bl	800bd64 <inv_q30_mult>
 800bec4:	4603      	mov	r3, r0
    qProd[2] = inv_q30_mult(q1[0], q2[2]) - inv_q30_mult(q1[1], q2[3]) +
 800bec6:	441c      	add	r4, r3
               inv_q30_mult(q1[2], q2[0]) + inv_q30_mult(q1[3], q2[1]);
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	330c      	adds	r3, #12
 800becc:	681a      	ldr	r2, [r3, #0]
 800bece:	68bb      	ldr	r3, [r7, #8]
 800bed0:	3304      	adds	r3, #4
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	4619      	mov	r1, r3
 800bed6:	4610      	mov	r0, r2
 800bed8:	f7ff ff44 	bl	800bd64 <inv_q30_mult>
 800bedc:	4602      	mov	r2, r0
    qProd[2] = inv_q30_mult(q1[0], q2[2]) - inv_q30_mult(q1[1], q2[3]) +
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	3308      	adds	r3, #8
               inv_q30_mult(q1[2], q2[0]) + inv_q30_mult(q1[3], q2[1]);
 800bee2:	4422      	add	r2, r4
    qProd[2] = inv_q30_mult(q1[0], q2[2]) - inv_q30_mult(q1[1], q2[3]) +
 800bee4:	601a      	str	r2, [r3, #0]

    qProd[3] = inv_q30_mult(q1[0], q2[3]) + inv_q30_mult(q1[1], q2[2]) -
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	681a      	ldr	r2, [r3, #0]
 800beea:	68bb      	ldr	r3, [r7, #8]
 800beec:	330c      	adds	r3, #12
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	4619      	mov	r1, r3
 800bef2:	4610      	mov	r0, r2
 800bef4:	f7ff ff36 	bl	800bd64 <inv_q30_mult>
 800bef8:	4604      	mov	r4, r0
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	3304      	adds	r3, #4
 800befe:	681a      	ldr	r2, [r3, #0]
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	3308      	adds	r3, #8
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	4619      	mov	r1, r3
 800bf08:	4610      	mov	r0, r2
 800bf0a:	f7ff ff2b 	bl	800bd64 <inv_q30_mult>
 800bf0e:	4603      	mov	r3, r0
 800bf10:	441c      	add	r4, r3
               inv_q30_mult(q1[2], q2[1]) + inv_q30_mult(q1[3], q2[0]);
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	3308      	adds	r3, #8
 800bf16:	681a      	ldr	r2, [r3, #0]
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	3304      	adds	r3, #4
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	4619      	mov	r1, r3
 800bf20:	4610      	mov	r0, r2
 800bf22:	f7ff ff1f 	bl	800bd64 <inv_q30_mult>
 800bf26:	4603      	mov	r3, r0
    qProd[3] = inv_q30_mult(q1[0], q2[3]) + inv_q30_mult(q1[1], q2[2]) -
 800bf28:	1ae4      	subs	r4, r4, r3
               inv_q30_mult(q1[2], q2[1]) + inv_q30_mult(q1[3], q2[0]);
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	330c      	adds	r3, #12
 800bf2e:	681a      	ldr	r2, [r3, #0]
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	4619      	mov	r1, r3
 800bf36:	4610      	mov	r0, r2
 800bf38:	f7ff ff14 	bl	800bd64 <inv_q30_mult>
 800bf3c:	4602      	mov	r2, r0
    qProd[3] = inv_q30_mult(q1[0], q2[3]) + inv_q30_mult(q1[1], q2[2]) -
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	330c      	adds	r3, #12
               inv_q30_mult(q1[2], q2[1]) + inv_q30_mult(q1[3], q2[0]);
 800bf42:	4422      	add	r2, r4
    qProd[3] = inv_q30_mult(q1[0], q2[3]) + inv_q30_mult(q1[1], q2[2]) -
 800bf44:	601a      	str	r2, [r3, #0]
}
 800bf46:	bf00      	nop
 800bf48:	3714      	adds	r7, #20
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd90      	pop	{r4, r7, pc}

0800bf4e <inv_q_add>:
*            to 2^30
* @param[out] qSum Sum after quaternion summation. Length 4.
*             1.0 scaled to 2^30.
*/
void inv_q_add(long *q1, long *q2, long *qSum)
{
 800bf4e:	b480      	push	{r7}
 800bf50:	b085      	sub	sp, #20
 800bf52:	af00      	add	r7, sp, #0
 800bf54:	60f8      	str	r0, [r7, #12]
 800bf56:	60b9      	str	r1, [r7, #8]
 800bf58:	607a      	str	r2, [r7, #4]
    INVENSENSE_FUNC_START;
    qSum[0] = q1[0] + q2[0];
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	681a      	ldr	r2, [r3, #0]
 800bf5e:	68bb      	ldr	r3, [r7, #8]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	441a      	add	r2, r3
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	601a      	str	r2, [r3, #0]
    qSum[1] = q1[1] + q2[1];
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	3304      	adds	r3, #4
 800bf6c:	6819      	ldr	r1, [r3, #0]
 800bf6e:	68bb      	ldr	r3, [r7, #8]
 800bf70:	3304      	adds	r3, #4
 800bf72:	681a      	ldr	r2, [r3, #0]
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	3304      	adds	r3, #4
 800bf78:	440a      	add	r2, r1
 800bf7a:	601a      	str	r2, [r3, #0]
    qSum[2] = q1[2] + q2[2];
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	3308      	adds	r3, #8
 800bf80:	6819      	ldr	r1, [r3, #0]
 800bf82:	68bb      	ldr	r3, [r7, #8]
 800bf84:	3308      	adds	r3, #8
 800bf86:	681a      	ldr	r2, [r3, #0]
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	3308      	adds	r3, #8
 800bf8c:	440a      	add	r2, r1
 800bf8e:	601a      	str	r2, [r3, #0]
    qSum[3] = q1[3] + q2[3];
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	330c      	adds	r3, #12
 800bf94:	6819      	ldr	r1, [r3, #0]
 800bf96:	68bb      	ldr	r3, [r7, #8]
 800bf98:	330c      	adds	r3, #12
 800bf9a:	681a      	ldr	r2, [r3, #0]
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	330c      	adds	r3, #12
 800bfa0:	440a      	add	r2, r1
 800bfa2:	601a      	str	r2, [r3, #0]
}
 800bfa4:	bf00      	nop
 800bfa6:	3714      	adds	r7, #20
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfae:	4770      	bx	lr

0800bfb0 <inv_q_invert>:
    INVENSENSE_FUNC_START;
    inv_vector_normalize(q, 4);
}

void inv_q_invert(const long *q, long *qInverted)
{
 800bfb0:	b480      	push	{r7}
 800bfb2:	b083      	sub	sp, #12
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
 800bfb8:	6039      	str	r1, [r7, #0]
    INVENSENSE_FUNC_START;
    qInverted[0] = q[0];
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681a      	ldr	r2, [r3, #0]
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	601a      	str	r2, [r3, #0]
    qInverted[1] = -q[1];
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	3304      	adds	r3, #4
 800bfc6:	681a      	ldr	r2, [r3, #0]
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	3304      	adds	r3, #4
 800bfcc:	4252      	negs	r2, r2
 800bfce:	601a      	str	r2, [r3, #0]
    qInverted[2] = -q[2];
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	3308      	adds	r3, #8
 800bfd4:	681a      	ldr	r2, [r3, #0]
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	3308      	adds	r3, #8
 800bfda:	4252      	negs	r2, r2
 800bfdc:	601a      	str	r2, [r3, #0]
    qInverted[3] = -q[3];
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	330c      	adds	r3, #12
 800bfe2:	681a      	ldr	r2, [r3, #0]
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	330c      	adds	r3, #12
 800bfe8:	4252      	negs	r2, r2
 800bfea:	601a      	str	r2, [r3, #0]
}
 800bfec:	bf00      	nop
 800bfee:	370c      	adds	r7, #12
 800bff0:	46bd      	mov	sp, r7
 800bff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff6:	4770      	bx	lr

0800bff8 <inv_q_rotate>:
}

/** Rotates a 3-element vector by Rotation defined by Q
*/
void inv_q_rotate(const long *q, const long *in, long *out)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b094      	sub	sp, #80	; 0x50
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	60f8      	str	r0, [r7, #12]
 800c000:	60b9      	str	r1, [r7, #8]
 800c002:	607a      	str	r2, [r7, #4]
    long q_temp1[4], q_temp2[4];
    long in4[4], out4[4];

    // Fixme optimize
    in4[0] = 0;
 800c004:	2300      	movs	r3, #0
 800c006:	623b      	str	r3, [r7, #32]
    memcpy(&in4[1], in, 3 * sizeof(long));
 800c008:	f107 0320 	add.w	r3, r7, #32
 800c00c:	3304      	adds	r3, #4
 800c00e:	220c      	movs	r2, #12
 800c010:	68b9      	ldr	r1, [r7, #8]
 800c012:	4618      	mov	r0, r3
 800c014:	f001 f864 	bl	800d0e0 <memcpy>
    inv_q_mult(q, in4, q_temp1);
 800c018:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800c01c:	f107 0320 	add.w	r3, r7, #32
 800c020:	4619      	mov	r1, r3
 800c022:	68f8      	ldr	r0, [r7, #12]
 800c024:	f7ff feca 	bl	800bdbc <inv_q_mult>
    inv_q_invert(q, q_temp2);
 800c028:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c02c:	4619      	mov	r1, r3
 800c02e:	68f8      	ldr	r0, [r7, #12]
 800c030:	f7ff ffbe 	bl	800bfb0 <inv_q_invert>
    inv_q_mult(q_temp1, q_temp2, out4);
 800c034:	f107 0210 	add.w	r2, r7, #16
 800c038:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800c03c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c040:	4618      	mov	r0, r3
 800c042:	f7ff febb 	bl	800bdbc <inv_q_mult>
    memcpy(out, &out4[1], 3 * sizeof(long));
 800c046:	f107 0310 	add.w	r3, r7, #16
 800c04a:	3304      	adds	r3, #4
 800c04c:	220c      	movs	r2, #12
 800c04e:	4619      	mov	r1, r3
 800c050:	6878      	ldr	r0, [r7, #4]
 800c052:	f001 f845 	bl	800d0e0 <memcpy>
}
 800c056:	bf00      	nop
 800c058:	3750      	adds	r7, #80	; 0x50
 800c05a:	46bd      	mov	sp, r7
 800c05c:	bd80      	pop	{r7, pc}

0800c05e <inv_q_multf>:

void inv_q_multf(const float *q1, const float *q2, float *qProd)
{
 800c05e:	b480      	push	{r7}
 800c060:	b085      	sub	sp, #20
 800c062:	af00      	add	r7, sp, #0
 800c064:	60f8      	str	r0, [r7, #12]
 800c066:	60b9      	str	r1, [r7, #8]
 800c068:	607a      	str	r2, [r7, #4]
    INVENSENSE_FUNC_START;
    qProd[0] =
        (q1[0] * q2[0] - q1[1] * q2[1] - q1[2] * q2[2] - q1[3] * q2[3]);
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	ed93 7a00 	vldr	s14, [r3]
 800c070:	68bb      	ldr	r3, [r7, #8]
 800c072:	edd3 7a00 	vldr	s15, [r3]
 800c076:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	3304      	adds	r3, #4
 800c07e:	edd3 6a00 	vldr	s13, [r3]
 800c082:	68bb      	ldr	r3, [r7, #8]
 800c084:	3304      	adds	r3, #4
 800c086:	edd3 7a00 	vldr	s15, [r3]
 800c08a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c08e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	3308      	adds	r3, #8
 800c096:	edd3 6a00 	vldr	s13, [r3]
 800c09a:	68bb      	ldr	r3, [r7, #8]
 800c09c:	3308      	adds	r3, #8
 800c09e:	edd3 7a00 	vldr	s15, [r3]
 800c0a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c0a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	330c      	adds	r3, #12
 800c0ae:	edd3 6a00 	vldr	s13, [r3]
 800c0b2:	68bb      	ldr	r3, [r7, #8]
 800c0b4:	330c      	adds	r3, #12
 800c0b6:	edd3 7a00 	vldr	s15, [r3]
 800c0ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c0be:	ee77 7a67 	vsub.f32	s15, s14, s15
    qProd[0] =
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	edc3 7a00 	vstr	s15, [r3]
    qProd[1] =
        (q1[0] * q2[1] + q1[1] * q2[0] + q1[2] * q2[3] - q1[3] * q2[2]);
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	ed93 7a00 	vldr	s14, [r3]
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	3304      	adds	r3, #4
 800c0d2:	edd3 7a00 	vldr	s15, [r3]
 800c0d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	3304      	adds	r3, #4
 800c0de:	edd3 6a00 	vldr	s13, [r3]
 800c0e2:	68bb      	ldr	r3, [r7, #8]
 800c0e4:	edd3 7a00 	vldr	s15, [r3]
 800c0e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c0ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	3308      	adds	r3, #8
 800c0f4:	edd3 6a00 	vldr	s13, [r3]
 800c0f8:	68bb      	ldr	r3, [r7, #8]
 800c0fa:	330c      	adds	r3, #12
 800c0fc:	edd3 7a00 	vldr	s15, [r3]
 800c100:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c104:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	330c      	adds	r3, #12
 800c10c:	edd3 6a00 	vldr	s13, [r3]
 800c110:	68bb      	ldr	r3, [r7, #8]
 800c112:	3308      	adds	r3, #8
 800c114:	edd3 7a00 	vldr	s15, [r3]
 800c118:	ee66 7aa7 	vmul.f32	s15, s13, s15
    qProd[1] =
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	3304      	adds	r3, #4
        (q1[0] * q2[1] + q1[1] * q2[0] + q1[2] * q2[3] - q1[3] * q2[2]);
 800c120:	ee77 7a67 	vsub.f32	s15, s14, s15
    qProd[1] =
 800c124:	edc3 7a00 	vstr	s15, [r3]
    qProd[2] =
        (q1[0] * q2[2] - q1[1] * q2[3] + q1[2] * q2[0] + q1[3] * q2[1]);
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	ed93 7a00 	vldr	s14, [r3]
 800c12e:	68bb      	ldr	r3, [r7, #8]
 800c130:	3308      	adds	r3, #8
 800c132:	edd3 7a00 	vldr	s15, [r3]
 800c136:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	3304      	adds	r3, #4
 800c13e:	edd3 6a00 	vldr	s13, [r3]
 800c142:	68bb      	ldr	r3, [r7, #8]
 800c144:	330c      	adds	r3, #12
 800c146:	edd3 7a00 	vldr	s15, [r3]
 800c14a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c14e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	3308      	adds	r3, #8
 800c156:	edd3 6a00 	vldr	s13, [r3]
 800c15a:	68bb      	ldr	r3, [r7, #8]
 800c15c:	edd3 7a00 	vldr	s15, [r3]
 800c160:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c164:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	330c      	adds	r3, #12
 800c16c:	edd3 6a00 	vldr	s13, [r3]
 800c170:	68bb      	ldr	r3, [r7, #8]
 800c172:	3304      	adds	r3, #4
 800c174:	edd3 7a00 	vldr	s15, [r3]
 800c178:	ee66 7aa7 	vmul.f32	s15, s13, s15
    qProd[2] =
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	3308      	adds	r3, #8
        (q1[0] * q2[2] - q1[1] * q2[3] + q1[2] * q2[0] + q1[3] * q2[1]);
 800c180:	ee77 7a27 	vadd.f32	s15, s14, s15
    qProd[2] =
 800c184:	edc3 7a00 	vstr	s15, [r3]
    qProd[3] =
        (q1[0] * q2[3] + q1[1] * q2[2] - q1[2] * q2[1] + q1[3] * q2[0]);
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	ed93 7a00 	vldr	s14, [r3]
 800c18e:	68bb      	ldr	r3, [r7, #8]
 800c190:	330c      	adds	r3, #12
 800c192:	edd3 7a00 	vldr	s15, [r3]
 800c196:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	3304      	adds	r3, #4
 800c19e:	edd3 6a00 	vldr	s13, [r3]
 800c1a2:	68bb      	ldr	r3, [r7, #8]
 800c1a4:	3308      	adds	r3, #8
 800c1a6:	edd3 7a00 	vldr	s15, [r3]
 800c1aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c1ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	3308      	adds	r3, #8
 800c1b6:	edd3 6a00 	vldr	s13, [r3]
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	3304      	adds	r3, #4
 800c1be:	edd3 7a00 	vldr	s15, [r3]
 800c1c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c1c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	330c      	adds	r3, #12
 800c1ce:	edd3 6a00 	vldr	s13, [r3]
 800c1d2:	68bb      	ldr	r3, [r7, #8]
 800c1d4:	edd3 7a00 	vldr	s15, [r3]
 800c1d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
    qProd[3] =
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	330c      	adds	r3, #12
        (q1[0] * q2[3] + q1[1] * q2[2] - q1[2] * q2[1] + q1[3] * q2[0]);
 800c1e0:	ee77 7a27 	vadd.f32	s15, s14, s15
    qProd[3] =
 800c1e4:	edc3 7a00 	vstr	s15, [r3]
}
 800c1e8:	bf00      	nop
 800c1ea:	3714      	adds	r7, #20
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f2:	4770      	bx	lr

0800c1f4 <inv_q_addf>:

void inv_q_addf(const float *q1, const float *q2, float *qSum)
{
 800c1f4:	b480      	push	{r7}
 800c1f6:	b085      	sub	sp, #20
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	60f8      	str	r0, [r7, #12]
 800c1fc:	60b9      	str	r1, [r7, #8]
 800c1fe:	607a      	str	r2, [r7, #4]
    INVENSENSE_FUNC_START;
    qSum[0] = q1[0] + q2[0];
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	ed93 7a00 	vldr	s14, [r3]
 800c206:	68bb      	ldr	r3, [r7, #8]
 800c208:	edd3 7a00 	vldr	s15, [r3]
 800c20c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	edc3 7a00 	vstr	s15, [r3]
    qSum[1] = q1[1] + q2[1];
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	3304      	adds	r3, #4
 800c21a:	ed93 7a00 	vldr	s14, [r3]
 800c21e:	68bb      	ldr	r3, [r7, #8]
 800c220:	3304      	adds	r3, #4
 800c222:	edd3 7a00 	vldr	s15, [r3]
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	3304      	adds	r3, #4
 800c22a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c22e:	edc3 7a00 	vstr	s15, [r3]
    qSum[2] = q1[2] + q2[2];
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	3308      	adds	r3, #8
 800c236:	ed93 7a00 	vldr	s14, [r3]
 800c23a:	68bb      	ldr	r3, [r7, #8]
 800c23c:	3308      	adds	r3, #8
 800c23e:	edd3 7a00 	vldr	s15, [r3]
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	3308      	adds	r3, #8
 800c246:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c24a:	edc3 7a00 	vstr	s15, [r3]
    qSum[3] = q1[3] + q2[3];
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	330c      	adds	r3, #12
 800c252:	ed93 7a00 	vldr	s14, [r3]
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	330c      	adds	r3, #12
 800c25a:	edd3 7a00 	vldr	s15, [r3]
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	330c      	adds	r3, #12
 800c262:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c266:	edc3 7a00 	vstr	s15, [r3]
}
 800c26a:	bf00      	nop
 800c26c:	3714      	adds	r7, #20
 800c26e:	46bd      	mov	sp, r7
 800c270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c274:	4770      	bx	lr

0800c276 <inv_q_normalizef>:

void inv_q_normalizef(float *q)
{
 800c276:	b480      	push	{r7}
 800c278:	b085      	sub	sp, #20
 800c27a:	af00      	add	r7, sp, #0
 800c27c:	6078      	str	r0, [r7, #4]
    INVENSENSE_FUNC_START;
    float normSF = 0;
 800c27e:	f04f 0300 	mov.w	r3, #0
 800c282:	60fb      	str	r3, [r7, #12]
    float xHalf = 0;
 800c284:	f04f 0300 	mov.w	r3, #0
 800c288:	60bb      	str	r3, [r7, #8]
    normSF = (q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	ed93 7a00 	vldr	s14, [r3]
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	edd3 7a00 	vldr	s15, [r3]
 800c296:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	3304      	adds	r3, #4
 800c29e:	edd3 6a00 	vldr	s13, [r3]
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	3304      	adds	r3, #4
 800c2a6:	edd3 7a00 	vldr	s15, [r3]
 800c2aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c2ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	3308      	adds	r3, #8
 800c2b6:	edd3 6a00 	vldr	s13, [r3]
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	3308      	adds	r3, #8
 800c2be:	edd3 7a00 	vldr	s15, [r3]
 800c2c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c2c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	330c      	adds	r3, #12
 800c2ce:	edd3 6a00 	vldr	s13, [r3]
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	330c      	adds	r3, #12
 800c2d6:	edd3 7a00 	vldr	s15, [r3]
 800c2da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c2de:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c2e2:	edc7 7a03 	vstr	s15, [r7, #12]
    if (normSF < 2) {
 800c2e6:	edd7 7a03 	vldr	s15, [r7, #12]
 800c2ea:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800c2ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c2f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2f6:	f140 8087 	bpl.w	800c408 <inv_q_normalizef+0x192>
        xHalf = 0.5f * normSF;
 800c2fa:	edd7 7a03 	vldr	s15, [r7, #12]
 800c2fe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c302:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c306:	edc7 7a02 	vstr	s15, [r7, #8]
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
 800c30a:	ed97 7a02 	vldr	s14, [r7, #8]
 800c30e:	edd7 7a03 	vldr	s15, [r7, #12]
 800c312:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c316:	edd7 7a03 	vldr	s15, [r7, #12]
 800c31a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c31e:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800c322:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c326:	ed97 7a03 	vldr	s14, [r7, #12]
 800c32a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c32e:	edc7 7a03 	vstr	s15, [r7, #12]
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
 800c332:	ed97 7a02 	vldr	s14, [r7, #8]
 800c336:	edd7 7a03 	vldr	s15, [r7, #12]
 800c33a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c33e:	edd7 7a03 	vldr	s15, [r7, #12]
 800c342:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c346:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800c34a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c34e:	ed97 7a03 	vldr	s14, [r7, #12]
 800c352:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c356:	edc7 7a03 	vstr	s15, [r7, #12]
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
 800c35a:	ed97 7a02 	vldr	s14, [r7, #8]
 800c35e:	edd7 7a03 	vldr	s15, [r7, #12]
 800c362:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c366:	edd7 7a03 	vldr	s15, [r7, #12]
 800c36a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c36e:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800c372:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c376:	ed97 7a03 	vldr	s14, [r7, #12]
 800c37a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c37e:	edc7 7a03 	vstr	s15, [r7, #12]
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
 800c382:	ed97 7a02 	vldr	s14, [r7, #8]
 800c386:	edd7 7a03 	vldr	s15, [r7, #12]
 800c38a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c38e:	edd7 7a03 	vldr	s15, [r7, #12]
 800c392:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c396:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800c39a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c39e:	ed97 7a03 	vldr	s14, [r7, #12]
 800c3a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3a6:	edc7 7a03 	vstr	s15, [r7, #12]
        q[0] *= normSF;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	ed93 7a00 	vldr	s14, [r3]
 800c3b0:	edd7 7a03 	vldr	s15, [r7, #12]
 800c3b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	edc3 7a00 	vstr	s15, [r3]
        q[1] *= normSF;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	3304      	adds	r3, #4
 800c3c2:	ed93 7a00 	vldr	s14, [r3]
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	3304      	adds	r3, #4
 800c3ca:	edd7 7a03 	vldr	s15, [r7, #12]
 800c3ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3d2:	edc3 7a00 	vstr	s15, [r3]
        q[2] *= normSF;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	3308      	adds	r3, #8
 800c3da:	ed93 7a00 	vldr	s14, [r3]
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	3308      	adds	r3, #8
 800c3e2:	edd7 7a03 	vldr	s15, [r7, #12]
 800c3e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3ea:	edc3 7a00 	vstr	s15, [r3]
        q[3] *= normSF;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	330c      	adds	r3, #12
 800c3f2:	ed93 7a00 	vldr	s14, [r3]
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	330c      	adds	r3, #12
 800c3fa:	edd7 7a03 	vldr	s15, [r7, #12]
 800c3fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c402:	edc3 7a00 	vstr	s15, [r3]
 800c406:	e012      	b.n	800c42e <inv_q_normalizef+0x1b8>
    } else {
        q[0] = 1.0;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c40e:	601a      	str	r2, [r3, #0]
        q[1] = 0.0;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	3304      	adds	r3, #4
 800c414:	f04f 0200 	mov.w	r2, #0
 800c418:	601a      	str	r2, [r3, #0]
        q[2] = 0.0;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	3308      	adds	r3, #8
 800c41e:	f04f 0200 	mov.w	r2, #0
 800c422:	601a      	str	r2, [r3, #0]
        q[3] = 0.0;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	330c      	adds	r3, #12
 800c428:	f04f 0200 	mov.w	r2, #0
 800c42c:	601a      	str	r2, [r3, #0]
    }
    normSF = (q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	ed93 7a00 	vldr	s14, [r3]
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	edd3 7a00 	vldr	s15, [r3]
 800c43a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	3304      	adds	r3, #4
 800c442:	edd3 6a00 	vldr	s13, [r3]
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	3304      	adds	r3, #4
 800c44a:	edd3 7a00 	vldr	s15, [r3]
 800c44e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c452:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	3308      	adds	r3, #8
 800c45a:	edd3 6a00 	vldr	s13, [r3]
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	3308      	adds	r3, #8
 800c462:	edd3 7a00 	vldr	s15, [r3]
 800c466:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c46a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	330c      	adds	r3, #12
 800c472:	edd3 6a00 	vldr	s13, [r3]
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	330c      	adds	r3, #12
 800c47a:	edd3 7a00 	vldr	s15, [r3]
 800c47e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c482:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c486:	edc7 7a03 	vstr	s15, [r7, #12]
}
 800c48a:	bf00      	nop
 800c48c:	3714      	adds	r7, #20
 800c48e:	46bd      	mov	sp, r7
 800c490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c494:	4770      	bx	lr

0800c496 <inv_q_norm4>:

/** Performs a length 4 vector normalization with a square root.
* @param[in,out] q vector to normalize. Returns [1,0,0,0] is magnitude is zero.
*/
void inv_q_norm4(float *q)
{
 800c496:	b580      	push	{r7, lr}
 800c498:	b084      	sub	sp, #16
 800c49a:	af00      	add	r7, sp, #0
 800c49c:	6078      	str	r0, [r7, #4]
    float mag;
    mag = sqrtf(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	ed93 7a00 	vldr	s14, [r3]
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	edd3 7a00 	vldr	s15, [r3]
 800c4aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	3304      	adds	r3, #4
 800c4b2:	edd3 6a00 	vldr	s13, [r3]
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	3304      	adds	r3, #4
 800c4ba:	edd3 7a00 	vldr	s15, [r3]
 800c4be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c4c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	3308      	adds	r3, #8
 800c4ca:	edd3 6a00 	vldr	s13, [r3]
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	3308      	adds	r3, #8
 800c4d2:	edd3 7a00 	vldr	s15, [r3]
 800c4d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c4da:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	330c      	adds	r3, #12
 800c4e2:	edd3 6a00 	vldr	s13, [r3]
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	330c      	adds	r3, #12
 800c4ea:	edd3 7a00 	vldr	s15, [r3]
 800c4ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c4f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c4f6:	eeb0 0a67 	vmov.f32	s0, s15
 800c4fa:	f003 ffdb 	bl	80104b4 <sqrtf>
 800c4fe:	ed87 0a03 	vstr	s0, [r7, #12]
    if (mag) {
 800c502:	edd7 7a03 	vldr	s15, [r7, #12]
 800c506:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c50a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c50e:	d02e      	beq.n	800c56e <inv_q_norm4+0xd8>
        q[0] /= mag;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	edd3 6a00 	vldr	s13, [r3]
 800c516:	ed97 7a03 	vldr	s14, [r7, #12]
 800c51a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	edc3 7a00 	vstr	s15, [r3]
        q[1] /= mag;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	3304      	adds	r3, #4
 800c528:	edd3 6a00 	vldr	s13, [r3]
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	3304      	adds	r3, #4
 800c530:	ed97 7a03 	vldr	s14, [r7, #12]
 800c534:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c538:	edc3 7a00 	vstr	s15, [r3]
        q[2] /= mag;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	3308      	adds	r3, #8
 800c540:	edd3 6a00 	vldr	s13, [r3]
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	3308      	adds	r3, #8
 800c548:	ed97 7a03 	vldr	s14, [r7, #12]
 800c54c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c550:	edc3 7a00 	vstr	s15, [r3]
        q[3] /= mag;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	330c      	adds	r3, #12
 800c558:	edd3 6a00 	vldr	s13, [r3]
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	330c      	adds	r3, #12
 800c560:	ed97 7a03 	vldr	s14, [r7, #12]
 800c564:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c568:	edc3 7a00 	vstr	s15, [r3]
        q[0] = 1.f;
        q[1] = 0.f;
        q[2] = 0.f;
        q[3] = 0.f;
    }
}
 800c56c:	e012      	b.n	800c594 <inv_q_norm4+0xfe>
        q[0] = 1.f;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c574:	601a      	str	r2, [r3, #0]
        q[1] = 0.f;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	3304      	adds	r3, #4
 800c57a:	f04f 0200 	mov.w	r2, #0
 800c57e:	601a      	str	r2, [r3, #0]
        q[2] = 0.f;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	3308      	adds	r3, #8
 800c584:	f04f 0200 	mov.w	r2, #0
 800c588:	601a      	str	r2, [r3, #0]
        q[3] = 0.f;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	330c      	adds	r3, #12
 800c58e:	f04f 0200 	mov.w	r2, #0
 800c592:	601a      	str	r2, [r3, #0]
}
 800c594:	bf00      	nop
 800c596:	3710      	adds	r7, #16
 800c598:	46bd      	mov	sp, r7
 800c59a:	bd80      	pop	{r7, pc}

0800c59c <inv_q_invertf>:

void inv_q_invertf(const float *q, float *qInverted)
{
 800c59c:	b480      	push	{r7}
 800c59e:	b083      	sub	sp, #12
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
 800c5a4:	6039      	str	r1, [r7, #0]
    INVENSENSE_FUNC_START;
    qInverted[0] = q[0];
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681a      	ldr	r2, [r3, #0]
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	601a      	str	r2, [r3, #0]
    qInverted[1] = -q[1];
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	3304      	adds	r3, #4
 800c5b2:	edd3 7a00 	vldr	s15, [r3]
 800c5b6:	683b      	ldr	r3, [r7, #0]
 800c5b8:	3304      	adds	r3, #4
 800c5ba:	eef1 7a67 	vneg.f32	s15, s15
 800c5be:	edc3 7a00 	vstr	s15, [r3]
    qInverted[2] = -q[2];
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	3308      	adds	r3, #8
 800c5c6:	edd3 7a00 	vldr	s15, [r3]
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	3308      	adds	r3, #8
 800c5ce:	eef1 7a67 	vneg.f32	s15, s15
 800c5d2:	edc3 7a00 	vstr	s15, [r3]
    qInverted[3] = -q[3];
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	330c      	adds	r3, #12
 800c5da:	edd3 7a00 	vldr	s15, [r3]
 800c5de:	683b      	ldr	r3, [r7, #0]
 800c5e0:	330c      	adds	r3, #12
 800c5e2:	eef1 7a67 	vneg.f32	s15, s15
 800c5e6:	edc3 7a00 	vstr	s15, [r3]
}
 800c5ea:	bf00      	nop
 800c5ec:	370c      	adds	r7, #12
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f4:	4770      	bx	lr

0800c5f6 <inv_quaternion_to_rotation>:
 *             the first row of the matrix. Rotation matrix multiplied
 *             by a 3 element column vector transform a vector from Body
 *             to World.
 */
void inv_quaternion_to_rotation(const long *quat, long *rot)
{
 800c5f6:	b590      	push	{r4, r7, lr}
 800c5f8:	b083      	sub	sp, #12
 800c5fa:	af00      	add	r7, sp, #0
 800c5fc:	6078      	str	r0, [r7, #4]
 800c5fe:	6039      	str	r1, [r7, #0]
    rot[0] =
        inv_q29_mult(quat[1], quat[1]) + inv_q29_mult(quat[0],
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	3304      	adds	r3, #4
 800c604:	681a      	ldr	r2, [r3, #0]
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	3304      	adds	r3, #4
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	4619      	mov	r1, r3
 800c60e:	4610      	mov	r0, r2
 800c610:	f7ff fb7c 	bl	800bd0c <inv_q29_mult>
 800c614:	4604      	mov	r4, r0
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681a      	ldr	r2, [r3, #0]
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	4619      	mov	r1, r3
 800c620:	4610      	mov	r0, r2
 800c622:	f7ff fb73 	bl	800bd0c <inv_q29_mult>
 800c626:	4603      	mov	r3, r0
 800c628:	4423      	add	r3, r4
                quat[0]) -
 800c62a:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
    rot[0] =
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	601a      	str	r2, [r3, #0]
        1073741824L;
    rot[1] =
        inv_q29_mult(quat[1], quat[2]) - inv_q29_mult(quat[3], quat[0]);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	3304      	adds	r3, #4
 800c636:	681a      	ldr	r2, [r3, #0]
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	3308      	adds	r3, #8
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	4619      	mov	r1, r3
 800c640:	4610      	mov	r0, r2
 800c642:	f7ff fb63 	bl	800bd0c <inv_q29_mult>
 800c646:	4604      	mov	r4, r0
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	330c      	adds	r3, #12
 800c64c:	681a      	ldr	r2, [r3, #0]
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	4619      	mov	r1, r3
 800c654:	4610      	mov	r0, r2
 800c656:	f7ff fb59 	bl	800bd0c <inv_q29_mult>
 800c65a:	4602      	mov	r2, r0
    rot[1] =
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	3304      	adds	r3, #4
        inv_q29_mult(quat[1], quat[2]) - inv_q29_mult(quat[3], quat[0]);
 800c660:	1aa2      	subs	r2, r4, r2
    rot[1] =
 800c662:	601a      	str	r2, [r3, #0]
    rot[2] =
        inv_q29_mult(quat[1], quat[3]) + inv_q29_mult(quat[2], quat[0]);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	3304      	adds	r3, #4
 800c668:	681a      	ldr	r2, [r3, #0]
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	330c      	adds	r3, #12
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	4619      	mov	r1, r3
 800c672:	4610      	mov	r0, r2
 800c674:	f7ff fb4a 	bl	800bd0c <inv_q29_mult>
 800c678:	4604      	mov	r4, r0
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	3308      	adds	r3, #8
 800c67e:	681a      	ldr	r2, [r3, #0]
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	4619      	mov	r1, r3
 800c686:	4610      	mov	r0, r2
 800c688:	f7ff fb40 	bl	800bd0c <inv_q29_mult>
 800c68c:	4602      	mov	r2, r0
    rot[2] =
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	3308      	adds	r3, #8
        inv_q29_mult(quat[1], quat[3]) + inv_q29_mult(quat[2], quat[0]);
 800c692:	4422      	add	r2, r4
    rot[2] =
 800c694:	601a      	str	r2, [r3, #0]
    rot[3] =
        inv_q29_mult(quat[1], quat[2]) + inv_q29_mult(quat[3], quat[0]);
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	3304      	adds	r3, #4
 800c69a:	681a      	ldr	r2, [r3, #0]
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	3308      	adds	r3, #8
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	4619      	mov	r1, r3
 800c6a4:	4610      	mov	r0, r2
 800c6a6:	f7ff fb31 	bl	800bd0c <inv_q29_mult>
 800c6aa:	4604      	mov	r4, r0
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	330c      	adds	r3, #12
 800c6b0:	681a      	ldr	r2, [r3, #0]
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	4619      	mov	r1, r3
 800c6b8:	4610      	mov	r0, r2
 800c6ba:	f7ff fb27 	bl	800bd0c <inv_q29_mult>
 800c6be:	4602      	mov	r2, r0
    rot[3] =
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	330c      	adds	r3, #12
        inv_q29_mult(quat[1], quat[2]) + inv_q29_mult(quat[3], quat[0]);
 800c6c4:	4422      	add	r2, r4
    rot[3] =
 800c6c6:	601a      	str	r2, [r3, #0]
    rot[4] =
        inv_q29_mult(quat[2], quat[2]) + inv_q29_mult(quat[0],
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	3308      	adds	r3, #8
 800c6cc:	681a      	ldr	r2, [r3, #0]
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	3308      	adds	r3, #8
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	4619      	mov	r1, r3
 800c6d6:	4610      	mov	r0, r2
 800c6d8:	f7ff fb18 	bl	800bd0c <inv_q29_mult>
 800c6dc:	4604      	mov	r4, r0
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681a      	ldr	r2, [r3, #0]
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	4619      	mov	r1, r3
 800c6e8:	4610      	mov	r0, r2
 800c6ea:	f7ff fb0f 	bl	800bd0c <inv_q29_mult>
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	18e2      	adds	r2, r4, r3
    rot[4] =
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	3310      	adds	r3, #16
                quat[0]) -
 800c6f6:	f102 4240 	add.w	r2, r2, #3221225472	; 0xc0000000
    rot[4] =
 800c6fa:	601a      	str	r2, [r3, #0]
        1073741824L;
    rot[5] =
        inv_q29_mult(quat[2], quat[3]) - inv_q29_mult(quat[1], quat[0]);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	3308      	adds	r3, #8
 800c700:	681a      	ldr	r2, [r3, #0]
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	330c      	adds	r3, #12
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	4619      	mov	r1, r3
 800c70a:	4610      	mov	r0, r2
 800c70c:	f7ff fafe 	bl	800bd0c <inv_q29_mult>
 800c710:	4604      	mov	r4, r0
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	3304      	adds	r3, #4
 800c716:	681a      	ldr	r2, [r3, #0]
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	4619      	mov	r1, r3
 800c71e:	4610      	mov	r0, r2
 800c720:	f7ff faf4 	bl	800bd0c <inv_q29_mult>
 800c724:	4602      	mov	r2, r0
    rot[5] =
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	3314      	adds	r3, #20
        inv_q29_mult(quat[2], quat[3]) - inv_q29_mult(quat[1], quat[0]);
 800c72a:	1aa2      	subs	r2, r4, r2
    rot[5] =
 800c72c:	601a      	str	r2, [r3, #0]
    rot[6] =
        inv_q29_mult(quat[1], quat[3]) - inv_q29_mult(quat[2], quat[0]);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	3304      	adds	r3, #4
 800c732:	681a      	ldr	r2, [r3, #0]
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	330c      	adds	r3, #12
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	4619      	mov	r1, r3
 800c73c:	4610      	mov	r0, r2
 800c73e:	f7ff fae5 	bl	800bd0c <inv_q29_mult>
 800c742:	4604      	mov	r4, r0
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	3308      	adds	r3, #8
 800c748:	681a      	ldr	r2, [r3, #0]
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	4619      	mov	r1, r3
 800c750:	4610      	mov	r0, r2
 800c752:	f7ff fadb 	bl	800bd0c <inv_q29_mult>
 800c756:	4602      	mov	r2, r0
    rot[6] =
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	3318      	adds	r3, #24
        inv_q29_mult(quat[1], quat[3]) - inv_q29_mult(quat[2], quat[0]);
 800c75c:	1aa2      	subs	r2, r4, r2
    rot[6] =
 800c75e:	601a      	str	r2, [r3, #0]
    rot[7] =
        inv_q29_mult(quat[2], quat[3]) + inv_q29_mult(quat[1], quat[0]);
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	3308      	adds	r3, #8
 800c764:	681a      	ldr	r2, [r3, #0]
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	330c      	adds	r3, #12
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	4619      	mov	r1, r3
 800c76e:	4610      	mov	r0, r2
 800c770:	f7ff facc 	bl	800bd0c <inv_q29_mult>
 800c774:	4604      	mov	r4, r0
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	3304      	adds	r3, #4
 800c77a:	681a      	ldr	r2, [r3, #0]
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	4619      	mov	r1, r3
 800c782:	4610      	mov	r0, r2
 800c784:	f7ff fac2 	bl	800bd0c <inv_q29_mult>
 800c788:	4602      	mov	r2, r0
    rot[7] =
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	331c      	adds	r3, #28
        inv_q29_mult(quat[2], quat[3]) + inv_q29_mult(quat[1], quat[0]);
 800c78e:	4422      	add	r2, r4
    rot[7] =
 800c790:	601a      	str	r2, [r3, #0]
    rot[8] =
        inv_q29_mult(quat[3], quat[3]) + inv_q29_mult(quat[0],
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	330c      	adds	r3, #12
 800c796:	681a      	ldr	r2, [r3, #0]
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	330c      	adds	r3, #12
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	4619      	mov	r1, r3
 800c7a0:	4610      	mov	r0, r2
 800c7a2:	f7ff fab3 	bl	800bd0c <inv_q29_mult>
 800c7a6:	4604      	mov	r4, r0
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681a      	ldr	r2, [r3, #0]
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	4619      	mov	r1, r3
 800c7b2:	4610      	mov	r0, r2
 800c7b4:	f7ff faaa 	bl	800bd0c <inv_q29_mult>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	18e2      	adds	r2, r4, r3
    rot[8] =
 800c7bc:	683b      	ldr	r3, [r7, #0]
 800c7be:	3320      	adds	r3, #32
                quat[0]) -
 800c7c0:	f102 4240 	add.w	r2, r2, #3221225472	; 0xc0000000
    rot[8] =
 800c7c4:	601a      	str	r2, [r3, #0]
        1073741824L;
}
 800c7c6:	bf00      	nop
 800c7c8:	370c      	adds	r7, #12
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bd90      	pop	{r4, r7, pc}

0800c7ce <inv_row_2_scale>:

    return hash;
}

static unsigned short inv_row_2_scale(const signed char *row)
{
 800c7ce:	b480      	push	{r7}
 800c7d0:	b085      	sub	sp, #20
 800c7d2:	af00      	add	r7, sp, #0
 800c7d4:	6078      	str	r0, [r7, #4]
    unsigned short b;

    if (row[0] > 0)
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	f993 3000 	ldrsb.w	r3, [r3]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	dd02      	ble.n	800c7e6 <inv_row_2_scale+0x18>
        b = 0;
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	81fb      	strh	r3, [r7, #14]
 800c7e4:	e02d      	b.n	800c842 <inv_row_2_scale+0x74>
    else if (row[0] < 0)
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	f993 3000 	ldrsb.w	r3, [r3]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	da02      	bge.n	800c7f6 <inv_row_2_scale+0x28>
        b = 4;
 800c7f0:	2304      	movs	r3, #4
 800c7f2:	81fb      	strh	r3, [r7, #14]
 800c7f4:	e025      	b.n	800c842 <inv_row_2_scale+0x74>
    else if (row[1] > 0)
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	3301      	adds	r3, #1
 800c7fa:	f993 3000 	ldrsb.w	r3, [r3]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	dd02      	ble.n	800c808 <inv_row_2_scale+0x3a>
        b = 1;
 800c802:	2301      	movs	r3, #1
 800c804:	81fb      	strh	r3, [r7, #14]
 800c806:	e01c      	b.n	800c842 <inv_row_2_scale+0x74>
    else if (row[1] < 0)
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	3301      	adds	r3, #1
 800c80c:	f993 3000 	ldrsb.w	r3, [r3]
 800c810:	2b00      	cmp	r3, #0
 800c812:	da02      	bge.n	800c81a <inv_row_2_scale+0x4c>
        b = 5;
 800c814:	2305      	movs	r3, #5
 800c816:	81fb      	strh	r3, [r7, #14]
 800c818:	e013      	b.n	800c842 <inv_row_2_scale+0x74>
    else if (row[2] > 0)
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	3302      	adds	r3, #2
 800c81e:	f993 3000 	ldrsb.w	r3, [r3]
 800c822:	2b00      	cmp	r3, #0
 800c824:	dd02      	ble.n	800c82c <inv_row_2_scale+0x5e>
        b = 2;
 800c826:	2302      	movs	r3, #2
 800c828:	81fb      	strh	r3, [r7, #14]
 800c82a:	e00a      	b.n	800c842 <inv_row_2_scale+0x74>
    else if (row[2] < 0)
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	3302      	adds	r3, #2
 800c830:	f993 3000 	ldrsb.w	r3, [r3]
 800c834:	2b00      	cmp	r3, #0
 800c836:	da02      	bge.n	800c83e <inv_row_2_scale+0x70>
        b = 6;
 800c838:	2306      	movs	r3, #6
 800c83a:	81fb      	strh	r3, [r7, #14]
 800c83c:	e001      	b.n	800c842 <inv_row_2_scale+0x74>
    else
        b = 7;		// error
 800c83e:	2307      	movs	r3, #7
 800c840:	81fb      	strh	r3, [r7, #14]
    return b;
 800c842:	89fb      	ldrh	r3, [r7, #14]
}
 800c844:	4618      	mov	r0, r3
 800c846:	3714      	adds	r7, #20
 800c848:	46bd      	mov	sp, r7
 800c84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84e:	4770      	bx	lr

0800c850 <inv_orientation_matrix_to_scalar>:
* The next 2 bits (6 and 7) represent the column the one is on for the third row with
* bit number 8 being the sign. In binary the identity matrix would therefor be:
* 010_001_000 or 0x88 in hex.
*/
unsigned short inv_orientation_matrix_to_scalar(const signed char *mtx)
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b084      	sub	sp, #16
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
       YZX  000_010_001
       ZXY  001_000_010
       ZYX  000_001_010
     */

    scalar = inv_row_2_scale(mtx);
 800c858:	6878      	ldr	r0, [r7, #4]
 800c85a:	f7ff ffb8 	bl	800c7ce <inv_row_2_scale>
 800c85e:	4603      	mov	r3, r0
 800c860:	81fb      	strh	r3, [r7, #14]
    scalar |= inv_row_2_scale(mtx + 3) << 3;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	3303      	adds	r3, #3
 800c866:	4618      	mov	r0, r3
 800c868:	f7ff ffb1 	bl	800c7ce <inv_row_2_scale>
 800c86c:	4603      	mov	r3, r0
 800c86e:	00db      	lsls	r3, r3, #3
 800c870:	b21a      	sxth	r2, r3
 800c872:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c876:	4313      	orrs	r3, r2
 800c878:	b21b      	sxth	r3, r3
 800c87a:	81fb      	strh	r3, [r7, #14]
    scalar |= inv_row_2_scale(mtx + 6) << 6;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	3306      	adds	r3, #6
 800c880:	4618      	mov	r0, r3
 800c882:	f7ff ffa4 	bl	800c7ce <inv_row_2_scale>
 800c886:	4603      	mov	r3, r0
 800c888:	019b      	lsls	r3, r3, #6
 800c88a:	b21a      	sxth	r2, r3
 800c88c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c890:	4313      	orrs	r3, r2
 800c892:	b21b      	sxth	r3, r3
 800c894:	81fb      	strh	r3, [r7, #14]


    return scalar;
 800c896:	89fb      	ldrh	r3, [r7, #14]
}
 800c898:	4618      	mov	r0, r3
 800c89a:	3710      	adds	r7, #16
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bd80      	pop	{r7, pc}

0800c8a0 <inv_convert_to_body_with_scale>:
* @param[in] sensitivity Sensitivity scale
* @param[in] input Input vector, length 3
* @param[out] output Output vector, length 3
*/
void inv_convert_to_body_with_scale(unsigned short orientation, long sensitivity, const long *input, long *output)
{
 800c8a0:	b590      	push	{r4, r7, lr}
 800c8a2:	b085      	sub	sp, #20
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	60b9      	str	r1, [r7, #8]
 800c8a8:	607a      	str	r2, [r7, #4]
 800c8aa:	603b      	str	r3, [r7, #0]
 800c8ac:	4603      	mov	r3, r0
 800c8ae:	81fb      	strh	r3, [r7, #14]
    output[0] = inv_q30_mult(input[orientation & 0x03] *
 800c8b0:	89fb      	ldrh	r3, [r7, #14]
 800c8b2:	f003 0303 	and.w	r3, r3, #3
 800c8b6:	009b      	lsls	r3, r3, #2
 800c8b8:	687a      	ldr	r2, [r7, #4]
 800c8ba:	4413      	add	r3, r2
 800c8bc:	681a      	ldr	r2, [r3, #0]
                             SIGNSET(orientation & 0x004), sensitivity);
 800c8be:	89fb      	ldrh	r3, [r7, #14]
 800c8c0:	f003 0304 	and.w	r3, r3, #4
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d002      	beq.n	800c8ce <inv_convert_to_body_with_scale+0x2e>
 800c8c8:	f04f 33ff 	mov.w	r3, #4294967295
 800c8cc:	e000      	b.n	800c8d0 <inv_convert_to_body_with_scale+0x30>
 800c8ce:	2301      	movs	r3, #1
    output[0] = inv_q30_mult(input[orientation & 0x03] *
 800c8d0:	fb02 f303 	mul.w	r3, r2, r3
 800c8d4:	68b9      	ldr	r1, [r7, #8]
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	f7ff fa44 	bl	800bd64 <inv_q30_mult>
 800c8dc:	4602      	mov	r2, r0
 800c8de:	683b      	ldr	r3, [r7, #0]
 800c8e0:	601a      	str	r2, [r3, #0]
    output[1] = inv_q30_mult(input[(orientation>>3) & 0x03] *
 800c8e2:	89fb      	ldrh	r3, [r7, #14]
 800c8e4:	08db      	lsrs	r3, r3, #3
 800c8e6:	b29b      	uxth	r3, r3
 800c8e8:	f003 0303 	and.w	r3, r3, #3
 800c8ec:	009b      	lsls	r3, r3, #2
 800c8ee:	687a      	ldr	r2, [r7, #4]
 800c8f0:	4413      	add	r3, r2
 800c8f2:	681a      	ldr	r2, [r3, #0]
                             SIGNSET(orientation & 0x020), sensitivity);
 800c8f4:	89fb      	ldrh	r3, [r7, #14]
 800c8f6:	f003 0320 	and.w	r3, r3, #32
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d002      	beq.n	800c904 <inv_convert_to_body_with_scale+0x64>
 800c8fe:	f04f 33ff 	mov.w	r3, #4294967295
 800c902:	e000      	b.n	800c906 <inv_convert_to_body_with_scale+0x66>
 800c904:	2301      	movs	r3, #1
    output[1] = inv_q30_mult(input[(orientation>>3) & 0x03] *
 800c906:	fb02 f203 	mul.w	r2, r2, r3
 800c90a:	683b      	ldr	r3, [r7, #0]
 800c90c:	1d1c      	adds	r4, r3, #4
 800c90e:	68b9      	ldr	r1, [r7, #8]
 800c910:	4610      	mov	r0, r2
 800c912:	f7ff fa27 	bl	800bd64 <inv_q30_mult>
 800c916:	4603      	mov	r3, r0
 800c918:	6023      	str	r3, [r4, #0]
    output[2] = inv_q30_mult(input[(orientation>>6) & 0x03] *
 800c91a:	89fb      	ldrh	r3, [r7, #14]
 800c91c:	099b      	lsrs	r3, r3, #6
 800c91e:	b29b      	uxth	r3, r3
 800c920:	f003 0303 	and.w	r3, r3, #3
 800c924:	009b      	lsls	r3, r3, #2
 800c926:	687a      	ldr	r2, [r7, #4]
 800c928:	4413      	add	r3, r2
 800c92a:	681a      	ldr	r2, [r3, #0]
                             SIGNSET(orientation & 0x100), sensitivity);
 800c92c:	89fb      	ldrh	r3, [r7, #14]
 800c92e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c932:	2b00      	cmp	r3, #0
 800c934:	d002      	beq.n	800c93c <inv_convert_to_body_with_scale+0x9c>
 800c936:	f04f 33ff 	mov.w	r3, #4294967295
 800c93a:	e000      	b.n	800c93e <inv_convert_to_body_with_scale+0x9e>
 800c93c:	2301      	movs	r3, #1
    output[2] = inv_q30_mult(input[(orientation>>6) & 0x03] *
 800c93e:	fb02 f203 	mul.w	r2, r2, r3
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	f103 0408 	add.w	r4, r3, #8
 800c948:	68b9      	ldr	r1, [r7, #8]
 800c94a:	4610      	mov	r0, r2
 800c94c:	f7ff fa0a 	bl	800bd64 <inv_q30_mult>
 800c950:	4603      	mov	r3, r0
 800c952:	6023      	str	r3, [r4, #0]
}
 800c954:	bf00      	nop
 800c956:	3714      	adds	r7, #20
 800c958:	46bd      	mov	sp, r7
 800c95a:	bd90      	pop	{r4, r7, pc}

0800c95c <__print_result_location>:
#endif

static inline void __print_result_location(int result,
					   const char *file,
					   const char *func, int line)
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b088      	sub	sp, #32
 800c960:	af04      	add	r7, sp, #16
 800c962:	60f8      	str	r0, [r7, #12]
 800c964:	60b9      	str	r1, [r7, #8]
 800c966:	607a      	str	r2, [r7, #4]
 800c968:	603b      	str	r3, [r7, #0]
	MPL_LOGE("%s|%s|%d returning %d\n", file, func, line, result);
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	9302      	str	r3, [sp, #8]
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	9301      	str	r3, [sp, #4]
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	9300      	str	r3, [sp, #0]
 800c976:	68bb      	ldr	r3, [r7, #8]
 800c978:	4a04      	ldr	r2, [pc, #16]	; (800c98c <__print_result_location+0x30>)
 800c97a:	2100      	movs	r1, #0
 800c97c:	2006      	movs	r0, #6
 800c97e:	f7fe f99f 	bl	800acc0 <_MLPrintLog>
}
 800c982:	bf00      	nop
 800c984:	3710      	adds	r7, #16
 800c986:	46bd      	mov	sp, r7
 800c988:	bd80      	pop	{r7, pc}
 800c98a:	bf00      	nop
 800c98c:	08012a8c 	.word	0x08012a8c

0800c990 <inv_init_mpl>:
/**
 * @brief  Initializes the MPL. Should be called first and once 
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_init_mpl(void)
{
 800c990:	b580      	push	{r7, lr}
 800c992:	af00      	add	r7, sp, #0
    inv_init_storage_manager();
 800c994:	f000 fafc 	bl	800cf90 <inv_init_storage_manager>

    /* initialize the start callback manager */
    INV_ERROR_CHECK(inv_init_start_manager());
 800c998:	f000 fa68 	bl	800ce6c <inv_init_start_manager>
 800c99c:	4603      	mov	r3, r0
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d00a      	beq.n	800c9b8 <inv_init_mpl+0x28>
 800c9a2:	f000 fa63 	bl	800ce6c <inv_init_start_manager>
 800c9a6:	2322      	movs	r3, #34	; 0x22
 800c9a8:	4a15      	ldr	r2, [pc, #84]	; (800ca00 <inv_init_mpl+0x70>)
 800c9aa:	4916      	ldr	r1, [pc, #88]	; (800ca04 <inv_init_mpl+0x74>)
 800c9ac:	f7ff ffd6 	bl	800c95c <__print_result_location>
 800c9b0:	f000 fa5c 	bl	800ce6c <inv_init_start_manager>
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	e020      	b.n	800c9fa <inv_init_mpl+0x6a>

    /* initialize the data builder */
    INV_ERROR_CHECK(inv_init_data_builder());
 800c9b8:	f7fe fbba 	bl	800b130 <inv_init_data_builder>
 800c9bc:	4603      	mov	r3, r0
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d00a      	beq.n	800c9d8 <inv_init_mpl+0x48>
 800c9c2:	f7fe fbb5 	bl	800b130 <inv_init_data_builder>
 800c9c6:	2325      	movs	r3, #37	; 0x25
 800c9c8:	4a0d      	ldr	r2, [pc, #52]	; (800ca00 <inv_init_mpl+0x70>)
 800c9ca:	490e      	ldr	r1, [pc, #56]	; (800ca04 <inv_init_mpl+0x74>)
 800c9cc:	f7ff ffc6 	bl	800c95c <__print_result_location>
 800c9d0:	f7fe fbae 	bl	800b130 <inv_init_data_builder>
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	e010      	b.n	800c9fa <inv_init_mpl+0x6a>

    INV_ERROR_CHECK(inv_enable_results_holder());
 800c9d8:	f000 f9e4 	bl	800cda4 <inv_enable_results_holder>
 800c9dc:	4603      	mov	r3, r0
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d00a      	beq.n	800c9f8 <inv_init_mpl+0x68>
 800c9e2:	f000 f9df 	bl	800cda4 <inv_enable_results_holder>
 800c9e6:	2327      	movs	r3, #39	; 0x27
 800c9e8:	4a05      	ldr	r2, [pc, #20]	; (800ca00 <inv_init_mpl+0x70>)
 800c9ea:	4906      	ldr	r1, [pc, #24]	; (800ca04 <inv_init_mpl+0x74>)
 800c9ec:	f7ff ffb6 	bl	800c95c <__print_result_location>
 800c9f0:	f000 f9d8 	bl	800cda4 <inv_enable_results_holder>
 800c9f4:	4603      	mov	r3, r0
 800c9f6:	e000      	b.n	800c9fa <inv_init_mpl+0x6a>

    return INV_SUCCESS;
 800c9f8:	2300      	movs	r3, #0
}
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	bd80      	pop	{r7, pc}
 800c9fe:	bf00      	nop
 800ca00:	0801372c 	.word	0x0801372c
 800ca04:	08012aa4 	.word	0x08012aa4

0800ca08 <inv_start_mpl>:
 *  @brief  Starts the MPL. Typically called after inv_init_mpl() or after a
 *          inv_stop_mpl() to start the MPL back up an running.
 *  @return INV_SUCCESS if successful or a non-zero error code otherwise.
 */
inv_error_t inv_start_mpl(void)
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	af00      	add	r7, sp, #0
    INV_ERROR_CHECK(inv_execute_mpl_start_notification());
 800ca0c:	f000 fa9a 	bl	800cf44 <inv_execute_mpl_start_notification>
 800ca10:	4603      	mov	r3, r0
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d00a      	beq.n	800ca2c <inv_start_mpl+0x24>
 800ca16:	f000 fa95 	bl	800cf44 <inv_execute_mpl_start_notification>
 800ca1a:	2342      	movs	r3, #66	; 0x42
 800ca1c:	4a05      	ldr	r2, [pc, #20]	; (800ca34 <inv_start_mpl+0x2c>)
 800ca1e:	4906      	ldr	r1, [pc, #24]	; (800ca38 <inv_start_mpl+0x30>)
 800ca20:	f7ff ff9c 	bl	800c95c <__print_result_location>
 800ca24:	f000 fa8e 	bl	800cf44 <inv_execute_mpl_start_notification>
 800ca28:	4603      	mov	r3, r0
 800ca2a:	e000      	b.n	800ca2e <inv_start_mpl+0x26>
    return INV_SUCCESS;
 800ca2c:	2300      	movs	r3, #0
}
 800ca2e:	4618      	mov	r0, r3
 800ca30:	bd80      	pop	{r7, pc}
 800ca32:	bf00      	nop
 800ca34:	0801373c 	.word	0x0801373c
 800ca38:	08012aa4 	.word	0x08012aa4

0800ca3c <inv_store_gaming_quaternion>:
* Store a quaternion more suitable for gaming. This quaternion is often determined
* using only gyro and accel.
* @param[in] quat Length 4, Quaternion scaled by 2^30
*/
void inv_store_gaming_quaternion(const long *quat, inv_time_t timestamp)
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b082      	sub	sp, #8
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
 800ca44:	6039      	str	r1, [r7, #0]
    rh.status |= INV_6_AXIS_QUAT_SET;
 800ca46:	4b09      	ldr	r3, [pc, #36]	; (800ca6c <inv_store_gaming_quaternion+0x30>)
 800ca48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca4a:	f043 0302 	orr.w	r3, r3, #2
 800ca4e:	4a07      	ldr	r2, [pc, #28]	; (800ca6c <inv_store_gaming_quaternion+0x30>)
 800ca50:	67d3      	str	r3, [r2, #124]	; 0x7c
    memcpy(&rh.gam_quat, quat, sizeof(rh.gam_quat));
 800ca52:	2210      	movs	r2, #16
 800ca54:	6879      	ldr	r1, [r7, #4]
 800ca56:	4806      	ldr	r0, [pc, #24]	; (800ca70 <inv_store_gaming_quaternion+0x34>)
 800ca58:	f000 fb42 	bl	800d0e0 <memcpy>
    rh.gam_timestamp = timestamp;
 800ca5c:	4a03      	ldr	r2, [pc, #12]	; (800ca6c <inv_store_gaming_quaternion+0x30>)
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	6253      	str	r3, [r2, #36]	; 0x24
}
 800ca62:	bf00      	nop
 800ca64:	3708      	adds	r7, #8
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bd80      	pop	{r7, pc}
 800ca6a:	bf00      	nop
 800ca6c:	200008a4 	.word	0x200008a4
 800ca70:	200008b4 	.word	0x200008b4

0800ca74 <inv_set_compass_correction>:
* Sets the quaternion adjustment from 6 axis (accel, gyro) to 9 axis quaternion.
* @param[in] data Quaternion Adjustment
* @param[in] timestamp Timestamp of when this is valid
*/
void inv_set_compass_correction(const long *data, inv_time_t timestamp)
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b082      	sub	sp, #8
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
 800ca7c:	6039      	str	r1, [r7, #0]
    rh.status |= INV_COMPASS_CORRECTION_SET;
 800ca7e:	4b09      	ldr	r3, [pc, #36]	; (800caa4 <inv_set_compass_correction+0x30>)
 800ca80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca82:	f043 0301 	orr.w	r3, r3, #1
 800ca86:	4a07      	ldr	r2, [pc, #28]	; (800caa4 <inv_set_compass_correction+0x30>)
 800ca88:	67d3      	str	r3, [r2, #124]	; 0x7c
    memcpy(rh.compass_correction, data, sizeof(rh.compass_correction));
 800ca8a:	2210      	movs	r2, #16
 800ca8c:	6879      	ldr	r1, [r7, #4]
 800ca8e:	4806      	ldr	r0, [pc, #24]	; (800caa8 <inv_set_compass_correction+0x34>)
 800ca90:	f000 fb26 	bl	800d0e0 <memcpy>
    rh.nav_timestamp = timestamp;
 800ca94:	4a03      	ldr	r2, [pc, #12]	; (800caa4 <inv_set_compass_correction+0x30>)
 800ca96:	683b      	ldr	r3, [r7, #0]
 800ca98:	6213      	str	r3, [r2, #32]
}
 800ca9a:	bf00      	nop
 800ca9c:	3708      	adds	r7, #8
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bd80      	pop	{r7, pc}
 800caa2:	bf00      	nop
 800caa4:	200008a4 	.word	0x200008a4
 800caa8:	200008e4 	.word	0x200008e4

0800caac <inv_get_compass_correction>:
* Gets the quaternion adjustment from 6 axis (accel, gyro) to 9 axis quaternion.
* @param[out] data Quaternion Adjustment
* @param[out] timestamp Timestamp of when this is valid
*/
void inv_get_compass_correction(long *data, inv_time_t *timestamp)
{
 800caac:	b580      	push	{r7, lr}
 800caae:	b082      	sub	sp, #8
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
 800cab4:	6039      	str	r1, [r7, #0]
    memcpy(data, rh.compass_correction, sizeof(rh.compass_correction));
 800cab6:	2210      	movs	r2, #16
 800cab8:	4905      	ldr	r1, [pc, #20]	; (800cad0 <inv_get_compass_correction+0x24>)
 800caba:	6878      	ldr	r0, [r7, #4]
 800cabc:	f000 fb10 	bl	800d0e0 <memcpy>
    *timestamp = rh.nav_timestamp;
 800cac0:	4b04      	ldr	r3, [pc, #16]	; (800cad4 <inv_get_compass_correction+0x28>)
 800cac2:	6a1a      	ldr	r2, [r3, #32]
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	601a      	str	r2, [r3, #0]
}
 800cac8:	bf00      	nop
 800caca:	3708      	adds	r7, #8
 800cacc:	46bd      	mov	sp, r7
 800cace:	bd80      	pop	{r7, pc}
 800cad0:	200008e4 	.word	0x200008e4
 800cad4:	200008a4 	.word	0x200008a4

0800cad8 <inv_get_acc_state>:

/** Gets the accel state set by inv_set_acc_state()
 * @return accel state.
 */
int inv_get_acc_state()
{
 800cad8:	b480      	push	{r7}
 800cada:	af00      	add	r7, sp, #0
    return rh.acc_state;
 800cadc:	4b03      	ldr	r3, [pc, #12]	; (800caec <inv_get_acc_state+0x14>)
 800cade:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
 800cae0:	4618      	mov	r0, r3
 800cae2:	46bd      	mov	sp, r7
 800cae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae8:	4770      	bx	lr
 800caea:	bf00      	nop
 800caec:	200008a4 	.word	0x200008a4

0800caf0 <inv_get_motion_state>:
/** Returns the motion state
* @param[out] cntr Number of previous times a no motion event has occured in a row.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
int inv_get_motion_state(unsigned int *cntr)
{
 800caf0:	b480      	push	{r7}
 800caf2:	b083      	sub	sp, #12
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
    *cntr = rh.motion_state_counter;
 800caf8:	4b06      	ldr	r3, [pc, #24]	; (800cb14 <inv_get_motion_state+0x24>)
 800cafa:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	601a      	str	r2, [r3, #0]
    return rh.motion_state;
 800cb00:	4b04      	ldr	r3, [pc, #16]	; (800cb14 <inv_get_motion_state+0x24>)
 800cb02:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
}
 800cb06:	4618      	mov	r0, r3
 800cb08:	370c      	adds	r7, #12
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb10:	4770      	bx	lr
 800cb12:	bf00      	nop
 800cb14:	200008a4 	.word	0x200008a4

0800cb18 <inv_set_motion_state>:
/** Sets the motion state
 * @param[in] state motion state where INV_NO_MOTION is not moving
 *            and INV_MOTION is moving.
 */
void inv_set_motion_state(unsigned char state)
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b084      	sub	sp, #16
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	4603      	mov	r3, r0
 800cb20:	71fb      	strb	r3, [r7, #7]
    long set;
    if (state == rh.motion_state) {
 800cb22:	4b15      	ldr	r3, [pc, #84]	; (800cb78 <inv_set_motion_state+0x60>)
 800cb24:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800cb28:	79fa      	ldrb	r2, [r7, #7]
 800cb2a:	429a      	cmp	r2, r3
 800cb2c:	d10c      	bne.n	800cb48 <inv_set_motion_state+0x30>
        if (state == INV_NO_MOTION) {
 800cb2e:	79fb      	ldrb	r3, [r7, #7]
 800cb30:	2b02      	cmp	r3, #2
 800cb32:	d105      	bne.n	800cb40 <inv_set_motion_state+0x28>
            rh.motion_state_counter++;
 800cb34:	4b10      	ldr	r3, [pc, #64]	; (800cb78 <inv_set_motion_state+0x60>)
 800cb36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cb38:	3301      	adds	r3, #1
 800cb3a:	4a0f      	ldr	r2, [pc, #60]	; (800cb78 <inv_set_motion_state+0x60>)
 800cb3c:	6693      	str	r3, [r2, #104]	; 0x68
        } else {
            rh.motion_state_counter = 0;
        }
        return;
 800cb3e:	e017      	b.n	800cb70 <inv_set_motion_state+0x58>
            rh.motion_state_counter = 0;
 800cb40:	4b0d      	ldr	r3, [pc, #52]	; (800cb78 <inv_set_motion_state+0x60>)
 800cb42:	2200      	movs	r2, #0
 800cb44:	669a      	str	r2, [r3, #104]	; 0x68
        return;
 800cb46:	e013      	b.n	800cb70 <inv_set_motion_state+0x58>
    }
    rh.motion_state_counter = 0;
 800cb48:	4b0b      	ldr	r3, [pc, #44]	; (800cb78 <inv_set_motion_state+0x60>)
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	669a      	str	r2, [r3, #104]	; 0x68
    rh.motion_state = state;
 800cb4e:	4a0a      	ldr	r2, [pc, #40]	; (800cb78 <inv_set_motion_state+0x60>)
 800cb50:	79fb      	ldrb	r3, [r7, #7]
 800cb52:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64
    /* Equivalent to set = state, but #define's may change. */
    if (state == INV_MOTION)
 800cb56:	79fb      	ldrb	r3, [r7, #7]
 800cb58:	2b01      	cmp	r3, #1
 800cb5a:	d102      	bne.n	800cb62 <inv_set_motion_state+0x4a>
        set = INV_MSG_MOTION_EVENT;
 800cb5c:	2301      	movs	r3, #1
 800cb5e:	60fb      	str	r3, [r7, #12]
 800cb60:	e001      	b.n	800cb66 <inv_set_motion_state+0x4e>
    else
        set = INV_MSG_NO_MOTION_EVENT;
 800cb62:	2302      	movs	r3, #2
 800cb64:	60fb      	str	r3, [r7, #12]
    inv_set_message(set, (INV_MSG_MOTION_EVENT | INV_MSG_NO_MOTION_EVENT), 0);
 800cb66:	2200      	movs	r2, #0
 800cb68:	2103      	movs	r1, #3
 800cb6a:	68f8      	ldr	r0, [r7, #12]
 800cb6c:	f7fe ffe4 	bl	800bb38 <inv_set_message>
}
 800cb70:	3710      	adds	r7, #16
 800cb72:	46bd      	mov	sp, r7
 800cb74:	bd80      	pop	{r7, pc}
 800cb76:	bf00      	nop
 800cb78:	200008a4 	.word	0x200008a4

0800cb7c <inv_get_local_field>:
* @param[out] data Local earth's magnetic field in uT scaled by 2^16.
*            Length = 3. Y typically points north, Z typically points down in
*                        northern hemisphere and up in southern hemisphere.
*/
void inv_get_local_field(long *data)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b082      	sub	sp, #8
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
    memcpy(data, rh.local_field, sizeof(rh.local_field));
 800cb84:	220c      	movs	r2, #12
 800cb86:	4904      	ldr	r1, [pc, #16]	; (800cb98 <inv_get_local_field+0x1c>)
 800cb88:	6878      	ldr	r0, [r7, #4]
 800cb8a:	f000 faa9 	bl	800d0e0 <memcpy>
}
 800cb8e:	bf00      	nop
 800cb90:	3708      	adds	r7, #8
 800cb92:	46bd      	mov	sp, r7
 800cb94:	bd80      	pop	{r7, pc}
 800cb96:	bf00      	nop
 800cb98:	200008cc 	.word	0x200008cc

0800cb9c <inv_get_gravity>:
/** Gets gravity vector
 * @param[out] data gravity vector in body frame scaled such that 1.0 = 2^30.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_get_gravity(long *data)
{
 800cb9c:	b590      	push	{r4, r7, lr}
 800cb9e:	b083      	sub	sp, #12
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
    data[0] =
        inv_q29_mult(rh.nav_quat[1], rh.nav_quat[3]) - inv_q29_mult(rh.nav_quat[2], rh.nav_quat[0]);
 800cba4:	4b23      	ldr	r3, [pc, #140]	; (800cc34 <inv_get_gravity+0x98>)
 800cba6:	685b      	ldr	r3, [r3, #4]
 800cba8:	4a22      	ldr	r2, [pc, #136]	; (800cc34 <inv_get_gravity+0x98>)
 800cbaa:	68d2      	ldr	r2, [r2, #12]
 800cbac:	4611      	mov	r1, r2
 800cbae:	4618      	mov	r0, r3
 800cbb0:	f7ff f8ac 	bl	800bd0c <inv_q29_mult>
 800cbb4:	4604      	mov	r4, r0
 800cbb6:	4b1f      	ldr	r3, [pc, #124]	; (800cc34 <inv_get_gravity+0x98>)
 800cbb8:	689b      	ldr	r3, [r3, #8]
 800cbba:	4a1e      	ldr	r2, [pc, #120]	; (800cc34 <inv_get_gravity+0x98>)
 800cbbc:	6812      	ldr	r2, [r2, #0]
 800cbbe:	4611      	mov	r1, r2
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	f7ff f8a3 	bl	800bd0c <inv_q29_mult>
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	1ae2      	subs	r2, r4, r3
    data[0] =
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	601a      	str	r2, [r3, #0]
    data[1] =
        inv_q29_mult(rh.nav_quat[2], rh.nav_quat[3]) + inv_q29_mult(rh.nav_quat[1], rh.nav_quat[0]);
 800cbce:	4b19      	ldr	r3, [pc, #100]	; (800cc34 <inv_get_gravity+0x98>)
 800cbd0:	689b      	ldr	r3, [r3, #8]
 800cbd2:	4a18      	ldr	r2, [pc, #96]	; (800cc34 <inv_get_gravity+0x98>)
 800cbd4:	68d2      	ldr	r2, [r2, #12]
 800cbd6:	4611      	mov	r1, r2
 800cbd8:	4618      	mov	r0, r3
 800cbda:	f7ff f897 	bl	800bd0c <inv_q29_mult>
 800cbde:	4604      	mov	r4, r0
 800cbe0:	4b14      	ldr	r3, [pc, #80]	; (800cc34 <inv_get_gravity+0x98>)
 800cbe2:	685b      	ldr	r3, [r3, #4]
 800cbe4:	4a13      	ldr	r2, [pc, #76]	; (800cc34 <inv_get_gravity+0x98>)
 800cbe6:	6812      	ldr	r2, [r2, #0]
 800cbe8:	4611      	mov	r1, r2
 800cbea:	4618      	mov	r0, r3
 800cbec:	f7ff f88e 	bl	800bd0c <inv_q29_mult>
 800cbf0:	4602      	mov	r2, r0
    data[1] =
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	3304      	adds	r3, #4
        inv_q29_mult(rh.nav_quat[2], rh.nav_quat[3]) + inv_q29_mult(rh.nav_quat[1], rh.nav_quat[0]);
 800cbf6:	4422      	add	r2, r4
    data[1] =
 800cbf8:	601a      	str	r2, [r3, #0]
    data[2] =
        (inv_q29_mult(rh.nav_quat[3], rh.nav_quat[3]) + inv_q29_mult(rh.nav_quat[0], rh.nav_quat[0])) -
 800cbfa:	4b0e      	ldr	r3, [pc, #56]	; (800cc34 <inv_get_gravity+0x98>)
 800cbfc:	68db      	ldr	r3, [r3, #12]
 800cbfe:	4a0d      	ldr	r2, [pc, #52]	; (800cc34 <inv_get_gravity+0x98>)
 800cc00:	68d2      	ldr	r2, [r2, #12]
 800cc02:	4611      	mov	r1, r2
 800cc04:	4618      	mov	r0, r3
 800cc06:	f7ff f881 	bl	800bd0c <inv_q29_mult>
 800cc0a:	4604      	mov	r4, r0
 800cc0c:	4b09      	ldr	r3, [pc, #36]	; (800cc34 <inv_get_gravity+0x98>)
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	4a08      	ldr	r2, [pc, #32]	; (800cc34 <inv_get_gravity+0x98>)
 800cc12:	6812      	ldr	r2, [r2, #0]
 800cc14:	4611      	mov	r1, r2
 800cc16:	4618      	mov	r0, r3
 800cc18:	f7ff f878 	bl	800bd0c <inv_q29_mult>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	18e2      	adds	r2, r4, r3
    data[2] =
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	3308      	adds	r3, #8
        (inv_q29_mult(rh.nav_quat[3], rh.nav_quat[3]) + inv_q29_mult(rh.nav_quat[0], rh.nav_quat[0])) -
 800cc24:	f102 4240 	add.w	r2, r2, #3221225472	; 0xc0000000
    data[2] =
 800cc28:	601a      	str	r2, [r3, #0]
        1073741824L;

    return INV_SUCCESS;
 800cc2a:	2300      	movs	r3, #0
}
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	370c      	adds	r7, #12
 800cc30:	46bd      	mov	sp, r7
 800cc32:	bd90      	pop	{r4, r7, pc}
 800cc34:	200008a4 	.word	0x200008a4

0800cc38 <inv_get_6axis_quaternion>:
/** Returns a quaternion based only on gyro and accel.
 * @param[out] data 6-axis  gyro and accel quaternion scaled such that 1.0 = 2^30.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_get_6axis_quaternion(long *data)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b082      	sub	sp, #8
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
    memcpy(data, rh.gam_quat, sizeof(rh.gam_quat));
 800cc40:	2210      	movs	r2, #16
 800cc42:	4904      	ldr	r1, [pc, #16]	; (800cc54 <inv_get_6axis_quaternion+0x1c>)
 800cc44:	6878      	ldr	r0, [r7, #4]
 800cc46:	f000 fa4b 	bl	800d0e0 <memcpy>
    return INV_SUCCESS;
 800cc4a:	2300      	movs	r3, #0
}
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	3708      	adds	r7, #8
 800cc50:	46bd      	mov	sp, r7
 800cc52:	bd80      	pop	{r7, pc}
 800cc54:	200008b4 	.word	0x200008b4

0800cc58 <inv_get_quaternion>:
/** Returns a quaternion.
 * @param[out] data 9-axis quaternion scaled such that 1.0 = 2^30.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_get_quaternion(long *data)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b082      	sub	sp, #8
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
    if (rh.status & (INV_COMPASS_CORRECTION_SET | INV_6_AXIS_QUAT_SET)) {
 800cc60:	4b0d      	ldr	r3, [pc, #52]	; (800cc98 <inv_get_quaternion+0x40>)
 800cc62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc64:	f003 0303 	and.w	r3, r3, #3
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d00a      	beq.n	800cc82 <inv_get_quaternion+0x2a>
        inv_q_mult(rh.compass_correction, rh.gam_quat, rh.nav_quat);
 800cc6c:	4a0a      	ldr	r2, [pc, #40]	; (800cc98 <inv_get_quaternion+0x40>)
 800cc6e:	490b      	ldr	r1, [pc, #44]	; (800cc9c <inv_get_quaternion+0x44>)
 800cc70:	480b      	ldr	r0, [pc, #44]	; (800cca0 <inv_get_quaternion+0x48>)
 800cc72:	f7ff f8a3 	bl	800bdbc <inv_q_mult>
        rh.status &= ~(INV_COMPASS_CORRECTION_SET | INV_6_AXIS_QUAT_SET);
 800cc76:	4b08      	ldr	r3, [pc, #32]	; (800cc98 <inv_get_quaternion+0x40>)
 800cc78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc7a:	f023 0303 	bic.w	r3, r3, #3
 800cc7e:	4a06      	ldr	r2, [pc, #24]	; (800cc98 <inv_get_quaternion+0x40>)
 800cc80:	67d3      	str	r3, [r2, #124]	; 0x7c
    }
    memcpy(data, rh.nav_quat, sizeof(rh.nav_quat));
 800cc82:	2210      	movs	r2, #16
 800cc84:	4904      	ldr	r1, [pc, #16]	; (800cc98 <inv_get_quaternion+0x40>)
 800cc86:	6878      	ldr	r0, [r7, #4]
 800cc88:	f000 fa2a 	bl	800d0e0 <memcpy>
    return INV_SUCCESS;
 800cc8c:	2300      	movs	r3, #0
}
 800cc8e:	4618      	mov	r0, r3
 800cc90:	3708      	adds	r7, #8
 800cc92:	46bd      	mov	sp, r7
 800cc94:	bd80      	pop	{r7, pc}
 800cc96:	bf00      	nop
 800cc98:	200008a4 	.word	0x200008a4
 800cc9c:	200008b4 	.word	0x200008b4
 800cca0:	200008e4 	.word	0x200008e4

0800cca4 <inv_get_quaternion_set>:
 * @param[out] data 9-axis quaternion scaled such that 1.0 = 2^30.
 * @param[out] accuracy Accuracy of quaternion, 0-3, where 3 is most accurate.
 * @param[out] timestamp Timestamp of this quaternion in nanoseconds
 */
void inv_get_quaternion_set(long *data, int *accuracy, inv_time_t *timestamp)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b084      	sub	sp, #16
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	60f8      	str	r0, [r7, #12]
 800ccac:	60b9      	str	r1, [r7, #8]
 800ccae:	607a      	str	r2, [r7, #4]
    inv_get_quaternion(data);
 800ccb0:	68f8      	ldr	r0, [r7, #12]
 800ccb2:	f7ff ffd1 	bl	800cc58 <inv_get_quaternion>
    *timestamp = inv_get_last_timestamp();
 800ccb6:	f7fe fb05 	bl	800b2c4 <inv_get_last_timestamp>
 800ccba:	4602      	mov	r2, r0
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	601a      	str	r2, [r3, #0]
    if (inv_get_compass_on()) {
 800ccc0:	f7fe fac8 	bl	800b254 <inv_get_compass_on>
 800ccc4:	4603      	mov	r3, r0
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d005      	beq.n	800ccd6 <inv_get_quaternion_set+0x32>
        *accuracy = inv_get_mag_accuracy();
 800ccca:	f7fe fec5 	bl	800ba58 <inv_get_mag_accuracy>
 800ccce:	4602      	mov	r2, r0
 800ccd0:	68bb      	ldr	r3, [r7, #8]
 800ccd2:	601a      	str	r2, [r3, #0]
    }else if (inv_get_accel_on()) {
        *accuracy = inv_get_accel_accuracy();
    } else {
        *accuracy = 0;
    }
}
 800ccd4:	e018      	b.n	800cd08 <inv_get_quaternion_set+0x64>
    } else if (inv_get_gyro_on()) {
 800ccd6:	f7fe fad1 	bl	800b27c <inv_get_gyro_on>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d005      	beq.n	800ccec <inv_get_quaternion_set+0x48>
        *accuracy = inv_get_gyro_accuracy();
 800cce0:	f7fe feae 	bl	800ba40 <inv_get_gyro_accuracy>
 800cce4:	4602      	mov	r2, r0
 800cce6:	68bb      	ldr	r3, [r7, #8]
 800cce8:	601a      	str	r2, [r3, #0]
}
 800ccea:	e00d      	b.n	800cd08 <inv_get_quaternion_set+0x64>
    }else if (inv_get_accel_on()) {
 800ccec:	f7fe fad8 	bl	800b2a0 <inv_get_accel_on>
 800ccf0:	4603      	mov	r3, r0
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d005      	beq.n	800cd02 <inv_get_quaternion_set+0x5e>
        *accuracy = inv_get_accel_accuracy();
 800ccf6:	f7fe fec5 	bl	800ba84 <inv_get_accel_accuracy>
 800ccfa:	4602      	mov	r2, r0
 800ccfc:	68bb      	ldr	r3, [r7, #8]
 800ccfe:	601a      	str	r2, [r3, #0]
}
 800cd00:	e002      	b.n	800cd08 <inv_get_quaternion_set+0x64>
        *accuracy = 0;
 800cd02:	68bb      	ldr	r3, [r7, #8]
 800cd04:	2200      	movs	r2, #0
 800cd06:	601a      	str	r2, [r3, #0]
}
 800cd08:	bf00      	nop
 800cd0a:	3710      	adds	r7, #16
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}

0800cd10 <inv_generate_results>:
 * registered by inv_start_results_holder().
 * @param[in] sensor_cal New sensor data to process.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_generate_results(struct inv_sensor_cal_t *sensor_cal)
{
 800cd10:	b480      	push	{r7}
 800cd12:	b083      	sub	sp, #12
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
    rh.sensor = sensor_cal;
 800cd18:	4a05      	ldr	r2, [pc, #20]	; (800cd30 <inv_generate_results+0x20>)
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    return INV_SUCCESS;
 800cd20:	2300      	movs	r3, #0
}
 800cd22:	4618      	mov	r0, r3
 800cd24:	370c      	adds	r7, #12
 800cd26:	46bd      	mov	sp, r7
 800cd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2c:	4770      	bx	lr
 800cd2e:	bf00      	nop
 800cd30:	200008a4 	.word	0x200008a4

0800cd34 <inv_start_results_holder>:
/** Function to turn on this module. This is automatically called by
 *  inv_enable_results_holder(). Typically not called by users.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_start_results_holder(void)
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	af00      	add	r7, sp, #0
    inv_register_data_cb(inv_generate_results, INV_PRIORITY_RESULTS_HOLDER,
 800cd38:	2207      	movs	r2, #7
 800cd3a:	f44f 7148 	mov.w	r1, #800	; 0x320
 800cd3e:	4803      	ldr	r0, [pc, #12]	; (800cd4c <inv_start_results_holder+0x18>)
 800cd40:	f7fe fc4a 	bl	800b5d8 <inv_register_data_cb>
        INV_GYRO_NEW | INV_ACCEL_NEW | INV_MAG_NEW);
    return INV_SUCCESS;
 800cd44:	2300      	movs	r3, #0
}
 800cd46:	4618      	mov	r0, r3
 800cd48:	bd80      	pop	{r7, pc}
 800cd4a:	bf00      	nop
 800cd4c:	0800cd11 	.word	0x0800cd11

0800cd50 <inv_init_results_holder>:
* enable function inv_enable_results_holder(). It may be called any time the feature is enabled, but
* is typically not needed to be called by outside callers.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_init_results_holder(void)
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	af00      	add	r7, sp, #0
    memset(&rh, 0, sizeof(rh));
 800cd54:	2288      	movs	r2, #136	; 0x88
 800cd56:	2100      	movs	r1, #0
 800cd58:	4810      	ldr	r0, [pc, #64]	; (800cd9c <inv_init_results_holder+0x4c>)
 800cd5a:	f000 f9e9 	bl	800d130 <memset>
    rh.mag_scale[0] = 1L<<30;
 800cd5e:	4b0f      	ldr	r3, [pc, #60]	; (800cd9c <inv_init_results_holder+0x4c>)
 800cd60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800cd64:	635a      	str	r2, [r3, #52]	; 0x34
    rh.mag_scale[1] = 1L<<30;
 800cd66:	4b0d      	ldr	r3, [pc, #52]	; (800cd9c <inv_init_results_holder+0x4c>)
 800cd68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800cd6c:	639a      	str	r2, [r3, #56]	; 0x38
    rh.mag_scale[2] = 1L<<30;
 800cd6e:	4b0b      	ldr	r3, [pc, #44]	; (800cd9c <inv_init_results_holder+0x4c>)
 800cd70:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800cd74:	63da      	str	r2, [r3, #60]	; 0x3c
    rh.compass_correction[0] = 1L<<30;
 800cd76:	4b09      	ldr	r3, [pc, #36]	; (800cd9c <inv_init_results_holder+0x4c>)
 800cd78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800cd7c:	641a      	str	r2, [r3, #64]	; 0x40
    rh.gam_quat[0] = 1L<<30;
 800cd7e:	4b07      	ldr	r3, [pc, #28]	; (800cd9c <inv_init_results_holder+0x4c>)
 800cd80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800cd84:	611a      	str	r2, [r3, #16]
    rh.nav_quat[0] = 1L<<30;
 800cd86:	4b05      	ldr	r3, [pc, #20]	; (800cd9c <inv_init_results_holder+0x4c>)
 800cd88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800cd8c:	601a      	str	r2, [r3, #0]
    rh.quat_confidence_interval = (float)M_PI;
 800cd8e:	4b03      	ldr	r3, [pc, #12]	; (800cd9c <inv_init_results_holder+0x4c>)
 800cd90:	4a03      	ldr	r2, [pc, #12]	; (800cda0 <inv_init_results_holder+0x50>)
 800cd92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return INV_SUCCESS;
 800cd96:	2300      	movs	r3, #0
}
 800cd98:	4618      	mov	r0, r3
 800cd9a:	bd80      	pop	{r7, pc}
 800cd9c:	200008a4 	.word	0x200008a4
 800cda0:	40490fdb 	.word	0x40490fdb

0800cda4 <inv_enable_results_holder>:

/** Turns on storage of results.
*/
inv_error_t inv_enable_results_holder()
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b082      	sub	sp, #8
 800cda8:	af00      	add	r7, sp, #0
    inv_error_t result;
    result = inv_init_results_holder();
 800cdaa:	f7ff ffd1 	bl	800cd50 <inv_init_results_holder>
 800cdae:	6078      	str	r0, [r7, #4]
    if ( result ) {
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d001      	beq.n	800cdba <inv_enable_results_holder+0x16>
        return result;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	e004      	b.n	800cdc4 <inv_enable_results_holder+0x20>
    }

    result = inv_register_mpl_start_notification(inv_start_results_holder);
 800cdba:	4804      	ldr	r0, [pc, #16]	; (800cdcc <inv_enable_results_holder+0x28>)
 800cdbc:	f000 f8a2 	bl	800cf04 <inv_register_mpl_start_notification>
 800cdc0:	6078      	str	r0, [r7, #4]
    return result;
 800cdc2:	687b      	ldr	r3, [r7, #4]
}
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	3708      	adds	r7, #8
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	bd80      	pop	{r7, pc}
 800cdcc:	0800cd35 	.word	0x0800cd35

0800cdd0 <inv_got_compass_bias>:
/** Sets state of if we know the compass bias.
 * @return return 1 if we know the compass bias, 0 if not.
 *            it is set with inv_set_compass_bias_found()
 */
int inv_got_compass_bias()
{
 800cdd0:	b480      	push	{r7}
 800cdd2:	af00      	add	r7, sp, #0
    return rh.got_compass_bias;
 800cdd4:	4b03      	ldr	r3, [pc, #12]	; (800cde4 <inv_got_compass_bias+0x14>)
 800cdd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
 800cdd8:	4618      	mov	r0, r3
 800cdda:	46bd      	mov	sp, r7
 800cddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde0:	4770      	bx	lr
 800cde2:	bf00      	nop
 800cde4:	200008a4 	.word	0x200008a4

0800cde8 <inv_set_compass_bias_found>:
/** Sets whether we know the compass bias
 * @param[in] state Set to 1 if we know the compass bias. 
 *            Can be retrieved with inv_got_compass_bias()
 */
void inv_set_compass_bias_found(int state)
{
 800cde8:	b480      	push	{r7}
 800cdea:	b083      	sub	sp, #12
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
    rh.got_compass_bias = state;
 800cdf0:	4a04      	ldr	r2, [pc, #16]	; (800ce04 <inv_set_compass_bias_found+0x1c>)
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	6713      	str	r3, [r2, #112]	; 0x70
}
 800cdf6:	bf00      	nop
 800cdf8:	370c      	adds	r7, #12
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce00:	4770      	bx	lr
 800ce02:	bf00      	nop
 800ce04:	200008a4 	.word	0x200008a4

0800ce08 <inv_get_linear_accel>:
 *                with gravity removed
 *  @return     INV_SUCCESS if successful
 *              INV_ERROR_INVALID_PARAMETER if invalid input pointer
 */
inv_error_t inv_get_linear_accel(long *data)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b086      	sub	sp, #24
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
    long gravity[3];

    if (data != NULL)
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d024      	beq.n	800ce60 <inv_get_linear_accel+0x58>
    {
        inv_get_accel_set(data, NULL, NULL);
 800ce16:	2200      	movs	r2, #0
 800ce18:	2100      	movs	r1, #0
 800ce1a:	6878      	ldr	r0, [r7, #4]
 800ce1c:	f7fe fdda 	bl	800b9d4 <inv_get_accel_set>
        inv_get_gravity(gravity);
 800ce20:	f107 030c 	add.w	r3, r7, #12
 800ce24:	4618      	mov	r0, r3
 800ce26:	f7ff feb9 	bl	800cb9c <inv_get_gravity>
        data[0] -= gravity[0] >> 14;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681a      	ldr	r2, [r3, #0]
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	139b      	asrs	r3, r3, #14
 800ce32:	1ad2      	subs	r2, r2, r3
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	601a      	str	r2, [r3, #0]
        data[1] -= gravity[1] >> 14;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	3304      	adds	r3, #4
 800ce3c:	6819      	ldr	r1, [r3, #0]
 800ce3e:	693b      	ldr	r3, [r7, #16]
 800ce40:	139a      	asrs	r2, r3, #14
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	3304      	adds	r3, #4
 800ce46:	1a8a      	subs	r2, r1, r2
 800ce48:	601a      	str	r2, [r3, #0]
        data[2] -= gravity[2] >> 14;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	3308      	adds	r3, #8
 800ce4e:	6819      	ldr	r1, [r3, #0]
 800ce50:	697b      	ldr	r3, [r7, #20]
 800ce52:	139a      	asrs	r2, r3, #14
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	3308      	adds	r3, #8
 800ce58:	1a8a      	subs	r2, r1, r2
 800ce5a:	601a      	str	r2, [r3, #0]
        return INV_SUCCESS;
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	e000      	b.n	800ce62 <inv_get_linear_accel+0x5a>
    }
    else {
        return INV_ERROR_INVALID_PARAMETER;
 800ce60:	2316      	movs	r3, #22
    }
}
 800ce62:	4618      	mov	r0, r3
 800ce64:	3718      	adds	r7, #24
 800ce66:	46bd      	mov	sp, r7
 800ce68:	bd80      	pop	{r7, pc}
	...

0800ce6c <inv_init_start_manager>:

/** Initilize the start manager. Typically called by inv_start_mpl();
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_init_start_manager(void)
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	af00      	add	r7, sp, #0
    memset(&inv_start_cb, 0, sizeof(inv_start_cb));
 800ce70:	2254      	movs	r2, #84	; 0x54
 800ce72:	2100      	movs	r1, #0
 800ce74:	4802      	ldr	r0, [pc, #8]	; (800ce80 <inv_init_start_manager+0x14>)
 800ce76:	f000 f95b 	bl	800d130 <memset>
    return INV_SUCCESS;
 800ce7a:	2300      	movs	r3, #0
}
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	bd80      	pop	{r7, pc}
 800ce80:	2000092c 	.word	0x2000092c

0800ce84 <inv_unregister_mpl_start_notification>:
/** Removes a callback from start notification
* @param[in] start_cb function to remove from start notification
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_unregister_mpl_start_notification(inv_error_t (*start_cb)(void))
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b084      	sub	sp, #16
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
    int kk;

    for (kk=0; kk<inv_start_cb.num_cb; ++kk) {
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	60fb      	str	r3, [r7, #12]
 800ce90:	e02b      	b.n	800ceea <inv_unregister_mpl_start_notification+0x66>
        if (inv_start_cb.start_cb[kk] == start_cb) {
 800ce92:	4a1b      	ldr	r2, [pc, #108]	; (800cf00 <inv_unregister_mpl_start_notification+0x7c>)
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	009b      	lsls	r3, r3, #2
 800ce98:	4413      	add	r3, r2
 800ce9a:	685b      	ldr	r3, [r3, #4]
 800ce9c:	687a      	ldr	r2, [r7, #4]
 800ce9e:	429a      	cmp	r2, r3
 800cea0:	d120      	bne.n	800cee4 <inv_unregister_mpl_start_notification+0x60>
            // Found the match
            if (kk != (inv_start_cb.num_cb-1)) {
 800cea2:	4b17      	ldr	r3, [pc, #92]	; (800cf00 <inv_unregister_mpl_start_notification+0x7c>)
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	3b01      	subs	r3, #1
 800cea8:	68fa      	ldr	r2, [r7, #12]
 800ceaa:	429a      	cmp	r2, r3
 800ceac:	d013      	beq.n	800ced6 <inv_unregister_mpl_start_notification+0x52>
                memmove(&inv_start_cb.start_cb[kk],
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	009b      	lsls	r3, r3, #2
 800ceb2:	4a13      	ldr	r2, [pc, #76]	; (800cf00 <inv_unregister_mpl_start_notification+0x7c>)
 800ceb4:	4413      	add	r3, r2
 800ceb6:	1d18      	adds	r0, r3, #4
                    &inv_start_cb.start_cb[kk+1],
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	3301      	adds	r3, #1
 800cebc:	009b      	lsls	r3, r3, #2
 800cebe:	4a10      	ldr	r2, [pc, #64]	; (800cf00 <inv_unregister_mpl_start_notification+0x7c>)
 800cec0:	4413      	add	r3, r2
 800cec2:	1d19      	adds	r1, r3, #4
                    (inv_start_cb.num_cb-kk-1)*sizeof(inv_start_cb_func));
 800cec4:	4b0e      	ldr	r3, [pc, #56]	; (800cf00 <inv_unregister_mpl_start_notification+0x7c>)
 800cec6:	681a      	ldr	r2, [r3, #0]
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	1ad3      	subs	r3, r2, r3
 800cecc:	3b01      	subs	r3, #1
                memmove(&inv_start_cb.start_cb[kk],
 800cece:	009b      	lsls	r3, r3, #2
 800ced0:	461a      	mov	r2, r3
 800ced2:	f000 f913 	bl	800d0fc <memmove>
            }
            inv_start_cb.num_cb--;
 800ced6:	4b0a      	ldr	r3, [pc, #40]	; (800cf00 <inv_unregister_mpl_start_notification+0x7c>)
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	3b01      	subs	r3, #1
 800cedc:	4a08      	ldr	r2, [pc, #32]	; (800cf00 <inv_unregister_mpl_start_notification+0x7c>)
 800cede:	6013      	str	r3, [r2, #0]
            return INV_SUCCESS;
 800cee0:	2300      	movs	r3, #0
 800cee2:	e008      	b.n	800cef6 <inv_unregister_mpl_start_notification+0x72>
    for (kk=0; kk<inv_start_cb.num_cb; ++kk) {
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	3301      	adds	r3, #1
 800cee8:	60fb      	str	r3, [r7, #12]
 800ceea:	4b05      	ldr	r3, [pc, #20]	; (800cf00 <inv_unregister_mpl_start_notification+0x7c>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	68fa      	ldr	r2, [r7, #12]
 800cef0:	429a      	cmp	r2, r3
 800cef2:	dbce      	blt.n	800ce92 <inv_unregister_mpl_start_notification+0xe>
        }
    }
    return INV_ERROR_INVALID_PARAMETER;
 800cef4:	2316      	movs	r3, #22
}
 800cef6:	4618      	mov	r0, r3
 800cef8:	3710      	adds	r7, #16
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd80      	pop	{r7, pc}
 800cefe:	bf00      	nop
 800cf00:	2000092c 	.word	0x2000092c

0800cf04 <inv_register_mpl_start_notification>:
* @param[in] start_cb Function callback that will be called when inv_start_mpl() is
*            called.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_register_mpl_start_notification(inv_error_t (*start_cb)(void))
{
 800cf04:	b480      	push	{r7}
 800cf06:	b083      	sub	sp, #12
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
    if (inv_start_cb.num_cb >= INV_MAX_START_CB)
 800cf0c:	4b0c      	ldr	r3, [pc, #48]	; (800cf40 <inv_register_mpl_start_notification+0x3c>)
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	2b13      	cmp	r3, #19
 800cf12:	dd01      	ble.n	800cf18 <inv_register_mpl_start_notification+0x14>
        return INV_ERROR_INVALID_PARAMETER;
 800cf14:	2316      	movs	r3, #22
 800cf16:	e00c      	b.n	800cf32 <inv_register_mpl_start_notification+0x2e>

    inv_start_cb.start_cb[inv_start_cb.num_cb] = start_cb;
 800cf18:	4b09      	ldr	r3, [pc, #36]	; (800cf40 <inv_register_mpl_start_notification+0x3c>)
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	4a08      	ldr	r2, [pc, #32]	; (800cf40 <inv_register_mpl_start_notification+0x3c>)
 800cf1e:	009b      	lsls	r3, r3, #2
 800cf20:	4413      	add	r3, r2
 800cf22:	687a      	ldr	r2, [r7, #4]
 800cf24:	605a      	str	r2, [r3, #4]
    inv_start_cb.num_cb++;
 800cf26:	4b06      	ldr	r3, [pc, #24]	; (800cf40 <inv_register_mpl_start_notification+0x3c>)
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	3301      	adds	r3, #1
 800cf2c:	4a04      	ldr	r2, [pc, #16]	; (800cf40 <inv_register_mpl_start_notification+0x3c>)
 800cf2e:	6013      	str	r3, [r2, #0]
    return INV_SUCCESS;
 800cf30:	2300      	movs	r3, #0
}
 800cf32:	4618      	mov	r0, r3
 800cf34:	370c      	adds	r7, #12
 800cf36:	46bd      	mov	sp, r7
 800cf38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3c:	4770      	bx	lr
 800cf3e:	bf00      	nop
 800cf40:	2000092c 	.word	0x2000092c

0800cf44 <inv_execute_mpl_start_notification>:
/** Callback all the functions that want to be notified when inv_start_mpl() was
* called.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_execute_mpl_start_notification(void)
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b084      	sub	sp, #16
 800cf48:	af00      	add	r7, sp, #0
    inv_error_t result,first_error;
    int kk;

    first_error = INV_SUCCESS;
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	60fb      	str	r3, [r7, #12]

    for (kk = 0; kk < inv_start_cb.num_cb; ++kk) {
 800cf4e:	2300      	movs	r3, #0
 800cf50:	60bb      	str	r3, [r7, #8]
 800cf52:	e011      	b.n	800cf78 <inv_execute_mpl_start_notification+0x34>
        result = inv_start_cb.start_cb[kk]();
 800cf54:	4a0d      	ldr	r2, [pc, #52]	; (800cf8c <inv_execute_mpl_start_notification+0x48>)
 800cf56:	68bb      	ldr	r3, [r7, #8]
 800cf58:	009b      	lsls	r3, r3, #2
 800cf5a:	4413      	add	r3, r2
 800cf5c:	685b      	ldr	r3, [r3, #4]
 800cf5e:	4798      	blx	r3
 800cf60:	6078      	str	r0, [r7, #4]
        if (result && (first_error == INV_SUCCESS)) {
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d004      	beq.n	800cf72 <inv_execute_mpl_start_notification+0x2e>
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d101      	bne.n	800cf72 <inv_execute_mpl_start_notification+0x2e>
            first_error = result;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	60fb      	str	r3, [r7, #12]
    for (kk = 0; kk < inv_start_cb.num_cb; ++kk) {
 800cf72:	68bb      	ldr	r3, [r7, #8]
 800cf74:	3301      	adds	r3, #1
 800cf76:	60bb      	str	r3, [r7, #8]
 800cf78:	4b04      	ldr	r3, [pc, #16]	; (800cf8c <inv_execute_mpl_start_notification+0x48>)
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	68ba      	ldr	r2, [r7, #8]
 800cf7e:	429a      	cmp	r2, r3
 800cf80:	dbe8      	blt.n	800cf54 <inv_execute_mpl_start_notification+0x10>
        }
    }
    return first_error;
 800cf82:	68fb      	ldr	r3, [r7, #12]
}
 800cf84:	4618      	mov	r0, r3
 800cf86:	3710      	adds	r7, #16
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	bd80      	pop	{r7, pc}
 800cf8c:	2000092c 	.word	0x2000092c

0800cf90 <inv_init_storage_manager>:
static struct data_storage_t ds;

/** Should be called once before using any of the storage methods. Typically
* called first by inv_init_mpl().*/
void inv_init_storage_manager()
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	af00      	add	r7, sp, #0
    memset(&ds, 0, sizeof(ds));
 800cf94:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800cf98:	2100      	movs	r1, #0
 800cf9a:	4804      	ldr	r0, [pc, #16]	; (800cfac <inv_init_storage_manager+0x1c>)
 800cf9c:	f000 f8c8 	bl	800d130 <memset>
    ds.total_size = sizeof(struct data_header_t);
 800cfa0:	4b02      	ldr	r3, [pc, #8]	; (800cfac <inv_init_storage_manager+0x1c>)
 800cfa2:	220c      	movs	r2, #12
 800cfa4:	605a      	str	r2, [r3, #4]
}
 800cfa6:	bf00      	nop
 800cfa8:	bd80      	pop	{r7, pc}
 800cfaa:	bf00      	nop
 800cfac:	20000980 	.word	0x20000980

0800cfb0 <inv_register_load_store>:
*                    The key should change when your type of data for storage changes.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_register_load_store(inv_error_t (*load_func)(const unsigned char *data),
                                    inv_error_t (*save_func)(unsigned char *data), size_t size, unsigned int key)
{
 800cfb0:	b480      	push	{r7}
 800cfb2:	b087      	sub	sp, #28
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	60f8      	str	r0, [r7, #12]
 800cfb8:	60b9      	str	r1, [r7, #8]
 800cfba:	607a      	str	r2, [r7, #4]
 800cfbc:	603b      	str	r3, [r7, #0]
    int kk;
    // Check if this has been registered already
    for (kk=0; kk<ds.num; ++kk) {
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	617b      	str	r3, [r7, #20]
 800cfc2:	e010      	b.n	800cfe6 <inv_register_load_store+0x36>
        if (key == ds.hd[kk].key) {
 800cfc4:	4929      	ldr	r1, [pc, #164]	; (800d06c <inv_register_load_store+0xbc>)
 800cfc6:	697a      	ldr	r2, [r7, #20]
 800cfc8:	4613      	mov	r3, r2
 800cfca:	005b      	lsls	r3, r3, #1
 800cfcc:	4413      	add	r3, r2
 800cfce:	009b      	lsls	r3, r3, #2
 800cfd0:	440b      	add	r3, r1
 800cfd2:	33b0      	adds	r3, #176	; 0xb0
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	683a      	ldr	r2, [r7, #0]
 800cfd8:	429a      	cmp	r2, r3
 800cfda:	d101      	bne.n	800cfe0 <inv_register_load_store+0x30>
            return INV_ERROR_INVALID_PARAMETER;
 800cfdc:	2316      	movs	r3, #22
 800cfde:	e03e      	b.n	800d05e <inv_register_load_store+0xae>
    for (kk=0; kk<ds.num; ++kk) {
 800cfe0:	697b      	ldr	r3, [r7, #20]
 800cfe2:	3301      	adds	r3, #1
 800cfe4:	617b      	str	r3, [r7, #20]
 800cfe6:	4b21      	ldr	r3, [pc, #132]	; (800d06c <inv_register_load_store+0xbc>)
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	697a      	ldr	r2, [r7, #20]
 800cfec:	429a      	cmp	r2, r3
 800cfee:	dbe9      	blt.n	800cfc4 <inv_register_load_store+0x14>
        }
    }
    // Make sure there is room
    if (ds.num >= NUM_STORAGE_BOXES) {
 800cff0:	4b1e      	ldr	r3, [pc, #120]	; (800d06c <inv_register_load_store+0xbc>)
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	2b13      	cmp	r3, #19
 800cff6:	dd01      	ble.n	800cffc <inv_register_load_store+0x4c>
        return INV_ERROR_INVALID_PARAMETER;
 800cff8:	2316      	movs	r3, #22
 800cffa:	e030      	b.n	800d05e <inv_register_load_store+0xae>
    }
    // Add to list
    ds.hd[ds.num].key = key;
 800cffc:	4b1b      	ldr	r3, [pc, #108]	; (800d06c <inv_register_load_store+0xbc>)
 800cffe:	681a      	ldr	r2, [r3, #0]
 800d000:	491a      	ldr	r1, [pc, #104]	; (800d06c <inv_register_load_store+0xbc>)
 800d002:	4613      	mov	r3, r2
 800d004:	005b      	lsls	r3, r3, #1
 800d006:	4413      	add	r3, r2
 800d008:	009b      	lsls	r3, r3, #2
 800d00a:	440b      	add	r3, r1
 800d00c:	33b0      	adds	r3, #176	; 0xb0
 800d00e:	683a      	ldr	r2, [r7, #0]
 800d010:	601a      	str	r2, [r3, #0]
    ds.hd[ds.num].size = size;
 800d012:	4b16      	ldr	r3, [pc, #88]	; (800d06c <inv_register_load_store+0xbc>)
 800d014:	681a      	ldr	r2, [r3, #0]
 800d016:	6879      	ldr	r1, [r7, #4]
 800d018:	4814      	ldr	r0, [pc, #80]	; (800d06c <inv_register_load_store+0xbc>)
 800d01a:	4613      	mov	r3, r2
 800d01c:	005b      	lsls	r3, r3, #1
 800d01e:	4413      	add	r3, r2
 800d020:	009b      	lsls	r3, r3, #2
 800d022:	4403      	add	r3, r0
 800d024:	33a8      	adds	r3, #168	; 0xa8
 800d026:	6019      	str	r1, [r3, #0]
    ds.load[ds.num] = load_func;
 800d028:	4b10      	ldr	r3, [pc, #64]	; (800d06c <inv_register_load_store+0xbc>)
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	490f      	ldr	r1, [pc, #60]	; (800d06c <inv_register_load_store+0xbc>)
 800d02e:	3302      	adds	r3, #2
 800d030:	68fa      	ldr	r2, [r7, #12]
 800d032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ds.save[ds.num] = save_func;
 800d036:	4b0d      	ldr	r3, [pc, #52]	; (800d06c <inv_register_load_store+0xbc>)
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	490c      	ldr	r1, [pc, #48]	; (800d06c <inv_register_load_store+0xbc>)
 800d03c:	3316      	adds	r3, #22
 800d03e:	68ba      	ldr	r2, [r7, #8]
 800d040:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ds.total_size += size + sizeof(struct data_header_t);
 800d044:	4b09      	ldr	r3, [pc, #36]	; (800d06c <inv_register_load_store+0xbc>)
 800d046:	685a      	ldr	r2, [r3, #4]
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	4413      	add	r3, r2
 800d04c:	330c      	adds	r3, #12
 800d04e:	4a07      	ldr	r2, [pc, #28]	; (800d06c <inv_register_load_store+0xbc>)
 800d050:	6053      	str	r3, [r2, #4]
    ds.num++;
 800d052:	4b06      	ldr	r3, [pc, #24]	; (800d06c <inv_register_load_store+0xbc>)
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	3301      	adds	r3, #1
 800d058:	4a04      	ldr	r2, [pc, #16]	; (800d06c <inv_register_load_store+0xbc>)
 800d05a:	6013      	str	r3, [r2, #0]

    return INV_SUCCESS;
 800d05c:	2300      	movs	r3, #0
}
 800d05e:	4618      	mov	r0, r3
 800d060:	371c      	adds	r7, #28
 800d062:	46bd      	mov	sp, r7
 800d064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d068:	4770      	bx	lr
 800d06a:	bf00      	nop
 800d06c:	20000980 	.word	0x20000980

0800d070 <__errno>:
 800d070:	4b01      	ldr	r3, [pc, #4]	; (800d078 <__errno+0x8>)
 800d072:	6818      	ldr	r0, [r3, #0]
 800d074:	4770      	bx	lr
 800d076:	bf00      	nop
 800d078:	20000048 	.word	0x20000048

0800d07c <__libc_init_array>:
 800d07c:	b570      	push	{r4, r5, r6, lr}
 800d07e:	4d0d      	ldr	r5, [pc, #52]	; (800d0b4 <__libc_init_array+0x38>)
 800d080:	4c0d      	ldr	r4, [pc, #52]	; (800d0b8 <__libc_init_array+0x3c>)
 800d082:	1b64      	subs	r4, r4, r5
 800d084:	10a4      	asrs	r4, r4, #2
 800d086:	2600      	movs	r6, #0
 800d088:	42a6      	cmp	r6, r4
 800d08a:	d109      	bne.n	800d0a0 <__libc_init_array+0x24>
 800d08c:	4d0b      	ldr	r5, [pc, #44]	; (800d0bc <__libc_init_array+0x40>)
 800d08e:	4c0c      	ldr	r4, [pc, #48]	; (800d0c0 <__libc_init_array+0x44>)
 800d090:	f005 fbb6 	bl	8012800 <_init>
 800d094:	1b64      	subs	r4, r4, r5
 800d096:	10a4      	asrs	r4, r4, #2
 800d098:	2600      	movs	r6, #0
 800d09a:	42a6      	cmp	r6, r4
 800d09c:	d105      	bne.n	800d0aa <__libc_init_array+0x2e>
 800d09e:	bd70      	pop	{r4, r5, r6, pc}
 800d0a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0a4:	4798      	blx	r3
 800d0a6:	3601      	adds	r6, #1
 800d0a8:	e7ee      	b.n	800d088 <__libc_init_array+0xc>
 800d0aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0ae:	4798      	blx	r3
 800d0b0:	3601      	adds	r6, #1
 800d0b2:	e7f2      	b.n	800d09a <__libc_init_array+0x1e>
 800d0b4:	08014000 	.word	0x08014000
 800d0b8:	08014000 	.word	0x08014000
 800d0bc:	08014000 	.word	0x08014000
 800d0c0:	08014004 	.word	0x08014004

0800d0c4 <memcmp>:
 800d0c4:	b530      	push	{r4, r5, lr}
 800d0c6:	3901      	subs	r1, #1
 800d0c8:	2400      	movs	r4, #0
 800d0ca:	42a2      	cmp	r2, r4
 800d0cc:	d101      	bne.n	800d0d2 <memcmp+0xe>
 800d0ce:	2000      	movs	r0, #0
 800d0d0:	e005      	b.n	800d0de <memcmp+0x1a>
 800d0d2:	5d03      	ldrb	r3, [r0, r4]
 800d0d4:	3401      	adds	r4, #1
 800d0d6:	5d0d      	ldrb	r5, [r1, r4]
 800d0d8:	42ab      	cmp	r3, r5
 800d0da:	d0f6      	beq.n	800d0ca <memcmp+0x6>
 800d0dc:	1b58      	subs	r0, r3, r5
 800d0de:	bd30      	pop	{r4, r5, pc}

0800d0e0 <memcpy>:
 800d0e0:	440a      	add	r2, r1
 800d0e2:	4291      	cmp	r1, r2
 800d0e4:	f100 33ff 	add.w	r3, r0, #4294967295
 800d0e8:	d100      	bne.n	800d0ec <memcpy+0xc>
 800d0ea:	4770      	bx	lr
 800d0ec:	b510      	push	{r4, lr}
 800d0ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d0f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d0f6:	4291      	cmp	r1, r2
 800d0f8:	d1f9      	bne.n	800d0ee <memcpy+0xe>
 800d0fa:	bd10      	pop	{r4, pc}

0800d0fc <memmove>:
 800d0fc:	4288      	cmp	r0, r1
 800d0fe:	b510      	push	{r4, lr}
 800d100:	eb01 0402 	add.w	r4, r1, r2
 800d104:	d902      	bls.n	800d10c <memmove+0x10>
 800d106:	4284      	cmp	r4, r0
 800d108:	4623      	mov	r3, r4
 800d10a:	d807      	bhi.n	800d11c <memmove+0x20>
 800d10c:	1e43      	subs	r3, r0, #1
 800d10e:	42a1      	cmp	r1, r4
 800d110:	d008      	beq.n	800d124 <memmove+0x28>
 800d112:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d116:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d11a:	e7f8      	b.n	800d10e <memmove+0x12>
 800d11c:	4402      	add	r2, r0
 800d11e:	4601      	mov	r1, r0
 800d120:	428a      	cmp	r2, r1
 800d122:	d100      	bne.n	800d126 <memmove+0x2a>
 800d124:	bd10      	pop	{r4, pc}
 800d126:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d12a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d12e:	e7f7      	b.n	800d120 <memmove+0x24>

0800d130 <memset>:
 800d130:	4402      	add	r2, r0
 800d132:	4603      	mov	r3, r0
 800d134:	4293      	cmp	r3, r2
 800d136:	d100      	bne.n	800d13a <memset+0xa>
 800d138:	4770      	bx	lr
 800d13a:	f803 1b01 	strb.w	r1, [r3], #1
 800d13e:	e7f9      	b.n	800d134 <memset+0x4>

0800d140 <__cvt>:
 800d140:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d144:	ec55 4b10 	vmov	r4, r5, d0
 800d148:	2d00      	cmp	r5, #0
 800d14a:	460e      	mov	r6, r1
 800d14c:	4619      	mov	r1, r3
 800d14e:	462b      	mov	r3, r5
 800d150:	bfbb      	ittet	lt
 800d152:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d156:	461d      	movlt	r5, r3
 800d158:	2300      	movge	r3, #0
 800d15a:	232d      	movlt	r3, #45	; 0x2d
 800d15c:	700b      	strb	r3, [r1, #0]
 800d15e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d160:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d164:	4691      	mov	r9, r2
 800d166:	f023 0820 	bic.w	r8, r3, #32
 800d16a:	bfbc      	itt	lt
 800d16c:	4622      	movlt	r2, r4
 800d16e:	4614      	movlt	r4, r2
 800d170:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d174:	d005      	beq.n	800d182 <__cvt+0x42>
 800d176:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d17a:	d100      	bne.n	800d17e <__cvt+0x3e>
 800d17c:	3601      	adds	r6, #1
 800d17e:	2102      	movs	r1, #2
 800d180:	e000      	b.n	800d184 <__cvt+0x44>
 800d182:	2103      	movs	r1, #3
 800d184:	ab03      	add	r3, sp, #12
 800d186:	9301      	str	r3, [sp, #4]
 800d188:	ab02      	add	r3, sp, #8
 800d18a:	9300      	str	r3, [sp, #0]
 800d18c:	ec45 4b10 	vmov	d0, r4, r5
 800d190:	4653      	mov	r3, sl
 800d192:	4632      	mov	r2, r6
 800d194:	f000 fcec 	bl	800db70 <_dtoa_r>
 800d198:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d19c:	4607      	mov	r7, r0
 800d19e:	d102      	bne.n	800d1a6 <__cvt+0x66>
 800d1a0:	f019 0f01 	tst.w	r9, #1
 800d1a4:	d022      	beq.n	800d1ec <__cvt+0xac>
 800d1a6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d1aa:	eb07 0906 	add.w	r9, r7, r6
 800d1ae:	d110      	bne.n	800d1d2 <__cvt+0x92>
 800d1b0:	783b      	ldrb	r3, [r7, #0]
 800d1b2:	2b30      	cmp	r3, #48	; 0x30
 800d1b4:	d10a      	bne.n	800d1cc <__cvt+0x8c>
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	4620      	mov	r0, r4
 800d1bc:	4629      	mov	r1, r5
 800d1be:	f7f6 fa53 	bl	8003668 <__aeabi_dcmpeq>
 800d1c2:	b918      	cbnz	r0, 800d1cc <__cvt+0x8c>
 800d1c4:	f1c6 0601 	rsb	r6, r6, #1
 800d1c8:	f8ca 6000 	str.w	r6, [sl]
 800d1cc:	f8da 3000 	ldr.w	r3, [sl]
 800d1d0:	4499      	add	r9, r3
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	4620      	mov	r0, r4
 800d1d8:	4629      	mov	r1, r5
 800d1da:	f7f6 fa45 	bl	8003668 <__aeabi_dcmpeq>
 800d1de:	b108      	cbz	r0, 800d1e4 <__cvt+0xa4>
 800d1e0:	f8cd 900c 	str.w	r9, [sp, #12]
 800d1e4:	2230      	movs	r2, #48	; 0x30
 800d1e6:	9b03      	ldr	r3, [sp, #12]
 800d1e8:	454b      	cmp	r3, r9
 800d1ea:	d307      	bcc.n	800d1fc <__cvt+0xbc>
 800d1ec:	9b03      	ldr	r3, [sp, #12]
 800d1ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d1f0:	1bdb      	subs	r3, r3, r7
 800d1f2:	4638      	mov	r0, r7
 800d1f4:	6013      	str	r3, [r2, #0]
 800d1f6:	b004      	add	sp, #16
 800d1f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1fc:	1c59      	adds	r1, r3, #1
 800d1fe:	9103      	str	r1, [sp, #12]
 800d200:	701a      	strb	r2, [r3, #0]
 800d202:	e7f0      	b.n	800d1e6 <__cvt+0xa6>

0800d204 <__exponent>:
 800d204:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d206:	4603      	mov	r3, r0
 800d208:	2900      	cmp	r1, #0
 800d20a:	bfb8      	it	lt
 800d20c:	4249      	neglt	r1, r1
 800d20e:	f803 2b02 	strb.w	r2, [r3], #2
 800d212:	bfb4      	ite	lt
 800d214:	222d      	movlt	r2, #45	; 0x2d
 800d216:	222b      	movge	r2, #43	; 0x2b
 800d218:	2909      	cmp	r1, #9
 800d21a:	7042      	strb	r2, [r0, #1]
 800d21c:	dd2a      	ble.n	800d274 <__exponent+0x70>
 800d21e:	f10d 0407 	add.w	r4, sp, #7
 800d222:	46a4      	mov	ip, r4
 800d224:	270a      	movs	r7, #10
 800d226:	46a6      	mov	lr, r4
 800d228:	460a      	mov	r2, r1
 800d22a:	fb91 f6f7 	sdiv	r6, r1, r7
 800d22e:	fb07 1516 	mls	r5, r7, r6, r1
 800d232:	3530      	adds	r5, #48	; 0x30
 800d234:	2a63      	cmp	r2, #99	; 0x63
 800d236:	f104 34ff 	add.w	r4, r4, #4294967295
 800d23a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d23e:	4631      	mov	r1, r6
 800d240:	dcf1      	bgt.n	800d226 <__exponent+0x22>
 800d242:	3130      	adds	r1, #48	; 0x30
 800d244:	f1ae 0502 	sub.w	r5, lr, #2
 800d248:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d24c:	1c44      	adds	r4, r0, #1
 800d24e:	4629      	mov	r1, r5
 800d250:	4561      	cmp	r1, ip
 800d252:	d30a      	bcc.n	800d26a <__exponent+0x66>
 800d254:	f10d 0209 	add.w	r2, sp, #9
 800d258:	eba2 020e 	sub.w	r2, r2, lr
 800d25c:	4565      	cmp	r5, ip
 800d25e:	bf88      	it	hi
 800d260:	2200      	movhi	r2, #0
 800d262:	4413      	add	r3, r2
 800d264:	1a18      	subs	r0, r3, r0
 800d266:	b003      	add	sp, #12
 800d268:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d26a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d26e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d272:	e7ed      	b.n	800d250 <__exponent+0x4c>
 800d274:	2330      	movs	r3, #48	; 0x30
 800d276:	3130      	adds	r1, #48	; 0x30
 800d278:	7083      	strb	r3, [r0, #2]
 800d27a:	70c1      	strb	r1, [r0, #3]
 800d27c:	1d03      	adds	r3, r0, #4
 800d27e:	e7f1      	b.n	800d264 <__exponent+0x60>

0800d280 <_printf_float>:
 800d280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d284:	ed2d 8b02 	vpush	{d8}
 800d288:	b08d      	sub	sp, #52	; 0x34
 800d28a:	460c      	mov	r4, r1
 800d28c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d290:	4616      	mov	r6, r2
 800d292:	461f      	mov	r7, r3
 800d294:	4605      	mov	r5, r0
 800d296:	f001 fa57 	bl	800e748 <_localeconv_r>
 800d29a:	f8d0 a000 	ldr.w	sl, [r0]
 800d29e:	4650      	mov	r0, sl
 800d2a0:	f7f5 fd62 	bl	8002d68 <strlen>
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	930a      	str	r3, [sp, #40]	; 0x28
 800d2a8:	6823      	ldr	r3, [r4, #0]
 800d2aa:	9305      	str	r3, [sp, #20]
 800d2ac:	f8d8 3000 	ldr.w	r3, [r8]
 800d2b0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d2b4:	3307      	adds	r3, #7
 800d2b6:	f023 0307 	bic.w	r3, r3, #7
 800d2ba:	f103 0208 	add.w	r2, r3, #8
 800d2be:	f8c8 2000 	str.w	r2, [r8]
 800d2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2c6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d2ca:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d2ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d2d2:	9307      	str	r3, [sp, #28]
 800d2d4:	f8cd 8018 	str.w	r8, [sp, #24]
 800d2d8:	ee08 0a10 	vmov	s16, r0
 800d2dc:	4b9f      	ldr	r3, [pc, #636]	; (800d55c <_printf_float+0x2dc>)
 800d2de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d2e2:	f04f 32ff 	mov.w	r2, #4294967295
 800d2e6:	f7f6 f9f1 	bl	80036cc <__aeabi_dcmpun>
 800d2ea:	bb88      	cbnz	r0, 800d350 <_printf_float+0xd0>
 800d2ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d2f0:	4b9a      	ldr	r3, [pc, #616]	; (800d55c <_printf_float+0x2dc>)
 800d2f2:	f04f 32ff 	mov.w	r2, #4294967295
 800d2f6:	f7f6 f9cb 	bl	8003690 <__aeabi_dcmple>
 800d2fa:	bb48      	cbnz	r0, 800d350 <_printf_float+0xd0>
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	2300      	movs	r3, #0
 800d300:	4640      	mov	r0, r8
 800d302:	4649      	mov	r1, r9
 800d304:	f7f6 f9ba 	bl	800367c <__aeabi_dcmplt>
 800d308:	b110      	cbz	r0, 800d310 <_printf_float+0x90>
 800d30a:	232d      	movs	r3, #45	; 0x2d
 800d30c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d310:	4b93      	ldr	r3, [pc, #588]	; (800d560 <_printf_float+0x2e0>)
 800d312:	4894      	ldr	r0, [pc, #592]	; (800d564 <_printf_float+0x2e4>)
 800d314:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d318:	bf94      	ite	ls
 800d31a:	4698      	movls	r8, r3
 800d31c:	4680      	movhi	r8, r0
 800d31e:	2303      	movs	r3, #3
 800d320:	6123      	str	r3, [r4, #16]
 800d322:	9b05      	ldr	r3, [sp, #20]
 800d324:	f023 0204 	bic.w	r2, r3, #4
 800d328:	6022      	str	r2, [r4, #0]
 800d32a:	f04f 0900 	mov.w	r9, #0
 800d32e:	9700      	str	r7, [sp, #0]
 800d330:	4633      	mov	r3, r6
 800d332:	aa0b      	add	r2, sp, #44	; 0x2c
 800d334:	4621      	mov	r1, r4
 800d336:	4628      	mov	r0, r5
 800d338:	f000 f9d8 	bl	800d6ec <_printf_common>
 800d33c:	3001      	adds	r0, #1
 800d33e:	f040 8090 	bne.w	800d462 <_printf_float+0x1e2>
 800d342:	f04f 30ff 	mov.w	r0, #4294967295
 800d346:	b00d      	add	sp, #52	; 0x34
 800d348:	ecbd 8b02 	vpop	{d8}
 800d34c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d350:	4642      	mov	r2, r8
 800d352:	464b      	mov	r3, r9
 800d354:	4640      	mov	r0, r8
 800d356:	4649      	mov	r1, r9
 800d358:	f7f6 f9b8 	bl	80036cc <__aeabi_dcmpun>
 800d35c:	b140      	cbz	r0, 800d370 <_printf_float+0xf0>
 800d35e:	464b      	mov	r3, r9
 800d360:	2b00      	cmp	r3, #0
 800d362:	bfbc      	itt	lt
 800d364:	232d      	movlt	r3, #45	; 0x2d
 800d366:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d36a:	487f      	ldr	r0, [pc, #508]	; (800d568 <_printf_float+0x2e8>)
 800d36c:	4b7f      	ldr	r3, [pc, #508]	; (800d56c <_printf_float+0x2ec>)
 800d36e:	e7d1      	b.n	800d314 <_printf_float+0x94>
 800d370:	6863      	ldr	r3, [r4, #4]
 800d372:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d376:	9206      	str	r2, [sp, #24]
 800d378:	1c5a      	adds	r2, r3, #1
 800d37a:	d13f      	bne.n	800d3fc <_printf_float+0x17c>
 800d37c:	2306      	movs	r3, #6
 800d37e:	6063      	str	r3, [r4, #4]
 800d380:	9b05      	ldr	r3, [sp, #20]
 800d382:	6861      	ldr	r1, [r4, #4]
 800d384:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d388:	2300      	movs	r3, #0
 800d38a:	9303      	str	r3, [sp, #12]
 800d38c:	ab0a      	add	r3, sp, #40	; 0x28
 800d38e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d392:	ab09      	add	r3, sp, #36	; 0x24
 800d394:	ec49 8b10 	vmov	d0, r8, r9
 800d398:	9300      	str	r3, [sp, #0]
 800d39a:	6022      	str	r2, [r4, #0]
 800d39c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d3a0:	4628      	mov	r0, r5
 800d3a2:	f7ff fecd 	bl	800d140 <__cvt>
 800d3a6:	9b06      	ldr	r3, [sp, #24]
 800d3a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d3aa:	2b47      	cmp	r3, #71	; 0x47
 800d3ac:	4680      	mov	r8, r0
 800d3ae:	d108      	bne.n	800d3c2 <_printf_float+0x142>
 800d3b0:	1cc8      	adds	r0, r1, #3
 800d3b2:	db02      	blt.n	800d3ba <_printf_float+0x13a>
 800d3b4:	6863      	ldr	r3, [r4, #4]
 800d3b6:	4299      	cmp	r1, r3
 800d3b8:	dd41      	ble.n	800d43e <_printf_float+0x1be>
 800d3ba:	f1ab 0b02 	sub.w	fp, fp, #2
 800d3be:	fa5f fb8b 	uxtb.w	fp, fp
 800d3c2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d3c6:	d820      	bhi.n	800d40a <_printf_float+0x18a>
 800d3c8:	3901      	subs	r1, #1
 800d3ca:	465a      	mov	r2, fp
 800d3cc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d3d0:	9109      	str	r1, [sp, #36]	; 0x24
 800d3d2:	f7ff ff17 	bl	800d204 <__exponent>
 800d3d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d3d8:	1813      	adds	r3, r2, r0
 800d3da:	2a01      	cmp	r2, #1
 800d3dc:	4681      	mov	r9, r0
 800d3de:	6123      	str	r3, [r4, #16]
 800d3e0:	dc02      	bgt.n	800d3e8 <_printf_float+0x168>
 800d3e2:	6822      	ldr	r2, [r4, #0]
 800d3e4:	07d2      	lsls	r2, r2, #31
 800d3e6:	d501      	bpl.n	800d3ec <_printf_float+0x16c>
 800d3e8:	3301      	adds	r3, #1
 800d3ea:	6123      	str	r3, [r4, #16]
 800d3ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d09c      	beq.n	800d32e <_printf_float+0xae>
 800d3f4:	232d      	movs	r3, #45	; 0x2d
 800d3f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d3fa:	e798      	b.n	800d32e <_printf_float+0xae>
 800d3fc:	9a06      	ldr	r2, [sp, #24]
 800d3fe:	2a47      	cmp	r2, #71	; 0x47
 800d400:	d1be      	bne.n	800d380 <_printf_float+0x100>
 800d402:	2b00      	cmp	r3, #0
 800d404:	d1bc      	bne.n	800d380 <_printf_float+0x100>
 800d406:	2301      	movs	r3, #1
 800d408:	e7b9      	b.n	800d37e <_printf_float+0xfe>
 800d40a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d40e:	d118      	bne.n	800d442 <_printf_float+0x1c2>
 800d410:	2900      	cmp	r1, #0
 800d412:	6863      	ldr	r3, [r4, #4]
 800d414:	dd0b      	ble.n	800d42e <_printf_float+0x1ae>
 800d416:	6121      	str	r1, [r4, #16]
 800d418:	b913      	cbnz	r3, 800d420 <_printf_float+0x1a0>
 800d41a:	6822      	ldr	r2, [r4, #0]
 800d41c:	07d0      	lsls	r0, r2, #31
 800d41e:	d502      	bpl.n	800d426 <_printf_float+0x1a6>
 800d420:	3301      	adds	r3, #1
 800d422:	440b      	add	r3, r1
 800d424:	6123      	str	r3, [r4, #16]
 800d426:	65a1      	str	r1, [r4, #88]	; 0x58
 800d428:	f04f 0900 	mov.w	r9, #0
 800d42c:	e7de      	b.n	800d3ec <_printf_float+0x16c>
 800d42e:	b913      	cbnz	r3, 800d436 <_printf_float+0x1b6>
 800d430:	6822      	ldr	r2, [r4, #0]
 800d432:	07d2      	lsls	r2, r2, #31
 800d434:	d501      	bpl.n	800d43a <_printf_float+0x1ba>
 800d436:	3302      	adds	r3, #2
 800d438:	e7f4      	b.n	800d424 <_printf_float+0x1a4>
 800d43a:	2301      	movs	r3, #1
 800d43c:	e7f2      	b.n	800d424 <_printf_float+0x1a4>
 800d43e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d442:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d444:	4299      	cmp	r1, r3
 800d446:	db05      	blt.n	800d454 <_printf_float+0x1d4>
 800d448:	6823      	ldr	r3, [r4, #0]
 800d44a:	6121      	str	r1, [r4, #16]
 800d44c:	07d8      	lsls	r0, r3, #31
 800d44e:	d5ea      	bpl.n	800d426 <_printf_float+0x1a6>
 800d450:	1c4b      	adds	r3, r1, #1
 800d452:	e7e7      	b.n	800d424 <_printf_float+0x1a4>
 800d454:	2900      	cmp	r1, #0
 800d456:	bfd4      	ite	le
 800d458:	f1c1 0202 	rsble	r2, r1, #2
 800d45c:	2201      	movgt	r2, #1
 800d45e:	4413      	add	r3, r2
 800d460:	e7e0      	b.n	800d424 <_printf_float+0x1a4>
 800d462:	6823      	ldr	r3, [r4, #0]
 800d464:	055a      	lsls	r2, r3, #21
 800d466:	d407      	bmi.n	800d478 <_printf_float+0x1f8>
 800d468:	6923      	ldr	r3, [r4, #16]
 800d46a:	4642      	mov	r2, r8
 800d46c:	4631      	mov	r1, r6
 800d46e:	4628      	mov	r0, r5
 800d470:	47b8      	blx	r7
 800d472:	3001      	adds	r0, #1
 800d474:	d12c      	bne.n	800d4d0 <_printf_float+0x250>
 800d476:	e764      	b.n	800d342 <_printf_float+0xc2>
 800d478:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d47c:	f240 80e0 	bls.w	800d640 <_printf_float+0x3c0>
 800d480:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d484:	2200      	movs	r2, #0
 800d486:	2300      	movs	r3, #0
 800d488:	f7f6 f8ee 	bl	8003668 <__aeabi_dcmpeq>
 800d48c:	2800      	cmp	r0, #0
 800d48e:	d034      	beq.n	800d4fa <_printf_float+0x27a>
 800d490:	4a37      	ldr	r2, [pc, #220]	; (800d570 <_printf_float+0x2f0>)
 800d492:	2301      	movs	r3, #1
 800d494:	4631      	mov	r1, r6
 800d496:	4628      	mov	r0, r5
 800d498:	47b8      	blx	r7
 800d49a:	3001      	adds	r0, #1
 800d49c:	f43f af51 	beq.w	800d342 <_printf_float+0xc2>
 800d4a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d4a4:	429a      	cmp	r2, r3
 800d4a6:	db02      	blt.n	800d4ae <_printf_float+0x22e>
 800d4a8:	6823      	ldr	r3, [r4, #0]
 800d4aa:	07d8      	lsls	r0, r3, #31
 800d4ac:	d510      	bpl.n	800d4d0 <_printf_float+0x250>
 800d4ae:	ee18 3a10 	vmov	r3, s16
 800d4b2:	4652      	mov	r2, sl
 800d4b4:	4631      	mov	r1, r6
 800d4b6:	4628      	mov	r0, r5
 800d4b8:	47b8      	blx	r7
 800d4ba:	3001      	adds	r0, #1
 800d4bc:	f43f af41 	beq.w	800d342 <_printf_float+0xc2>
 800d4c0:	f04f 0800 	mov.w	r8, #0
 800d4c4:	f104 091a 	add.w	r9, r4, #26
 800d4c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4ca:	3b01      	subs	r3, #1
 800d4cc:	4543      	cmp	r3, r8
 800d4ce:	dc09      	bgt.n	800d4e4 <_printf_float+0x264>
 800d4d0:	6823      	ldr	r3, [r4, #0]
 800d4d2:	079b      	lsls	r3, r3, #30
 800d4d4:	f100 8105 	bmi.w	800d6e2 <_printf_float+0x462>
 800d4d8:	68e0      	ldr	r0, [r4, #12]
 800d4da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d4dc:	4298      	cmp	r0, r3
 800d4de:	bfb8      	it	lt
 800d4e0:	4618      	movlt	r0, r3
 800d4e2:	e730      	b.n	800d346 <_printf_float+0xc6>
 800d4e4:	2301      	movs	r3, #1
 800d4e6:	464a      	mov	r2, r9
 800d4e8:	4631      	mov	r1, r6
 800d4ea:	4628      	mov	r0, r5
 800d4ec:	47b8      	blx	r7
 800d4ee:	3001      	adds	r0, #1
 800d4f0:	f43f af27 	beq.w	800d342 <_printf_float+0xc2>
 800d4f4:	f108 0801 	add.w	r8, r8, #1
 800d4f8:	e7e6      	b.n	800d4c8 <_printf_float+0x248>
 800d4fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	dc39      	bgt.n	800d574 <_printf_float+0x2f4>
 800d500:	4a1b      	ldr	r2, [pc, #108]	; (800d570 <_printf_float+0x2f0>)
 800d502:	2301      	movs	r3, #1
 800d504:	4631      	mov	r1, r6
 800d506:	4628      	mov	r0, r5
 800d508:	47b8      	blx	r7
 800d50a:	3001      	adds	r0, #1
 800d50c:	f43f af19 	beq.w	800d342 <_printf_float+0xc2>
 800d510:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d514:	4313      	orrs	r3, r2
 800d516:	d102      	bne.n	800d51e <_printf_float+0x29e>
 800d518:	6823      	ldr	r3, [r4, #0]
 800d51a:	07d9      	lsls	r1, r3, #31
 800d51c:	d5d8      	bpl.n	800d4d0 <_printf_float+0x250>
 800d51e:	ee18 3a10 	vmov	r3, s16
 800d522:	4652      	mov	r2, sl
 800d524:	4631      	mov	r1, r6
 800d526:	4628      	mov	r0, r5
 800d528:	47b8      	blx	r7
 800d52a:	3001      	adds	r0, #1
 800d52c:	f43f af09 	beq.w	800d342 <_printf_float+0xc2>
 800d530:	f04f 0900 	mov.w	r9, #0
 800d534:	f104 0a1a 	add.w	sl, r4, #26
 800d538:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d53a:	425b      	negs	r3, r3
 800d53c:	454b      	cmp	r3, r9
 800d53e:	dc01      	bgt.n	800d544 <_printf_float+0x2c4>
 800d540:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d542:	e792      	b.n	800d46a <_printf_float+0x1ea>
 800d544:	2301      	movs	r3, #1
 800d546:	4652      	mov	r2, sl
 800d548:	4631      	mov	r1, r6
 800d54a:	4628      	mov	r0, r5
 800d54c:	47b8      	blx	r7
 800d54e:	3001      	adds	r0, #1
 800d550:	f43f aef7 	beq.w	800d342 <_printf_float+0xc2>
 800d554:	f109 0901 	add.w	r9, r9, #1
 800d558:	e7ee      	b.n	800d538 <_printf_float+0x2b8>
 800d55a:	bf00      	nop
 800d55c:	7fefffff 	.word	0x7fefffff
 800d560:	0801375c 	.word	0x0801375c
 800d564:	08013760 	.word	0x08013760
 800d568:	08013768 	.word	0x08013768
 800d56c:	08013764 	.word	0x08013764
 800d570:	0801376c 	.word	0x0801376c
 800d574:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d576:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d578:	429a      	cmp	r2, r3
 800d57a:	bfa8      	it	ge
 800d57c:	461a      	movge	r2, r3
 800d57e:	2a00      	cmp	r2, #0
 800d580:	4691      	mov	r9, r2
 800d582:	dc37      	bgt.n	800d5f4 <_printf_float+0x374>
 800d584:	f04f 0b00 	mov.w	fp, #0
 800d588:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d58c:	f104 021a 	add.w	r2, r4, #26
 800d590:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d592:	9305      	str	r3, [sp, #20]
 800d594:	eba3 0309 	sub.w	r3, r3, r9
 800d598:	455b      	cmp	r3, fp
 800d59a:	dc33      	bgt.n	800d604 <_printf_float+0x384>
 800d59c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d5a0:	429a      	cmp	r2, r3
 800d5a2:	db3b      	blt.n	800d61c <_printf_float+0x39c>
 800d5a4:	6823      	ldr	r3, [r4, #0]
 800d5a6:	07da      	lsls	r2, r3, #31
 800d5a8:	d438      	bmi.n	800d61c <_printf_float+0x39c>
 800d5aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d5ac:	9b05      	ldr	r3, [sp, #20]
 800d5ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d5b0:	1ad3      	subs	r3, r2, r3
 800d5b2:	eba2 0901 	sub.w	r9, r2, r1
 800d5b6:	4599      	cmp	r9, r3
 800d5b8:	bfa8      	it	ge
 800d5ba:	4699      	movge	r9, r3
 800d5bc:	f1b9 0f00 	cmp.w	r9, #0
 800d5c0:	dc35      	bgt.n	800d62e <_printf_float+0x3ae>
 800d5c2:	f04f 0800 	mov.w	r8, #0
 800d5c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d5ca:	f104 0a1a 	add.w	sl, r4, #26
 800d5ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d5d2:	1a9b      	subs	r3, r3, r2
 800d5d4:	eba3 0309 	sub.w	r3, r3, r9
 800d5d8:	4543      	cmp	r3, r8
 800d5da:	f77f af79 	ble.w	800d4d0 <_printf_float+0x250>
 800d5de:	2301      	movs	r3, #1
 800d5e0:	4652      	mov	r2, sl
 800d5e2:	4631      	mov	r1, r6
 800d5e4:	4628      	mov	r0, r5
 800d5e6:	47b8      	blx	r7
 800d5e8:	3001      	adds	r0, #1
 800d5ea:	f43f aeaa 	beq.w	800d342 <_printf_float+0xc2>
 800d5ee:	f108 0801 	add.w	r8, r8, #1
 800d5f2:	e7ec      	b.n	800d5ce <_printf_float+0x34e>
 800d5f4:	4613      	mov	r3, r2
 800d5f6:	4631      	mov	r1, r6
 800d5f8:	4642      	mov	r2, r8
 800d5fa:	4628      	mov	r0, r5
 800d5fc:	47b8      	blx	r7
 800d5fe:	3001      	adds	r0, #1
 800d600:	d1c0      	bne.n	800d584 <_printf_float+0x304>
 800d602:	e69e      	b.n	800d342 <_printf_float+0xc2>
 800d604:	2301      	movs	r3, #1
 800d606:	4631      	mov	r1, r6
 800d608:	4628      	mov	r0, r5
 800d60a:	9205      	str	r2, [sp, #20]
 800d60c:	47b8      	blx	r7
 800d60e:	3001      	adds	r0, #1
 800d610:	f43f ae97 	beq.w	800d342 <_printf_float+0xc2>
 800d614:	9a05      	ldr	r2, [sp, #20]
 800d616:	f10b 0b01 	add.w	fp, fp, #1
 800d61a:	e7b9      	b.n	800d590 <_printf_float+0x310>
 800d61c:	ee18 3a10 	vmov	r3, s16
 800d620:	4652      	mov	r2, sl
 800d622:	4631      	mov	r1, r6
 800d624:	4628      	mov	r0, r5
 800d626:	47b8      	blx	r7
 800d628:	3001      	adds	r0, #1
 800d62a:	d1be      	bne.n	800d5aa <_printf_float+0x32a>
 800d62c:	e689      	b.n	800d342 <_printf_float+0xc2>
 800d62e:	9a05      	ldr	r2, [sp, #20]
 800d630:	464b      	mov	r3, r9
 800d632:	4442      	add	r2, r8
 800d634:	4631      	mov	r1, r6
 800d636:	4628      	mov	r0, r5
 800d638:	47b8      	blx	r7
 800d63a:	3001      	adds	r0, #1
 800d63c:	d1c1      	bne.n	800d5c2 <_printf_float+0x342>
 800d63e:	e680      	b.n	800d342 <_printf_float+0xc2>
 800d640:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d642:	2a01      	cmp	r2, #1
 800d644:	dc01      	bgt.n	800d64a <_printf_float+0x3ca>
 800d646:	07db      	lsls	r3, r3, #31
 800d648:	d538      	bpl.n	800d6bc <_printf_float+0x43c>
 800d64a:	2301      	movs	r3, #1
 800d64c:	4642      	mov	r2, r8
 800d64e:	4631      	mov	r1, r6
 800d650:	4628      	mov	r0, r5
 800d652:	47b8      	blx	r7
 800d654:	3001      	adds	r0, #1
 800d656:	f43f ae74 	beq.w	800d342 <_printf_float+0xc2>
 800d65a:	ee18 3a10 	vmov	r3, s16
 800d65e:	4652      	mov	r2, sl
 800d660:	4631      	mov	r1, r6
 800d662:	4628      	mov	r0, r5
 800d664:	47b8      	blx	r7
 800d666:	3001      	adds	r0, #1
 800d668:	f43f ae6b 	beq.w	800d342 <_printf_float+0xc2>
 800d66c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d670:	2200      	movs	r2, #0
 800d672:	2300      	movs	r3, #0
 800d674:	f7f5 fff8 	bl	8003668 <__aeabi_dcmpeq>
 800d678:	b9d8      	cbnz	r0, 800d6b2 <_printf_float+0x432>
 800d67a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d67c:	f108 0201 	add.w	r2, r8, #1
 800d680:	3b01      	subs	r3, #1
 800d682:	4631      	mov	r1, r6
 800d684:	4628      	mov	r0, r5
 800d686:	47b8      	blx	r7
 800d688:	3001      	adds	r0, #1
 800d68a:	d10e      	bne.n	800d6aa <_printf_float+0x42a>
 800d68c:	e659      	b.n	800d342 <_printf_float+0xc2>
 800d68e:	2301      	movs	r3, #1
 800d690:	4652      	mov	r2, sl
 800d692:	4631      	mov	r1, r6
 800d694:	4628      	mov	r0, r5
 800d696:	47b8      	blx	r7
 800d698:	3001      	adds	r0, #1
 800d69a:	f43f ae52 	beq.w	800d342 <_printf_float+0xc2>
 800d69e:	f108 0801 	add.w	r8, r8, #1
 800d6a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6a4:	3b01      	subs	r3, #1
 800d6a6:	4543      	cmp	r3, r8
 800d6a8:	dcf1      	bgt.n	800d68e <_printf_float+0x40e>
 800d6aa:	464b      	mov	r3, r9
 800d6ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d6b0:	e6dc      	b.n	800d46c <_printf_float+0x1ec>
 800d6b2:	f04f 0800 	mov.w	r8, #0
 800d6b6:	f104 0a1a 	add.w	sl, r4, #26
 800d6ba:	e7f2      	b.n	800d6a2 <_printf_float+0x422>
 800d6bc:	2301      	movs	r3, #1
 800d6be:	4642      	mov	r2, r8
 800d6c0:	e7df      	b.n	800d682 <_printf_float+0x402>
 800d6c2:	2301      	movs	r3, #1
 800d6c4:	464a      	mov	r2, r9
 800d6c6:	4631      	mov	r1, r6
 800d6c8:	4628      	mov	r0, r5
 800d6ca:	47b8      	blx	r7
 800d6cc:	3001      	adds	r0, #1
 800d6ce:	f43f ae38 	beq.w	800d342 <_printf_float+0xc2>
 800d6d2:	f108 0801 	add.w	r8, r8, #1
 800d6d6:	68e3      	ldr	r3, [r4, #12]
 800d6d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d6da:	1a5b      	subs	r3, r3, r1
 800d6dc:	4543      	cmp	r3, r8
 800d6de:	dcf0      	bgt.n	800d6c2 <_printf_float+0x442>
 800d6e0:	e6fa      	b.n	800d4d8 <_printf_float+0x258>
 800d6e2:	f04f 0800 	mov.w	r8, #0
 800d6e6:	f104 0919 	add.w	r9, r4, #25
 800d6ea:	e7f4      	b.n	800d6d6 <_printf_float+0x456>

0800d6ec <_printf_common>:
 800d6ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6f0:	4616      	mov	r6, r2
 800d6f2:	4699      	mov	r9, r3
 800d6f4:	688a      	ldr	r2, [r1, #8]
 800d6f6:	690b      	ldr	r3, [r1, #16]
 800d6f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d6fc:	4293      	cmp	r3, r2
 800d6fe:	bfb8      	it	lt
 800d700:	4613      	movlt	r3, r2
 800d702:	6033      	str	r3, [r6, #0]
 800d704:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d708:	4607      	mov	r7, r0
 800d70a:	460c      	mov	r4, r1
 800d70c:	b10a      	cbz	r2, 800d712 <_printf_common+0x26>
 800d70e:	3301      	adds	r3, #1
 800d710:	6033      	str	r3, [r6, #0]
 800d712:	6823      	ldr	r3, [r4, #0]
 800d714:	0699      	lsls	r1, r3, #26
 800d716:	bf42      	ittt	mi
 800d718:	6833      	ldrmi	r3, [r6, #0]
 800d71a:	3302      	addmi	r3, #2
 800d71c:	6033      	strmi	r3, [r6, #0]
 800d71e:	6825      	ldr	r5, [r4, #0]
 800d720:	f015 0506 	ands.w	r5, r5, #6
 800d724:	d106      	bne.n	800d734 <_printf_common+0x48>
 800d726:	f104 0a19 	add.w	sl, r4, #25
 800d72a:	68e3      	ldr	r3, [r4, #12]
 800d72c:	6832      	ldr	r2, [r6, #0]
 800d72e:	1a9b      	subs	r3, r3, r2
 800d730:	42ab      	cmp	r3, r5
 800d732:	dc26      	bgt.n	800d782 <_printf_common+0x96>
 800d734:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d738:	1e13      	subs	r3, r2, #0
 800d73a:	6822      	ldr	r2, [r4, #0]
 800d73c:	bf18      	it	ne
 800d73e:	2301      	movne	r3, #1
 800d740:	0692      	lsls	r2, r2, #26
 800d742:	d42b      	bmi.n	800d79c <_printf_common+0xb0>
 800d744:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d748:	4649      	mov	r1, r9
 800d74a:	4638      	mov	r0, r7
 800d74c:	47c0      	blx	r8
 800d74e:	3001      	adds	r0, #1
 800d750:	d01e      	beq.n	800d790 <_printf_common+0xa4>
 800d752:	6823      	ldr	r3, [r4, #0]
 800d754:	68e5      	ldr	r5, [r4, #12]
 800d756:	6832      	ldr	r2, [r6, #0]
 800d758:	f003 0306 	and.w	r3, r3, #6
 800d75c:	2b04      	cmp	r3, #4
 800d75e:	bf08      	it	eq
 800d760:	1aad      	subeq	r5, r5, r2
 800d762:	68a3      	ldr	r3, [r4, #8]
 800d764:	6922      	ldr	r2, [r4, #16]
 800d766:	bf0c      	ite	eq
 800d768:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d76c:	2500      	movne	r5, #0
 800d76e:	4293      	cmp	r3, r2
 800d770:	bfc4      	itt	gt
 800d772:	1a9b      	subgt	r3, r3, r2
 800d774:	18ed      	addgt	r5, r5, r3
 800d776:	2600      	movs	r6, #0
 800d778:	341a      	adds	r4, #26
 800d77a:	42b5      	cmp	r5, r6
 800d77c:	d11a      	bne.n	800d7b4 <_printf_common+0xc8>
 800d77e:	2000      	movs	r0, #0
 800d780:	e008      	b.n	800d794 <_printf_common+0xa8>
 800d782:	2301      	movs	r3, #1
 800d784:	4652      	mov	r2, sl
 800d786:	4649      	mov	r1, r9
 800d788:	4638      	mov	r0, r7
 800d78a:	47c0      	blx	r8
 800d78c:	3001      	adds	r0, #1
 800d78e:	d103      	bne.n	800d798 <_printf_common+0xac>
 800d790:	f04f 30ff 	mov.w	r0, #4294967295
 800d794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d798:	3501      	adds	r5, #1
 800d79a:	e7c6      	b.n	800d72a <_printf_common+0x3e>
 800d79c:	18e1      	adds	r1, r4, r3
 800d79e:	1c5a      	adds	r2, r3, #1
 800d7a0:	2030      	movs	r0, #48	; 0x30
 800d7a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d7a6:	4422      	add	r2, r4
 800d7a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d7ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d7b0:	3302      	adds	r3, #2
 800d7b2:	e7c7      	b.n	800d744 <_printf_common+0x58>
 800d7b4:	2301      	movs	r3, #1
 800d7b6:	4622      	mov	r2, r4
 800d7b8:	4649      	mov	r1, r9
 800d7ba:	4638      	mov	r0, r7
 800d7bc:	47c0      	blx	r8
 800d7be:	3001      	adds	r0, #1
 800d7c0:	d0e6      	beq.n	800d790 <_printf_common+0xa4>
 800d7c2:	3601      	adds	r6, #1
 800d7c4:	e7d9      	b.n	800d77a <_printf_common+0x8e>
	...

0800d7c8 <_printf_i>:
 800d7c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d7cc:	460c      	mov	r4, r1
 800d7ce:	4691      	mov	r9, r2
 800d7d0:	7e27      	ldrb	r7, [r4, #24]
 800d7d2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d7d4:	2f78      	cmp	r7, #120	; 0x78
 800d7d6:	4680      	mov	r8, r0
 800d7d8:	469a      	mov	sl, r3
 800d7da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d7de:	d807      	bhi.n	800d7f0 <_printf_i+0x28>
 800d7e0:	2f62      	cmp	r7, #98	; 0x62
 800d7e2:	d80a      	bhi.n	800d7fa <_printf_i+0x32>
 800d7e4:	2f00      	cmp	r7, #0
 800d7e6:	f000 80d8 	beq.w	800d99a <_printf_i+0x1d2>
 800d7ea:	2f58      	cmp	r7, #88	; 0x58
 800d7ec:	f000 80a3 	beq.w	800d936 <_printf_i+0x16e>
 800d7f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d7f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d7f8:	e03a      	b.n	800d870 <_printf_i+0xa8>
 800d7fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d7fe:	2b15      	cmp	r3, #21
 800d800:	d8f6      	bhi.n	800d7f0 <_printf_i+0x28>
 800d802:	a001      	add	r0, pc, #4	; (adr r0, 800d808 <_printf_i+0x40>)
 800d804:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d808:	0800d861 	.word	0x0800d861
 800d80c:	0800d875 	.word	0x0800d875
 800d810:	0800d7f1 	.word	0x0800d7f1
 800d814:	0800d7f1 	.word	0x0800d7f1
 800d818:	0800d7f1 	.word	0x0800d7f1
 800d81c:	0800d7f1 	.word	0x0800d7f1
 800d820:	0800d875 	.word	0x0800d875
 800d824:	0800d7f1 	.word	0x0800d7f1
 800d828:	0800d7f1 	.word	0x0800d7f1
 800d82c:	0800d7f1 	.word	0x0800d7f1
 800d830:	0800d7f1 	.word	0x0800d7f1
 800d834:	0800d981 	.word	0x0800d981
 800d838:	0800d8a5 	.word	0x0800d8a5
 800d83c:	0800d963 	.word	0x0800d963
 800d840:	0800d7f1 	.word	0x0800d7f1
 800d844:	0800d7f1 	.word	0x0800d7f1
 800d848:	0800d9a3 	.word	0x0800d9a3
 800d84c:	0800d7f1 	.word	0x0800d7f1
 800d850:	0800d8a5 	.word	0x0800d8a5
 800d854:	0800d7f1 	.word	0x0800d7f1
 800d858:	0800d7f1 	.word	0x0800d7f1
 800d85c:	0800d96b 	.word	0x0800d96b
 800d860:	680b      	ldr	r3, [r1, #0]
 800d862:	1d1a      	adds	r2, r3, #4
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	600a      	str	r2, [r1, #0]
 800d868:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d86c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d870:	2301      	movs	r3, #1
 800d872:	e0a3      	b.n	800d9bc <_printf_i+0x1f4>
 800d874:	6825      	ldr	r5, [r4, #0]
 800d876:	6808      	ldr	r0, [r1, #0]
 800d878:	062e      	lsls	r6, r5, #24
 800d87a:	f100 0304 	add.w	r3, r0, #4
 800d87e:	d50a      	bpl.n	800d896 <_printf_i+0xce>
 800d880:	6805      	ldr	r5, [r0, #0]
 800d882:	600b      	str	r3, [r1, #0]
 800d884:	2d00      	cmp	r5, #0
 800d886:	da03      	bge.n	800d890 <_printf_i+0xc8>
 800d888:	232d      	movs	r3, #45	; 0x2d
 800d88a:	426d      	negs	r5, r5
 800d88c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d890:	485e      	ldr	r0, [pc, #376]	; (800da0c <_printf_i+0x244>)
 800d892:	230a      	movs	r3, #10
 800d894:	e019      	b.n	800d8ca <_printf_i+0x102>
 800d896:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d89a:	6805      	ldr	r5, [r0, #0]
 800d89c:	600b      	str	r3, [r1, #0]
 800d89e:	bf18      	it	ne
 800d8a0:	b22d      	sxthne	r5, r5
 800d8a2:	e7ef      	b.n	800d884 <_printf_i+0xbc>
 800d8a4:	680b      	ldr	r3, [r1, #0]
 800d8a6:	6825      	ldr	r5, [r4, #0]
 800d8a8:	1d18      	adds	r0, r3, #4
 800d8aa:	6008      	str	r0, [r1, #0]
 800d8ac:	0628      	lsls	r0, r5, #24
 800d8ae:	d501      	bpl.n	800d8b4 <_printf_i+0xec>
 800d8b0:	681d      	ldr	r5, [r3, #0]
 800d8b2:	e002      	b.n	800d8ba <_printf_i+0xf2>
 800d8b4:	0669      	lsls	r1, r5, #25
 800d8b6:	d5fb      	bpl.n	800d8b0 <_printf_i+0xe8>
 800d8b8:	881d      	ldrh	r5, [r3, #0]
 800d8ba:	4854      	ldr	r0, [pc, #336]	; (800da0c <_printf_i+0x244>)
 800d8bc:	2f6f      	cmp	r7, #111	; 0x6f
 800d8be:	bf0c      	ite	eq
 800d8c0:	2308      	moveq	r3, #8
 800d8c2:	230a      	movne	r3, #10
 800d8c4:	2100      	movs	r1, #0
 800d8c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d8ca:	6866      	ldr	r6, [r4, #4]
 800d8cc:	60a6      	str	r6, [r4, #8]
 800d8ce:	2e00      	cmp	r6, #0
 800d8d0:	bfa2      	ittt	ge
 800d8d2:	6821      	ldrge	r1, [r4, #0]
 800d8d4:	f021 0104 	bicge.w	r1, r1, #4
 800d8d8:	6021      	strge	r1, [r4, #0]
 800d8da:	b90d      	cbnz	r5, 800d8e0 <_printf_i+0x118>
 800d8dc:	2e00      	cmp	r6, #0
 800d8de:	d04d      	beq.n	800d97c <_printf_i+0x1b4>
 800d8e0:	4616      	mov	r6, r2
 800d8e2:	fbb5 f1f3 	udiv	r1, r5, r3
 800d8e6:	fb03 5711 	mls	r7, r3, r1, r5
 800d8ea:	5dc7      	ldrb	r7, [r0, r7]
 800d8ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d8f0:	462f      	mov	r7, r5
 800d8f2:	42bb      	cmp	r3, r7
 800d8f4:	460d      	mov	r5, r1
 800d8f6:	d9f4      	bls.n	800d8e2 <_printf_i+0x11a>
 800d8f8:	2b08      	cmp	r3, #8
 800d8fa:	d10b      	bne.n	800d914 <_printf_i+0x14c>
 800d8fc:	6823      	ldr	r3, [r4, #0]
 800d8fe:	07df      	lsls	r7, r3, #31
 800d900:	d508      	bpl.n	800d914 <_printf_i+0x14c>
 800d902:	6923      	ldr	r3, [r4, #16]
 800d904:	6861      	ldr	r1, [r4, #4]
 800d906:	4299      	cmp	r1, r3
 800d908:	bfde      	ittt	le
 800d90a:	2330      	movle	r3, #48	; 0x30
 800d90c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d910:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d914:	1b92      	subs	r2, r2, r6
 800d916:	6122      	str	r2, [r4, #16]
 800d918:	f8cd a000 	str.w	sl, [sp]
 800d91c:	464b      	mov	r3, r9
 800d91e:	aa03      	add	r2, sp, #12
 800d920:	4621      	mov	r1, r4
 800d922:	4640      	mov	r0, r8
 800d924:	f7ff fee2 	bl	800d6ec <_printf_common>
 800d928:	3001      	adds	r0, #1
 800d92a:	d14c      	bne.n	800d9c6 <_printf_i+0x1fe>
 800d92c:	f04f 30ff 	mov.w	r0, #4294967295
 800d930:	b004      	add	sp, #16
 800d932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d936:	4835      	ldr	r0, [pc, #212]	; (800da0c <_printf_i+0x244>)
 800d938:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d93c:	6823      	ldr	r3, [r4, #0]
 800d93e:	680e      	ldr	r6, [r1, #0]
 800d940:	061f      	lsls	r7, r3, #24
 800d942:	f856 5b04 	ldr.w	r5, [r6], #4
 800d946:	600e      	str	r6, [r1, #0]
 800d948:	d514      	bpl.n	800d974 <_printf_i+0x1ac>
 800d94a:	07d9      	lsls	r1, r3, #31
 800d94c:	bf44      	itt	mi
 800d94e:	f043 0320 	orrmi.w	r3, r3, #32
 800d952:	6023      	strmi	r3, [r4, #0]
 800d954:	b91d      	cbnz	r5, 800d95e <_printf_i+0x196>
 800d956:	6823      	ldr	r3, [r4, #0]
 800d958:	f023 0320 	bic.w	r3, r3, #32
 800d95c:	6023      	str	r3, [r4, #0]
 800d95e:	2310      	movs	r3, #16
 800d960:	e7b0      	b.n	800d8c4 <_printf_i+0xfc>
 800d962:	6823      	ldr	r3, [r4, #0]
 800d964:	f043 0320 	orr.w	r3, r3, #32
 800d968:	6023      	str	r3, [r4, #0]
 800d96a:	2378      	movs	r3, #120	; 0x78
 800d96c:	4828      	ldr	r0, [pc, #160]	; (800da10 <_printf_i+0x248>)
 800d96e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d972:	e7e3      	b.n	800d93c <_printf_i+0x174>
 800d974:	065e      	lsls	r6, r3, #25
 800d976:	bf48      	it	mi
 800d978:	b2ad      	uxthmi	r5, r5
 800d97a:	e7e6      	b.n	800d94a <_printf_i+0x182>
 800d97c:	4616      	mov	r6, r2
 800d97e:	e7bb      	b.n	800d8f8 <_printf_i+0x130>
 800d980:	680b      	ldr	r3, [r1, #0]
 800d982:	6826      	ldr	r6, [r4, #0]
 800d984:	6960      	ldr	r0, [r4, #20]
 800d986:	1d1d      	adds	r5, r3, #4
 800d988:	600d      	str	r5, [r1, #0]
 800d98a:	0635      	lsls	r5, r6, #24
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	d501      	bpl.n	800d994 <_printf_i+0x1cc>
 800d990:	6018      	str	r0, [r3, #0]
 800d992:	e002      	b.n	800d99a <_printf_i+0x1d2>
 800d994:	0671      	lsls	r1, r6, #25
 800d996:	d5fb      	bpl.n	800d990 <_printf_i+0x1c8>
 800d998:	8018      	strh	r0, [r3, #0]
 800d99a:	2300      	movs	r3, #0
 800d99c:	6123      	str	r3, [r4, #16]
 800d99e:	4616      	mov	r6, r2
 800d9a0:	e7ba      	b.n	800d918 <_printf_i+0x150>
 800d9a2:	680b      	ldr	r3, [r1, #0]
 800d9a4:	1d1a      	adds	r2, r3, #4
 800d9a6:	600a      	str	r2, [r1, #0]
 800d9a8:	681e      	ldr	r6, [r3, #0]
 800d9aa:	6862      	ldr	r2, [r4, #4]
 800d9ac:	2100      	movs	r1, #0
 800d9ae:	4630      	mov	r0, r6
 800d9b0:	f7f5 f9e6 	bl	8002d80 <memchr>
 800d9b4:	b108      	cbz	r0, 800d9ba <_printf_i+0x1f2>
 800d9b6:	1b80      	subs	r0, r0, r6
 800d9b8:	6060      	str	r0, [r4, #4]
 800d9ba:	6863      	ldr	r3, [r4, #4]
 800d9bc:	6123      	str	r3, [r4, #16]
 800d9be:	2300      	movs	r3, #0
 800d9c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d9c4:	e7a8      	b.n	800d918 <_printf_i+0x150>
 800d9c6:	6923      	ldr	r3, [r4, #16]
 800d9c8:	4632      	mov	r2, r6
 800d9ca:	4649      	mov	r1, r9
 800d9cc:	4640      	mov	r0, r8
 800d9ce:	47d0      	blx	sl
 800d9d0:	3001      	adds	r0, #1
 800d9d2:	d0ab      	beq.n	800d92c <_printf_i+0x164>
 800d9d4:	6823      	ldr	r3, [r4, #0]
 800d9d6:	079b      	lsls	r3, r3, #30
 800d9d8:	d413      	bmi.n	800da02 <_printf_i+0x23a>
 800d9da:	68e0      	ldr	r0, [r4, #12]
 800d9dc:	9b03      	ldr	r3, [sp, #12]
 800d9de:	4298      	cmp	r0, r3
 800d9e0:	bfb8      	it	lt
 800d9e2:	4618      	movlt	r0, r3
 800d9e4:	e7a4      	b.n	800d930 <_printf_i+0x168>
 800d9e6:	2301      	movs	r3, #1
 800d9e8:	4632      	mov	r2, r6
 800d9ea:	4649      	mov	r1, r9
 800d9ec:	4640      	mov	r0, r8
 800d9ee:	47d0      	blx	sl
 800d9f0:	3001      	adds	r0, #1
 800d9f2:	d09b      	beq.n	800d92c <_printf_i+0x164>
 800d9f4:	3501      	adds	r5, #1
 800d9f6:	68e3      	ldr	r3, [r4, #12]
 800d9f8:	9903      	ldr	r1, [sp, #12]
 800d9fa:	1a5b      	subs	r3, r3, r1
 800d9fc:	42ab      	cmp	r3, r5
 800d9fe:	dcf2      	bgt.n	800d9e6 <_printf_i+0x21e>
 800da00:	e7eb      	b.n	800d9da <_printf_i+0x212>
 800da02:	2500      	movs	r5, #0
 800da04:	f104 0619 	add.w	r6, r4, #25
 800da08:	e7f5      	b.n	800d9f6 <_printf_i+0x22e>
 800da0a:	bf00      	nop
 800da0c:	0801376e 	.word	0x0801376e
 800da10:	0801377f 	.word	0x0801377f

0800da14 <_vsiprintf_r>:
 800da14:	b500      	push	{lr}
 800da16:	b09b      	sub	sp, #108	; 0x6c
 800da18:	9100      	str	r1, [sp, #0]
 800da1a:	9104      	str	r1, [sp, #16]
 800da1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800da20:	9105      	str	r1, [sp, #20]
 800da22:	9102      	str	r1, [sp, #8]
 800da24:	4905      	ldr	r1, [pc, #20]	; (800da3c <_vsiprintf_r+0x28>)
 800da26:	9103      	str	r1, [sp, #12]
 800da28:	4669      	mov	r1, sp
 800da2a:	f001 fb2d 	bl	800f088 <_svfiprintf_r>
 800da2e:	9b00      	ldr	r3, [sp, #0]
 800da30:	2200      	movs	r2, #0
 800da32:	701a      	strb	r2, [r3, #0]
 800da34:	b01b      	add	sp, #108	; 0x6c
 800da36:	f85d fb04 	ldr.w	pc, [sp], #4
 800da3a:	bf00      	nop
 800da3c:	ffff0208 	.word	0xffff0208

0800da40 <vsiprintf>:
 800da40:	4613      	mov	r3, r2
 800da42:	460a      	mov	r2, r1
 800da44:	4601      	mov	r1, r0
 800da46:	4802      	ldr	r0, [pc, #8]	; (800da50 <vsiprintf+0x10>)
 800da48:	6800      	ldr	r0, [r0, #0]
 800da4a:	f7ff bfe3 	b.w	800da14 <_vsiprintf_r>
 800da4e:	bf00      	nop
 800da50:	20000048 	.word	0x20000048

0800da54 <quorem>:
 800da54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da58:	6903      	ldr	r3, [r0, #16]
 800da5a:	690c      	ldr	r4, [r1, #16]
 800da5c:	42a3      	cmp	r3, r4
 800da5e:	4607      	mov	r7, r0
 800da60:	f2c0 8081 	blt.w	800db66 <quorem+0x112>
 800da64:	3c01      	subs	r4, #1
 800da66:	f101 0814 	add.w	r8, r1, #20
 800da6a:	f100 0514 	add.w	r5, r0, #20
 800da6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800da72:	9301      	str	r3, [sp, #4]
 800da74:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800da78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800da7c:	3301      	adds	r3, #1
 800da7e:	429a      	cmp	r2, r3
 800da80:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800da84:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800da88:	fbb2 f6f3 	udiv	r6, r2, r3
 800da8c:	d331      	bcc.n	800daf2 <quorem+0x9e>
 800da8e:	f04f 0e00 	mov.w	lr, #0
 800da92:	4640      	mov	r0, r8
 800da94:	46ac      	mov	ip, r5
 800da96:	46f2      	mov	sl, lr
 800da98:	f850 2b04 	ldr.w	r2, [r0], #4
 800da9c:	b293      	uxth	r3, r2
 800da9e:	fb06 e303 	mla	r3, r6, r3, lr
 800daa2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800daa6:	b29b      	uxth	r3, r3
 800daa8:	ebaa 0303 	sub.w	r3, sl, r3
 800daac:	0c12      	lsrs	r2, r2, #16
 800daae:	f8dc a000 	ldr.w	sl, [ip]
 800dab2:	fb06 e202 	mla	r2, r6, r2, lr
 800dab6:	fa13 f38a 	uxtah	r3, r3, sl
 800daba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800dabe:	fa1f fa82 	uxth.w	sl, r2
 800dac2:	f8dc 2000 	ldr.w	r2, [ip]
 800dac6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800daca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dace:	b29b      	uxth	r3, r3
 800dad0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dad4:	4581      	cmp	r9, r0
 800dad6:	f84c 3b04 	str.w	r3, [ip], #4
 800dada:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800dade:	d2db      	bcs.n	800da98 <quorem+0x44>
 800dae0:	f855 300b 	ldr.w	r3, [r5, fp]
 800dae4:	b92b      	cbnz	r3, 800daf2 <quorem+0x9e>
 800dae6:	9b01      	ldr	r3, [sp, #4]
 800dae8:	3b04      	subs	r3, #4
 800daea:	429d      	cmp	r5, r3
 800daec:	461a      	mov	r2, r3
 800daee:	d32e      	bcc.n	800db4e <quorem+0xfa>
 800daf0:	613c      	str	r4, [r7, #16]
 800daf2:	4638      	mov	r0, r7
 800daf4:	f001 f8b2 	bl	800ec5c <__mcmp>
 800daf8:	2800      	cmp	r0, #0
 800dafa:	db24      	blt.n	800db46 <quorem+0xf2>
 800dafc:	3601      	adds	r6, #1
 800dafe:	4628      	mov	r0, r5
 800db00:	f04f 0c00 	mov.w	ip, #0
 800db04:	f858 2b04 	ldr.w	r2, [r8], #4
 800db08:	f8d0 e000 	ldr.w	lr, [r0]
 800db0c:	b293      	uxth	r3, r2
 800db0e:	ebac 0303 	sub.w	r3, ip, r3
 800db12:	0c12      	lsrs	r2, r2, #16
 800db14:	fa13 f38e 	uxtah	r3, r3, lr
 800db18:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800db1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800db20:	b29b      	uxth	r3, r3
 800db22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800db26:	45c1      	cmp	r9, r8
 800db28:	f840 3b04 	str.w	r3, [r0], #4
 800db2c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800db30:	d2e8      	bcs.n	800db04 <quorem+0xb0>
 800db32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800db36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800db3a:	b922      	cbnz	r2, 800db46 <quorem+0xf2>
 800db3c:	3b04      	subs	r3, #4
 800db3e:	429d      	cmp	r5, r3
 800db40:	461a      	mov	r2, r3
 800db42:	d30a      	bcc.n	800db5a <quorem+0x106>
 800db44:	613c      	str	r4, [r7, #16]
 800db46:	4630      	mov	r0, r6
 800db48:	b003      	add	sp, #12
 800db4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db4e:	6812      	ldr	r2, [r2, #0]
 800db50:	3b04      	subs	r3, #4
 800db52:	2a00      	cmp	r2, #0
 800db54:	d1cc      	bne.n	800daf0 <quorem+0x9c>
 800db56:	3c01      	subs	r4, #1
 800db58:	e7c7      	b.n	800daea <quorem+0x96>
 800db5a:	6812      	ldr	r2, [r2, #0]
 800db5c:	3b04      	subs	r3, #4
 800db5e:	2a00      	cmp	r2, #0
 800db60:	d1f0      	bne.n	800db44 <quorem+0xf0>
 800db62:	3c01      	subs	r4, #1
 800db64:	e7eb      	b.n	800db3e <quorem+0xea>
 800db66:	2000      	movs	r0, #0
 800db68:	e7ee      	b.n	800db48 <quorem+0xf4>
 800db6a:	0000      	movs	r0, r0
 800db6c:	0000      	movs	r0, r0
	...

0800db70 <_dtoa_r>:
 800db70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db74:	ed2d 8b02 	vpush	{d8}
 800db78:	ec57 6b10 	vmov	r6, r7, d0
 800db7c:	b095      	sub	sp, #84	; 0x54
 800db7e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800db80:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800db84:	9105      	str	r1, [sp, #20]
 800db86:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800db8a:	4604      	mov	r4, r0
 800db8c:	9209      	str	r2, [sp, #36]	; 0x24
 800db8e:	930f      	str	r3, [sp, #60]	; 0x3c
 800db90:	b975      	cbnz	r5, 800dbb0 <_dtoa_r+0x40>
 800db92:	2010      	movs	r0, #16
 800db94:	f000 fddc 	bl	800e750 <malloc>
 800db98:	4602      	mov	r2, r0
 800db9a:	6260      	str	r0, [r4, #36]	; 0x24
 800db9c:	b920      	cbnz	r0, 800dba8 <_dtoa_r+0x38>
 800db9e:	4bb2      	ldr	r3, [pc, #712]	; (800de68 <_dtoa_r+0x2f8>)
 800dba0:	21ea      	movs	r1, #234	; 0xea
 800dba2:	48b2      	ldr	r0, [pc, #712]	; (800de6c <_dtoa_r+0x2fc>)
 800dba4:	f001 fb80 	bl	800f2a8 <__assert_func>
 800dba8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800dbac:	6005      	str	r5, [r0, #0]
 800dbae:	60c5      	str	r5, [r0, #12]
 800dbb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dbb2:	6819      	ldr	r1, [r3, #0]
 800dbb4:	b151      	cbz	r1, 800dbcc <_dtoa_r+0x5c>
 800dbb6:	685a      	ldr	r2, [r3, #4]
 800dbb8:	604a      	str	r2, [r1, #4]
 800dbba:	2301      	movs	r3, #1
 800dbbc:	4093      	lsls	r3, r2
 800dbbe:	608b      	str	r3, [r1, #8]
 800dbc0:	4620      	mov	r0, r4
 800dbc2:	f000 fe0d 	bl	800e7e0 <_Bfree>
 800dbc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dbc8:	2200      	movs	r2, #0
 800dbca:	601a      	str	r2, [r3, #0]
 800dbcc:	1e3b      	subs	r3, r7, #0
 800dbce:	bfb9      	ittee	lt
 800dbd0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800dbd4:	9303      	strlt	r3, [sp, #12]
 800dbd6:	2300      	movge	r3, #0
 800dbd8:	f8c8 3000 	strge.w	r3, [r8]
 800dbdc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800dbe0:	4ba3      	ldr	r3, [pc, #652]	; (800de70 <_dtoa_r+0x300>)
 800dbe2:	bfbc      	itt	lt
 800dbe4:	2201      	movlt	r2, #1
 800dbe6:	f8c8 2000 	strlt.w	r2, [r8]
 800dbea:	ea33 0309 	bics.w	r3, r3, r9
 800dbee:	d11b      	bne.n	800dc28 <_dtoa_r+0xb8>
 800dbf0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800dbf2:	f242 730f 	movw	r3, #9999	; 0x270f
 800dbf6:	6013      	str	r3, [r2, #0]
 800dbf8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dbfc:	4333      	orrs	r3, r6
 800dbfe:	f000 857a 	beq.w	800e6f6 <_dtoa_r+0xb86>
 800dc02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dc04:	b963      	cbnz	r3, 800dc20 <_dtoa_r+0xb0>
 800dc06:	4b9b      	ldr	r3, [pc, #620]	; (800de74 <_dtoa_r+0x304>)
 800dc08:	e024      	b.n	800dc54 <_dtoa_r+0xe4>
 800dc0a:	4b9b      	ldr	r3, [pc, #620]	; (800de78 <_dtoa_r+0x308>)
 800dc0c:	9300      	str	r3, [sp, #0]
 800dc0e:	3308      	adds	r3, #8
 800dc10:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800dc12:	6013      	str	r3, [r2, #0]
 800dc14:	9800      	ldr	r0, [sp, #0]
 800dc16:	b015      	add	sp, #84	; 0x54
 800dc18:	ecbd 8b02 	vpop	{d8}
 800dc1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc20:	4b94      	ldr	r3, [pc, #592]	; (800de74 <_dtoa_r+0x304>)
 800dc22:	9300      	str	r3, [sp, #0]
 800dc24:	3303      	adds	r3, #3
 800dc26:	e7f3      	b.n	800dc10 <_dtoa_r+0xa0>
 800dc28:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	ec51 0b17 	vmov	r0, r1, d7
 800dc32:	2300      	movs	r3, #0
 800dc34:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800dc38:	f7f5 fd16 	bl	8003668 <__aeabi_dcmpeq>
 800dc3c:	4680      	mov	r8, r0
 800dc3e:	b158      	cbz	r0, 800dc58 <_dtoa_r+0xe8>
 800dc40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800dc42:	2301      	movs	r3, #1
 800dc44:	6013      	str	r3, [r2, #0]
 800dc46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	f000 8551 	beq.w	800e6f0 <_dtoa_r+0xb80>
 800dc4e:	488b      	ldr	r0, [pc, #556]	; (800de7c <_dtoa_r+0x30c>)
 800dc50:	6018      	str	r0, [r3, #0]
 800dc52:	1e43      	subs	r3, r0, #1
 800dc54:	9300      	str	r3, [sp, #0]
 800dc56:	e7dd      	b.n	800dc14 <_dtoa_r+0xa4>
 800dc58:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800dc5c:	aa12      	add	r2, sp, #72	; 0x48
 800dc5e:	a913      	add	r1, sp, #76	; 0x4c
 800dc60:	4620      	mov	r0, r4
 800dc62:	f001 f89f 	bl	800eda4 <__d2b>
 800dc66:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800dc6a:	4683      	mov	fp, r0
 800dc6c:	2d00      	cmp	r5, #0
 800dc6e:	d07c      	beq.n	800dd6a <_dtoa_r+0x1fa>
 800dc70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc72:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800dc76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dc7a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800dc7e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800dc82:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800dc86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800dc8a:	4b7d      	ldr	r3, [pc, #500]	; (800de80 <_dtoa_r+0x310>)
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	4630      	mov	r0, r6
 800dc90:	4639      	mov	r1, r7
 800dc92:	f7f5 f8c9 	bl	8002e28 <__aeabi_dsub>
 800dc96:	a36e      	add	r3, pc, #440	; (adr r3, 800de50 <_dtoa_r+0x2e0>)
 800dc98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc9c:	f7f5 fa7c 	bl	8003198 <__aeabi_dmul>
 800dca0:	a36d      	add	r3, pc, #436	; (adr r3, 800de58 <_dtoa_r+0x2e8>)
 800dca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dca6:	f7f5 f8c1 	bl	8002e2c <__adddf3>
 800dcaa:	4606      	mov	r6, r0
 800dcac:	4628      	mov	r0, r5
 800dcae:	460f      	mov	r7, r1
 800dcb0:	f7f5 fa08 	bl	80030c4 <__aeabi_i2d>
 800dcb4:	a36a      	add	r3, pc, #424	; (adr r3, 800de60 <_dtoa_r+0x2f0>)
 800dcb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcba:	f7f5 fa6d 	bl	8003198 <__aeabi_dmul>
 800dcbe:	4602      	mov	r2, r0
 800dcc0:	460b      	mov	r3, r1
 800dcc2:	4630      	mov	r0, r6
 800dcc4:	4639      	mov	r1, r7
 800dcc6:	f7f5 f8b1 	bl	8002e2c <__adddf3>
 800dcca:	4606      	mov	r6, r0
 800dccc:	460f      	mov	r7, r1
 800dcce:	f7f5 fd13 	bl	80036f8 <__aeabi_d2iz>
 800dcd2:	2200      	movs	r2, #0
 800dcd4:	4682      	mov	sl, r0
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	4630      	mov	r0, r6
 800dcda:	4639      	mov	r1, r7
 800dcdc:	f7f5 fcce 	bl	800367c <__aeabi_dcmplt>
 800dce0:	b148      	cbz	r0, 800dcf6 <_dtoa_r+0x186>
 800dce2:	4650      	mov	r0, sl
 800dce4:	f7f5 f9ee 	bl	80030c4 <__aeabi_i2d>
 800dce8:	4632      	mov	r2, r6
 800dcea:	463b      	mov	r3, r7
 800dcec:	f7f5 fcbc 	bl	8003668 <__aeabi_dcmpeq>
 800dcf0:	b908      	cbnz	r0, 800dcf6 <_dtoa_r+0x186>
 800dcf2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dcf6:	f1ba 0f16 	cmp.w	sl, #22
 800dcfa:	d854      	bhi.n	800dda6 <_dtoa_r+0x236>
 800dcfc:	4b61      	ldr	r3, [pc, #388]	; (800de84 <_dtoa_r+0x314>)
 800dcfe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800dd02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd06:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800dd0a:	f7f5 fcb7 	bl	800367c <__aeabi_dcmplt>
 800dd0e:	2800      	cmp	r0, #0
 800dd10:	d04b      	beq.n	800ddaa <_dtoa_r+0x23a>
 800dd12:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dd16:	2300      	movs	r3, #0
 800dd18:	930e      	str	r3, [sp, #56]	; 0x38
 800dd1a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dd1c:	1b5d      	subs	r5, r3, r5
 800dd1e:	1e6b      	subs	r3, r5, #1
 800dd20:	9304      	str	r3, [sp, #16]
 800dd22:	bf43      	ittte	mi
 800dd24:	2300      	movmi	r3, #0
 800dd26:	f1c5 0801 	rsbmi	r8, r5, #1
 800dd2a:	9304      	strmi	r3, [sp, #16]
 800dd2c:	f04f 0800 	movpl.w	r8, #0
 800dd30:	f1ba 0f00 	cmp.w	sl, #0
 800dd34:	db3b      	blt.n	800ddae <_dtoa_r+0x23e>
 800dd36:	9b04      	ldr	r3, [sp, #16]
 800dd38:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800dd3c:	4453      	add	r3, sl
 800dd3e:	9304      	str	r3, [sp, #16]
 800dd40:	2300      	movs	r3, #0
 800dd42:	9306      	str	r3, [sp, #24]
 800dd44:	9b05      	ldr	r3, [sp, #20]
 800dd46:	2b09      	cmp	r3, #9
 800dd48:	d869      	bhi.n	800de1e <_dtoa_r+0x2ae>
 800dd4a:	2b05      	cmp	r3, #5
 800dd4c:	bfc4      	itt	gt
 800dd4e:	3b04      	subgt	r3, #4
 800dd50:	9305      	strgt	r3, [sp, #20]
 800dd52:	9b05      	ldr	r3, [sp, #20]
 800dd54:	f1a3 0302 	sub.w	r3, r3, #2
 800dd58:	bfcc      	ite	gt
 800dd5a:	2500      	movgt	r5, #0
 800dd5c:	2501      	movle	r5, #1
 800dd5e:	2b03      	cmp	r3, #3
 800dd60:	d869      	bhi.n	800de36 <_dtoa_r+0x2c6>
 800dd62:	e8df f003 	tbb	[pc, r3]
 800dd66:	4e2c      	.short	0x4e2c
 800dd68:	5a4c      	.short	0x5a4c
 800dd6a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800dd6e:	441d      	add	r5, r3
 800dd70:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800dd74:	2b20      	cmp	r3, #32
 800dd76:	bfc1      	itttt	gt
 800dd78:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800dd7c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800dd80:	fa09 f303 	lslgt.w	r3, r9, r3
 800dd84:	fa26 f000 	lsrgt.w	r0, r6, r0
 800dd88:	bfda      	itte	le
 800dd8a:	f1c3 0320 	rsble	r3, r3, #32
 800dd8e:	fa06 f003 	lslle.w	r0, r6, r3
 800dd92:	4318      	orrgt	r0, r3
 800dd94:	f7f5 f986 	bl	80030a4 <__aeabi_ui2d>
 800dd98:	2301      	movs	r3, #1
 800dd9a:	4606      	mov	r6, r0
 800dd9c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800dda0:	3d01      	subs	r5, #1
 800dda2:	9310      	str	r3, [sp, #64]	; 0x40
 800dda4:	e771      	b.n	800dc8a <_dtoa_r+0x11a>
 800dda6:	2301      	movs	r3, #1
 800dda8:	e7b6      	b.n	800dd18 <_dtoa_r+0x1a8>
 800ddaa:	900e      	str	r0, [sp, #56]	; 0x38
 800ddac:	e7b5      	b.n	800dd1a <_dtoa_r+0x1aa>
 800ddae:	f1ca 0300 	rsb	r3, sl, #0
 800ddb2:	9306      	str	r3, [sp, #24]
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	eba8 080a 	sub.w	r8, r8, sl
 800ddba:	930d      	str	r3, [sp, #52]	; 0x34
 800ddbc:	e7c2      	b.n	800dd44 <_dtoa_r+0x1d4>
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	9308      	str	r3, [sp, #32]
 800ddc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	dc39      	bgt.n	800de3c <_dtoa_r+0x2cc>
 800ddc8:	f04f 0901 	mov.w	r9, #1
 800ddcc:	f8cd 9004 	str.w	r9, [sp, #4]
 800ddd0:	464b      	mov	r3, r9
 800ddd2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800ddd6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ddd8:	2200      	movs	r2, #0
 800ddda:	6042      	str	r2, [r0, #4]
 800dddc:	2204      	movs	r2, #4
 800ddde:	f102 0614 	add.w	r6, r2, #20
 800dde2:	429e      	cmp	r6, r3
 800dde4:	6841      	ldr	r1, [r0, #4]
 800dde6:	d92f      	bls.n	800de48 <_dtoa_r+0x2d8>
 800dde8:	4620      	mov	r0, r4
 800ddea:	f000 fcb9 	bl	800e760 <_Balloc>
 800ddee:	9000      	str	r0, [sp, #0]
 800ddf0:	2800      	cmp	r0, #0
 800ddf2:	d14b      	bne.n	800de8c <_dtoa_r+0x31c>
 800ddf4:	4b24      	ldr	r3, [pc, #144]	; (800de88 <_dtoa_r+0x318>)
 800ddf6:	4602      	mov	r2, r0
 800ddf8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ddfc:	e6d1      	b.n	800dba2 <_dtoa_r+0x32>
 800ddfe:	2301      	movs	r3, #1
 800de00:	e7de      	b.n	800ddc0 <_dtoa_r+0x250>
 800de02:	2300      	movs	r3, #0
 800de04:	9308      	str	r3, [sp, #32]
 800de06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de08:	eb0a 0903 	add.w	r9, sl, r3
 800de0c:	f109 0301 	add.w	r3, r9, #1
 800de10:	2b01      	cmp	r3, #1
 800de12:	9301      	str	r3, [sp, #4]
 800de14:	bfb8      	it	lt
 800de16:	2301      	movlt	r3, #1
 800de18:	e7dd      	b.n	800ddd6 <_dtoa_r+0x266>
 800de1a:	2301      	movs	r3, #1
 800de1c:	e7f2      	b.n	800de04 <_dtoa_r+0x294>
 800de1e:	2501      	movs	r5, #1
 800de20:	2300      	movs	r3, #0
 800de22:	9305      	str	r3, [sp, #20]
 800de24:	9508      	str	r5, [sp, #32]
 800de26:	f04f 39ff 	mov.w	r9, #4294967295
 800de2a:	2200      	movs	r2, #0
 800de2c:	f8cd 9004 	str.w	r9, [sp, #4]
 800de30:	2312      	movs	r3, #18
 800de32:	9209      	str	r2, [sp, #36]	; 0x24
 800de34:	e7cf      	b.n	800ddd6 <_dtoa_r+0x266>
 800de36:	2301      	movs	r3, #1
 800de38:	9308      	str	r3, [sp, #32]
 800de3a:	e7f4      	b.n	800de26 <_dtoa_r+0x2b6>
 800de3c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800de40:	f8cd 9004 	str.w	r9, [sp, #4]
 800de44:	464b      	mov	r3, r9
 800de46:	e7c6      	b.n	800ddd6 <_dtoa_r+0x266>
 800de48:	3101      	adds	r1, #1
 800de4a:	6041      	str	r1, [r0, #4]
 800de4c:	0052      	lsls	r2, r2, #1
 800de4e:	e7c6      	b.n	800ddde <_dtoa_r+0x26e>
 800de50:	636f4361 	.word	0x636f4361
 800de54:	3fd287a7 	.word	0x3fd287a7
 800de58:	8b60c8b3 	.word	0x8b60c8b3
 800de5c:	3fc68a28 	.word	0x3fc68a28
 800de60:	509f79fb 	.word	0x509f79fb
 800de64:	3fd34413 	.word	0x3fd34413
 800de68:	0801379d 	.word	0x0801379d
 800de6c:	080137b4 	.word	0x080137b4
 800de70:	7ff00000 	.word	0x7ff00000
 800de74:	08013799 	.word	0x08013799
 800de78:	08013790 	.word	0x08013790
 800de7c:	0801376d 	.word	0x0801376d
 800de80:	3ff80000 	.word	0x3ff80000
 800de84:	080138b0 	.word	0x080138b0
 800de88:	08013813 	.word	0x08013813
 800de8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800de8e:	9a00      	ldr	r2, [sp, #0]
 800de90:	601a      	str	r2, [r3, #0]
 800de92:	9b01      	ldr	r3, [sp, #4]
 800de94:	2b0e      	cmp	r3, #14
 800de96:	f200 80ad 	bhi.w	800dff4 <_dtoa_r+0x484>
 800de9a:	2d00      	cmp	r5, #0
 800de9c:	f000 80aa 	beq.w	800dff4 <_dtoa_r+0x484>
 800dea0:	f1ba 0f00 	cmp.w	sl, #0
 800dea4:	dd36      	ble.n	800df14 <_dtoa_r+0x3a4>
 800dea6:	4ac3      	ldr	r2, [pc, #780]	; (800e1b4 <_dtoa_r+0x644>)
 800dea8:	f00a 030f 	and.w	r3, sl, #15
 800deac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800deb0:	ed93 7b00 	vldr	d7, [r3]
 800deb4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800deb8:	ea4f 172a 	mov.w	r7, sl, asr #4
 800debc:	eeb0 8a47 	vmov.f32	s16, s14
 800dec0:	eef0 8a67 	vmov.f32	s17, s15
 800dec4:	d016      	beq.n	800def4 <_dtoa_r+0x384>
 800dec6:	4bbc      	ldr	r3, [pc, #752]	; (800e1b8 <_dtoa_r+0x648>)
 800dec8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800decc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ded0:	f7f5 fa8c 	bl	80033ec <__aeabi_ddiv>
 800ded4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ded8:	f007 070f 	and.w	r7, r7, #15
 800dedc:	2503      	movs	r5, #3
 800dede:	4eb6      	ldr	r6, [pc, #728]	; (800e1b8 <_dtoa_r+0x648>)
 800dee0:	b957      	cbnz	r7, 800def8 <_dtoa_r+0x388>
 800dee2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dee6:	ec53 2b18 	vmov	r2, r3, d8
 800deea:	f7f5 fa7f 	bl	80033ec <__aeabi_ddiv>
 800deee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800def2:	e029      	b.n	800df48 <_dtoa_r+0x3d8>
 800def4:	2502      	movs	r5, #2
 800def6:	e7f2      	b.n	800dede <_dtoa_r+0x36e>
 800def8:	07f9      	lsls	r1, r7, #31
 800defa:	d508      	bpl.n	800df0e <_dtoa_r+0x39e>
 800defc:	ec51 0b18 	vmov	r0, r1, d8
 800df00:	e9d6 2300 	ldrd	r2, r3, [r6]
 800df04:	f7f5 f948 	bl	8003198 <__aeabi_dmul>
 800df08:	ec41 0b18 	vmov	d8, r0, r1
 800df0c:	3501      	adds	r5, #1
 800df0e:	107f      	asrs	r7, r7, #1
 800df10:	3608      	adds	r6, #8
 800df12:	e7e5      	b.n	800dee0 <_dtoa_r+0x370>
 800df14:	f000 80a6 	beq.w	800e064 <_dtoa_r+0x4f4>
 800df18:	f1ca 0600 	rsb	r6, sl, #0
 800df1c:	4ba5      	ldr	r3, [pc, #660]	; (800e1b4 <_dtoa_r+0x644>)
 800df1e:	4fa6      	ldr	r7, [pc, #664]	; (800e1b8 <_dtoa_r+0x648>)
 800df20:	f006 020f 	and.w	r2, r6, #15
 800df24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800df28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df2c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800df30:	f7f5 f932 	bl	8003198 <__aeabi_dmul>
 800df34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800df38:	1136      	asrs	r6, r6, #4
 800df3a:	2300      	movs	r3, #0
 800df3c:	2502      	movs	r5, #2
 800df3e:	2e00      	cmp	r6, #0
 800df40:	f040 8085 	bne.w	800e04e <_dtoa_r+0x4de>
 800df44:	2b00      	cmp	r3, #0
 800df46:	d1d2      	bne.n	800deee <_dtoa_r+0x37e>
 800df48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	f000 808c 	beq.w	800e068 <_dtoa_r+0x4f8>
 800df50:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800df54:	4b99      	ldr	r3, [pc, #612]	; (800e1bc <_dtoa_r+0x64c>)
 800df56:	2200      	movs	r2, #0
 800df58:	4630      	mov	r0, r6
 800df5a:	4639      	mov	r1, r7
 800df5c:	f7f5 fb8e 	bl	800367c <__aeabi_dcmplt>
 800df60:	2800      	cmp	r0, #0
 800df62:	f000 8081 	beq.w	800e068 <_dtoa_r+0x4f8>
 800df66:	9b01      	ldr	r3, [sp, #4]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d07d      	beq.n	800e068 <_dtoa_r+0x4f8>
 800df6c:	f1b9 0f00 	cmp.w	r9, #0
 800df70:	dd3c      	ble.n	800dfec <_dtoa_r+0x47c>
 800df72:	f10a 33ff 	add.w	r3, sl, #4294967295
 800df76:	9307      	str	r3, [sp, #28]
 800df78:	2200      	movs	r2, #0
 800df7a:	4b91      	ldr	r3, [pc, #580]	; (800e1c0 <_dtoa_r+0x650>)
 800df7c:	4630      	mov	r0, r6
 800df7e:	4639      	mov	r1, r7
 800df80:	f7f5 f90a 	bl	8003198 <__aeabi_dmul>
 800df84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800df88:	3501      	adds	r5, #1
 800df8a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800df8e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800df92:	4628      	mov	r0, r5
 800df94:	f7f5 f896 	bl	80030c4 <__aeabi_i2d>
 800df98:	4632      	mov	r2, r6
 800df9a:	463b      	mov	r3, r7
 800df9c:	f7f5 f8fc 	bl	8003198 <__aeabi_dmul>
 800dfa0:	4b88      	ldr	r3, [pc, #544]	; (800e1c4 <_dtoa_r+0x654>)
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	f7f4 ff42 	bl	8002e2c <__adddf3>
 800dfa8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800dfac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dfb0:	9303      	str	r3, [sp, #12]
 800dfb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d15c      	bne.n	800e072 <_dtoa_r+0x502>
 800dfb8:	4b83      	ldr	r3, [pc, #524]	; (800e1c8 <_dtoa_r+0x658>)
 800dfba:	2200      	movs	r2, #0
 800dfbc:	4630      	mov	r0, r6
 800dfbe:	4639      	mov	r1, r7
 800dfc0:	f7f4 ff32 	bl	8002e28 <__aeabi_dsub>
 800dfc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dfc8:	4606      	mov	r6, r0
 800dfca:	460f      	mov	r7, r1
 800dfcc:	f7f5 fb74 	bl	80036b8 <__aeabi_dcmpgt>
 800dfd0:	2800      	cmp	r0, #0
 800dfd2:	f040 8296 	bne.w	800e502 <_dtoa_r+0x992>
 800dfd6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800dfda:	4630      	mov	r0, r6
 800dfdc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dfe0:	4639      	mov	r1, r7
 800dfe2:	f7f5 fb4b 	bl	800367c <__aeabi_dcmplt>
 800dfe6:	2800      	cmp	r0, #0
 800dfe8:	f040 8288 	bne.w	800e4fc <_dtoa_r+0x98c>
 800dfec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800dff0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800dff4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	f2c0 8158 	blt.w	800e2ac <_dtoa_r+0x73c>
 800dffc:	f1ba 0f0e 	cmp.w	sl, #14
 800e000:	f300 8154 	bgt.w	800e2ac <_dtoa_r+0x73c>
 800e004:	4b6b      	ldr	r3, [pc, #428]	; (800e1b4 <_dtoa_r+0x644>)
 800e006:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e00a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e00e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e010:	2b00      	cmp	r3, #0
 800e012:	f280 80e3 	bge.w	800e1dc <_dtoa_r+0x66c>
 800e016:	9b01      	ldr	r3, [sp, #4]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	f300 80df 	bgt.w	800e1dc <_dtoa_r+0x66c>
 800e01e:	f040 826d 	bne.w	800e4fc <_dtoa_r+0x98c>
 800e022:	4b69      	ldr	r3, [pc, #420]	; (800e1c8 <_dtoa_r+0x658>)
 800e024:	2200      	movs	r2, #0
 800e026:	4640      	mov	r0, r8
 800e028:	4649      	mov	r1, r9
 800e02a:	f7f5 f8b5 	bl	8003198 <__aeabi_dmul>
 800e02e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e032:	f7f5 fb37 	bl	80036a4 <__aeabi_dcmpge>
 800e036:	9e01      	ldr	r6, [sp, #4]
 800e038:	4637      	mov	r7, r6
 800e03a:	2800      	cmp	r0, #0
 800e03c:	f040 8243 	bne.w	800e4c6 <_dtoa_r+0x956>
 800e040:	9d00      	ldr	r5, [sp, #0]
 800e042:	2331      	movs	r3, #49	; 0x31
 800e044:	f805 3b01 	strb.w	r3, [r5], #1
 800e048:	f10a 0a01 	add.w	sl, sl, #1
 800e04c:	e23f      	b.n	800e4ce <_dtoa_r+0x95e>
 800e04e:	07f2      	lsls	r2, r6, #31
 800e050:	d505      	bpl.n	800e05e <_dtoa_r+0x4ee>
 800e052:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e056:	f7f5 f89f 	bl	8003198 <__aeabi_dmul>
 800e05a:	3501      	adds	r5, #1
 800e05c:	2301      	movs	r3, #1
 800e05e:	1076      	asrs	r6, r6, #1
 800e060:	3708      	adds	r7, #8
 800e062:	e76c      	b.n	800df3e <_dtoa_r+0x3ce>
 800e064:	2502      	movs	r5, #2
 800e066:	e76f      	b.n	800df48 <_dtoa_r+0x3d8>
 800e068:	9b01      	ldr	r3, [sp, #4]
 800e06a:	f8cd a01c 	str.w	sl, [sp, #28]
 800e06e:	930c      	str	r3, [sp, #48]	; 0x30
 800e070:	e78d      	b.n	800df8e <_dtoa_r+0x41e>
 800e072:	9900      	ldr	r1, [sp, #0]
 800e074:	980c      	ldr	r0, [sp, #48]	; 0x30
 800e076:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e078:	4b4e      	ldr	r3, [pc, #312]	; (800e1b4 <_dtoa_r+0x644>)
 800e07a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e07e:	4401      	add	r1, r0
 800e080:	9102      	str	r1, [sp, #8]
 800e082:	9908      	ldr	r1, [sp, #32]
 800e084:	eeb0 8a47 	vmov.f32	s16, s14
 800e088:	eef0 8a67 	vmov.f32	s17, s15
 800e08c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e090:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e094:	2900      	cmp	r1, #0
 800e096:	d045      	beq.n	800e124 <_dtoa_r+0x5b4>
 800e098:	494c      	ldr	r1, [pc, #304]	; (800e1cc <_dtoa_r+0x65c>)
 800e09a:	2000      	movs	r0, #0
 800e09c:	f7f5 f9a6 	bl	80033ec <__aeabi_ddiv>
 800e0a0:	ec53 2b18 	vmov	r2, r3, d8
 800e0a4:	f7f4 fec0 	bl	8002e28 <__aeabi_dsub>
 800e0a8:	9d00      	ldr	r5, [sp, #0]
 800e0aa:	ec41 0b18 	vmov	d8, r0, r1
 800e0ae:	4639      	mov	r1, r7
 800e0b0:	4630      	mov	r0, r6
 800e0b2:	f7f5 fb21 	bl	80036f8 <__aeabi_d2iz>
 800e0b6:	900c      	str	r0, [sp, #48]	; 0x30
 800e0b8:	f7f5 f804 	bl	80030c4 <__aeabi_i2d>
 800e0bc:	4602      	mov	r2, r0
 800e0be:	460b      	mov	r3, r1
 800e0c0:	4630      	mov	r0, r6
 800e0c2:	4639      	mov	r1, r7
 800e0c4:	f7f4 feb0 	bl	8002e28 <__aeabi_dsub>
 800e0c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e0ca:	3330      	adds	r3, #48	; 0x30
 800e0cc:	f805 3b01 	strb.w	r3, [r5], #1
 800e0d0:	ec53 2b18 	vmov	r2, r3, d8
 800e0d4:	4606      	mov	r6, r0
 800e0d6:	460f      	mov	r7, r1
 800e0d8:	f7f5 fad0 	bl	800367c <__aeabi_dcmplt>
 800e0dc:	2800      	cmp	r0, #0
 800e0de:	d165      	bne.n	800e1ac <_dtoa_r+0x63c>
 800e0e0:	4632      	mov	r2, r6
 800e0e2:	463b      	mov	r3, r7
 800e0e4:	4935      	ldr	r1, [pc, #212]	; (800e1bc <_dtoa_r+0x64c>)
 800e0e6:	2000      	movs	r0, #0
 800e0e8:	f7f4 fe9e 	bl	8002e28 <__aeabi_dsub>
 800e0ec:	ec53 2b18 	vmov	r2, r3, d8
 800e0f0:	f7f5 fac4 	bl	800367c <__aeabi_dcmplt>
 800e0f4:	2800      	cmp	r0, #0
 800e0f6:	f040 80b9 	bne.w	800e26c <_dtoa_r+0x6fc>
 800e0fa:	9b02      	ldr	r3, [sp, #8]
 800e0fc:	429d      	cmp	r5, r3
 800e0fe:	f43f af75 	beq.w	800dfec <_dtoa_r+0x47c>
 800e102:	4b2f      	ldr	r3, [pc, #188]	; (800e1c0 <_dtoa_r+0x650>)
 800e104:	ec51 0b18 	vmov	r0, r1, d8
 800e108:	2200      	movs	r2, #0
 800e10a:	f7f5 f845 	bl	8003198 <__aeabi_dmul>
 800e10e:	4b2c      	ldr	r3, [pc, #176]	; (800e1c0 <_dtoa_r+0x650>)
 800e110:	ec41 0b18 	vmov	d8, r0, r1
 800e114:	2200      	movs	r2, #0
 800e116:	4630      	mov	r0, r6
 800e118:	4639      	mov	r1, r7
 800e11a:	f7f5 f83d 	bl	8003198 <__aeabi_dmul>
 800e11e:	4606      	mov	r6, r0
 800e120:	460f      	mov	r7, r1
 800e122:	e7c4      	b.n	800e0ae <_dtoa_r+0x53e>
 800e124:	ec51 0b17 	vmov	r0, r1, d7
 800e128:	f7f5 f836 	bl	8003198 <__aeabi_dmul>
 800e12c:	9b02      	ldr	r3, [sp, #8]
 800e12e:	9d00      	ldr	r5, [sp, #0]
 800e130:	930c      	str	r3, [sp, #48]	; 0x30
 800e132:	ec41 0b18 	vmov	d8, r0, r1
 800e136:	4639      	mov	r1, r7
 800e138:	4630      	mov	r0, r6
 800e13a:	f7f5 fadd 	bl	80036f8 <__aeabi_d2iz>
 800e13e:	9011      	str	r0, [sp, #68]	; 0x44
 800e140:	f7f4 ffc0 	bl	80030c4 <__aeabi_i2d>
 800e144:	4602      	mov	r2, r0
 800e146:	460b      	mov	r3, r1
 800e148:	4630      	mov	r0, r6
 800e14a:	4639      	mov	r1, r7
 800e14c:	f7f4 fe6c 	bl	8002e28 <__aeabi_dsub>
 800e150:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e152:	3330      	adds	r3, #48	; 0x30
 800e154:	f805 3b01 	strb.w	r3, [r5], #1
 800e158:	9b02      	ldr	r3, [sp, #8]
 800e15a:	429d      	cmp	r5, r3
 800e15c:	4606      	mov	r6, r0
 800e15e:	460f      	mov	r7, r1
 800e160:	f04f 0200 	mov.w	r2, #0
 800e164:	d134      	bne.n	800e1d0 <_dtoa_r+0x660>
 800e166:	4b19      	ldr	r3, [pc, #100]	; (800e1cc <_dtoa_r+0x65c>)
 800e168:	ec51 0b18 	vmov	r0, r1, d8
 800e16c:	f7f4 fe5e 	bl	8002e2c <__adddf3>
 800e170:	4602      	mov	r2, r0
 800e172:	460b      	mov	r3, r1
 800e174:	4630      	mov	r0, r6
 800e176:	4639      	mov	r1, r7
 800e178:	f7f5 fa9e 	bl	80036b8 <__aeabi_dcmpgt>
 800e17c:	2800      	cmp	r0, #0
 800e17e:	d175      	bne.n	800e26c <_dtoa_r+0x6fc>
 800e180:	ec53 2b18 	vmov	r2, r3, d8
 800e184:	4911      	ldr	r1, [pc, #68]	; (800e1cc <_dtoa_r+0x65c>)
 800e186:	2000      	movs	r0, #0
 800e188:	f7f4 fe4e 	bl	8002e28 <__aeabi_dsub>
 800e18c:	4602      	mov	r2, r0
 800e18e:	460b      	mov	r3, r1
 800e190:	4630      	mov	r0, r6
 800e192:	4639      	mov	r1, r7
 800e194:	f7f5 fa72 	bl	800367c <__aeabi_dcmplt>
 800e198:	2800      	cmp	r0, #0
 800e19a:	f43f af27 	beq.w	800dfec <_dtoa_r+0x47c>
 800e19e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e1a0:	1e6b      	subs	r3, r5, #1
 800e1a2:	930c      	str	r3, [sp, #48]	; 0x30
 800e1a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e1a8:	2b30      	cmp	r3, #48	; 0x30
 800e1aa:	d0f8      	beq.n	800e19e <_dtoa_r+0x62e>
 800e1ac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800e1b0:	e04a      	b.n	800e248 <_dtoa_r+0x6d8>
 800e1b2:	bf00      	nop
 800e1b4:	080138b0 	.word	0x080138b0
 800e1b8:	08013888 	.word	0x08013888
 800e1bc:	3ff00000 	.word	0x3ff00000
 800e1c0:	40240000 	.word	0x40240000
 800e1c4:	401c0000 	.word	0x401c0000
 800e1c8:	40140000 	.word	0x40140000
 800e1cc:	3fe00000 	.word	0x3fe00000
 800e1d0:	4baf      	ldr	r3, [pc, #700]	; (800e490 <_dtoa_r+0x920>)
 800e1d2:	f7f4 ffe1 	bl	8003198 <__aeabi_dmul>
 800e1d6:	4606      	mov	r6, r0
 800e1d8:	460f      	mov	r7, r1
 800e1da:	e7ac      	b.n	800e136 <_dtoa_r+0x5c6>
 800e1dc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e1e0:	9d00      	ldr	r5, [sp, #0]
 800e1e2:	4642      	mov	r2, r8
 800e1e4:	464b      	mov	r3, r9
 800e1e6:	4630      	mov	r0, r6
 800e1e8:	4639      	mov	r1, r7
 800e1ea:	f7f5 f8ff 	bl	80033ec <__aeabi_ddiv>
 800e1ee:	f7f5 fa83 	bl	80036f8 <__aeabi_d2iz>
 800e1f2:	9002      	str	r0, [sp, #8]
 800e1f4:	f7f4 ff66 	bl	80030c4 <__aeabi_i2d>
 800e1f8:	4642      	mov	r2, r8
 800e1fa:	464b      	mov	r3, r9
 800e1fc:	f7f4 ffcc 	bl	8003198 <__aeabi_dmul>
 800e200:	4602      	mov	r2, r0
 800e202:	460b      	mov	r3, r1
 800e204:	4630      	mov	r0, r6
 800e206:	4639      	mov	r1, r7
 800e208:	f7f4 fe0e 	bl	8002e28 <__aeabi_dsub>
 800e20c:	9e02      	ldr	r6, [sp, #8]
 800e20e:	9f01      	ldr	r7, [sp, #4]
 800e210:	3630      	adds	r6, #48	; 0x30
 800e212:	f805 6b01 	strb.w	r6, [r5], #1
 800e216:	9e00      	ldr	r6, [sp, #0]
 800e218:	1bae      	subs	r6, r5, r6
 800e21a:	42b7      	cmp	r7, r6
 800e21c:	4602      	mov	r2, r0
 800e21e:	460b      	mov	r3, r1
 800e220:	d137      	bne.n	800e292 <_dtoa_r+0x722>
 800e222:	f7f4 fe03 	bl	8002e2c <__adddf3>
 800e226:	4642      	mov	r2, r8
 800e228:	464b      	mov	r3, r9
 800e22a:	4606      	mov	r6, r0
 800e22c:	460f      	mov	r7, r1
 800e22e:	f7f5 fa43 	bl	80036b8 <__aeabi_dcmpgt>
 800e232:	b9c8      	cbnz	r0, 800e268 <_dtoa_r+0x6f8>
 800e234:	4642      	mov	r2, r8
 800e236:	464b      	mov	r3, r9
 800e238:	4630      	mov	r0, r6
 800e23a:	4639      	mov	r1, r7
 800e23c:	f7f5 fa14 	bl	8003668 <__aeabi_dcmpeq>
 800e240:	b110      	cbz	r0, 800e248 <_dtoa_r+0x6d8>
 800e242:	9b02      	ldr	r3, [sp, #8]
 800e244:	07d9      	lsls	r1, r3, #31
 800e246:	d40f      	bmi.n	800e268 <_dtoa_r+0x6f8>
 800e248:	4620      	mov	r0, r4
 800e24a:	4659      	mov	r1, fp
 800e24c:	f000 fac8 	bl	800e7e0 <_Bfree>
 800e250:	2300      	movs	r3, #0
 800e252:	702b      	strb	r3, [r5, #0]
 800e254:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e256:	f10a 0001 	add.w	r0, sl, #1
 800e25a:	6018      	str	r0, [r3, #0]
 800e25c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e25e:	2b00      	cmp	r3, #0
 800e260:	f43f acd8 	beq.w	800dc14 <_dtoa_r+0xa4>
 800e264:	601d      	str	r5, [r3, #0]
 800e266:	e4d5      	b.n	800dc14 <_dtoa_r+0xa4>
 800e268:	f8cd a01c 	str.w	sl, [sp, #28]
 800e26c:	462b      	mov	r3, r5
 800e26e:	461d      	mov	r5, r3
 800e270:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e274:	2a39      	cmp	r2, #57	; 0x39
 800e276:	d108      	bne.n	800e28a <_dtoa_r+0x71a>
 800e278:	9a00      	ldr	r2, [sp, #0]
 800e27a:	429a      	cmp	r2, r3
 800e27c:	d1f7      	bne.n	800e26e <_dtoa_r+0x6fe>
 800e27e:	9a07      	ldr	r2, [sp, #28]
 800e280:	9900      	ldr	r1, [sp, #0]
 800e282:	3201      	adds	r2, #1
 800e284:	9207      	str	r2, [sp, #28]
 800e286:	2230      	movs	r2, #48	; 0x30
 800e288:	700a      	strb	r2, [r1, #0]
 800e28a:	781a      	ldrb	r2, [r3, #0]
 800e28c:	3201      	adds	r2, #1
 800e28e:	701a      	strb	r2, [r3, #0]
 800e290:	e78c      	b.n	800e1ac <_dtoa_r+0x63c>
 800e292:	4b7f      	ldr	r3, [pc, #508]	; (800e490 <_dtoa_r+0x920>)
 800e294:	2200      	movs	r2, #0
 800e296:	f7f4 ff7f 	bl	8003198 <__aeabi_dmul>
 800e29a:	2200      	movs	r2, #0
 800e29c:	2300      	movs	r3, #0
 800e29e:	4606      	mov	r6, r0
 800e2a0:	460f      	mov	r7, r1
 800e2a2:	f7f5 f9e1 	bl	8003668 <__aeabi_dcmpeq>
 800e2a6:	2800      	cmp	r0, #0
 800e2a8:	d09b      	beq.n	800e1e2 <_dtoa_r+0x672>
 800e2aa:	e7cd      	b.n	800e248 <_dtoa_r+0x6d8>
 800e2ac:	9a08      	ldr	r2, [sp, #32]
 800e2ae:	2a00      	cmp	r2, #0
 800e2b0:	f000 80c4 	beq.w	800e43c <_dtoa_r+0x8cc>
 800e2b4:	9a05      	ldr	r2, [sp, #20]
 800e2b6:	2a01      	cmp	r2, #1
 800e2b8:	f300 80a8 	bgt.w	800e40c <_dtoa_r+0x89c>
 800e2bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e2be:	2a00      	cmp	r2, #0
 800e2c0:	f000 80a0 	beq.w	800e404 <_dtoa_r+0x894>
 800e2c4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e2c8:	9e06      	ldr	r6, [sp, #24]
 800e2ca:	4645      	mov	r5, r8
 800e2cc:	9a04      	ldr	r2, [sp, #16]
 800e2ce:	2101      	movs	r1, #1
 800e2d0:	441a      	add	r2, r3
 800e2d2:	4620      	mov	r0, r4
 800e2d4:	4498      	add	r8, r3
 800e2d6:	9204      	str	r2, [sp, #16]
 800e2d8:	f000 fb3e 	bl	800e958 <__i2b>
 800e2dc:	4607      	mov	r7, r0
 800e2de:	2d00      	cmp	r5, #0
 800e2e0:	dd0b      	ble.n	800e2fa <_dtoa_r+0x78a>
 800e2e2:	9b04      	ldr	r3, [sp, #16]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	dd08      	ble.n	800e2fa <_dtoa_r+0x78a>
 800e2e8:	42ab      	cmp	r3, r5
 800e2ea:	9a04      	ldr	r2, [sp, #16]
 800e2ec:	bfa8      	it	ge
 800e2ee:	462b      	movge	r3, r5
 800e2f0:	eba8 0803 	sub.w	r8, r8, r3
 800e2f4:	1aed      	subs	r5, r5, r3
 800e2f6:	1ad3      	subs	r3, r2, r3
 800e2f8:	9304      	str	r3, [sp, #16]
 800e2fa:	9b06      	ldr	r3, [sp, #24]
 800e2fc:	b1fb      	cbz	r3, 800e33e <_dtoa_r+0x7ce>
 800e2fe:	9b08      	ldr	r3, [sp, #32]
 800e300:	2b00      	cmp	r3, #0
 800e302:	f000 809f 	beq.w	800e444 <_dtoa_r+0x8d4>
 800e306:	2e00      	cmp	r6, #0
 800e308:	dd11      	ble.n	800e32e <_dtoa_r+0x7be>
 800e30a:	4639      	mov	r1, r7
 800e30c:	4632      	mov	r2, r6
 800e30e:	4620      	mov	r0, r4
 800e310:	f000 fbde 	bl	800ead0 <__pow5mult>
 800e314:	465a      	mov	r2, fp
 800e316:	4601      	mov	r1, r0
 800e318:	4607      	mov	r7, r0
 800e31a:	4620      	mov	r0, r4
 800e31c:	f000 fb32 	bl	800e984 <__multiply>
 800e320:	4659      	mov	r1, fp
 800e322:	9007      	str	r0, [sp, #28]
 800e324:	4620      	mov	r0, r4
 800e326:	f000 fa5b 	bl	800e7e0 <_Bfree>
 800e32a:	9b07      	ldr	r3, [sp, #28]
 800e32c:	469b      	mov	fp, r3
 800e32e:	9b06      	ldr	r3, [sp, #24]
 800e330:	1b9a      	subs	r2, r3, r6
 800e332:	d004      	beq.n	800e33e <_dtoa_r+0x7ce>
 800e334:	4659      	mov	r1, fp
 800e336:	4620      	mov	r0, r4
 800e338:	f000 fbca 	bl	800ead0 <__pow5mult>
 800e33c:	4683      	mov	fp, r0
 800e33e:	2101      	movs	r1, #1
 800e340:	4620      	mov	r0, r4
 800e342:	f000 fb09 	bl	800e958 <__i2b>
 800e346:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e348:	2b00      	cmp	r3, #0
 800e34a:	4606      	mov	r6, r0
 800e34c:	dd7c      	ble.n	800e448 <_dtoa_r+0x8d8>
 800e34e:	461a      	mov	r2, r3
 800e350:	4601      	mov	r1, r0
 800e352:	4620      	mov	r0, r4
 800e354:	f000 fbbc 	bl	800ead0 <__pow5mult>
 800e358:	9b05      	ldr	r3, [sp, #20]
 800e35a:	2b01      	cmp	r3, #1
 800e35c:	4606      	mov	r6, r0
 800e35e:	dd76      	ble.n	800e44e <_dtoa_r+0x8de>
 800e360:	2300      	movs	r3, #0
 800e362:	9306      	str	r3, [sp, #24]
 800e364:	6933      	ldr	r3, [r6, #16]
 800e366:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e36a:	6918      	ldr	r0, [r3, #16]
 800e36c:	f000 faa4 	bl	800e8b8 <__hi0bits>
 800e370:	f1c0 0020 	rsb	r0, r0, #32
 800e374:	9b04      	ldr	r3, [sp, #16]
 800e376:	4418      	add	r0, r3
 800e378:	f010 001f 	ands.w	r0, r0, #31
 800e37c:	f000 8086 	beq.w	800e48c <_dtoa_r+0x91c>
 800e380:	f1c0 0320 	rsb	r3, r0, #32
 800e384:	2b04      	cmp	r3, #4
 800e386:	dd7f      	ble.n	800e488 <_dtoa_r+0x918>
 800e388:	f1c0 001c 	rsb	r0, r0, #28
 800e38c:	9b04      	ldr	r3, [sp, #16]
 800e38e:	4403      	add	r3, r0
 800e390:	4480      	add	r8, r0
 800e392:	4405      	add	r5, r0
 800e394:	9304      	str	r3, [sp, #16]
 800e396:	f1b8 0f00 	cmp.w	r8, #0
 800e39a:	dd05      	ble.n	800e3a8 <_dtoa_r+0x838>
 800e39c:	4659      	mov	r1, fp
 800e39e:	4642      	mov	r2, r8
 800e3a0:	4620      	mov	r0, r4
 800e3a2:	f000 fbef 	bl	800eb84 <__lshift>
 800e3a6:	4683      	mov	fp, r0
 800e3a8:	9b04      	ldr	r3, [sp, #16]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	dd05      	ble.n	800e3ba <_dtoa_r+0x84a>
 800e3ae:	4631      	mov	r1, r6
 800e3b0:	461a      	mov	r2, r3
 800e3b2:	4620      	mov	r0, r4
 800e3b4:	f000 fbe6 	bl	800eb84 <__lshift>
 800e3b8:	4606      	mov	r6, r0
 800e3ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d069      	beq.n	800e494 <_dtoa_r+0x924>
 800e3c0:	4631      	mov	r1, r6
 800e3c2:	4658      	mov	r0, fp
 800e3c4:	f000 fc4a 	bl	800ec5c <__mcmp>
 800e3c8:	2800      	cmp	r0, #0
 800e3ca:	da63      	bge.n	800e494 <_dtoa_r+0x924>
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	4659      	mov	r1, fp
 800e3d0:	220a      	movs	r2, #10
 800e3d2:	4620      	mov	r0, r4
 800e3d4:	f000 fa26 	bl	800e824 <__multadd>
 800e3d8:	9b08      	ldr	r3, [sp, #32]
 800e3da:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e3de:	4683      	mov	fp, r0
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	f000 818f 	beq.w	800e704 <_dtoa_r+0xb94>
 800e3e6:	4639      	mov	r1, r7
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	220a      	movs	r2, #10
 800e3ec:	4620      	mov	r0, r4
 800e3ee:	f000 fa19 	bl	800e824 <__multadd>
 800e3f2:	f1b9 0f00 	cmp.w	r9, #0
 800e3f6:	4607      	mov	r7, r0
 800e3f8:	f300 808e 	bgt.w	800e518 <_dtoa_r+0x9a8>
 800e3fc:	9b05      	ldr	r3, [sp, #20]
 800e3fe:	2b02      	cmp	r3, #2
 800e400:	dc50      	bgt.n	800e4a4 <_dtoa_r+0x934>
 800e402:	e089      	b.n	800e518 <_dtoa_r+0x9a8>
 800e404:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e406:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e40a:	e75d      	b.n	800e2c8 <_dtoa_r+0x758>
 800e40c:	9b01      	ldr	r3, [sp, #4]
 800e40e:	1e5e      	subs	r6, r3, #1
 800e410:	9b06      	ldr	r3, [sp, #24]
 800e412:	42b3      	cmp	r3, r6
 800e414:	bfbf      	itttt	lt
 800e416:	9b06      	ldrlt	r3, [sp, #24]
 800e418:	9606      	strlt	r6, [sp, #24]
 800e41a:	1af2      	sublt	r2, r6, r3
 800e41c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800e41e:	bfb6      	itet	lt
 800e420:	189b      	addlt	r3, r3, r2
 800e422:	1b9e      	subge	r6, r3, r6
 800e424:	930d      	strlt	r3, [sp, #52]	; 0x34
 800e426:	9b01      	ldr	r3, [sp, #4]
 800e428:	bfb8      	it	lt
 800e42a:	2600      	movlt	r6, #0
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	bfb5      	itete	lt
 800e430:	eba8 0503 	sublt.w	r5, r8, r3
 800e434:	9b01      	ldrge	r3, [sp, #4]
 800e436:	2300      	movlt	r3, #0
 800e438:	4645      	movge	r5, r8
 800e43a:	e747      	b.n	800e2cc <_dtoa_r+0x75c>
 800e43c:	9e06      	ldr	r6, [sp, #24]
 800e43e:	9f08      	ldr	r7, [sp, #32]
 800e440:	4645      	mov	r5, r8
 800e442:	e74c      	b.n	800e2de <_dtoa_r+0x76e>
 800e444:	9a06      	ldr	r2, [sp, #24]
 800e446:	e775      	b.n	800e334 <_dtoa_r+0x7c4>
 800e448:	9b05      	ldr	r3, [sp, #20]
 800e44a:	2b01      	cmp	r3, #1
 800e44c:	dc18      	bgt.n	800e480 <_dtoa_r+0x910>
 800e44e:	9b02      	ldr	r3, [sp, #8]
 800e450:	b9b3      	cbnz	r3, 800e480 <_dtoa_r+0x910>
 800e452:	9b03      	ldr	r3, [sp, #12]
 800e454:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e458:	b9a3      	cbnz	r3, 800e484 <_dtoa_r+0x914>
 800e45a:	9b03      	ldr	r3, [sp, #12]
 800e45c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e460:	0d1b      	lsrs	r3, r3, #20
 800e462:	051b      	lsls	r3, r3, #20
 800e464:	b12b      	cbz	r3, 800e472 <_dtoa_r+0x902>
 800e466:	9b04      	ldr	r3, [sp, #16]
 800e468:	3301      	adds	r3, #1
 800e46a:	9304      	str	r3, [sp, #16]
 800e46c:	f108 0801 	add.w	r8, r8, #1
 800e470:	2301      	movs	r3, #1
 800e472:	9306      	str	r3, [sp, #24]
 800e474:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e476:	2b00      	cmp	r3, #0
 800e478:	f47f af74 	bne.w	800e364 <_dtoa_r+0x7f4>
 800e47c:	2001      	movs	r0, #1
 800e47e:	e779      	b.n	800e374 <_dtoa_r+0x804>
 800e480:	2300      	movs	r3, #0
 800e482:	e7f6      	b.n	800e472 <_dtoa_r+0x902>
 800e484:	9b02      	ldr	r3, [sp, #8]
 800e486:	e7f4      	b.n	800e472 <_dtoa_r+0x902>
 800e488:	d085      	beq.n	800e396 <_dtoa_r+0x826>
 800e48a:	4618      	mov	r0, r3
 800e48c:	301c      	adds	r0, #28
 800e48e:	e77d      	b.n	800e38c <_dtoa_r+0x81c>
 800e490:	40240000 	.word	0x40240000
 800e494:	9b01      	ldr	r3, [sp, #4]
 800e496:	2b00      	cmp	r3, #0
 800e498:	dc38      	bgt.n	800e50c <_dtoa_r+0x99c>
 800e49a:	9b05      	ldr	r3, [sp, #20]
 800e49c:	2b02      	cmp	r3, #2
 800e49e:	dd35      	ble.n	800e50c <_dtoa_r+0x99c>
 800e4a0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e4a4:	f1b9 0f00 	cmp.w	r9, #0
 800e4a8:	d10d      	bne.n	800e4c6 <_dtoa_r+0x956>
 800e4aa:	4631      	mov	r1, r6
 800e4ac:	464b      	mov	r3, r9
 800e4ae:	2205      	movs	r2, #5
 800e4b0:	4620      	mov	r0, r4
 800e4b2:	f000 f9b7 	bl	800e824 <__multadd>
 800e4b6:	4601      	mov	r1, r0
 800e4b8:	4606      	mov	r6, r0
 800e4ba:	4658      	mov	r0, fp
 800e4bc:	f000 fbce 	bl	800ec5c <__mcmp>
 800e4c0:	2800      	cmp	r0, #0
 800e4c2:	f73f adbd 	bgt.w	800e040 <_dtoa_r+0x4d0>
 800e4c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4c8:	9d00      	ldr	r5, [sp, #0]
 800e4ca:	ea6f 0a03 	mvn.w	sl, r3
 800e4ce:	f04f 0800 	mov.w	r8, #0
 800e4d2:	4631      	mov	r1, r6
 800e4d4:	4620      	mov	r0, r4
 800e4d6:	f000 f983 	bl	800e7e0 <_Bfree>
 800e4da:	2f00      	cmp	r7, #0
 800e4dc:	f43f aeb4 	beq.w	800e248 <_dtoa_r+0x6d8>
 800e4e0:	f1b8 0f00 	cmp.w	r8, #0
 800e4e4:	d005      	beq.n	800e4f2 <_dtoa_r+0x982>
 800e4e6:	45b8      	cmp	r8, r7
 800e4e8:	d003      	beq.n	800e4f2 <_dtoa_r+0x982>
 800e4ea:	4641      	mov	r1, r8
 800e4ec:	4620      	mov	r0, r4
 800e4ee:	f000 f977 	bl	800e7e0 <_Bfree>
 800e4f2:	4639      	mov	r1, r7
 800e4f4:	4620      	mov	r0, r4
 800e4f6:	f000 f973 	bl	800e7e0 <_Bfree>
 800e4fa:	e6a5      	b.n	800e248 <_dtoa_r+0x6d8>
 800e4fc:	2600      	movs	r6, #0
 800e4fe:	4637      	mov	r7, r6
 800e500:	e7e1      	b.n	800e4c6 <_dtoa_r+0x956>
 800e502:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800e504:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800e508:	4637      	mov	r7, r6
 800e50a:	e599      	b.n	800e040 <_dtoa_r+0x4d0>
 800e50c:	9b08      	ldr	r3, [sp, #32]
 800e50e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e512:	2b00      	cmp	r3, #0
 800e514:	f000 80fd 	beq.w	800e712 <_dtoa_r+0xba2>
 800e518:	2d00      	cmp	r5, #0
 800e51a:	dd05      	ble.n	800e528 <_dtoa_r+0x9b8>
 800e51c:	4639      	mov	r1, r7
 800e51e:	462a      	mov	r2, r5
 800e520:	4620      	mov	r0, r4
 800e522:	f000 fb2f 	bl	800eb84 <__lshift>
 800e526:	4607      	mov	r7, r0
 800e528:	9b06      	ldr	r3, [sp, #24]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d05c      	beq.n	800e5e8 <_dtoa_r+0xa78>
 800e52e:	6879      	ldr	r1, [r7, #4]
 800e530:	4620      	mov	r0, r4
 800e532:	f000 f915 	bl	800e760 <_Balloc>
 800e536:	4605      	mov	r5, r0
 800e538:	b928      	cbnz	r0, 800e546 <_dtoa_r+0x9d6>
 800e53a:	4b80      	ldr	r3, [pc, #512]	; (800e73c <_dtoa_r+0xbcc>)
 800e53c:	4602      	mov	r2, r0
 800e53e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e542:	f7ff bb2e 	b.w	800dba2 <_dtoa_r+0x32>
 800e546:	693a      	ldr	r2, [r7, #16]
 800e548:	3202      	adds	r2, #2
 800e54a:	0092      	lsls	r2, r2, #2
 800e54c:	f107 010c 	add.w	r1, r7, #12
 800e550:	300c      	adds	r0, #12
 800e552:	f7fe fdc5 	bl	800d0e0 <memcpy>
 800e556:	2201      	movs	r2, #1
 800e558:	4629      	mov	r1, r5
 800e55a:	4620      	mov	r0, r4
 800e55c:	f000 fb12 	bl	800eb84 <__lshift>
 800e560:	9b00      	ldr	r3, [sp, #0]
 800e562:	3301      	adds	r3, #1
 800e564:	9301      	str	r3, [sp, #4]
 800e566:	9b00      	ldr	r3, [sp, #0]
 800e568:	444b      	add	r3, r9
 800e56a:	9307      	str	r3, [sp, #28]
 800e56c:	9b02      	ldr	r3, [sp, #8]
 800e56e:	f003 0301 	and.w	r3, r3, #1
 800e572:	46b8      	mov	r8, r7
 800e574:	9306      	str	r3, [sp, #24]
 800e576:	4607      	mov	r7, r0
 800e578:	9b01      	ldr	r3, [sp, #4]
 800e57a:	4631      	mov	r1, r6
 800e57c:	3b01      	subs	r3, #1
 800e57e:	4658      	mov	r0, fp
 800e580:	9302      	str	r3, [sp, #8]
 800e582:	f7ff fa67 	bl	800da54 <quorem>
 800e586:	4603      	mov	r3, r0
 800e588:	3330      	adds	r3, #48	; 0x30
 800e58a:	9004      	str	r0, [sp, #16]
 800e58c:	4641      	mov	r1, r8
 800e58e:	4658      	mov	r0, fp
 800e590:	9308      	str	r3, [sp, #32]
 800e592:	f000 fb63 	bl	800ec5c <__mcmp>
 800e596:	463a      	mov	r2, r7
 800e598:	4681      	mov	r9, r0
 800e59a:	4631      	mov	r1, r6
 800e59c:	4620      	mov	r0, r4
 800e59e:	f000 fb79 	bl	800ec94 <__mdiff>
 800e5a2:	68c2      	ldr	r2, [r0, #12]
 800e5a4:	9b08      	ldr	r3, [sp, #32]
 800e5a6:	4605      	mov	r5, r0
 800e5a8:	bb02      	cbnz	r2, 800e5ec <_dtoa_r+0xa7c>
 800e5aa:	4601      	mov	r1, r0
 800e5ac:	4658      	mov	r0, fp
 800e5ae:	f000 fb55 	bl	800ec5c <__mcmp>
 800e5b2:	9b08      	ldr	r3, [sp, #32]
 800e5b4:	4602      	mov	r2, r0
 800e5b6:	4629      	mov	r1, r5
 800e5b8:	4620      	mov	r0, r4
 800e5ba:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800e5be:	f000 f90f 	bl	800e7e0 <_Bfree>
 800e5c2:	9b05      	ldr	r3, [sp, #20]
 800e5c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e5c6:	9d01      	ldr	r5, [sp, #4]
 800e5c8:	ea43 0102 	orr.w	r1, r3, r2
 800e5cc:	9b06      	ldr	r3, [sp, #24]
 800e5ce:	430b      	orrs	r3, r1
 800e5d0:	9b08      	ldr	r3, [sp, #32]
 800e5d2:	d10d      	bne.n	800e5f0 <_dtoa_r+0xa80>
 800e5d4:	2b39      	cmp	r3, #57	; 0x39
 800e5d6:	d029      	beq.n	800e62c <_dtoa_r+0xabc>
 800e5d8:	f1b9 0f00 	cmp.w	r9, #0
 800e5dc:	dd01      	ble.n	800e5e2 <_dtoa_r+0xa72>
 800e5de:	9b04      	ldr	r3, [sp, #16]
 800e5e0:	3331      	adds	r3, #49	; 0x31
 800e5e2:	9a02      	ldr	r2, [sp, #8]
 800e5e4:	7013      	strb	r3, [r2, #0]
 800e5e6:	e774      	b.n	800e4d2 <_dtoa_r+0x962>
 800e5e8:	4638      	mov	r0, r7
 800e5ea:	e7b9      	b.n	800e560 <_dtoa_r+0x9f0>
 800e5ec:	2201      	movs	r2, #1
 800e5ee:	e7e2      	b.n	800e5b6 <_dtoa_r+0xa46>
 800e5f0:	f1b9 0f00 	cmp.w	r9, #0
 800e5f4:	db06      	blt.n	800e604 <_dtoa_r+0xa94>
 800e5f6:	9905      	ldr	r1, [sp, #20]
 800e5f8:	ea41 0909 	orr.w	r9, r1, r9
 800e5fc:	9906      	ldr	r1, [sp, #24]
 800e5fe:	ea59 0101 	orrs.w	r1, r9, r1
 800e602:	d120      	bne.n	800e646 <_dtoa_r+0xad6>
 800e604:	2a00      	cmp	r2, #0
 800e606:	ddec      	ble.n	800e5e2 <_dtoa_r+0xa72>
 800e608:	4659      	mov	r1, fp
 800e60a:	2201      	movs	r2, #1
 800e60c:	4620      	mov	r0, r4
 800e60e:	9301      	str	r3, [sp, #4]
 800e610:	f000 fab8 	bl	800eb84 <__lshift>
 800e614:	4631      	mov	r1, r6
 800e616:	4683      	mov	fp, r0
 800e618:	f000 fb20 	bl	800ec5c <__mcmp>
 800e61c:	2800      	cmp	r0, #0
 800e61e:	9b01      	ldr	r3, [sp, #4]
 800e620:	dc02      	bgt.n	800e628 <_dtoa_r+0xab8>
 800e622:	d1de      	bne.n	800e5e2 <_dtoa_r+0xa72>
 800e624:	07da      	lsls	r2, r3, #31
 800e626:	d5dc      	bpl.n	800e5e2 <_dtoa_r+0xa72>
 800e628:	2b39      	cmp	r3, #57	; 0x39
 800e62a:	d1d8      	bne.n	800e5de <_dtoa_r+0xa6e>
 800e62c:	9a02      	ldr	r2, [sp, #8]
 800e62e:	2339      	movs	r3, #57	; 0x39
 800e630:	7013      	strb	r3, [r2, #0]
 800e632:	462b      	mov	r3, r5
 800e634:	461d      	mov	r5, r3
 800e636:	3b01      	subs	r3, #1
 800e638:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e63c:	2a39      	cmp	r2, #57	; 0x39
 800e63e:	d050      	beq.n	800e6e2 <_dtoa_r+0xb72>
 800e640:	3201      	adds	r2, #1
 800e642:	701a      	strb	r2, [r3, #0]
 800e644:	e745      	b.n	800e4d2 <_dtoa_r+0x962>
 800e646:	2a00      	cmp	r2, #0
 800e648:	dd03      	ble.n	800e652 <_dtoa_r+0xae2>
 800e64a:	2b39      	cmp	r3, #57	; 0x39
 800e64c:	d0ee      	beq.n	800e62c <_dtoa_r+0xabc>
 800e64e:	3301      	adds	r3, #1
 800e650:	e7c7      	b.n	800e5e2 <_dtoa_r+0xa72>
 800e652:	9a01      	ldr	r2, [sp, #4]
 800e654:	9907      	ldr	r1, [sp, #28]
 800e656:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e65a:	428a      	cmp	r2, r1
 800e65c:	d02a      	beq.n	800e6b4 <_dtoa_r+0xb44>
 800e65e:	4659      	mov	r1, fp
 800e660:	2300      	movs	r3, #0
 800e662:	220a      	movs	r2, #10
 800e664:	4620      	mov	r0, r4
 800e666:	f000 f8dd 	bl	800e824 <__multadd>
 800e66a:	45b8      	cmp	r8, r7
 800e66c:	4683      	mov	fp, r0
 800e66e:	f04f 0300 	mov.w	r3, #0
 800e672:	f04f 020a 	mov.w	r2, #10
 800e676:	4641      	mov	r1, r8
 800e678:	4620      	mov	r0, r4
 800e67a:	d107      	bne.n	800e68c <_dtoa_r+0xb1c>
 800e67c:	f000 f8d2 	bl	800e824 <__multadd>
 800e680:	4680      	mov	r8, r0
 800e682:	4607      	mov	r7, r0
 800e684:	9b01      	ldr	r3, [sp, #4]
 800e686:	3301      	adds	r3, #1
 800e688:	9301      	str	r3, [sp, #4]
 800e68a:	e775      	b.n	800e578 <_dtoa_r+0xa08>
 800e68c:	f000 f8ca 	bl	800e824 <__multadd>
 800e690:	4639      	mov	r1, r7
 800e692:	4680      	mov	r8, r0
 800e694:	2300      	movs	r3, #0
 800e696:	220a      	movs	r2, #10
 800e698:	4620      	mov	r0, r4
 800e69a:	f000 f8c3 	bl	800e824 <__multadd>
 800e69e:	4607      	mov	r7, r0
 800e6a0:	e7f0      	b.n	800e684 <_dtoa_r+0xb14>
 800e6a2:	f1b9 0f00 	cmp.w	r9, #0
 800e6a6:	9a00      	ldr	r2, [sp, #0]
 800e6a8:	bfcc      	ite	gt
 800e6aa:	464d      	movgt	r5, r9
 800e6ac:	2501      	movle	r5, #1
 800e6ae:	4415      	add	r5, r2
 800e6b0:	f04f 0800 	mov.w	r8, #0
 800e6b4:	4659      	mov	r1, fp
 800e6b6:	2201      	movs	r2, #1
 800e6b8:	4620      	mov	r0, r4
 800e6ba:	9301      	str	r3, [sp, #4]
 800e6bc:	f000 fa62 	bl	800eb84 <__lshift>
 800e6c0:	4631      	mov	r1, r6
 800e6c2:	4683      	mov	fp, r0
 800e6c4:	f000 faca 	bl	800ec5c <__mcmp>
 800e6c8:	2800      	cmp	r0, #0
 800e6ca:	dcb2      	bgt.n	800e632 <_dtoa_r+0xac2>
 800e6cc:	d102      	bne.n	800e6d4 <_dtoa_r+0xb64>
 800e6ce:	9b01      	ldr	r3, [sp, #4]
 800e6d0:	07db      	lsls	r3, r3, #31
 800e6d2:	d4ae      	bmi.n	800e632 <_dtoa_r+0xac2>
 800e6d4:	462b      	mov	r3, r5
 800e6d6:	461d      	mov	r5, r3
 800e6d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e6dc:	2a30      	cmp	r2, #48	; 0x30
 800e6de:	d0fa      	beq.n	800e6d6 <_dtoa_r+0xb66>
 800e6e0:	e6f7      	b.n	800e4d2 <_dtoa_r+0x962>
 800e6e2:	9a00      	ldr	r2, [sp, #0]
 800e6e4:	429a      	cmp	r2, r3
 800e6e6:	d1a5      	bne.n	800e634 <_dtoa_r+0xac4>
 800e6e8:	f10a 0a01 	add.w	sl, sl, #1
 800e6ec:	2331      	movs	r3, #49	; 0x31
 800e6ee:	e779      	b.n	800e5e4 <_dtoa_r+0xa74>
 800e6f0:	4b13      	ldr	r3, [pc, #76]	; (800e740 <_dtoa_r+0xbd0>)
 800e6f2:	f7ff baaf 	b.w	800dc54 <_dtoa_r+0xe4>
 800e6f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	f47f aa86 	bne.w	800dc0a <_dtoa_r+0x9a>
 800e6fe:	4b11      	ldr	r3, [pc, #68]	; (800e744 <_dtoa_r+0xbd4>)
 800e700:	f7ff baa8 	b.w	800dc54 <_dtoa_r+0xe4>
 800e704:	f1b9 0f00 	cmp.w	r9, #0
 800e708:	dc03      	bgt.n	800e712 <_dtoa_r+0xba2>
 800e70a:	9b05      	ldr	r3, [sp, #20]
 800e70c:	2b02      	cmp	r3, #2
 800e70e:	f73f aec9 	bgt.w	800e4a4 <_dtoa_r+0x934>
 800e712:	9d00      	ldr	r5, [sp, #0]
 800e714:	4631      	mov	r1, r6
 800e716:	4658      	mov	r0, fp
 800e718:	f7ff f99c 	bl	800da54 <quorem>
 800e71c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800e720:	f805 3b01 	strb.w	r3, [r5], #1
 800e724:	9a00      	ldr	r2, [sp, #0]
 800e726:	1aaa      	subs	r2, r5, r2
 800e728:	4591      	cmp	r9, r2
 800e72a:	ddba      	ble.n	800e6a2 <_dtoa_r+0xb32>
 800e72c:	4659      	mov	r1, fp
 800e72e:	2300      	movs	r3, #0
 800e730:	220a      	movs	r2, #10
 800e732:	4620      	mov	r0, r4
 800e734:	f000 f876 	bl	800e824 <__multadd>
 800e738:	4683      	mov	fp, r0
 800e73a:	e7eb      	b.n	800e714 <_dtoa_r+0xba4>
 800e73c:	08013813 	.word	0x08013813
 800e740:	0801376c 	.word	0x0801376c
 800e744:	08013790 	.word	0x08013790

0800e748 <_localeconv_r>:
 800e748:	4800      	ldr	r0, [pc, #0]	; (800e74c <_localeconv_r+0x4>)
 800e74a:	4770      	bx	lr
 800e74c:	2000019c 	.word	0x2000019c

0800e750 <malloc>:
 800e750:	4b02      	ldr	r3, [pc, #8]	; (800e75c <malloc+0xc>)
 800e752:	4601      	mov	r1, r0
 800e754:	6818      	ldr	r0, [r3, #0]
 800e756:	f000 bbe1 	b.w	800ef1c <_malloc_r>
 800e75a:	bf00      	nop
 800e75c:	20000048 	.word	0x20000048

0800e760 <_Balloc>:
 800e760:	b570      	push	{r4, r5, r6, lr}
 800e762:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e764:	4604      	mov	r4, r0
 800e766:	460d      	mov	r5, r1
 800e768:	b976      	cbnz	r6, 800e788 <_Balloc+0x28>
 800e76a:	2010      	movs	r0, #16
 800e76c:	f7ff fff0 	bl	800e750 <malloc>
 800e770:	4602      	mov	r2, r0
 800e772:	6260      	str	r0, [r4, #36]	; 0x24
 800e774:	b920      	cbnz	r0, 800e780 <_Balloc+0x20>
 800e776:	4b18      	ldr	r3, [pc, #96]	; (800e7d8 <_Balloc+0x78>)
 800e778:	4818      	ldr	r0, [pc, #96]	; (800e7dc <_Balloc+0x7c>)
 800e77a:	2166      	movs	r1, #102	; 0x66
 800e77c:	f000 fd94 	bl	800f2a8 <__assert_func>
 800e780:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e784:	6006      	str	r6, [r0, #0]
 800e786:	60c6      	str	r6, [r0, #12]
 800e788:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e78a:	68f3      	ldr	r3, [r6, #12]
 800e78c:	b183      	cbz	r3, 800e7b0 <_Balloc+0x50>
 800e78e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e790:	68db      	ldr	r3, [r3, #12]
 800e792:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e796:	b9b8      	cbnz	r0, 800e7c8 <_Balloc+0x68>
 800e798:	2101      	movs	r1, #1
 800e79a:	fa01 f605 	lsl.w	r6, r1, r5
 800e79e:	1d72      	adds	r2, r6, #5
 800e7a0:	0092      	lsls	r2, r2, #2
 800e7a2:	4620      	mov	r0, r4
 800e7a4:	f000 fb5a 	bl	800ee5c <_calloc_r>
 800e7a8:	b160      	cbz	r0, 800e7c4 <_Balloc+0x64>
 800e7aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e7ae:	e00e      	b.n	800e7ce <_Balloc+0x6e>
 800e7b0:	2221      	movs	r2, #33	; 0x21
 800e7b2:	2104      	movs	r1, #4
 800e7b4:	4620      	mov	r0, r4
 800e7b6:	f000 fb51 	bl	800ee5c <_calloc_r>
 800e7ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e7bc:	60f0      	str	r0, [r6, #12]
 800e7be:	68db      	ldr	r3, [r3, #12]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d1e4      	bne.n	800e78e <_Balloc+0x2e>
 800e7c4:	2000      	movs	r0, #0
 800e7c6:	bd70      	pop	{r4, r5, r6, pc}
 800e7c8:	6802      	ldr	r2, [r0, #0]
 800e7ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e7d4:	e7f7      	b.n	800e7c6 <_Balloc+0x66>
 800e7d6:	bf00      	nop
 800e7d8:	0801379d 	.word	0x0801379d
 800e7dc:	08013824 	.word	0x08013824

0800e7e0 <_Bfree>:
 800e7e0:	b570      	push	{r4, r5, r6, lr}
 800e7e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e7e4:	4605      	mov	r5, r0
 800e7e6:	460c      	mov	r4, r1
 800e7e8:	b976      	cbnz	r6, 800e808 <_Bfree+0x28>
 800e7ea:	2010      	movs	r0, #16
 800e7ec:	f7ff ffb0 	bl	800e750 <malloc>
 800e7f0:	4602      	mov	r2, r0
 800e7f2:	6268      	str	r0, [r5, #36]	; 0x24
 800e7f4:	b920      	cbnz	r0, 800e800 <_Bfree+0x20>
 800e7f6:	4b09      	ldr	r3, [pc, #36]	; (800e81c <_Bfree+0x3c>)
 800e7f8:	4809      	ldr	r0, [pc, #36]	; (800e820 <_Bfree+0x40>)
 800e7fa:	218a      	movs	r1, #138	; 0x8a
 800e7fc:	f000 fd54 	bl	800f2a8 <__assert_func>
 800e800:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e804:	6006      	str	r6, [r0, #0]
 800e806:	60c6      	str	r6, [r0, #12]
 800e808:	b13c      	cbz	r4, 800e81a <_Bfree+0x3a>
 800e80a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e80c:	6862      	ldr	r2, [r4, #4]
 800e80e:	68db      	ldr	r3, [r3, #12]
 800e810:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e814:	6021      	str	r1, [r4, #0]
 800e816:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e81a:	bd70      	pop	{r4, r5, r6, pc}
 800e81c:	0801379d 	.word	0x0801379d
 800e820:	08013824 	.word	0x08013824

0800e824 <__multadd>:
 800e824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e828:	690e      	ldr	r6, [r1, #16]
 800e82a:	4607      	mov	r7, r0
 800e82c:	4698      	mov	r8, r3
 800e82e:	460c      	mov	r4, r1
 800e830:	f101 0014 	add.w	r0, r1, #20
 800e834:	2300      	movs	r3, #0
 800e836:	6805      	ldr	r5, [r0, #0]
 800e838:	b2a9      	uxth	r1, r5
 800e83a:	fb02 8101 	mla	r1, r2, r1, r8
 800e83e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800e842:	0c2d      	lsrs	r5, r5, #16
 800e844:	fb02 c505 	mla	r5, r2, r5, ip
 800e848:	b289      	uxth	r1, r1
 800e84a:	3301      	adds	r3, #1
 800e84c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800e850:	429e      	cmp	r6, r3
 800e852:	f840 1b04 	str.w	r1, [r0], #4
 800e856:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800e85a:	dcec      	bgt.n	800e836 <__multadd+0x12>
 800e85c:	f1b8 0f00 	cmp.w	r8, #0
 800e860:	d022      	beq.n	800e8a8 <__multadd+0x84>
 800e862:	68a3      	ldr	r3, [r4, #8]
 800e864:	42b3      	cmp	r3, r6
 800e866:	dc19      	bgt.n	800e89c <__multadd+0x78>
 800e868:	6861      	ldr	r1, [r4, #4]
 800e86a:	4638      	mov	r0, r7
 800e86c:	3101      	adds	r1, #1
 800e86e:	f7ff ff77 	bl	800e760 <_Balloc>
 800e872:	4605      	mov	r5, r0
 800e874:	b928      	cbnz	r0, 800e882 <__multadd+0x5e>
 800e876:	4602      	mov	r2, r0
 800e878:	4b0d      	ldr	r3, [pc, #52]	; (800e8b0 <__multadd+0x8c>)
 800e87a:	480e      	ldr	r0, [pc, #56]	; (800e8b4 <__multadd+0x90>)
 800e87c:	21b5      	movs	r1, #181	; 0xb5
 800e87e:	f000 fd13 	bl	800f2a8 <__assert_func>
 800e882:	6922      	ldr	r2, [r4, #16]
 800e884:	3202      	adds	r2, #2
 800e886:	f104 010c 	add.w	r1, r4, #12
 800e88a:	0092      	lsls	r2, r2, #2
 800e88c:	300c      	adds	r0, #12
 800e88e:	f7fe fc27 	bl	800d0e0 <memcpy>
 800e892:	4621      	mov	r1, r4
 800e894:	4638      	mov	r0, r7
 800e896:	f7ff ffa3 	bl	800e7e0 <_Bfree>
 800e89a:	462c      	mov	r4, r5
 800e89c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800e8a0:	3601      	adds	r6, #1
 800e8a2:	f8c3 8014 	str.w	r8, [r3, #20]
 800e8a6:	6126      	str	r6, [r4, #16]
 800e8a8:	4620      	mov	r0, r4
 800e8aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8ae:	bf00      	nop
 800e8b0:	08013813 	.word	0x08013813
 800e8b4:	08013824 	.word	0x08013824

0800e8b8 <__hi0bits>:
 800e8b8:	0c03      	lsrs	r3, r0, #16
 800e8ba:	041b      	lsls	r3, r3, #16
 800e8bc:	b9d3      	cbnz	r3, 800e8f4 <__hi0bits+0x3c>
 800e8be:	0400      	lsls	r0, r0, #16
 800e8c0:	2310      	movs	r3, #16
 800e8c2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e8c6:	bf04      	itt	eq
 800e8c8:	0200      	lsleq	r0, r0, #8
 800e8ca:	3308      	addeq	r3, #8
 800e8cc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e8d0:	bf04      	itt	eq
 800e8d2:	0100      	lsleq	r0, r0, #4
 800e8d4:	3304      	addeq	r3, #4
 800e8d6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e8da:	bf04      	itt	eq
 800e8dc:	0080      	lsleq	r0, r0, #2
 800e8de:	3302      	addeq	r3, #2
 800e8e0:	2800      	cmp	r0, #0
 800e8e2:	db05      	blt.n	800e8f0 <__hi0bits+0x38>
 800e8e4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e8e8:	f103 0301 	add.w	r3, r3, #1
 800e8ec:	bf08      	it	eq
 800e8ee:	2320      	moveq	r3, #32
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	4770      	bx	lr
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	e7e4      	b.n	800e8c2 <__hi0bits+0xa>

0800e8f8 <__lo0bits>:
 800e8f8:	6803      	ldr	r3, [r0, #0]
 800e8fa:	f013 0207 	ands.w	r2, r3, #7
 800e8fe:	4601      	mov	r1, r0
 800e900:	d00b      	beq.n	800e91a <__lo0bits+0x22>
 800e902:	07da      	lsls	r2, r3, #31
 800e904:	d424      	bmi.n	800e950 <__lo0bits+0x58>
 800e906:	0798      	lsls	r0, r3, #30
 800e908:	bf49      	itett	mi
 800e90a:	085b      	lsrmi	r3, r3, #1
 800e90c:	089b      	lsrpl	r3, r3, #2
 800e90e:	2001      	movmi	r0, #1
 800e910:	600b      	strmi	r3, [r1, #0]
 800e912:	bf5c      	itt	pl
 800e914:	600b      	strpl	r3, [r1, #0]
 800e916:	2002      	movpl	r0, #2
 800e918:	4770      	bx	lr
 800e91a:	b298      	uxth	r0, r3
 800e91c:	b9b0      	cbnz	r0, 800e94c <__lo0bits+0x54>
 800e91e:	0c1b      	lsrs	r3, r3, #16
 800e920:	2010      	movs	r0, #16
 800e922:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e926:	bf04      	itt	eq
 800e928:	0a1b      	lsreq	r3, r3, #8
 800e92a:	3008      	addeq	r0, #8
 800e92c:	071a      	lsls	r2, r3, #28
 800e92e:	bf04      	itt	eq
 800e930:	091b      	lsreq	r3, r3, #4
 800e932:	3004      	addeq	r0, #4
 800e934:	079a      	lsls	r2, r3, #30
 800e936:	bf04      	itt	eq
 800e938:	089b      	lsreq	r3, r3, #2
 800e93a:	3002      	addeq	r0, #2
 800e93c:	07da      	lsls	r2, r3, #31
 800e93e:	d403      	bmi.n	800e948 <__lo0bits+0x50>
 800e940:	085b      	lsrs	r3, r3, #1
 800e942:	f100 0001 	add.w	r0, r0, #1
 800e946:	d005      	beq.n	800e954 <__lo0bits+0x5c>
 800e948:	600b      	str	r3, [r1, #0]
 800e94a:	4770      	bx	lr
 800e94c:	4610      	mov	r0, r2
 800e94e:	e7e8      	b.n	800e922 <__lo0bits+0x2a>
 800e950:	2000      	movs	r0, #0
 800e952:	4770      	bx	lr
 800e954:	2020      	movs	r0, #32
 800e956:	4770      	bx	lr

0800e958 <__i2b>:
 800e958:	b510      	push	{r4, lr}
 800e95a:	460c      	mov	r4, r1
 800e95c:	2101      	movs	r1, #1
 800e95e:	f7ff feff 	bl	800e760 <_Balloc>
 800e962:	4602      	mov	r2, r0
 800e964:	b928      	cbnz	r0, 800e972 <__i2b+0x1a>
 800e966:	4b05      	ldr	r3, [pc, #20]	; (800e97c <__i2b+0x24>)
 800e968:	4805      	ldr	r0, [pc, #20]	; (800e980 <__i2b+0x28>)
 800e96a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e96e:	f000 fc9b 	bl	800f2a8 <__assert_func>
 800e972:	2301      	movs	r3, #1
 800e974:	6144      	str	r4, [r0, #20]
 800e976:	6103      	str	r3, [r0, #16]
 800e978:	bd10      	pop	{r4, pc}
 800e97a:	bf00      	nop
 800e97c:	08013813 	.word	0x08013813
 800e980:	08013824 	.word	0x08013824

0800e984 <__multiply>:
 800e984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e988:	4614      	mov	r4, r2
 800e98a:	690a      	ldr	r2, [r1, #16]
 800e98c:	6923      	ldr	r3, [r4, #16]
 800e98e:	429a      	cmp	r2, r3
 800e990:	bfb8      	it	lt
 800e992:	460b      	movlt	r3, r1
 800e994:	460d      	mov	r5, r1
 800e996:	bfbc      	itt	lt
 800e998:	4625      	movlt	r5, r4
 800e99a:	461c      	movlt	r4, r3
 800e99c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800e9a0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e9a4:	68ab      	ldr	r3, [r5, #8]
 800e9a6:	6869      	ldr	r1, [r5, #4]
 800e9a8:	eb0a 0709 	add.w	r7, sl, r9
 800e9ac:	42bb      	cmp	r3, r7
 800e9ae:	b085      	sub	sp, #20
 800e9b0:	bfb8      	it	lt
 800e9b2:	3101      	addlt	r1, #1
 800e9b4:	f7ff fed4 	bl	800e760 <_Balloc>
 800e9b8:	b930      	cbnz	r0, 800e9c8 <__multiply+0x44>
 800e9ba:	4602      	mov	r2, r0
 800e9bc:	4b42      	ldr	r3, [pc, #264]	; (800eac8 <__multiply+0x144>)
 800e9be:	4843      	ldr	r0, [pc, #268]	; (800eacc <__multiply+0x148>)
 800e9c0:	f240 115d 	movw	r1, #349	; 0x15d
 800e9c4:	f000 fc70 	bl	800f2a8 <__assert_func>
 800e9c8:	f100 0614 	add.w	r6, r0, #20
 800e9cc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800e9d0:	4633      	mov	r3, r6
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	4543      	cmp	r3, r8
 800e9d6:	d31e      	bcc.n	800ea16 <__multiply+0x92>
 800e9d8:	f105 0c14 	add.w	ip, r5, #20
 800e9dc:	f104 0314 	add.w	r3, r4, #20
 800e9e0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800e9e4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800e9e8:	9202      	str	r2, [sp, #8]
 800e9ea:	ebac 0205 	sub.w	r2, ip, r5
 800e9ee:	3a15      	subs	r2, #21
 800e9f0:	f022 0203 	bic.w	r2, r2, #3
 800e9f4:	3204      	adds	r2, #4
 800e9f6:	f105 0115 	add.w	r1, r5, #21
 800e9fa:	458c      	cmp	ip, r1
 800e9fc:	bf38      	it	cc
 800e9fe:	2204      	movcc	r2, #4
 800ea00:	9201      	str	r2, [sp, #4]
 800ea02:	9a02      	ldr	r2, [sp, #8]
 800ea04:	9303      	str	r3, [sp, #12]
 800ea06:	429a      	cmp	r2, r3
 800ea08:	d808      	bhi.n	800ea1c <__multiply+0x98>
 800ea0a:	2f00      	cmp	r7, #0
 800ea0c:	dc55      	bgt.n	800eaba <__multiply+0x136>
 800ea0e:	6107      	str	r7, [r0, #16]
 800ea10:	b005      	add	sp, #20
 800ea12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea16:	f843 2b04 	str.w	r2, [r3], #4
 800ea1a:	e7db      	b.n	800e9d4 <__multiply+0x50>
 800ea1c:	f8b3 a000 	ldrh.w	sl, [r3]
 800ea20:	f1ba 0f00 	cmp.w	sl, #0
 800ea24:	d020      	beq.n	800ea68 <__multiply+0xe4>
 800ea26:	f105 0e14 	add.w	lr, r5, #20
 800ea2a:	46b1      	mov	r9, r6
 800ea2c:	2200      	movs	r2, #0
 800ea2e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800ea32:	f8d9 b000 	ldr.w	fp, [r9]
 800ea36:	b2a1      	uxth	r1, r4
 800ea38:	fa1f fb8b 	uxth.w	fp, fp
 800ea3c:	fb0a b101 	mla	r1, sl, r1, fp
 800ea40:	4411      	add	r1, r2
 800ea42:	f8d9 2000 	ldr.w	r2, [r9]
 800ea46:	0c24      	lsrs	r4, r4, #16
 800ea48:	0c12      	lsrs	r2, r2, #16
 800ea4a:	fb0a 2404 	mla	r4, sl, r4, r2
 800ea4e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800ea52:	b289      	uxth	r1, r1
 800ea54:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ea58:	45f4      	cmp	ip, lr
 800ea5a:	f849 1b04 	str.w	r1, [r9], #4
 800ea5e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800ea62:	d8e4      	bhi.n	800ea2e <__multiply+0xaa>
 800ea64:	9901      	ldr	r1, [sp, #4]
 800ea66:	5072      	str	r2, [r6, r1]
 800ea68:	9a03      	ldr	r2, [sp, #12]
 800ea6a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ea6e:	3304      	adds	r3, #4
 800ea70:	f1b9 0f00 	cmp.w	r9, #0
 800ea74:	d01f      	beq.n	800eab6 <__multiply+0x132>
 800ea76:	6834      	ldr	r4, [r6, #0]
 800ea78:	f105 0114 	add.w	r1, r5, #20
 800ea7c:	46b6      	mov	lr, r6
 800ea7e:	f04f 0a00 	mov.w	sl, #0
 800ea82:	880a      	ldrh	r2, [r1, #0]
 800ea84:	f8be b002 	ldrh.w	fp, [lr, #2]
 800ea88:	fb09 b202 	mla	r2, r9, r2, fp
 800ea8c:	4492      	add	sl, r2
 800ea8e:	b2a4      	uxth	r4, r4
 800ea90:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800ea94:	f84e 4b04 	str.w	r4, [lr], #4
 800ea98:	f851 4b04 	ldr.w	r4, [r1], #4
 800ea9c:	f8be 2000 	ldrh.w	r2, [lr]
 800eaa0:	0c24      	lsrs	r4, r4, #16
 800eaa2:	fb09 2404 	mla	r4, r9, r4, r2
 800eaa6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800eaaa:	458c      	cmp	ip, r1
 800eaac:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800eab0:	d8e7      	bhi.n	800ea82 <__multiply+0xfe>
 800eab2:	9a01      	ldr	r2, [sp, #4]
 800eab4:	50b4      	str	r4, [r6, r2]
 800eab6:	3604      	adds	r6, #4
 800eab8:	e7a3      	b.n	800ea02 <__multiply+0x7e>
 800eaba:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d1a5      	bne.n	800ea0e <__multiply+0x8a>
 800eac2:	3f01      	subs	r7, #1
 800eac4:	e7a1      	b.n	800ea0a <__multiply+0x86>
 800eac6:	bf00      	nop
 800eac8:	08013813 	.word	0x08013813
 800eacc:	08013824 	.word	0x08013824

0800ead0 <__pow5mult>:
 800ead0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ead4:	4615      	mov	r5, r2
 800ead6:	f012 0203 	ands.w	r2, r2, #3
 800eada:	4606      	mov	r6, r0
 800eadc:	460f      	mov	r7, r1
 800eade:	d007      	beq.n	800eaf0 <__pow5mult+0x20>
 800eae0:	4c25      	ldr	r4, [pc, #148]	; (800eb78 <__pow5mult+0xa8>)
 800eae2:	3a01      	subs	r2, #1
 800eae4:	2300      	movs	r3, #0
 800eae6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800eaea:	f7ff fe9b 	bl	800e824 <__multadd>
 800eaee:	4607      	mov	r7, r0
 800eaf0:	10ad      	asrs	r5, r5, #2
 800eaf2:	d03d      	beq.n	800eb70 <__pow5mult+0xa0>
 800eaf4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800eaf6:	b97c      	cbnz	r4, 800eb18 <__pow5mult+0x48>
 800eaf8:	2010      	movs	r0, #16
 800eafa:	f7ff fe29 	bl	800e750 <malloc>
 800eafe:	4602      	mov	r2, r0
 800eb00:	6270      	str	r0, [r6, #36]	; 0x24
 800eb02:	b928      	cbnz	r0, 800eb10 <__pow5mult+0x40>
 800eb04:	4b1d      	ldr	r3, [pc, #116]	; (800eb7c <__pow5mult+0xac>)
 800eb06:	481e      	ldr	r0, [pc, #120]	; (800eb80 <__pow5mult+0xb0>)
 800eb08:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800eb0c:	f000 fbcc 	bl	800f2a8 <__assert_func>
 800eb10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800eb14:	6004      	str	r4, [r0, #0]
 800eb16:	60c4      	str	r4, [r0, #12]
 800eb18:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800eb1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800eb20:	b94c      	cbnz	r4, 800eb36 <__pow5mult+0x66>
 800eb22:	f240 2171 	movw	r1, #625	; 0x271
 800eb26:	4630      	mov	r0, r6
 800eb28:	f7ff ff16 	bl	800e958 <__i2b>
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	f8c8 0008 	str.w	r0, [r8, #8]
 800eb32:	4604      	mov	r4, r0
 800eb34:	6003      	str	r3, [r0, #0]
 800eb36:	f04f 0900 	mov.w	r9, #0
 800eb3a:	07eb      	lsls	r3, r5, #31
 800eb3c:	d50a      	bpl.n	800eb54 <__pow5mult+0x84>
 800eb3e:	4639      	mov	r1, r7
 800eb40:	4622      	mov	r2, r4
 800eb42:	4630      	mov	r0, r6
 800eb44:	f7ff ff1e 	bl	800e984 <__multiply>
 800eb48:	4639      	mov	r1, r7
 800eb4a:	4680      	mov	r8, r0
 800eb4c:	4630      	mov	r0, r6
 800eb4e:	f7ff fe47 	bl	800e7e0 <_Bfree>
 800eb52:	4647      	mov	r7, r8
 800eb54:	106d      	asrs	r5, r5, #1
 800eb56:	d00b      	beq.n	800eb70 <__pow5mult+0xa0>
 800eb58:	6820      	ldr	r0, [r4, #0]
 800eb5a:	b938      	cbnz	r0, 800eb6c <__pow5mult+0x9c>
 800eb5c:	4622      	mov	r2, r4
 800eb5e:	4621      	mov	r1, r4
 800eb60:	4630      	mov	r0, r6
 800eb62:	f7ff ff0f 	bl	800e984 <__multiply>
 800eb66:	6020      	str	r0, [r4, #0]
 800eb68:	f8c0 9000 	str.w	r9, [r0]
 800eb6c:	4604      	mov	r4, r0
 800eb6e:	e7e4      	b.n	800eb3a <__pow5mult+0x6a>
 800eb70:	4638      	mov	r0, r7
 800eb72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb76:	bf00      	nop
 800eb78:	08013978 	.word	0x08013978
 800eb7c:	0801379d 	.word	0x0801379d
 800eb80:	08013824 	.word	0x08013824

0800eb84 <__lshift>:
 800eb84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb88:	460c      	mov	r4, r1
 800eb8a:	6849      	ldr	r1, [r1, #4]
 800eb8c:	6923      	ldr	r3, [r4, #16]
 800eb8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800eb92:	68a3      	ldr	r3, [r4, #8]
 800eb94:	4607      	mov	r7, r0
 800eb96:	4691      	mov	r9, r2
 800eb98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800eb9c:	f108 0601 	add.w	r6, r8, #1
 800eba0:	42b3      	cmp	r3, r6
 800eba2:	db0b      	blt.n	800ebbc <__lshift+0x38>
 800eba4:	4638      	mov	r0, r7
 800eba6:	f7ff fddb 	bl	800e760 <_Balloc>
 800ebaa:	4605      	mov	r5, r0
 800ebac:	b948      	cbnz	r0, 800ebc2 <__lshift+0x3e>
 800ebae:	4602      	mov	r2, r0
 800ebb0:	4b28      	ldr	r3, [pc, #160]	; (800ec54 <__lshift+0xd0>)
 800ebb2:	4829      	ldr	r0, [pc, #164]	; (800ec58 <__lshift+0xd4>)
 800ebb4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ebb8:	f000 fb76 	bl	800f2a8 <__assert_func>
 800ebbc:	3101      	adds	r1, #1
 800ebbe:	005b      	lsls	r3, r3, #1
 800ebc0:	e7ee      	b.n	800eba0 <__lshift+0x1c>
 800ebc2:	2300      	movs	r3, #0
 800ebc4:	f100 0114 	add.w	r1, r0, #20
 800ebc8:	f100 0210 	add.w	r2, r0, #16
 800ebcc:	4618      	mov	r0, r3
 800ebce:	4553      	cmp	r3, sl
 800ebd0:	db33      	blt.n	800ec3a <__lshift+0xb6>
 800ebd2:	6920      	ldr	r0, [r4, #16]
 800ebd4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ebd8:	f104 0314 	add.w	r3, r4, #20
 800ebdc:	f019 091f 	ands.w	r9, r9, #31
 800ebe0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ebe4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ebe8:	d02b      	beq.n	800ec42 <__lshift+0xbe>
 800ebea:	f1c9 0e20 	rsb	lr, r9, #32
 800ebee:	468a      	mov	sl, r1
 800ebf0:	2200      	movs	r2, #0
 800ebf2:	6818      	ldr	r0, [r3, #0]
 800ebf4:	fa00 f009 	lsl.w	r0, r0, r9
 800ebf8:	4302      	orrs	r2, r0
 800ebfa:	f84a 2b04 	str.w	r2, [sl], #4
 800ebfe:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec02:	459c      	cmp	ip, r3
 800ec04:	fa22 f20e 	lsr.w	r2, r2, lr
 800ec08:	d8f3      	bhi.n	800ebf2 <__lshift+0x6e>
 800ec0a:	ebac 0304 	sub.w	r3, ip, r4
 800ec0e:	3b15      	subs	r3, #21
 800ec10:	f023 0303 	bic.w	r3, r3, #3
 800ec14:	3304      	adds	r3, #4
 800ec16:	f104 0015 	add.w	r0, r4, #21
 800ec1a:	4584      	cmp	ip, r0
 800ec1c:	bf38      	it	cc
 800ec1e:	2304      	movcc	r3, #4
 800ec20:	50ca      	str	r2, [r1, r3]
 800ec22:	b10a      	cbz	r2, 800ec28 <__lshift+0xa4>
 800ec24:	f108 0602 	add.w	r6, r8, #2
 800ec28:	3e01      	subs	r6, #1
 800ec2a:	4638      	mov	r0, r7
 800ec2c:	612e      	str	r6, [r5, #16]
 800ec2e:	4621      	mov	r1, r4
 800ec30:	f7ff fdd6 	bl	800e7e0 <_Bfree>
 800ec34:	4628      	mov	r0, r5
 800ec36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec3a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ec3e:	3301      	adds	r3, #1
 800ec40:	e7c5      	b.n	800ebce <__lshift+0x4a>
 800ec42:	3904      	subs	r1, #4
 800ec44:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec48:	f841 2f04 	str.w	r2, [r1, #4]!
 800ec4c:	459c      	cmp	ip, r3
 800ec4e:	d8f9      	bhi.n	800ec44 <__lshift+0xc0>
 800ec50:	e7ea      	b.n	800ec28 <__lshift+0xa4>
 800ec52:	bf00      	nop
 800ec54:	08013813 	.word	0x08013813
 800ec58:	08013824 	.word	0x08013824

0800ec5c <__mcmp>:
 800ec5c:	b530      	push	{r4, r5, lr}
 800ec5e:	6902      	ldr	r2, [r0, #16]
 800ec60:	690c      	ldr	r4, [r1, #16]
 800ec62:	1b12      	subs	r2, r2, r4
 800ec64:	d10e      	bne.n	800ec84 <__mcmp+0x28>
 800ec66:	f100 0314 	add.w	r3, r0, #20
 800ec6a:	3114      	adds	r1, #20
 800ec6c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ec70:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ec74:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ec78:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ec7c:	42a5      	cmp	r5, r4
 800ec7e:	d003      	beq.n	800ec88 <__mcmp+0x2c>
 800ec80:	d305      	bcc.n	800ec8e <__mcmp+0x32>
 800ec82:	2201      	movs	r2, #1
 800ec84:	4610      	mov	r0, r2
 800ec86:	bd30      	pop	{r4, r5, pc}
 800ec88:	4283      	cmp	r3, r0
 800ec8a:	d3f3      	bcc.n	800ec74 <__mcmp+0x18>
 800ec8c:	e7fa      	b.n	800ec84 <__mcmp+0x28>
 800ec8e:	f04f 32ff 	mov.w	r2, #4294967295
 800ec92:	e7f7      	b.n	800ec84 <__mcmp+0x28>

0800ec94 <__mdiff>:
 800ec94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec98:	460c      	mov	r4, r1
 800ec9a:	4606      	mov	r6, r0
 800ec9c:	4611      	mov	r1, r2
 800ec9e:	4620      	mov	r0, r4
 800eca0:	4617      	mov	r7, r2
 800eca2:	f7ff ffdb 	bl	800ec5c <__mcmp>
 800eca6:	1e05      	subs	r5, r0, #0
 800eca8:	d110      	bne.n	800eccc <__mdiff+0x38>
 800ecaa:	4629      	mov	r1, r5
 800ecac:	4630      	mov	r0, r6
 800ecae:	f7ff fd57 	bl	800e760 <_Balloc>
 800ecb2:	b930      	cbnz	r0, 800ecc2 <__mdiff+0x2e>
 800ecb4:	4b39      	ldr	r3, [pc, #228]	; (800ed9c <__mdiff+0x108>)
 800ecb6:	4602      	mov	r2, r0
 800ecb8:	f240 2132 	movw	r1, #562	; 0x232
 800ecbc:	4838      	ldr	r0, [pc, #224]	; (800eda0 <__mdiff+0x10c>)
 800ecbe:	f000 faf3 	bl	800f2a8 <__assert_func>
 800ecc2:	2301      	movs	r3, #1
 800ecc4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ecc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eccc:	bfa4      	itt	ge
 800ecce:	463b      	movge	r3, r7
 800ecd0:	4627      	movge	r7, r4
 800ecd2:	4630      	mov	r0, r6
 800ecd4:	6879      	ldr	r1, [r7, #4]
 800ecd6:	bfa6      	itte	ge
 800ecd8:	461c      	movge	r4, r3
 800ecda:	2500      	movge	r5, #0
 800ecdc:	2501      	movlt	r5, #1
 800ecde:	f7ff fd3f 	bl	800e760 <_Balloc>
 800ece2:	b920      	cbnz	r0, 800ecee <__mdiff+0x5a>
 800ece4:	4b2d      	ldr	r3, [pc, #180]	; (800ed9c <__mdiff+0x108>)
 800ece6:	4602      	mov	r2, r0
 800ece8:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ecec:	e7e6      	b.n	800ecbc <__mdiff+0x28>
 800ecee:	693e      	ldr	r6, [r7, #16]
 800ecf0:	60c5      	str	r5, [r0, #12]
 800ecf2:	6925      	ldr	r5, [r4, #16]
 800ecf4:	f107 0114 	add.w	r1, r7, #20
 800ecf8:	f104 0914 	add.w	r9, r4, #20
 800ecfc:	f100 0e14 	add.w	lr, r0, #20
 800ed00:	f107 0210 	add.w	r2, r7, #16
 800ed04:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800ed08:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800ed0c:	46f2      	mov	sl, lr
 800ed0e:	2700      	movs	r7, #0
 800ed10:	f859 3b04 	ldr.w	r3, [r9], #4
 800ed14:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ed18:	fa1f f883 	uxth.w	r8, r3
 800ed1c:	fa17 f78b 	uxtah	r7, r7, fp
 800ed20:	0c1b      	lsrs	r3, r3, #16
 800ed22:	eba7 0808 	sub.w	r8, r7, r8
 800ed26:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ed2a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ed2e:	fa1f f888 	uxth.w	r8, r8
 800ed32:	141f      	asrs	r7, r3, #16
 800ed34:	454d      	cmp	r5, r9
 800ed36:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ed3a:	f84a 3b04 	str.w	r3, [sl], #4
 800ed3e:	d8e7      	bhi.n	800ed10 <__mdiff+0x7c>
 800ed40:	1b2b      	subs	r3, r5, r4
 800ed42:	3b15      	subs	r3, #21
 800ed44:	f023 0303 	bic.w	r3, r3, #3
 800ed48:	3304      	adds	r3, #4
 800ed4a:	3415      	adds	r4, #21
 800ed4c:	42a5      	cmp	r5, r4
 800ed4e:	bf38      	it	cc
 800ed50:	2304      	movcc	r3, #4
 800ed52:	4419      	add	r1, r3
 800ed54:	4473      	add	r3, lr
 800ed56:	469e      	mov	lr, r3
 800ed58:	460d      	mov	r5, r1
 800ed5a:	4565      	cmp	r5, ip
 800ed5c:	d30e      	bcc.n	800ed7c <__mdiff+0xe8>
 800ed5e:	f10c 0203 	add.w	r2, ip, #3
 800ed62:	1a52      	subs	r2, r2, r1
 800ed64:	f022 0203 	bic.w	r2, r2, #3
 800ed68:	3903      	subs	r1, #3
 800ed6a:	458c      	cmp	ip, r1
 800ed6c:	bf38      	it	cc
 800ed6e:	2200      	movcc	r2, #0
 800ed70:	441a      	add	r2, r3
 800ed72:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ed76:	b17b      	cbz	r3, 800ed98 <__mdiff+0x104>
 800ed78:	6106      	str	r6, [r0, #16]
 800ed7a:	e7a5      	b.n	800ecc8 <__mdiff+0x34>
 800ed7c:	f855 8b04 	ldr.w	r8, [r5], #4
 800ed80:	fa17 f488 	uxtah	r4, r7, r8
 800ed84:	1422      	asrs	r2, r4, #16
 800ed86:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800ed8a:	b2a4      	uxth	r4, r4
 800ed8c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800ed90:	f84e 4b04 	str.w	r4, [lr], #4
 800ed94:	1417      	asrs	r7, r2, #16
 800ed96:	e7e0      	b.n	800ed5a <__mdiff+0xc6>
 800ed98:	3e01      	subs	r6, #1
 800ed9a:	e7ea      	b.n	800ed72 <__mdiff+0xde>
 800ed9c:	08013813 	.word	0x08013813
 800eda0:	08013824 	.word	0x08013824

0800eda4 <__d2b>:
 800eda4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800eda8:	4689      	mov	r9, r1
 800edaa:	2101      	movs	r1, #1
 800edac:	ec57 6b10 	vmov	r6, r7, d0
 800edb0:	4690      	mov	r8, r2
 800edb2:	f7ff fcd5 	bl	800e760 <_Balloc>
 800edb6:	4604      	mov	r4, r0
 800edb8:	b930      	cbnz	r0, 800edc8 <__d2b+0x24>
 800edba:	4602      	mov	r2, r0
 800edbc:	4b25      	ldr	r3, [pc, #148]	; (800ee54 <__d2b+0xb0>)
 800edbe:	4826      	ldr	r0, [pc, #152]	; (800ee58 <__d2b+0xb4>)
 800edc0:	f240 310a 	movw	r1, #778	; 0x30a
 800edc4:	f000 fa70 	bl	800f2a8 <__assert_func>
 800edc8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800edcc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800edd0:	bb35      	cbnz	r5, 800ee20 <__d2b+0x7c>
 800edd2:	2e00      	cmp	r6, #0
 800edd4:	9301      	str	r3, [sp, #4]
 800edd6:	d028      	beq.n	800ee2a <__d2b+0x86>
 800edd8:	4668      	mov	r0, sp
 800edda:	9600      	str	r6, [sp, #0]
 800eddc:	f7ff fd8c 	bl	800e8f8 <__lo0bits>
 800ede0:	9900      	ldr	r1, [sp, #0]
 800ede2:	b300      	cbz	r0, 800ee26 <__d2b+0x82>
 800ede4:	9a01      	ldr	r2, [sp, #4]
 800ede6:	f1c0 0320 	rsb	r3, r0, #32
 800edea:	fa02 f303 	lsl.w	r3, r2, r3
 800edee:	430b      	orrs	r3, r1
 800edf0:	40c2      	lsrs	r2, r0
 800edf2:	6163      	str	r3, [r4, #20]
 800edf4:	9201      	str	r2, [sp, #4]
 800edf6:	9b01      	ldr	r3, [sp, #4]
 800edf8:	61a3      	str	r3, [r4, #24]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	bf14      	ite	ne
 800edfe:	2202      	movne	r2, #2
 800ee00:	2201      	moveq	r2, #1
 800ee02:	6122      	str	r2, [r4, #16]
 800ee04:	b1d5      	cbz	r5, 800ee3c <__d2b+0x98>
 800ee06:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ee0a:	4405      	add	r5, r0
 800ee0c:	f8c9 5000 	str.w	r5, [r9]
 800ee10:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ee14:	f8c8 0000 	str.w	r0, [r8]
 800ee18:	4620      	mov	r0, r4
 800ee1a:	b003      	add	sp, #12
 800ee1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ee24:	e7d5      	b.n	800edd2 <__d2b+0x2e>
 800ee26:	6161      	str	r1, [r4, #20]
 800ee28:	e7e5      	b.n	800edf6 <__d2b+0x52>
 800ee2a:	a801      	add	r0, sp, #4
 800ee2c:	f7ff fd64 	bl	800e8f8 <__lo0bits>
 800ee30:	9b01      	ldr	r3, [sp, #4]
 800ee32:	6163      	str	r3, [r4, #20]
 800ee34:	2201      	movs	r2, #1
 800ee36:	6122      	str	r2, [r4, #16]
 800ee38:	3020      	adds	r0, #32
 800ee3a:	e7e3      	b.n	800ee04 <__d2b+0x60>
 800ee3c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ee40:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ee44:	f8c9 0000 	str.w	r0, [r9]
 800ee48:	6918      	ldr	r0, [r3, #16]
 800ee4a:	f7ff fd35 	bl	800e8b8 <__hi0bits>
 800ee4e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ee52:	e7df      	b.n	800ee14 <__d2b+0x70>
 800ee54:	08013813 	.word	0x08013813
 800ee58:	08013824 	.word	0x08013824

0800ee5c <_calloc_r>:
 800ee5c:	b513      	push	{r0, r1, r4, lr}
 800ee5e:	434a      	muls	r2, r1
 800ee60:	4611      	mov	r1, r2
 800ee62:	9201      	str	r2, [sp, #4]
 800ee64:	f000 f85a 	bl	800ef1c <_malloc_r>
 800ee68:	4604      	mov	r4, r0
 800ee6a:	b118      	cbz	r0, 800ee74 <_calloc_r+0x18>
 800ee6c:	9a01      	ldr	r2, [sp, #4]
 800ee6e:	2100      	movs	r1, #0
 800ee70:	f7fe f95e 	bl	800d130 <memset>
 800ee74:	4620      	mov	r0, r4
 800ee76:	b002      	add	sp, #8
 800ee78:	bd10      	pop	{r4, pc}
	...

0800ee7c <_free_r>:
 800ee7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ee7e:	2900      	cmp	r1, #0
 800ee80:	d048      	beq.n	800ef14 <_free_r+0x98>
 800ee82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ee86:	9001      	str	r0, [sp, #4]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	f1a1 0404 	sub.w	r4, r1, #4
 800ee8e:	bfb8      	it	lt
 800ee90:	18e4      	addlt	r4, r4, r3
 800ee92:	f000 fa4b 	bl	800f32c <__malloc_lock>
 800ee96:	4a20      	ldr	r2, [pc, #128]	; (800ef18 <_free_r+0x9c>)
 800ee98:	9801      	ldr	r0, [sp, #4]
 800ee9a:	6813      	ldr	r3, [r2, #0]
 800ee9c:	4615      	mov	r5, r2
 800ee9e:	b933      	cbnz	r3, 800eeae <_free_r+0x32>
 800eea0:	6063      	str	r3, [r4, #4]
 800eea2:	6014      	str	r4, [r2, #0]
 800eea4:	b003      	add	sp, #12
 800eea6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eeaa:	f000 ba45 	b.w	800f338 <__malloc_unlock>
 800eeae:	42a3      	cmp	r3, r4
 800eeb0:	d90b      	bls.n	800eeca <_free_r+0x4e>
 800eeb2:	6821      	ldr	r1, [r4, #0]
 800eeb4:	1862      	adds	r2, r4, r1
 800eeb6:	4293      	cmp	r3, r2
 800eeb8:	bf04      	itt	eq
 800eeba:	681a      	ldreq	r2, [r3, #0]
 800eebc:	685b      	ldreq	r3, [r3, #4]
 800eebe:	6063      	str	r3, [r4, #4]
 800eec0:	bf04      	itt	eq
 800eec2:	1852      	addeq	r2, r2, r1
 800eec4:	6022      	streq	r2, [r4, #0]
 800eec6:	602c      	str	r4, [r5, #0]
 800eec8:	e7ec      	b.n	800eea4 <_free_r+0x28>
 800eeca:	461a      	mov	r2, r3
 800eecc:	685b      	ldr	r3, [r3, #4]
 800eece:	b10b      	cbz	r3, 800eed4 <_free_r+0x58>
 800eed0:	42a3      	cmp	r3, r4
 800eed2:	d9fa      	bls.n	800eeca <_free_r+0x4e>
 800eed4:	6811      	ldr	r1, [r2, #0]
 800eed6:	1855      	adds	r5, r2, r1
 800eed8:	42a5      	cmp	r5, r4
 800eeda:	d10b      	bne.n	800eef4 <_free_r+0x78>
 800eedc:	6824      	ldr	r4, [r4, #0]
 800eede:	4421      	add	r1, r4
 800eee0:	1854      	adds	r4, r2, r1
 800eee2:	42a3      	cmp	r3, r4
 800eee4:	6011      	str	r1, [r2, #0]
 800eee6:	d1dd      	bne.n	800eea4 <_free_r+0x28>
 800eee8:	681c      	ldr	r4, [r3, #0]
 800eeea:	685b      	ldr	r3, [r3, #4]
 800eeec:	6053      	str	r3, [r2, #4]
 800eeee:	4421      	add	r1, r4
 800eef0:	6011      	str	r1, [r2, #0]
 800eef2:	e7d7      	b.n	800eea4 <_free_r+0x28>
 800eef4:	d902      	bls.n	800eefc <_free_r+0x80>
 800eef6:	230c      	movs	r3, #12
 800eef8:	6003      	str	r3, [r0, #0]
 800eefa:	e7d3      	b.n	800eea4 <_free_r+0x28>
 800eefc:	6825      	ldr	r5, [r4, #0]
 800eefe:	1961      	adds	r1, r4, r5
 800ef00:	428b      	cmp	r3, r1
 800ef02:	bf04      	itt	eq
 800ef04:	6819      	ldreq	r1, [r3, #0]
 800ef06:	685b      	ldreq	r3, [r3, #4]
 800ef08:	6063      	str	r3, [r4, #4]
 800ef0a:	bf04      	itt	eq
 800ef0c:	1949      	addeq	r1, r1, r5
 800ef0e:	6021      	streq	r1, [r4, #0]
 800ef10:	6054      	str	r4, [r2, #4]
 800ef12:	e7c7      	b.n	800eea4 <_free_r+0x28>
 800ef14:	b003      	add	sp, #12
 800ef16:	bd30      	pop	{r4, r5, pc}
 800ef18:	20000b18 	.word	0x20000b18

0800ef1c <_malloc_r>:
 800ef1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef1e:	1ccd      	adds	r5, r1, #3
 800ef20:	f025 0503 	bic.w	r5, r5, #3
 800ef24:	3508      	adds	r5, #8
 800ef26:	2d0c      	cmp	r5, #12
 800ef28:	bf38      	it	cc
 800ef2a:	250c      	movcc	r5, #12
 800ef2c:	2d00      	cmp	r5, #0
 800ef2e:	4606      	mov	r6, r0
 800ef30:	db01      	blt.n	800ef36 <_malloc_r+0x1a>
 800ef32:	42a9      	cmp	r1, r5
 800ef34:	d903      	bls.n	800ef3e <_malloc_r+0x22>
 800ef36:	230c      	movs	r3, #12
 800ef38:	6033      	str	r3, [r6, #0]
 800ef3a:	2000      	movs	r0, #0
 800ef3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef3e:	f000 f9f5 	bl	800f32c <__malloc_lock>
 800ef42:	4921      	ldr	r1, [pc, #132]	; (800efc8 <_malloc_r+0xac>)
 800ef44:	680a      	ldr	r2, [r1, #0]
 800ef46:	4614      	mov	r4, r2
 800ef48:	b99c      	cbnz	r4, 800ef72 <_malloc_r+0x56>
 800ef4a:	4f20      	ldr	r7, [pc, #128]	; (800efcc <_malloc_r+0xb0>)
 800ef4c:	683b      	ldr	r3, [r7, #0]
 800ef4e:	b923      	cbnz	r3, 800ef5a <_malloc_r+0x3e>
 800ef50:	4621      	mov	r1, r4
 800ef52:	4630      	mov	r0, r6
 800ef54:	f000 f998 	bl	800f288 <_sbrk_r>
 800ef58:	6038      	str	r0, [r7, #0]
 800ef5a:	4629      	mov	r1, r5
 800ef5c:	4630      	mov	r0, r6
 800ef5e:	f000 f993 	bl	800f288 <_sbrk_r>
 800ef62:	1c43      	adds	r3, r0, #1
 800ef64:	d123      	bne.n	800efae <_malloc_r+0x92>
 800ef66:	230c      	movs	r3, #12
 800ef68:	6033      	str	r3, [r6, #0]
 800ef6a:	4630      	mov	r0, r6
 800ef6c:	f000 f9e4 	bl	800f338 <__malloc_unlock>
 800ef70:	e7e3      	b.n	800ef3a <_malloc_r+0x1e>
 800ef72:	6823      	ldr	r3, [r4, #0]
 800ef74:	1b5b      	subs	r3, r3, r5
 800ef76:	d417      	bmi.n	800efa8 <_malloc_r+0x8c>
 800ef78:	2b0b      	cmp	r3, #11
 800ef7a:	d903      	bls.n	800ef84 <_malloc_r+0x68>
 800ef7c:	6023      	str	r3, [r4, #0]
 800ef7e:	441c      	add	r4, r3
 800ef80:	6025      	str	r5, [r4, #0]
 800ef82:	e004      	b.n	800ef8e <_malloc_r+0x72>
 800ef84:	6863      	ldr	r3, [r4, #4]
 800ef86:	42a2      	cmp	r2, r4
 800ef88:	bf0c      	ite	eq
 800ef8a:	600b      	streq	r3, [r1, #0]
 800ef8c:	6053      	strne	r3, [r2, #4]
 800ef8e:	4630      	mov	r0, r6
 800ef90:	f000 f9d2 	bl	800f338 <__malloc_unlock>
 800ef94:	f104 000b 	add.w	r0, r4, #11
 800ef98:	1d23      	adds	r3, r4, #4
 800ef9a:	f020 0007 	bic.w	r0, r0, #7
 800ef9e:	1ac2      	subs	r2, r0, r3
 800efa0:	d0cc      	beq.n	800ef3c <_malloc_r+0x20>
 800efa2:	1a1b      	subs	r3, r3, r0
 800efa4:	50a3      	str	r3, [r4, r2]
 800efa6:	e7c9      	b.n	800ef3c <_malloc_r+0x20>
 800efa8:	4622      	mov	r2, r4
 800efaa:	6864      	ldr	r4, [r4, #4]
 800efac:	e7cc      	b.n	800ef48 <_malloc_r+0x2c>
 800efae:	1cc4      	adds	r4, r0, #3
 800efb0:	f024 0403 	bic.w	r4, r4, #3
 800efb4:	42a0      	cmp	r0, r4
 800efb6:	d0e3      	beq.n	800ef80 <_malloc_r+0x64>
 800efb8:	1a21      	subs	r1, r4, r0
 800efba:	4630      	mov	r0, r6
 800efbc:	f000 f964 	bl	800f288 <_sbrk_r>
 800efc0:	3001      	adds	r0, #1
 800efc2:	d1dd      	bne.n	800ef80 <_malloc_r+0x64>
 800efc4:	e7cf      	b.n	800ef66 <_malloc_r+0x4a>
 800efc6:	bf00      	nop
 800efc8:	20000b18 	.word	0x20000b18
 800efcc:	20000b1c 	.word	0x20000b1c

0800efd0 <__ssputs_r>:
 800efd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800efd4:	688e      	ldr	r6, [r1, #8]
 800efd6:	429e      	cmp	r6, r3
 800efd8:	4682      	mov	sl, r0
 800efda:	460c      	mov	r4, r1
 800efdc:	4690      	mov	r8, r2
 800efde:	461f      	mov	r7, r3
 800efe0:	d838      	bhi.n	800f054 <__ssputs_r+0x84>
 800efe2:	898a      	ldrh	r2, [r1, #12]
 800efe4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800efe8:	d032      	beq.n	800f050 <__ssputs_r+0x80>
 800efea:	6825      	ldr	r5, [r4, #0]
 800efec:	6909      	ldr	r1, [r1, #16]
 800efee:	eba5 0901 	sub.w	r9, r5, r1
 800eff2:	6965      	ldr	r5, [r4, #20]
 800eff4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eff8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800effc:	3301      	adds	r3, #1
 800effe:	444b      	add	r3, r9
 800f000:	106d      	asrs	r5, r5, #1
 800f002:	429d      	cmp	r5, r3
 800f004:	bf38      	it	cc
 800f006:	461d      	movcc	r5, r3
 800f008:	0553      	lsls	r3, r2, #21
 800f00a:	d531      	bpl.n	800f070 <__ssputs_r+0xa0>
 800f00c:	4629      	mov	r1, r5
 800f00e:	f7ff ff85 	bl	800ef1c <_malloc_r>
 800f012:	4606      	mov	r6, r0
 800f014:	b950      	cbnz	r0, 800f02c <__ssputs_r+0x5c>
 800f016:	230c      	movs	r3, #12
 800f018:	f8ca 3000 	str.w	r3, [sl]
 800f01c:	89a3      	ldrh	r3, [r4, #12]
 800f01e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f022:	81a3      	strh	r3, [r4, #12]
 800f024:	f04f 30ff 	mov.w	r0, #4294967295
 800f028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f02c:	6921      	ldr	r1, [r4, #16]
 800f02e:	464a      	mov	r2, r9
 800f030:	f7fe f856 	bl	800d0e0 <memcpy>
 800f034:	89a3      	ldrh	r3, [r4, #12]
 800f036:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f03a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f03e:	81a3      	strh	r3, [r4, #12]
 800f040:	6126      	str	r6, [r4, #16]
 800f042:	6165      	str	r5, [r4, #20]
 800f044:	444e      	add	r6, r9
 800f046:	eba5 0509 	sub.w	r5, r5, r9
 800f04a:	6026      	str	r6, [r4, #0]
 800f04c:	60a5      	str	r5, [r4, #8]
 800f04e:	463e      	mov	r6, r7
 800f050:	42be      	cmp	r6, r7
 800f052:	d900      	bls.n	800f056 <__ssputs_r+0x86>
 800f054:	463e      	mov	r6, r7
 800f056:	4632      	mov	r2, r6
 800f058:	6820      	ldr	r0, [r4, #0]
 800f05a:	4641      	mov	r1, r8
 800f05c:	f7fe f84e 	bl	800d0fc <memmove>
 800f060:	68a3      	ldr	r3, [r4, #8]
 800f062:	6822      	ldr	r2, [r4, #0]
 800f064:	1b9b      	subs	r3, r3, r6
 800f066:	4432      	add	r2, r6
 800f068:	60a3      	str	r3, [r4, #8]
 800f06a:	6022      	str	r2, [r4, #0]
 800f06c:	2000      	movs	r0, #0
 800f06e:	e7db      	b.n	800f028 <__ssputs_r+0x58>
 800f070:	462a      	mov	r2, r5
 800f072:	f000 f967 	bl	800f344 <_realloc_r>
 800f076:	4606      	mov	r6, r0
 800f078:	2800      	cmp	r0, #0
 800f07a:	d1e1      	bne.n	800f040 <__ssputs_r+0x70>
 800f07c:	6921      	ldr	r1, [r4, #16]
 800f07e:	4650      	mov	r0, sl
 800f080:	f7ff fefc 	bl	800ee7c <_free_r>
 800f084:	e7c7      	b.n	800f016 <__ssputs_r+0x46>
	...

0800f088 <_svfiprintf_r>:
 800f088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f08c:	4698      	mov	r8, r3
 800f08e:	898b      	ldrh	r3, [r1, #12]
 800f090:	061b      	lsls	r3, r3, #24
 800f092:	b09d      	sub	sp, #116	; 0x74
 800f094:	4607      	mov	r7, r0
 800f096:	460d      	mov	r5, r1
 800f098:	4614      	mov	r4, r2
 800f09a:	d50e      	bpl.n	800f0ba <_svfiprintf_r+0x32>
 800f09c:	690b      	ldr	r3, [r1, #16]
 800f09e:	b963      	cbnz	r3, 800f0ba <_svfiprintf_r+0x32>
 800f0a0:	2140      	movs	r1, #64	; 0x40
 800f0a2:	f7ff ff3b 	bl	800ef1c <_malloc_r>
 800f0a6:	6028      	str	r0, [r5, #0]
 800f0a8:	6128      	str	r0, [r5, #16]
 800f0aa:	b920      	cbnz	r0, 800f0b6 <_svfiprintf_r+0x2e>
 800f0ac:	230c      	movs	r3, #12
 800f0ae:	603b      	str	r3, [r7, #0]
 800f0b0:	f04f 30ff 	mov.w	r0, #4294967295
 800f0b4:	e0d1      	b.n	800f25a <_svfiprintf_r+0x1d2>
 800f0b6:	2340      	movs	r3, #64	; 0x40
 800f0b8:	616b      	str	r3, [r5, #20]
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	9309      	str	r3, [sp, #36]	; 0x24
 800f0be:	2320      	movs	r3, #32
 800f0c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f0c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800f0c8:	2330      	movs	r3, #48	; 0x30
 800f0ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f274 <_svfiprintf_r+0x1ec>
 800f0ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f0d2:	f04f 0901 	mov.w	r9, #1
 800f0d6:	4623      	mov	r3, r4
 800f0d8:	469a      	mov	sl, r3
 800f0da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f0de:	b10a      	cbz	r2, 800f0e4 <_svfiprintf_r+0x5c>
 800f0e0:	2a25      	cmp	r2, #37	; 0x25
 800f0e2:	d1f9      	bne.n	800f0d8 <_svfiprintf_r+0x50>
 800f0e4:	ebba 0b04 	subs.w	fp, sl, r4
 800f0e8:	d00b      	beq.n	800f102 <_svfiprintf_r+0x7a>
 800f0ea:	465b      	mov	r3, fp
 800f0ec:	4622      	mov	r2, r4
 800f0ee:	4629      	mov	r1, r5
 800f0f0:	4638      	mov	r0, r7
 800f0f2:	f7ff ff6d 	bl	800efd0 <__ssputs_r>
 800f0f6:	3001      	adds	r0, #1
 800f0f8:	f000 80aa 	beq.w	800f250 <_svfiprintf_r+0x1c8>
 800f0fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f0fe:	445a      	add	r2, fp
 800f100:	9209      	str	r2, [sp, #36]	; 0x24
 800f102:	f89a 3000 	ldrb.w	r3, [sl]
 800f106:	2b00      	cmp	r3, #0
 800f108:	f000 80a2 	beq.w	800f250 <_svfiprintf_r+0x1c8>
 800f10c:	2300      	movs	r3, #0
 800f10e:	f04f 32ff 	mov.w	r2, #4294967295
 800f112:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f116:	f10a 0a01 	add.w	sl, sl, #1
 800f11a:	9304      	str	r3, [sp, #16]
 800f11c:	9307      	str	r3, [sp, #28]
 800f11e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f122:	931a      	str	r3, [sp, #104]	; 0x68
 800f124:	4654      	mov	r4, sl
 800f126:	2205      	movs	r2, #5
 800f128:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f12c:	4851      	ldr	r0, [pc, #324]	; (800f274 <_svfiprintf_r+0x1ec>)
 800f12e:	f7f3 fe27 	bl	8002d80 <memchr>
 800f132:	9a04      	ldr	r2, [sp, #16]
 800f134:	b9d8      	cbnz	r0, 800f16e <_svfiprintf_r+0xe6>
 800f136:	06d0      	lsls	r0, r2, #27
 800f138:	bf44      	itt	mi
 800f13a:	2320      	movmi	r3, #32
 800f13c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f140:	0711      	lsls	r1, r2, #28
 800f142:	bf44      	itt	mi
 800f144:	232b      	movmi	r3, #43	; 0x2b
 800f146:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f14a:	f89a 3000 	ldrb.w	r3, [sl]
 800f14e:	2b2a      	cmp	r3, #42	; 0x2a
 800f150:	d015      	beq.n	800f17e <_svfiprintf_r+0xf6>
 800f152:	9a07      	ldr	r2, [sp, #28]
 800f154:	4654      	mov	r4, sl
 800f156:	2000      	movs	r0, #0
 800f158:	f04f 0c0a 	mov.w	ip, #10
 800f15c:	4621      	mov	r1, r4
 800f15e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f162:	3b30      	subs	r3, #48	; 0x30
 800f164:	2b09      	cmp	r3, #9
 800f166:	d94e      	bls.n	800f206 <_svfiprintf_r+0x17e>
 800f168:	b1b0      	cbz	r0, 800f198 <_svfiprintf_r+0x110>
 800f16a:	9207      	str	r2, [sp, #28]
 800f16c:	e014      	b.n	800f198 <_svfiprintf_r+0x110>
 800f16e:	eba0 0308 	sub.w	r3, r0, r8
 800f172:	fa09 f303 	lsl.w	r3, r9, r3
 800f176:	4313      	orrs	r3, r2
 800f178:	9304      	str	r3, [sp, #16]
 800f17a:	46a2      	mov	sl, r4
 800f17c:	e7d2      	b.n	800f124 <_svfiprintf_r+0x9c>
 800f17e:	9b03      	ldr	r3, [sp, #12]
 800f180:	1d19      	adds	r1, r3, #4
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	9103      	str	r1, [sp, #12]
 800f186:	2b00      	cmp	r3, #0
 800f188:	bfbb      	ittet	lt
 800f18a:	425b      	neglt	r3, r3
 800f18c:	f042 0202 	orrlt.w	r2, r2, #2
 800f190:	9307      	strge	r3, [sp, #28]
 800f192:	9307      	strlt	r3, [sp, #28]
 800f194:	bfb8      	it	lt
 800f196:	9204      	strlt	r2, [sp, #16]
 800f198:	7823      	ldrb	r3, [r4, #0]
 800f19a:	2b2e      	cmp	r3, #46	; 0x2e
 800f19c:	d10c      	bne.n	800f1b8 <_svfiprintf_r+0x130>
 800f19e:	7863      	ldrb	r3, [r4, #1]
 800f1a0:	2b2a      	cmp	r3, #42	; 0x2a
 800f1a2:	d135      	bne.n	800f210 <_svfiprintf_r+0x188>
 800f1a4:	9b03      	ldr	r3, [sp, #12]
 800f1a6:	1d1a      	adds	r2, r3, #4
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	9203      	str	r2, [sp, #12]
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	bfb8      	it	lt
 800f1b0:	f04f 33ff 	movlt.w	r3, #4294967295
 800f1b4:	3402      	adds	r4, #2
 800f1b6:	9305      	str	r3, [sp, #20]
 800f1b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f284 <_svfiprintf_r+0x1fc>
 800f1bc:	7821      	ldrb	r1, [r4, #0]
 800f1be:	2203      	movs	r2, #3
 800f1c0:	4650      	mov	r0, sl
 800f1c2:	f7f3 fddd 	bl	8002d80 <memchr>
 800f1c6:	b140      	cbz	r0, 800f1da <_svfiprintf_r+0x152>
 800f1c8:	2340      	movs	r3, #64	; 0x40
 800f1ca:	eba0 000a 	sub.w	r0, r0, sl
 800f1ce:	fa03 f000 	lsl.w	r0, r3, r0
 800f1d2:	9b04      	ldr	r3, [sp, #16]
 800f1d4:	4303      	orrs	r3, r0
 800f1d6:	3401      	adds	r4, #1
 800f1d8:	9304      	str	r3, [sp, #16]
 800f1da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1de:	4826      	ldr	r0, [pc, #152]	; (800f278 <_svfiprintf_r+0x1f0>)
 800f1e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f1e4:	2206      	movs	r2, #6
 800f1e6:	f7f3 fdcb 	bl	8002d80 <memchr>
 800f1ea:	2800      	cmp	r0, #0
 800f1ec:	d038      	beq.n	800f260 <_svfiprintf_r+0x1d8>
 800f1ee:	4b23      	ldr	r3, [pc, #140]	; (800f27c <_svfiprintf_r+0x1f4>)
 800f1f0:	bb1b      	cbnz	r3, 800f23a <_svfiprintf_r+0x1b2>
 800f1f2:	9b03      	ldr	r3, [sp, #12]
 800f1f4:	3307      	adds	r3, #7
 800f1f6:	f023 0307 	bic.w	r3, r3, #7
 800f1fa:	3308      	adds	r3, #8
 800f1fc:	9303      	str	r3, [sp, #12]
 800f1fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f200:	4433      	add	r3, r6
 800f202:	9309      	str	r3, [sp, #36]	; 0x24
 800f204:	e767      	b.n	800f0d6 <_svfiprintf_r+0x4e>
 800f206:	fb0c 3202 	mla	r2, ip, r2, r3
 800f20a:	460c      	mov	r4, r1
 800f20c:	2001      	movs	r0, #1
 800f20e:	e7a5      	b.n	800f15c <_svfiprintf_r+0xd4>
 800f210:	2300      	movs	r3, #0
 800f212:	3401      	adds	r4, #1
 800f214:	9305      	str	r3, [sp, #20]
 800f216:	4619      	mov	r1, r3
 800f218:	f04f 0c0a 	mov.w	ip, #10
 800f21c:	4620      	mov	r0, r4
 800f21e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f222:	3a30      	subs	r2, #48	; 0x30
 800f224:	2a09      	cmp	r2, #9
 800f226:	d903      	bls.n	800f230 <_svfiprintf_r+0x1a8>
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d0c5      	beq.n	800f1b8 <_svfiprintf_r+0x130>
 800f22c:	9105      	str	r1, [sp, #20]
 800f22e:	e7c3      	b.n	800f1b8 <_svfiprintf_r+0x130>
 800f230:	fb0c 2101 	mla	r1, ip, r1, r2
 800f234:	4604      	mov	r4, r0
 800f236:	2301      	movs	r3, #1
 800f238:	e7f0      	b.n	800f21c <_svfiprintf_r+0x194>
 800f23a:	ab03      	add	r3, sp, #12
 800f23c:	9300      	str	r3, [sp, #0]
 800f23e:	462a      	mov	r2, r5
 800f240:	4b0f      	ldr	r3, [pc, #60]	; (800f280 <_svfiprintf_r+0x1f8>)
 800f242:	a904      	add	r1, sp, #16
 800f244:	4638      	mov	r0, r7
 800f246:	f7fe f81b 	bl	800d280 <_printf_float>
 800f24a:	1c42      	adds	r2, r0, #1
 800f24c:	4606      	mov	r6, r0
 800f24e:	d1d6      	bne.n	800f1fe <_svfiprintf_r+0x176>
 800f250:	89ab      	ldrh	r3, [r5, #12]
 800f252:	065b      	lsls	r3, r3, #25
 800f254:	f53f af2c 	bmi.w	800f0b0 <_svfiprintf_r+0x28>
 800f258:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f25a:	b01d      	add	sp, #116	; 0x74
 800f25c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f260:	ab03      	add	r3, sp, #12
 800f262:	9300      	str	r3, [sp, #0]
 800f264:	462a      	mov	r2, r5
 800f266:	4b06      	ldr	r3, [pc, #24]	; (800f280 <_svfiprintf_r+0x1f8>)
 800f268:	a904      	add	r1, sp, #16
 800f26a:	4638      	mov	r0, r7
 800f26c:	f7fe faac 	bl	800d7c8 <_printf_i>
 800f270:	e7eb      	b.n	800f24a <_svfiprintf_r+0x1c2>
 800f272:	bf00      	nop
 800f274:	08013984 	.word	0x08013984
 800f278:	0801398e 	.word	0x0801398e
 800f27c:	0800d281 	.word	0x0800d281
 800f280:	0800efd1 	.word	0x0800efd1
 800f284:	0801398a 	.word	0x0801398a

0800f288 <_sbrk_r>:
 800f288:	b538      	push	{r3, r4, r5, lr}
 800f28a:	4d06      	ldr	r5, [pc, #24]	; (800f2a4 <_sbrk_r+0x1c>)
 800f28c:	2300      	movs	r3, #0
 800f28e:	4604      	mov	r4, r0
 800f290:	4608      	mov	r0, r1
 800f292:	602b      	str	r3, [r5, #0]
 800f294:	f7f5 fce4 	bl	8004c60 <_sbrk>
 800f298:	1c43      	adds	r3, r0, #1
 800f29a:	d102      	bne.n	800f2a2 <_sbrk_r+0x1a>
 800f29c:	682b      	ldr	r3, [r5, #0]
 800f29e:	b103      	cbz	r3, 800f2a2 <_sbrk_r+0x1a>
 800f2a0:	6023      	str	r3, [r4, #0]
 800f2a2:	bd38      	pop	{r3, r4, r5, pc}
 800f2a4:	20000f58 	.word	0x20000f58

0800f2a8 <__assert_func>:
 800f2a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f2aa:	4614      	mov	r4, r2
 800f2ac:	461a      	mov	r2, r3
 800f2ae:	4b09      	ldr	r3, [pc, #36]	; (800f2d4 <__assert_func+0x2c>)
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	4605      	mov	r5, r0
 800f2b4:	68d8      	ldr	r0, [r3, #12]
 800f2b6:	b14c      	cbz	r4, 800f2cc <__assert_func+0x24>
 800f2b8:	4b07      	ldr	r3, [pc, #28]	; (800f2d8 <__assert_func+0x30>)
 800f2ba:	9100      	str	r1, [sp, #0]
 800f2bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f2c0:	4906      	ldr	r1, [pc, #24]	; (800f2dc <__assert_func+0x34>)
 800f2c2:	462b      	mov	r3, r5
 800f2c4:	f000 f80e 	bl	800f2e4 <fiprintf>
 800f2c8:	f000 fa8a 	bl	800f7e0 <abort>
 800f2cc:	4b04      	ldr	r3, [pc, #16]	; (800f2e0 <__assert_func+0x38>)
 800f2ce:	461c      	mov	r4, r3
 800f2d0:	e7f3      	b.n	800f2ba <__assert_func+0x12>
 800f2d2:	bf00      	nop
 800f2d4:	20000048 	.word	0x20000048
 800f2d8:	08013995 	.word	0x08013995
 800f2dc:	080139a2 	.word	0x080139a2
 800f2e0:	080139d0 	.word	0x080139d0

0800f2e4 <fiprintf>:
 800f2e4:	b40e      	push	{r1, r2, r3}
 800f2e6:	b503      	push	{r0, r1, lr}
 800f2e8:	4601      	mov	r1, r0
 800f2ea:	ab03      	add	r3, sp, #12
 800f2ec:	4805      	ldr	r0, [pc, #20]	; (800f304 <fiprintf+0x20>)
 800f2ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800f2f2:	6800      	ldr	r0, [r0, #0]
 800f2f4:	9301      	str	r3, [sp, #4]
 800f2f6:	f000 f875 	bl	800f3e4 <_vfiprintf_r>
 800f2fa:	b002      	add	sp, #8
 800f2fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800f300:	b003      	add	sp, #12
 800f302:	4770      	bx	lr
 800f304:	20000048 	.word	0x20000048

0800f308 <__ascii_mbtowc>:
 800f308:	b082      	sub	sp, #8
 800f30a:	b901      	cbnz	r1, 800f30e <__ascii_mbtowc+0x6>
 800f30c:	a901      	add	r1, sp, #4
 800f30e:	b142      	cbz	r2, 800f322 <__ascii_mbtowc+0x1a>
 800f310:	b14b      	cbz	r3, 800f326 <__ascii_mbtowc+0x1e>
 800f312:	7813      	ldrb	r3, [r2, #0]
 800f314:	600b      	str	r3, [r1, #0]
 800f316:	7812      	ldrb	r2, [r2, #0]
 800f318:	1e10      	subs	r0, r2, #0
 800f31a:	bf18      	it	ne
 800f31c:	2001      	movne	r0, #1
 800f31e:	b002      	add	sp, #8
 800f320:	4770      	bx	lr
 800f322:	4610      	mov	r0, r2
 800f324:	e7fb      	b.n	800f31e <__ascii_mbtowc+0x16>
 800f326:	f06f 0001 	mvn.w	r0, #1
 800f32a:	e7f8      	b.n	800f31e <__ascii_mbtowc+0x16>

0800f32c <__malloc_lock>:
 800f32c:	4801      	ldr	r0, [pc, #4]	; (800f334 <__malloc_lock+0x8>)
 800f32e:	f000 bc17 	b.w	800fb60 <__retarget_lock_acquire_recursive>
 800f332:	bf00      	nop
 800f334:	20000f60 	.word	0x20000f60

0800f338 <__malloc_unlock>:
 800f338:	4801      	ldr	r0, [pc, #4]	; (800f340 <__malloc_unlock+0x8>)
 800f33a:	f000 bc12 	b.w	800fb62 <__retarget_lock_release_recursive>
 800f33e:	bf00      	nop
 800f340:	20000f60 	.word	0x20000f60

0800f344 <_realloc_r>:
 800f344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f346:	4607      	mov	r7, r0
 800f348:	4614      	mov	r4, r2
 800f34a:	460e      	mov	r6, r1
 800f34c:	b921      	cbnz	r1, 800f358 <_realloc_r+0x14>
 800f34e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f352:	4611      	mov	r1, r2
 800f354:	f7ff bde2 	b.w	800ef1c <_malloc_r>
 800f358:	b922      	cbnz	r2, 800f364 <_realloc_r+0x20>
 800f35a:	f7ff fd8f 	bl	800ee7c <_free_r>
 800f35e:	4625      	mov	r5, r4
 800f360:	4628      	mov	r0, r5
 800f362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f364:	f000 fc62 	bl	800fc2c <_malloc_usable_size_r>
 800f368:	42a0      	cmp	r0, r4
 800f36a:	d20f      	bcs.n	800f38c <_realloc_r+0x48>
 800f36c:	4621      	mov	r1, r4
 800f36e:	4638      	mov	r0, r7
 800f370:	f7ff fdd4 	bl	800ef1c <_malloc_r>
 800f374:	4605      	mov	r5, r0
 800f376:	2800      	cmp	r0, #0
 800f378:	d0f2      	beq.n	800f360 <_realloc_r+0x1c>
 800f37a:	4631      	mov	r1, r6
 800f37c:	4622      	mov	r2, r4
 800f37e:	f7fd feaf 	bl	800d0e0 <memcpy>
 800f382:	4631      	mov	r1, r6
 800f384:	4638      	mov	r0, r7
 800f386:	f7ff fd79 	bl	800ee7c <_free_r>
 800f38a:	e7e9      	b.n	800f360 <_realloc_r+0x1c>
 800f38c:	4635      	mov	r5, r6
 800f38e:	e7e7      	b.n	800f360 <_realloc_r+0x1c>

0800f390 <__sfputc_r>:
 800f390:	6893      	ldr	r3, [r2, #8]
 800f392:	3b01      	subs	r3, #1
 800f394:	2b00      	cmp	r3, #0
 800f396:	b410      	push	{r4}
 800f398:	6093      	str	r3, [r2, #8]
 800f39a:	da08      	bge.n	800f3ae <__sfputc_r+0x1e>
 800f39c:	6994      	ldr	r4, [r2, #24]
 800f39e:	42a3      	cmp	r3, r4
 800f3a0:	db01      	blt.n	800f3a6 <__sfputc_r+0x16>
 800f3a2:	290a      	cmp	r1, #10
 800f3a4:	d103      	bne.n	800f3ae <__sfputc_r+0x1e>
 800f3a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f3aa:	f000 b94b 	b.w	800f644 <__swbuf_r>
 800f3ae:	6813      	ldr	r3, [r2, #0]
 800f3b0:	1c58      	adds	r0, r3, #1
 800f3b2:	6010      	str	r0, [r2, #0]
 800f3b4:	7019      	strb	r1, [r3, #0]
 800f3b6:	4608      	mov	r0, r1
 800f3b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f3bc:	4770      	bx	lr

0800f3be <__sfputs_r>:
 800f3be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3c0:	4606      	mov	r6, r0
 800f3c2:	460f      	mov	r7, r1
 800f3c4:	4614      	mov	r4, r2
 800f3c6:	18d5      	adds	r5, r2, r3
 800f3c8:	42ac      	cmp	r4, r5
 800f3ca:	d101      	bne.n	800f3d0 <__sfputs_r+0x12>
 800f3cc:	2000      	movs	r0, #0
 800f3ce:	e007      	b.n	800f3e0 <__sfputs_r+0x22>
 800f3d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3d4:	463a      	mov	r2, r7
 800f3d6:	4630      	mov	r0, r6
 800f3d8:	f7ff ffda 	bl	800f390 <__sfputc_r>
 800f3dc:	1c43      	adds	r3, r0, #1
 800f3de:	d1f3      	bne.n	800f3c8 <__sfputs_r+0xa>
 800f3e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f3e4 <_vfiprintf_r>:
 800f3e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3e8:	460d      	mov	r5, r1
 800f3ea:	b09d      	sub	sp, #116	; 0x74
 800f3ec:	4614      	mov	r4, r2
 800f3ee:	4698      	mov	r8, r3
 800f3f0:	4606      	mov	r6, r0
 800f3f2:	b118      	cbz	r0, 800f3fc <_vfiprintf_r+0x18>
 800f3f4:	6983      	ldr	r3, [r0, #24]
 800f3f6:	b90b      	cbnz	r3, 800f3fc <_vfiprintf_r+0x18>
 800f3f8:	f000 fb14 	bl	800fa24 <__sinit>
 800f3fc:	4b89      	ldr	r3, [pc, #548]	; (800f624 <_vfiprintf_r+0x240>)
 800f3fe:	429d      	cmp	r5, r3
 800f400:	d11b      	bne.n	800f43a <_vfiprintf_r+0x56>
 800f402:	6875      	ldr	r5, [r6, #4]
 800f404:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f406:	07d9      	lsls	r1, r3, #31
 800f408:	d405      	bmi.n	800f416 <_vfiprintf_r+0x32>
 800f40a:	89ab      	ldrh	r3, [r5, #12]
 800f40c:	059a      	lsls	r2, r3, #22
 800f40e:	d402      	bmi.n	800f416 <_vfiprintf_r+0x32>
 800f410:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f412:	f000 fba5 	bl	800fb60 <__retarget_lock_acquire_recursive>
 800f416:	89ab      	ldrh	r3, [r5, #12]
 800f418:	071b      	lsls	r3, r3, #28
 800f41a:	d501      	bpl.n	800f420 <_vfiprintf_r+0x3c>
 800f41c:	692b      	ldr	r3, [r5, #16]
 800f41e:	b9eb      	cbnz	r3, 800f45c <_vfiprintf_r+0x78>
 800f420:	4629      	mov	r1, r5
 800f422:	4630      	mov	r0, r6
 800f424:	f000 f96e 	bl	800f704 <__swsetup_r>
 800f428:	b1c0      	cbz	r0, 800f45c <_vfiprintf_r+0x78>
 800f42a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f42c:	07dc      	lsls	r4, r3, #31
 800f42e:	d50e      	bpl.n	800f44e <_vfiprintf_r+0x6a>
 800f430:	f04f 30ff 	mov.w	r0, #4294967295
 800f434:	b01d      	add	sp, #116	; 0x74
 800f436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f43a:	4b7b      	ldr	r3, [pc, #492]	; (800f628 <_vfiprintf_r+0x244>)
 800f43c:	429d      	cmp	r5, r3
 800f43e:	d101      	bne.n	800f444 <_vfiprintf_r+0x60>
 800f440:	68b5      	ldr	r5, [r6, #8]
 800f442:	e7df      	b.n	800f404 <_vfiprintf_r+0x20>
 800f444:	4b79      	ldr	r3, [pc, #484]	; (800f62c <_vfiprintf_r+0x248>)
 800f446:	429d      	cmp	r5, r3
 800f448:	bf08      	it	eq
 800f44a:	68f5      	ldreq	r5, [r6, #12]
 800f44c:	e7da      	b.n	800f404 <_vfiprintf_r+0x20>
 800f44e:	89ab      	ldrh	r3, [r5, #12]
 800f450:	0598      	lsls	r0, r3, #22
 800f452:	d4ed      	bmi.n	800f430 <_vfiprintf_r+0x4c>
 800f454:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f456:	f000 fb84 	bl	800fb62 <__retarget_lock_release_recursive>
 800f45a:	e7e9      	b.n	800f430 <_vfiprintf_r+0x4c>
 800f45c:	2300      	movs	r3, #0
 800f45e:	9309      	str	r3, [sp, #36]	; 0x24
 800f460:	2320      	movs	r3, #32
 800f462:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f466:	f8cd 800c 	str.w	r8, [sp, #12]
 800f46a:	2330      	movs	r3, #48	; 0x30
 800f46c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f630 <_vfiprintf_r+0x24c>
 800f470:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f474:	f04f 0901 	mov.w	r9, #1
 800f478:	4623      	mov	r3, r4
 800f47a:	469a      	mov	sl, r3
 800f47c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f480:	b10a      	cbz	r2, 800f486 <_vfiprintf_r+0xa2>
 800f482:	2a25      	cmp	r2, #37	; 0x25
 800f484:	d1f9      	bne.n	800f47a <_vfiprintf_r+0x96>
 800f486:	ebba 0b04 	subs.w	fp, sl, r4
 800f48a:	d00b      	beq.n	800f4a4 <_vfiprintf_r+0xc0>
 800f48c:	465b      	mov	r3, fp
 800f48e:	4622      	mov	r2, r4
 800f490:	4629      	mov	r1, r5
 800f492:	4630      	mov	r0, r6
 800f494:	f7ff ff93 	bl	800f3be <__sfputs_r>
 800f498:	3001      	adds	r0, #1
 800f49a:	f000 80aa 	beq.w	800f5f2 <_vfiprintf_r+0x20e>
 800f49e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f4a0:	445a      	add	r2, fp
 800f4a2:	9209      	str	r2, [sp, #36]	; 0x24
 800f4a4:	f89a 3000 	ldrb.w	r3, [sl]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	f000 80a2 	beq.w	800f5f2 <_vfiprintf_r+0x20e>
 800f4ae:	2300      	movs	r3, #0
 800f4b0:	f04f 32ff 	mov.w	r2, #4294967295
 800f4b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f4b8:	f10a 0a01 	add.w	sl, sl, #1
 800f4bc:	9304      	str	r3, [sp, #16]
 800f4be:	9307      	str	r3, [sp, #28]
 800f4c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f4c4:	931a      	str	r3, [sp, #104]	; 0x68
 800f4c6:	4654      	mov	r4, sl
 800f4c8:	2205      	movs	r2, #5
 800f4ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4ce:	4858      	ldr	r0, [pc, #352]	; (800f630 <_vfiprintf_r+0x24c>)
 800f4d0:	f7f3 fc56 	bl	8002d80 <memchr>
 800f4d4:	9a04      	ldr	r2, [sp, #16]
 800f4d6:	b9d8      	cbnz	r0, 800f510 <_vfiprintf_r+0x12c>
 800f4d8:	06d1      	lsls	r1, r2, #27
 800f4da:	bf44      	itt	mi
 800f4dc:	2320      	movmi	r3, #32
 800f4de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f4e2:	0713      	lsls	r3, r2, #28
 800f4e4:	bf44      	itt	mi
 800f4e6:	232b      	movmi	r3, #43	; 0x2b
 800f4e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f4ec:	f89a 3000 	ldrb.w	r3, [sl]
 800f4f0:	2b2a      	cmp	r3, #42	; 0x2a
 800f4f2:	d015      	beq.n	800f520 <_vfiprintf_r+0x13c>
 800f4f4:	9a07      	ldr	r2, [sp, #28]
 800f4f6:	4654      	mov	r4, sl
 800f4f8:	2000      	movs	r0, #0
 800f4fa:	f04f 0c0a 	mov.w	ip, #10
 800f4fe:	4621      	mov	r1, r4
 800f500:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f504:	3b30      	subs	r3, #48	; 0x30
 800f506:	2b09      	cmp	r3, #9
 800f508:	d94e      	bls.n	800f5a8 <_vfiprintf_r+0x1c4>
 800f50a:	b1b0      	cbz	r0, 800f53a <_vfiprintf_r+0x156>
 800f50c:	9207      	str	r2, [sp, #28]
 800f50e:	e014      	b.n	800f53a <_vfiprintf_r+0x156>
 800f510:	eba0 0308 	sub.w	r3, r0, r8
 800f514:	fa09 f303 	lsl.w	r3, r9, r3
 800f518:	4313      	orrs	r3, r2
 800f51a:	9304      	str	r3, [sp, #16]
 800f51c:	46a2      	mov	sl, r4
 800f51e:	e7d2      	b.n	800f4c6 <_vfiprintf_r+0xe2>
 800f520:	9b03      	ldr	r3, [sp, #12]
 800f522:	1d19      	adds	r1, r3, #4
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	9103      	str	r1, [sp, #12]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	bfbb      	ittet	lt
 800f52c:	425b      	neglt	r3, r3
 800f52e:	f042 0202 	orrlt.w	r2, r2, #2
 800f532:	9307      	strge	r3, [sp, #28]
 800f534:	9307      	strlt	r3, [sp, #28]
 800f536:	bfb8      	it	lt
 800f538:	9204      	strlt	r2, [sp, #16]
 800f53a:	7823      	ldrb	r3, [r4, #0]
 800f53c:	2b2e      	cmp	r3, #46	; 0x2e
 800f53e:	d10c      	bne.n	800f55a <_vfiprintf_r+0x176>
 800f540:	7863      	ldrb	r3, [r4, #1]
 800f542:	2b2a      	cmp	r3, #42	; 0x2a
 800f544:	d135      	bne.n	800f5b2 <_vfiprintf_r+0x1ce>
 800f546:	9b03      	ldr	r3, [sp, #12]
 800f548:	1d1a      	adds	r2, r3, #4
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	9203      	str	r2, [sp, #12]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	bfb8      	it	lt
 800f552:	f04f 33ff 	movlt.w	r3, #4294967295
 800f556:	3402      	adds	r4, #2
 800f558:	9305      	str	r3, [sp, #20]
 800f55a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f640 <_vfiprintf_r+0x25c>
 800f55e:	7821      	ldrb	r1, [r4, #0]
 800f560:	2203      	movs	r2, #3
 800f562:	4650      	mov	r0, sl
 800f564:	f7f3 fc0c 	bl	8002d80 <memchr>
 800f568:	b140      	cbz	r0, 800f57c <_vfiprintf_r+0x198>
 800f56a:	2340      	movs	r3, #64	; 0x40
 800f56c:	eba0 000a 	sub.w	r0, r0, sl
 800f570:	fa03 f000 	lsl.w	r0, r3, r0
 800f574:	9b04      	ldr	r3, [sp, #16]
 800f576:	4303      	orrs	r3, r0
 800f578:	3401      	adds	r4, #1
 800f57a:	9304      	str	r3, [sp, #16]
 800f57c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f580:	482c      	ldr	r0, [pc, #176]	; (800f634 <_vfiprintf_r+0x250>)
 800f582:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f586:	2206      	movs	r2, #6
 800f588:	f7f3 fbfa 	bl	8002d80 <memchr>
 800f58c:	2800      	cmp	r0, #0
 800f58e:	d03f      	beq.n	800f610 <_vfiprintf_r+0x22c>
 800f590:	4b29      	ldr	r3, [pc, #164]	; (800f638 <_vfiprintf_r+0x254>)
 800f592:	bb1b      	cbnz	r3, 800f5dc <_vfiprintf_r+0x1f8>
 800f594:	9b03      	ldr	r3, [sp, #12]
 800f596:	3307      	adds	r3, #7
 800f598:	f023 0307 	bic.w	r3, r3, #7
 800f59c:	3308      	adds	r3, #8
 800f59e:	9303      	str	r3, [sp, #12]
 800f5a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f5a2:	443b      	add	r3, r7
 800f5a4:	9309      	str	r3, [sp, #36]	; 0x24
 800f5a6:	e767      	b.n	800f478 <_vfiprintf_r+0x94>
 800f5a8:	fb0c 3202 	mla	r2, ip, r2, r3
 800f5ac:	460c      	mov	r4, r1
 800f5ae:	2001      	movs	r0, #1
 800f5b0:	e7a5      	b.n	800f4fe <_vfiprintf_r+0x11a>
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	3401      	adds	r4, #1
 800f5b6:	9305      	str	r3, [sp, #20]
 800f5b8:	4619      	mov	r1, r3
 800f5ba:	f04f 0c0a 	mov.w	ip, #10
 800f5be:	4620      	mov	r0, r4
 800f5c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f5c4:	3a30      	subs	r2, #48	; 0x30
 800f5c6:	2a09      	cmp	r2, #9
 800f5c8:	d903      	bls.n	800f5d2 <_vfiprintf_r+0x1ee>
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d0c5      	beq.n	800f55a <_vfiprintf_r+0x176>
 800f5ce:	9105      	str	r1, [sp, #20]
 800f5d0:	e7c3      	b.n	800f55a <_vfiprintf_r+0x176>
 800f5d2:	fb0c 2101 	mla	r1, ip, r1, r2
 800f5d6:	4604      	mov	r4, r0
 800f5d8:	2301      	movs	r3, #1
 800f5da:	e7f0      	b.n	800f5be <_vfiprintf_r+0x1da>
 800f5dc:	ab03      	add	r3, sp, #12
 800f5de:	9300      	str	r3, [sp, #0]
 800f5e0:	462a      	mov	r2, r5
 800f5e2:	4b16      	ldr	r3, [pc, #88]	; (800f63c <_vfiprintf_r+0x258>)
 800f5e4:	a904      	add	r1, sp, #16
 800f5e6:	4630      	mov	r0, r6
 800f5e8:	f7fd fe4a 	bl	800d280 <_printf_float>
 800f5ec:	4607      	mov	r7, r0
 800f5ee:	1c78      	adds	r0, r7, #1
 800f5f0:	d1d6      	bne.n	800f5a0 <_vfiprintf_r+0x1bc>
 800f5f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f5f4:	07d9      	lsls	r1, r3, #31
 800f5f6:	d405      	bmi.n	800f604 <_vfiprintf_r+0x220>
 800f5f8:	89ab      	ldrh	r3, [r5, #12]
 800f5fa:	059a      	lsls	r2, r3, #22
 800f5fc:	d402      	bmi.n	800f604 <_vfiprintf_r+0x220>
 800f5fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f600:	f000 faaf 	bl	800fb62 <__retarget_lock_release_recursive>
 800f604:	89ab      	ldrh	r3, [r5, #12]
 800f606:	065b      	lsls	r3, r3, #25
 800f608:	f53f af12 	bmi.w	800f430 <_vfiprintf_r+0x4c>
 800f60c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f60e:	e711      	b.n	800f434 <_vfiprintf_r+0x50>
 800f610:	ab03      	add	r3, sp, #12
 800f612:	9300      	str	r3, [sp, #0]
 800f614:	462a      	mov	r2, r5
 800f616:	4b09      	ldr	r3, [pc, #36]	; (800f63c <_vfiprintf_r+0x258>)
 800f618:	a904      	add	r1, sp, #16
 800f61a:	4630      	mov	r0, r6
 800f61c:	f7fe f8d4 	bl	800d7c8 <_printf_i>
 800f620:	e7e4      	b.n	800f5ec <_vfiprintf_r+0x208>
 800f622:	bf00      	nop
 800f624:	08013afc 	.word	0x08013afc
 800f628:	08013b1c 	.word	0x08013b1c
 800f62c:	08013adc 	.word	0x08013adc
 800f630:	08013984 	.word	0x08013984
 800f634:	0801398e 	.word	0x0801398e
 800f638:	0800d281 	.word	0x0800d281
 800f63c:	0800f3bf 	.word	0x0800f3bf
 800f640:	0801398a 	.word	0x0801398a

0800f644 <__swbuf_r>:
 800f644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f646:	460e      	mov	r6, r1
 800f648:	4614      	mov	r4, r2
 800f64a:	4605      	mov	r5, r0
 800f64c:	b118      	cbz	r0, 800f656 <__swbuf_r+0x12>
 800f64e:	6983      	ldr	r3, [r0, #24]
 800f650:	b90b      	cbnz	r3, 800f656 <__swbuf_r+0x12>
 800f652:	f000 f9e7 	bl	800fa24 <__sinit>
 800f656:	4b21      	ldr	r3, [pc, #132]	; (800f6dc <__swbuf_r+0x98>)
 800f658:	429c      	cmp	r4, r3
 800f65a:	d12b      	bne.n	800f6b4 <__swbuf_r+0x70>
 800f65c:	686c      	ldr	r4, [r5, #4]
 800f65e:	69a3      	ldr	r3, [r4, #24]
 800f660:	60a3      	str	r3, [r4, #8]
 800f662:	89a3      	ldrh	r3, [r4, #12]
 800f664:	071a      	lsls	r2, r3, #28
 800f666:	d52f      	bpl.n	800f6c8 <__swbuf_r+0x84>
 800f668:	6923      	ldr	r3, [r4, #16]
 800f66a:	b36b      	cbz	r3, 800f6c8 <__swbuf_r+0x84>
 800f66c:	6923      	ldr	r3, [r4, #16]
 800f66e:	6820      	ldr	r0, [r4, #0]
 800f670:	1ac0      	subs	r0, r0, r3
 800f672:	6963      	ldr	r3, [r4, #20]
 800f674:	b2f6      	uxtb	r6, r6
 800f676:	4283      	cmp	r3, r0
 800f678:	4637      	mov	r7, r6
 800f67a:	dc04      	bgt.n	800f686 <__swbuf_r+0x42>
 800f67c:	4621      	mov	r1, r4
 800f67e:	4628      	mov	r0, r5
 800f680:	f000 f93c 	bl	800f8fc <_fflush_r>
 800f684:	bb30      	cbnz	r0, 800f6d4 <__swbuf_r+0x90>
 800f686:	68a3      	ldr	r3, [r4, #8]
 800f688:	3b01      	subs	r3, #1
 800f68a:	60a3      	str	r3, [r4, #8]
 800f68c:	6823      	ldr	r3, [r4, #0]
 800f68e:	1c5a      	adds	r2, r3, #1
 800f690:	6022      	str	r2, [r4, #0]
 800f692:	701e      	strb	r6, [r3, #0]
 800f694:	6963      	ldr	r3, [r4, #20]
 800f696:	3001      	adds	r0, #1
 800f698:	4283      	cmp	r3, r0
 800f69a:	d004      	beq.n	800f6a6 <__swbuf_r+0x62>
 800f69c:	89a3      	ldrh	r3, [r4, #12]
 800f69e:	07db      	lsls	r3, r3, #31
 800f6a0:	d506      	bpl.n	800f6b0 <__swbuf_r+0x6c>
 800f6a2:	2e0a      	cmp	r6, #10
 800f6a4:	d104      	bne.n	800f6b0 <__swbuf_r+0x6c>
 800f6a6:	4621      	mov	r1, r4
 800f6a8:	4628      	mov	r0, r5
 800f6aa:	f000 f927 	bl	800f8fc <_fflush_r>
 800f6ae:	b988      	cbnz	r0, 800f6d4 <__swbuf_r+0x90>
 800f6b0:	4638      	mov	r0, r7
 800f6b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f6b4:	4b0a      	ldr	r3, [pc, #40]	; (800f6e0 <__swbuf_r+0x9c>)
 800f6b6:	429c      	cmp	r4, r3
 800f6b8:	d101      	bne.n	800f6be <__swbuf_r+0x7a>
 800f6ba:	68ac      	ldr	r4, [r5, #8]
 800f6bc:	e7cf      	b.n	800f65e <__swbuf_r+0x1a>
 800f6be:	4b09      	ldr	r3, [pc, #36]	; (800f6e4 <__swbuf_r+0xa0>)
 800f6c0:	429c      	cmp	r4, r3
 800f6c2:	bf08      	it	eq
 800f6c4:	68ec      	ldreq	r4, [r5, #12]
 800f6c6:	e7ca      	b.n	800f65e <__swbuf_r+0x1a>
 800f6c8:	4621      	mov	r1, r4
 800f6ca:	4628      	mov	r0, r5
 800f6cc:	f000 f81a 	bl	800f704 <__swsetup_r>
 800f6d0:	2800      	cmp	r0, #0
 800f6d2:	d0cb      	beq.n	800f66c <__swbuf_r+0x28>
 800f6d4:	f04f 37ff 	mov.w	r7, #4294967295
 800f6d8:	e7ea      	b.n	800f6b0 <__swbuf_r+0x6c>
 800f6da:	bf00      	nop
 800f6dc:	08013afc 	.word	0x08013afc
 800f6e0:	08013b1c 	.word	0x08013b1c
 800f6e4:	08013adc 	.word	0x08013adc

0800f6e8 <__ascii_wctomb>:
 800f6e8:	b149      	cbz	r1, 800f6fe <__ascii_wctomb+0x16>
 800f6ea:	2aff      	cmp	r2, #255	; 0xff
 800f6ec:	bf85      	ittet	hi
 800f6ee:	238a      	movhi	r3, #138	; 0x8a
 800f6f0:	6003      	strhi	r3, [r0, #0]
 800f6f2:	700a      	strbls	r2, [r1, #0]
 800f6f4:	f04f 30ff 	movhi.w	r0, #4294967295
 800f6f8:	bf98      	it	ls
 800f6fa:	2001      	movls	r0, #1
 800f6fc:	4770      	bx	lr
 800f6fe:	4608      	mov	r0, r1
 800f700:	4770      	bx	lr
	...

0800f704 <__swsetup_r>:
 800f704:	4b32      	ldr	r3, [pc, #200]	; (800f7d0 <__swsetup_r+0xcc>)
 800f706:	b570      	push	{r4, r5, r6, lr}
 800f708:	681d      	ldr	r5, [r3, #0]
 800f70a:	4606      	mov	r6, r0
 800f70c:	460c      	mov	r4, r1
 800f70e:	b125      	cbz	r5, 800f71a <__swsetup_r+0x16>
 800f710:	69ab      	ldr	r3, [r5, #24]
 800f712:	b913      	cbnz	r3, 800f71a <__swsetup_r+0x16>
 800f714:	4628      	mov	r0, r5
 800f716:	f000 f985 	bl	800fa24 <__sinit>
 800f71a:	4b2e      	ldr	r3, [pc, #184]	; (800f7d4 <__swsetup_r+0xd0>)
 800f71c:	429c      	cmp	r4, r3
 800f71e:	d10f      	bne.n	800f740 <__swsetup_r+0x3c>
 800f720:	686c      	ldr	r4, [r5, #4]
 800f722:	89a3      	ldrh	r3, [r4, #12]
 800f724:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f728:	0719      	lsls	r1, r3, #28
 800f72a:	d42c      	bmi.n	800f786 <__swsetup_r+0x82>
 800f72c:	06dd      	lsls	r5, r3, #27
 800f72e:	d411      	bmi.n	800f754 <__swsetup_r+0x50>
 800f730:	2309      	movs	r3, #9
 800f732:	6033      	str	r3, [r6, #0]
 800f734:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f738:	81a3      	strh	r3, [r4, #12]
 800f73a:	f04f 30ff 	mov.w	r0, #4294967295
 800f73e:	e03e      	b.n	800f7be <__swsetup_r+0xba>
 800f740:	4b25      	ldr	r3, [pc, #148]	; (800f7d8 <__swsetup_r+0xd4>)
 800f742:	429c      	cmp	r4, r3
 800f744:	d101      	bne.n	800f74a <__swsetup_r+0x46>
 800f746:	68ac      	ldr	r4, [r5, #8]
 800f748:	e7eb      	b.n	800f722 <__swsetup_r+0x1e>
 800f74a:	4b24      	ldr	r3, [pc, #144]	; (800f7dc <__swsetup_r+0xd8>)
 800f74c:	429c      	cmp	r4, r3
 800f74e:	bf08      	it	eq
 800f750:	68ec      	ldreq	r4, [r5, #12]
 800f752:	e7e6      	b.n	800f722 <__swsetup_r+0x1e>
 800f754:	0758      	lsls	r0, r3, #29
 800f756:	d512      	bpl.n	800f77e <__swsetup_r+0x7a>
 800f758:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f75a:	b141      	cbz	r1, 800f76e <__swsetup_r+0x6a>
 800f75c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f760:	4299      	cmp	r1, r3
 800f762:	d002      	beq.n	800f76a <__swsetup_r+0x66>
 800f764:	4630      	mov	r0, r6
 800f766:	f7ff fb89 	bl	800ee7c <_free_r>
 800f76a:	2300      	movs	r3, #0
 800f76c:	6363      	str	r3, [r4, #52]	; 0x34
 800f76e:	89a3      	ldrh	r3, [r4, #12]
 800f770:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f774:	81a3      	strh	r3, [r4, #12]
 800f776:	2300      	movs	r3, #0
 800f778:	6063      	str	r3, [r4, #4]
 800f77a:	6923      	ldr	r3, [r4, #16]
 800f77c:	6023      	str	r3, [r4, #0]
 800f77e:	89a3      	ldrh	r3, [r4, #12]
 800f780:	f043 0308 	orr.w	r3, r3, #8
 800f784:	81a3      	strh	r3, [r4, #12]
 800f786:	6923      	ldr	r3, [r4, #16]
 800f788:	b94b      	cbnz	r3, 800f79e <__swsetup_r+0x9a>
 800f78a:	89a3      	ldrh	r3, [r4, #12]
 800f78c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f790:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f794:	d003      	beq.n	800f79e <__swsetup_r+0x9a>
 800f796:	4621      	mov	r1, r4
 800f798:	4630      	mov	r0, r6
 800f79a:	f000 fa07 	bl	800fbac <__smakebuf_r>
 800f79e:	89a0      	ldrh	r0, [r4, #12]
 800f7a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f7a4:	f010 0301 	ands.w	r3, r0, #1
 800f7a8:	d00a      	beq.n	800f7c0 <__swsetup_r+0xbc>
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	60a3      	str	r3, [r4, #8]
 800f7ae:	6963      	ldr	r3, [r4, #20]
 800f7b0:	425b      	negs	r3, r3
 800f7b2:	61a3      	str	r3, [r4, #24]
 800f7b4:	6923      	ldr	r3, [r4, #16]
 800f7b6:	b943      	cbnz	r3, 800f7ca <__swsetup_r+0xc6>
 800f7b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f7bc:	d1ba      	bne.n	800f734 <__swsetup_r+0x30>
 800f7be:	bd70      	pop	{r4, r5, r6, pc}
 800f7c0:	0781      	lsls	r1, r0, #30
 800f7c2:	bf58      	it	pl
 800f7c4:	6963      	ldrpl	r3, [r4, #20]
 800f7c6:	60a3      	str	r3, [r4, #8]
 800f7c8:	e7f4      	b.n	800f7b4 <__swsetup_r+0xb0>
 800f7ca:	2000      	movs	r0, #0
 800f7cc:	e7f7      	b.n	800f7be <__swsetup_r+0xba>
 800f7ce:	bf00      	nop
 800f7d0:	20000048 	.word	0x20000048
 800f7d4:	08013afc 	.word	0x08013afc
 800f7d8:	08013b1c 	.word	0x08013b1c
 800f7dc:	08013adc 	.word	0x08013adc

0800f7e0 <abort>:
 800f7e0:	b508      	push	{r3, lr}
 800f7e2:	2006      	movs	r0, #6
 800f7e4:	f000 fa52 	bl	800fc8c <raise>
 800f7e8:	2001      	movs	r0, #1
 800f7ea:	f7f5 f9c1 	bl	8004b70 <_exit>
	...

0800f7f0 <__sflush_r>:
 800f7f0:	898a      	ldrh	r2, [r1, #12]
 800f7f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7f6:	4605      	mov	r5, r0
 800f7f8:	0710      	lsls	r0, r2, #28
 800f7fa:	460c      	mov	r4, r1
 800f7fc:	d458      	bmi.n	800f8b0 <__sflush_r+0xc0>
 800f7fe:	684b      	ldr	r3, [r1, #4]
 800f800:	2b00      	cmp	r3, #0
 800f802:	dc05      	bgt.n	800f810 <__sflush_r+0x20>
 800f804:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f806:	2b00      	cmp	r3, #0
 800f808:	dc02      	bgt.n	800f810 <__sflush_r+0x20>
 800f80a:	2000      	movs	r0, #0
 800f80c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f810:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f812:	2e00      	cmp	r6, #0
 800f814:	d0f9      	beq.n	800f80a <__sflush_r+0x1a>
 800f816:	2300      	movs	r3, #0
 800f818:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f81c:	682f      	ldr	r7, [r5, #0]
 800f81e:	602b      	str	r3, [r5, #0]
 800f820:	d032      	beq.n	800f888 <__sflush_r+0x98>
 800f822:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f824:	89a3      	ldrh	r3, [r4, #12]
 800f826:	075a      	lsls	r2, r3, #29
 800f828:	d505      	bpl.n	800f836 <__sflush_r+0x46>
 800f82a:	6863      	ldr	r3, [r4, #4]
 800f82c:	1ac0      	subs	r0, r0, r3
 800f82e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f830:	b10b      	cbz	r3, 800f836 <__sflush_r+0x46>
 800f832:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f834:	1ac0      	subs	r0, r0, r3
 800f836:	2300      	movs	r3, #0
 800f838:	4602      	mov	r2, r0
 800f83a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f83c:	6a21      	ldr	r1, [r4, #32]
 800f83e:	4628      	mov	r0, r5
 800f840:	47b0      	blx	r6
 800f842:	1c43      	adds	r3, r0, #1
 800f844:	89a3      	ldrh	r3, [r4, #12]
 800f846:	d106      	bne.n	800f856 <__sflush_r+0x66>
 800f848:	6829      	ldr	r1, [r5, #0]
 800f84a:	291d      	cmp	r1, #29
 800f84c:	d82c      	bhi.n	800f8a8 <__sflush_r+0xb8>
 800f84e:	4a2a      	ldr	r2, [pc, #168]	; (800f8f8 <__sflush_r+0x108>)
 800f850:	40ca      	lsrs	r2, r1
 800f852:	07d6      	lsls	r6, r2, #31
 800f854:	d528      	bpl.n	800f8a8 <__sflush_r+0xb8>
 800f856:	2200      	movs	r2, #0
 800f858:	6062      	str	r2, [r4, #4]
 800f85a:	04d9      	lsls	r1, r3, #19
 800f85c:	6922      	ldr	r2, [r4, #16]
 800f85e:	6022      	str	r2, [r4, #0]
 800f860:	d504      	bpl.n	800f86c <__sflush_r+0x7c>
 800f862:	1c42      	adds	r2, r0, #1
 800f864:	d101      	bne.n	800f86a <__sflush_r+0x7a>
 800f866:	682b      	ldr	r3, [r5, #0]
 800f868:	b903      	cbnz	r3, 800f86c <__sflush_r+0x7c>
 800f86a:	6560      	str	r0, [r4, #84]	; 0x54
 800f86c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f86e:	602f      	str	r7, [r5, #0]
 800f870:	2900      	cmp	r1, #0
 800f872:	d0ca      	beq.n	800f80a <__sflush_r+0x1a>
 800f874:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f878:	4299      	cmp	r1, r3
 800f87a:	d002      	beq.n	800f882 <__sflush_r+0x92>
 800f87c:	4628      	mov	r0, r5
 800f87e:	f7ff fafd 	bl	800ee7c <_free_r>
 800f882:	2000      	movs	r0, #0
 800f884:	6360      	str	r0, [r4, #52]	; 0x34
 800f886:	e7c1      	b.n	800f80c <__sflush_r+0x1c>
 800f888:	6a21      	ldr	r1, [r4, #32]
 800f88a:	2301      	movs	r3, #1
 800f88c:	4628      	mov	r0, r5
 800f88e:	47b0      	blx	r6
 800f890:	1c41      	adds	r1, r0, #1
 800f892:	d1c7      	bne.n	800f824 <__sflush_r+0x34>
 800f894:	682b      	ldr	r3, [r5, #0]
 800f896:	2b00      	cmp	r3, #0
 800f898:	d0c4      	beq.n	800f824 <__sflush_r+0x34>
 800f89a:	2b1d      	cmp	r3, #29
 800f89c:	d001      	beq.n	800f8a2 <__sflush_r+0xb2>
 800f89e:	2b16      	cmp	r3, #22
 800f8a0:	d101      	bne.n	800f8a6 <__sflush_r+0xb6>
 800f8a2:	602f      	str	r7, [r5, #0]
 800f8a4:	e7b1      	b.n	800f80a <__sflush_r+0x1a>
 800f8a6:	89a3      	ldrh	r3, [r4, #12]
 800f8a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f8ac:	81a3      	strh	r3, [r4, #12]
 800f8ae:	e7ad      	b.n	800f80c <__sflush_r+0x1c>
 800f8b0:	690f      	ldr	r7, [r1, #16]
 800f8b2:	2f00      	cmp	r7, #0
 800f8b4:	d0a9      	beq.n	800f80a <__sflush_r+0x1a>
 800f8b6:	0793      	lsls	r3, r2, #30
 800f8b8:	680e      	ldr	r6, [r1, #0]
 800f8ba:	bf08      	it	eq
 800f8bc:	694b      	ldreq	r3, [r1, #20]
 800f8be:	600f      	str	r7, [r1, #0]
 800f8c0:	bf18      	it	ne
 800f8c2:	2300      	movne	r3, #0
 800f8c4:	eba6 0807 	sub.w	r8, r6, r7
 800f8c8:	608b      	str	r3, [r1, #8]
 800f8ca:	f1b8 0f00 	cmp.w	r8, #0
 800f8ce:	dd9c      	ble.n	800f80a <__sflush_r+0x1a>
 800f8d0:	6a21      	ldr	r1, [r4, #32]
 800f8d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f8d4:	4643      	mov	r3, r8
 800f8d6:	463a      	mov	r2, r7
 800f8d8:	4628      	mov	r0, r5
 800f8da:	47b0      	blx	r6
 800f8dc:	2800      	cmp	r0, #0
 800f8de:	dc06      	bgt.n	800f8ee <__sflush_r+0xfe>
 800f8e0:	89a3      	ldrh	r3, [r4, #12]
 800f8e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f8e6:	81a3      	strh	r3, [r4, #12]
 800f8e8:	f04f 30ff 	mov.w	r0, #4294967295
 800f8ec:	e78e      	b.n	800f80c <__sflush_r+0x1c>
 800f8ee:	4407      	add	r7, r0
 800f8f0:	eba8 0800 	sub.w	r8, r8, r0
 800f8f4:	e7e9      	b.n	800f8ca <__sflush_r+0xda>
 800f8f6:	bf00      	nop
 800f8f8:	20400001 	.word	0x20400001

0800f8fc <_fflush_r>:
 800f8fc:	b538      	push	{r3, r4, r5, lr}
 800f8fe:	690b      	ldr	r3, [r1, #16]
 800f900:	4605      	mov	r5, r0
 800f902:	460c      	mov	r4, r1
 800f904:	b913      	cbnz	r3, 800f90c <_fflush_r+0x10>
 800f906:	2500      	movs	r5, #0
 800f908:	4628      	mov	r0, r5
 800f90a:	bd38      	pop	{r3, r4, r5, pc}
 800f90c:	b118      	cbz	r0, 800f916 <_fflush_r+0x1a>
 800f90e:	6983      	ldr	r3, [r0, #24]
 800f910:	b90b      	cbnz	r3, 800f916 <_fflush_r+0x1a>
 800f912:	f000 f887 	bl	800fa24 <__sinit>
 800f916:	4b14      	ldr	r3, [pc, #80]	; (800f968 <_fflush_r+0x6c>)
 800f918:	429c      	cmp	r4, r3
 800f91a:	d11b      	bne.n	800f954 <_fflush_r+0x58>
 800f91c:	686c      	ldr	r4, [r5, #4]
 800f91e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f922:	2b00      	cmp	r3, #0
 800f924:	d0ef      	beq.n	800f906 <_fflush_r+0xa>
 800f926:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f928:	07d0      	lsls	r0, r2, #31
 800f92a:	d404      	bmi.n	800f936 <_fflush_r+0x3a>
 800f92c:	0599      	lsls	r1, r3, #22
 800f92e:	d402      	bmi.n	800f936 <_fflush_r+0x3a>
 800f930:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f932:	f000 f915 	bl	800fb60 <__retarget_lock_acquire_recursive>
 800f936:	4628      	mov	r0, r5
 800f938:	4621      	mov	r1, r4
 800f93a:	f7ff ff59 	bl	800f7f0 <__sflush_r>
 800f93e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f940:	07da      	lsls	r2, r3, #31
 800f942:	4605      	mov	r5, r0
 800f944:	d4e0      	bmi.n	800f908 <_fflush_r+0xc>
 800f946:	89a3      	ldrh	r3, [r4, #12]
 800f948:	059b      	lsls	r3, r3, #22
 800f94a:	d4dd      	bmi.n	800f908 <_fflush_r+0xc>
 800f94c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f94e:	f000 f908 	bl	800fb62 <__retarget_lock_release_recursive>
 800f952:	e7d9      	b.n	800f908 <_fflush_r+0xc>
 800f954:	4b05      	ldr	r3, [pc, #20]	; (800f96c <_fflush_r+0x70>)
 800f956:	429c      	cmp	r4, r3
 800f958:	d101      	bne.n	800f95e <_fflush_r+0x62>
 800f95a:	68ac      	ldr	r4, [r5, #8]
 800f95c:	e7df      	b.n	800f91e <_fflush_r+0x22>
 800f95e:	4b04      	ldr	r3, [pc, #16]	; (800f970 <_fflush_r+0x74>)
 800f960:	429c      	cmp	r4, r3
 800f962:	bf08      	it	eq
 800f964:	68ec      	ldreq	r4, [r5, #12]
 800f966:	e7da      	b.n	800f91e <_fflush_r+0x22>
 800f968:	08013afc 	.word	0x08013afc
 800f96c:	08013b1c 	.word	0x08013b1c
 800f970:	08013adc 	.word	0x08013adc

0800f974 <std>:
 800f974:	2300      	movs	r3, #0
 800f976:	b510      	push	{r4, lr}
 800f978:	4604      	mov	r4, r0
 800f97a:	e9c0 3300 	strd	r3, r3, [r0]
 800f97e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f982:	6083      	str	r3, [r0, #8]
 800f984:	8181      	strh	r1, [r0, #12]
 800f986:	6643      	str	r3, [r0, #100]	; 0x64
 800f988:	81c2      	strh	r2, [r0, #14]
 800f98a:	6183      	str	r3, [r0, #24]
 800f98c:	4619      	mov	r1, r3
 800f98e:	2208      	movs	r2, #8
 800f990:	305c      	adds	r0, #92	; 0x5c
 800f992:	f7fd fbcd 	bl	800d130 <memset>
 800f996:	4b05      	ldr	r3, [pc, #20]	; (800f9ac <std+0x38>)
 800f998:	6263      	str	r3, [r4, #36]	; 0x24
 800f99a:	4b05      	ldr	r3, [pc, #20]	; (800f9b0 <std+0x3c>)
 800f99c:	62a3      	str	r3, [r4, #40]	; 0x28
 800f99e:	4b05      	ldr	r3, [pc, #20]	; (800f9b4 <std+0x40>)
 800f9a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f9a2:	4b05      	ldr	r3, [pc, #20]	; (800f9b8 <std+0x44>)
 800f9a4:	6224      	str	r4, [r4, #32]
 800f9a6:	6323      	str	r3, [r4, #48]	; 0x30
 800f9a8:	bd10      	pop	{r4, pc}
 800f9aa:	bf00      	nop
 800f9ac:	0800fcc5 	.word	0x0800fcc5
 800f9b0:	0800fce7 	.word	0x0800fce7
 800f9b4:	0800fd1f 	.word	0x0800fd1f
 800f9b8:	0800fd43 	.word	0x0800fd43

0800f9bc <_cleanup_r>:
 800f9bc:	4901      	ldr	r1, [pc, #4]	; (800f9c4 <_cleanup_r+0x8>)
 800f9be:	f000 b8af 	b.w	800fb20 <_fwalk_reent>
 800f9c2:	bf00      	nop
 800f9c4:	0800f8fd 	.word	0x0800f8fd

0800f9c8 <__sfmoreglue>:
 800f9c8:	b570      	push	{r4, r5, r6, lr}
 800f9ca:	1e4a      	subs	r2, r1, #1
 800f9cc:	2568      	movs	r5, #104	; 0x68
 800f9ce:	4355      	muls	r5, r2
 800f9d0:	460e      	mov	r6, r1
 800f9d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f9d6:	f7ff faa1 	bl	800ef1c <_malloc_r>
 800f9da:	4604      	mov	r4, r0
 800f9dc:	b140      	cbz	r0, 800f9f0 <__sfmoreglue+0x28>
 800f9de:	2100      	movs	r1, #0
 800f9e0:	e9c0 1600 	strd	r1, r6, [r0]
 800f9e4:	300c      	adds	r0, #12
 800f9e6:	60a0      	str	r0, [r4, #8]
 800f9e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f9ec:	f7fd fba0 	bl	800d130 <memset>
 800f9f0:	4620      	mov	r0, r4
 800f9f2:	bd70      	pop	{r4, r5, r6, pc}

0800f9f4 <__sfp_lock_acquire>:
 800f9f4:	4801      	ldr	r0, [pc, #4]	; (800f9fc <__sfp_lock_acquire+0x8>)
 800f9f6:	f000 b8b3 	b.w	800fb60 <__retarget_lock_acquire_recursive>
 800f9fa:	bf00      	nop
 800f9fc:	20000f64 	.word	0x20000f64

0800fa00 <__sfp_lock_release>:
 800fa00:	4801      	ldr	r0, [pc, #4]	; (800fa08 <__sfp_lock_release+0x8>)
 800fa02:	f000 b8ae 	b.w	800fb62 <__retarget_lock_release_recursive>
 800fa06:	bf00      	nop
 800fa08:	20000f64 	.word	0x20000f64

0800fa0c <__sinit_lock_acquire>:
 800fa0c:	4801      	ldr	r0, [pc, #4]	; (800fa14 <__sinit_lock_acquire+0x8>)
 800fa0e:	f000 b8a7 	b.w	800fb60 <__retarget_lock_acquire_recursive>
 800fa12:	bf00      	nop
 800fa14:	20000f5f 	.word	0x20000f5f

0800fa18 <__sinit_lock_release>:
 800fa18:	4801      	ldr	r0, [pc, #4]	; (800fa20 <__sinit_lock_release+0x8>)
 800fa1a:	f000 b8a2 	b.w	800fb62 <__retarget_lock_release_recursive>
 800fa1e:	bf00      	nop
 800fa20:	20000f5f 	.word	0x20000f5f

0800fa24 <__sinit>:
 800fa24:	b510      	push	{r4, lr}
 800fa26:	4604      	mov	r4, r0
 800fa28:	f7ff fff0 	bl	800fa0c <__sinit_lock_acquire>
 800fa2c:	69a3      	ldr	r3, [r4, #24]
 800fa2e:	b11b      	cbz	r3, 800fa38 <__sinit+0x14>
 800fa30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa34:	f7ff bff0 	b.w	800fa18 <__sinit_lock_release>
 800fa38:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800fa3c:	6523      	str	r3, [r4, #80]	; 0x50
 800fa3e:	4b13      	ldr	r3, [pc, #76]	; (800fa8c <__sinit+0x68>)
 800fa40:	4a13      	ldr	r2, [pc, #76]	; (800fa90 <__sinit+0x6c>)
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	62a2      	str	r2, [r4, #40]	; 0x28
 800fa46:	42a3      	cmp	r3, r4
 800fa48:	bf04      	itt	eq
 800fa4a:	2301      	moveq	r3, #1
 800fa4c:	61a3      	streq	r3, [r4, #24]
 800fa4e:	4620      	mov	r0, r4
 800fa50:	f000 f820 	bl	800fa94 <__sfp>
 800fa54:	6060      	str	r0, [r4, #4]
 800fa56:	4620      	mov	r0, r4
 800fa58:	f000 f81c 	bl	800fa94 <__sfp>
 800fa5c:	60a0      	str	r0, [r4, #8]
 800fa5e:	4620      	mov	r0, r4
 800fa60:	f000 f818 	bl	800fa94 <__sfp>
 800fa64:	2200      	movs	r2, #0
 800fa66:	60e0      	str	r0, [r4, #12]
 800fa68:	2104      	movs	r1, #4
 800fa6a:	6860      	ldr	r0, [r4, #4]
 800fa6c:	f7ff ff82 	bl	800f974 <std>
 800fa70:	68a0      	ldr	r0, [r4, #8]
 800fa72:	2201      	movs	r2, #1
 800fa74:	2109      	movs	r1, #9
 800fa76:	f7ff ff7d 	bl	800f974 <std>
 800fa7a:	68e0      	ldr	r0, [r4, #12]
 800fa7c:	2202      	movs	r2, #2
 800fa7e:	2112      	movs	r1, #18
 800fa80:	f7ff ff78 	bl	800f974 <std>
 800fa84:	2301      	movs	r3, #1
 800fa86:	61a3      	str	r3, [r4, #24]
 800fa88:	e7d2      	b.n	800fa30 <__sinit+0xc>
 800fa8a:	bf00      	nop
 800fa8c:	08013758 	.word	0x08013758
 800fa90:	0800f9bd 	.word	0x0800f9bd

0800fa94 <__sfp>:
 800fa94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa96:	4607      	mov	r7, r0
 800fa98:	f7ff ffac 	bl	800f9f4 <__sfp_lock_acquire>
 800fa9c:	4b1e      	ldr	r3, [pc, #120]	; (800fb18 <__sfp+0x84>)
 800fa9e:	681e      	ldr	r6, [r3, #0]
 800faa0:	69b3      	ldr	r3, [r6, #24]
 800faa2:	b913      	cbnz	r3, 800faaa <__sfp+0x16>
 800faa4:	4630      	mov	r0, r6
 800faa6:	f7ff ffbd 	bl	800fa24 <__sinit>
 800faaa:	3648      	adds	r6, #72	; 0x48
 800faac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fab0:	3b01      	subs	r3, #1
 800fab2:	d503      	bpl.n	800fabc <__sfp+0x28>
 800fab4:	6833      	ldr	r3, [r6, #0]
 800fab6:	b30b      	cbz	r3, 800fafc <__sfp+0x68>
 800fab8:	6836      	ldr	r6, [r6, #0]
 800faba:	e7f7      	b.n	800faac <__sfp+0x18>
 800fabc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fac0:	b9d5      	cbnz	r5, 800faf8 <__sfp+0x64>
 800fac2:	4b16      	ldr	r3, [pc, #88]	; (800fb1c <__sfp+0x88>)
 800fac4:	60e3      	str	r3, [r4, #12]
 800fac6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800faca:	6665      	str	r5, [r4, #100]	; 0x64
 800facc:	f000 f847 	bl	800fb5e <__retarget_lock_init_recursive>
 800fad0:	f7ff ff96 	bl	800fa00 <__sfp_lock_release>
 800fad4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800fad8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800fadc:	6025      	str	r5, [r4, #0]
 800fade:	61a5      	str	r5, [r4, #24]
 800fae0:	2208      	movs	r2, #8
 800fae2:	4629      	mov	r1, r5
 800fae4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fae8:	f7fd fb22 	bl	800d130 <memset>
 800faec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800faf0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800faf4:	4620      	mov	r0, r4
 800faf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800faf8:	3468      	adds	r4, #104	; 0x68
 800fafa:	e7d9      	b.n	800fab0 <__sfp+0x1c>
 800fafc:	2104      	movs	r1, #4
 800fafe:	4638      	mov	r0, r7
 800fb00:	f7ff ff62 	bl	800f9c8 <__sfmoreglue>
 800fb04:	4604      	mov	r4, r0
 800fb06:	6030      	str	r0, [r6, #0]
 800fb08:	2800      	cmp	r0, #0
 800fb0a:	d1d5      	bne.n	800fab8 <__sfp+0x24>
 800fb0c:	f7ff ff78 	bl	800fa00 <__sfp_lock_release>
 800fb10:	230c      	movs	r3, #12
 800fb12:	603b      	str	r3, [r7, #0]
 800fb14:	e7ee      	b.n	800faf4 <__sfp+0x60>
 800fb16:	bf00      	nop
 800fb18:	08013758 	.word	0x08013758
 800fb1c:	ffff0001 	.word	0xffff0001

0800fb20 <_fwalk_reent>:
 800fb20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb24:	4606      	mov	r6, r0
 800fb26:	4688      	mov	r8, r1
 800fb28:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fb2c:	2700      	movs	r7, #0
 800fb2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fb32:	f1b9 0901 	subs.w	r9, r9, #1
 800fb36:	d505      	bpl.n	800fb44 <_fwalk_reent+0x24>
 800fb38:	6824      	ldr	r4, [r4, #0]
 800fb3a:	2c00      	cmp	r4, #0
 800fb3c:	d1f7      	bne.n	800fb2e <_fwalk_reent+0xe>
 800fb3e:	4638      	mov	r0, r7
 800fb40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb44:	89ab      	ldrh	r3, [r5, #12]
 800fb46:	2b01      	cmp	r3, #1
 800fb48:	d907      	bls.n	800fb5a <_fwalk_reent+0x3a>
 800fb4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fb4e:	3301      	adds	r3, #1
 800fb50:	d003      	beq.n	800fb5a <_fwalk_reent+0x3a>
 800fb52:	4629      	mov	r1, r5
 800fb54:	4630      	mov	r0, r6
 800fb56:	47c0      	blx	r8
 800fb58:	4307      	orrs	r7, r0
 800fb5a:	3568      	adds	r5, #104	; 0x68
 800fb5c:	e7e9      	b.n	800fb32 <_fwalk_reent+0x12>

0800fb5e <__retarget_lock_init_recursive>:
 800fb5e:	4770      	bx	lr

0800fb60 <__retarget_lock_acquire_recursive>:
 800fb60:	4770      	bx	lr

0800fb62 <__retarget_lock_release_recursive>:
 800fb62:	4770      	bx	lr

0800fb64 <__swhatbuf_r>:
 800fb64:	b570      	push	{r4, r5, r6, lr}
 800fb66:	460e      	mov	r6, r1
 800fb68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb6c:	2900      	cmp	r1, #0
 800fb6e:	b096      	sub	sp, #88	; 0x58
 800fb70:	4614      	mov	r4, r2
 800fb72:	461d      	mov	r5, r3
 800fb74:	da07      	bge.n	800fb86 <__swhatbuf_r+0x22>
 800fb76:	2300      	movs	r3, #0
 800fb78:	602b      	str	r3, [r5, #0]
 800fb7a:	89b3      	ldrh	r3, [r6, #12]
 800fb7c:	061a      	lsls	r2, r3, #24
 800fb7e:	d410      	bmi.n	800fba2 <__swhatbuf_r+0x3e>
 800fb80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fb84:	e00e      	b.n	800fba4 <__swhatbuf_r+0x40>
 800fb86:	466a      	mov	r2, sp
 800fb88:	f000 f902 	bl	800fd90 <_fstat_r>
 800fb8c:	2800      	cmp	r0, #0
 800fb8e:	dbf2      	blt.n	800fb76 <__swhatbuf_r+0x12>
 800fb90:	9a01      	ldr	r2, [sp, #4]
 800fb92:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fb96:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fb9a:	425a      	negs	r2, r3
 800fb9c:	415a      	adcs	r2, r3
 800fb9e:	602a      	str	r2, [r5, #0]
 800fba0:	e7ee      	b.n	800fb80 <__swhatbuf_r+0x1c>
 800fba2:	2340      	movs	r3, #64	; 0x40
 800fba4:	2000      	movs	r0, #0
 800fba6:	6023      	str	r3, [r4, #0]
 800fba8:	b016      	add	sp, #88	; 0x58
 800fbaa:	bd70      	pop	{r4, r5, r6, pc}

0800fbac <__smakebuf_r>:
 800fbac:	898b      	ldrh	r3, [r1, #12]
 800fbae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fbb0:	079d      	lsls	r5, r3, #30
 800fbb2:	4606      	mov	r6, r0
 800fbb4:	460c      	mov	r4, r1
 800fbb6:	d507      	bpl.n	800fbc8 <__smakebuf_r+0x1c>
 800fbb8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fbbc:	6023      	str	r3, [r4, #0]
 800fbbe:	6123      	str	r3, [r4, #16]
 800fbc0:	2301      	movs	r3, #1
 800fbc2:	6163      	str	r3, [r4, #20]
 800fbc4:	b002      	add	sp, #8
 800fbc6:	bd70      	pop	{r4, r5, r6, pc}
 800fbc8:	ab01      	add	r3, sp, #4
 800fbca:	466a      	mov	r2, sp
 800fbcc:	f7ff ffca 	bl	800fb64 <__swhatbuf_r>
 800fbd0:	9900      	ldr	r1, [sp, #0]
 800fbd2:	4605      	mov	r5, r0
 800fbd4:	4630      	mov	r0, r6
 800fbd6:	f7ff f9a1 	bl	800ef1c <_malloc_r>
 800fbda:	b948      	cbnz	r0, 800fbf0 <__smakebuf_r+0x44>
 800fbdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fbe0:	059a      	lsls	r2, r3, #22
 800fbe2:	d4ef      	bmi.n	800fbc4 <__smakebuf_r+0x18>
 800fbe4:	f023 0303 	bic.w	r3, r3, #3
 800fbe8:	f043 0302 	orr.w	r3, r3, #2
 800fbec:	81a3      	strh	r3, [r4, #12]
 800fbee:	e7e3      	b.n	800fbb8 <__smakebuf_r+0xc>
 800fbf0:	4b0d      	ldr	r3, [pc, #52]	; (800fc28 <__smakebuf_r+0x7c>)
 800fbf2:	62b3      	str	r3, [r6, #40]	; 0x28
 800fbf4:	89a3      	ldrh	r3, [r4, #12]
 800fbf6:	6020      	str	r0, [r4, #0]
 800fbf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fbfc:	81a3      	strh	r3, [r4, #12]
 800fbfe:	9b00      	ldr	r3, [sp, #0]
 800fc00:	6163      	str	r3, [r4, #20]
 800fc02:	9b01      	ldr	r3, [sp, #4]
 800fc04:	6120      	str	r0, [r4, #16]
 800fc06:	b15b      	cbz	r3, 800fc20 <__smakebuf_r+0x74>
 800fc08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fc0c:	4630      	mov	r0, r6
 800fc0e:	f000 f8d1 	bl	800fdb4 <_isatty_r>
 800fc12:	b128      	cbz	r0, 800fc20 <__smakebuf_r+0x74>
 800fc14:	89a3      	ldrh	r3, [r4, #12]
 800fc16:	f023 0303 	bic.w	r3, r3, #3
 800fc1a:	f043 0301 	orr.w	r3, r3, #1
 800fc1e:	81a3      	strh	r3, [r4, #12]
 800fc20:	89a0      	ldrh	r0, [r4, #12]
 800fc22:	4305      	orrs	r5, r0
 800fc24:	81a5      	strh	r5, [r4, #12]
 800fc26:	e7cd      	b.n	800fbc4 <__smakebuf_r+0x18>
 800fc28:	0800f9bd 	.word	0x0800f9bd

0800fc2c <_malloc_usable_size_r>:
 800fc2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fc30:	1f18      	subs	r0, r3, #4
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	bfbc      	itt	lt
 800fc36:	580b      	ldrlt	r3, [r1, r0]
 800fc38:	18c0      	addlt	r0, r0, r3
 800fc3a:	4770      	bx	lr

0800fc3c <_raise_r>:
 800fc3c:	291f      	cmp	r1, #31
 800fc3e:	b538      	push	{r3, r4, r5, lr}
 800fc40:	4604      	mov	r4, r0
 800fc42:	460d      	mov	r5, r1
 800fc44:	d904      	bls.n	800fc50 <_raise_r+0x14>
 800fc46:	2316      	movs	r3, #22
 800fc48:	6003      	str	r3, [r0, #0]
 800fc4a:	f04f 30ff 	mov.w	r0, #4294967295
 800fc4e:	bd38      	pop	{r3, r4, r5, pc}
 800fc50:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fc52:	b112      	cbz	r2, 800fc5a <_raise_r+0x1e>
 800fc54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fc58:	b94b      	cbnz	r3, 800fc6e <_raise_r+0x32>
 800fc5a:	4620      	mov	r0, r4
 800fc5c:	f000 f830 	bl	800fcc0 <_getpid_r>
 800fc60:	462a      	mov	r2, r5
 800fc62:	4601      	mov	r1, r0
 800fc64:	4620      	mov	r0, r4
 800fc66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fc6a:	f000 b817 	b.w	800fc9c <_kill_r>
 800fc6e:	2b01      	cmp	r3, #1
 800fc70:	d00a      	beq.n	800fc88 <_raise_r+0x4c>
 800fc72:	1c59      	adds	r1, r3, #1
 800fc74:	d103      	bne.n	800fc7e <_raise_r+0x42>
 800fc76:	2316      	movs	r3, #22
 800fc78:	6003      	str	r3, [r0, #0]
 800fc7a:	2001      	movs	r0, #1
 800fc7c:	e7e7      	b.n	800fc4e <_raise_r+0x12>
 800fc7e:	2400      	movs	r4, #0
 800fc80:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fc84:	4628      	mov	r0, r5
 800fc86:	4798      	blx	r3
 800fc88:	2000      	movs	r0, #0
 800fc8a:	e7e0      	b.n	800fc4e <_raise_r+0x12>

0800fc8c <raise>:
 800fc8c:	4b02      	ldr	r3, [pc, #8]	; (800fc98 <raise+0xc>)
 800fc8e:	4601      	mov	r1, r0
 800fc90:	6818      	ldr	r0, [r3, #0]
 800fc92:	f7ff bfd3 	b.w	800fc3c <_raise_r>
 800fc96:	bf00      	nop
 800fc98:	20000048 	.word	0x20000048

0800fc9c <_kill_r>:
 800fc9c:	b538      	push	{r3, r4, r5, lr}
 800fc9e:	4d07      	ldr	r5, [pc, #28]	; (800fcbc <_kill_r+0x20>)
 800fca0:	2300      	movs	r3, #0
 800fca2:	4604      	mov	r4, r0
 800fca4:	4608      	mov	r0, r1
 800fca6:	4611      	mov	r1, r2
 800fca8:	602b      	str	r3, [r5, #0]
 800fcaa:	f7f4 ff51 	bl	8004b50 <_kill>
 800fcae:	1c43      	adds	r3, r0, #1
 800fcb0:	d102      	bne.n	800fcb8 <_kill_r+0x1c>
 800fcb2:	682b      	ldr	r3, [r5, #0]
 800fcb4:	b103      	cbz	r3, 800fcb8 <_kill_r+0x1c>
 800fcb6:	6023      	str	r3, [r4, #0]
 800fcb8:	bd38      	pop	{r3, r4, r5, pc}
 800fcba:	bf00      	nop
 800fcbc:	20000f58 	.word	0x20000f58

0800fcc0 <_getpid_r>:
 800fcc0:	f7f4 bf3e 	b.w	8004b40 <_getpid>

0800fcc4 <__sread>:
 800fcc4:	b510      	push	{r4, lr}
 800fcc6:	460c      	mov	r4, r1
 800fcc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fccc:	f000 f894 	bl	800fdf8 <_read_r>
 800fcd0:	2800      	cmp	r0, #0
 800fcd2:	bfab      	itete	ge
 800fcd4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fcd6:	89a3      	ldrhlt	r3, [r4, #12]
 800fcd8:	181b      	addge	r3, r3, r0
 800fcda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fcde:	bfac      	ite	ge
 800fce0:	6563      	strge	r3, [r4, #84]	; 0x54
 800fce2:	81a3      	strhlt	r3, [r4, #12]
 800fce4:	bd10      	pop	{r4, pc}

0800fce6 <__swrite>:
 800fce6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcea:	461f      	mov	r7, r3
 800fcec:	898b      	ldrh	r3, [r1, #12]
 800fcee:	05db      	lsls	r3, r3, #23
 800fcf0:	4605      	mov	r5, r0
 800fcf2:	460c      	mov	r4, r1
 800fcf4:	4616      	mov	r6, r2
 800fcf6:	d505      	bpl.n	800fd04 <__swrite+0x1e>
 800fcf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fcfc:	2302      	movs	r3, #2
 800fcfe:	2200      	movs	r2, #0
 800fd00:	f000 f868 	bl	800fdd4 <_lseek_r>
 800fd04:	89a3      	ldrh	r3, [r4, #12]
 800fd06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fd0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fd0e:	81a3      	strh	r3, [r4, #12]
 800fd10:	4632      	mov	r2, r6
 800fd12:	463b      	mov	r3, r7
 800fd14:	4628      	mov	r0, r5
 800fd16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fd1a:	f000 b817 	b.w	800fd4c <_write_r>

0800fd1e <__sseek>:
 800fd1e:	b510      	push	{r4, lr}
 800fd20:	460c      	mov	r4, r1
 800fd22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd26:	f000 f855 	bl	800fdd4 <_lseek_r>
 800fd2a:	1c43      	adds	r3, r0, #1
 800fd2c:	89a3      	ldrh	r3, [r4, #12]
 800fd2e:	bf15      	itete	ne
 800fd30:	6560      	strne	r0, [r4, #84]	; 0x54
 800fd32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fd36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fd3a:	81a3      	strheq	r3, [r4, #12]
 800fd3c:	bf18      	it	ne
 800fd3e:	81a3      	strhne	r3, [r4, #12]
 800fd40:	bd10      	pop	{r4, pc}

0800fd42 <__sclose>:
 800fd42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd46:	f000 b813 	b.w	800fd70 <_close_r>
	...

0800fd4c <_write_r>:
 800fd4c:	b538      	push	{r3, r4, r5, lr}
 800fd4e:	4d07      	ldr	r5, [pc, #28]	; (800fd6c <_write_r+0x20>)
 800fd50:	4604      	mov	r4, r0
 800fd52:	4608      	mov	r0, r1
 800fd54:	4611      	mov	r1, r2
 800fd56:	2200      	movs	r2, #0
 800fd58:	602a      	str	r2, [r5, #0]
 800fd5a:	461a      	mov	r2, r3
 800fd5c:	f7f4 ff2f 	bl	8004bbe <_write>
 800fd60:	1c43      	adds	r3, r0, #1
 800fd62:	d102      	bne.n	800fd6a <_write_r+0x1e>
 800fd64:	682b      	ldr	r3, [r5, #0]
 800fd66:	b103      	cbz	r3, 800fd6a <_write_r+0x1e>
 800fd68:	6023      	str	r3, [r4, #0]
 800fd6a:	bd38      	pop	{r3, r4, r5, pc}
 800fd6c:	20000f58 	.word	0x20000f58

0800fd70 <_close_r>:
 800fd70:	b538      	push	{r3, r4, r5, lr}
 800fd72:	4d06      	ldr	r5, [pc, #24]	; (800fd8c <_close_r+0x1c>)
 800fd74:	2300      	movs	r3, #0
 800fd76:	4604      	mov	r4, r0
 800fd78:	4608      	mov	r0, r1
 800fd7a:	602b      	str	r3, [r5, #0]
 800fd7c:	f7f4 ff3b 	bl	8004bf6 <_close>
 800fd80:	1c43      	adds	r3, r0, #1
 800fd82:	d102      	bne.n	800fd8a <_close_r+0x1a>
 800fd84:	682b      	ldr	r3, [r5, #0]
 800fd86:	b103      	cbz	r3, 800fd8a <_close_r+0x1a>
 800fd88:	6023      	str	r3, [r4, #0]
 800fd8a:	bd38      	pop	{r3, r4, r5, pc}
 800fd8c:	20000f58 	.word	0x20000f58

0800fd90 <_fstat_r>:
 800fd90:	b538      	push	{r3, r4, r5, lr}
 800fd92:	4d07      	ldr	r5, [pc, #28]	; (800fdb0 <_fstat_r+0x20>)
 800fd94:	2300      	movs	r3, #0
 800fd96:	4604      	mov	r4, r0
 800fd98:	4608      	mov	r0, r1
 800fd9a:	4611      	mov	r1, r2
 800fd9c:	602b      	str	r3, [r5, #0]
 800fd9e:	f7f4 ff36 	bl	8004c0e <_fstat>
 800fda2:	1c43      	adds	r3, r0, #1
 800fda4:	d102      	bne.n	800fdac <_fstat_r+0x1c>
 800fda6:	682b      	ldr	r3, [r5, #0]
 800fda8:	b103      	cbz	r3, 800fdac <_fstat_r+0x1c>
 800fdaa:	6023      	str	r3, [r4, #0]
 800fdac:	bd38      	pop	{r3, r4, r5, pc}
 800fdae:	bf00      	nop
 800fdb0:	20000f58 	.word	0x20000f58

0800fdb4 <_isatty_r>:
 800fdb4:	b538      	push	{r3, r4, r5, lr}
 800fdb6:	4d06      	ldr	r5, [pc, #24]	; (800fdd0 <_isatty_r+0x1c>)
 800fdb8:	2300      	movs	r3, #0
 800fdba:	4604      	mov	r4, r0
 800fdbc:	4608      	mov	r0, r1
 800fdbe:	602b      	str	r3, [r5, #0]
 800fdc0:	f7f4 ff35 	bl	8004c2e <_isatty>
 800fdc4:	1c43      	adds	r3, r0, #1
 800fdc6:	d102      	bne.n	800fdce <_isatty_r+0x1a>
 800fdc8:	682b      	ldr	r3, [r5, #0]
 800fdca:	b103      	cbz	r3, 800fdce <_isatty_r+0x1a>
 800fdcc:	6023      	str	r3, [r4, #0]
 800fdce:	bd38      	pop	{r3, r4, r5, pc}
 800fdd0:	20000f58 	.word	0x20000f58

0800fdd4 <_lseek_r>:
 800fdd4:	b538      	push	{r3, r4, r5, lr}
 800fdd6:	4d07      	ldr	r5, [pc, #28]	; (800fdf4 <_lseek_r+0x20>)
 800fdd8:	4604      	mov	r4, r0
 800fdda:	4608      	mov	r0, r1
 800fddc:	4611      	mov	r1, r2
 800fdde:	2200      	movs	r2, #0
 800fde0:	602a      	str	r2, [r5, #0]
 800fde2:	461a      	mov	r2, r3
 800fde4:	f7f4 ff2e 	bl	8004c44 <_lseek>
 800fde8:	1c43      	adds	r3, r0, #1
 800fdea:	d102      	bne.n	800fdf2 <_lseek_r+0x1e>
 800fdec:	682b      	ldr	r3, [r5, #0]
 800fdee:	b103      	cbz	r3, 800fdf2 <_lseek_r+0x1e>
 800fdf0:	6023      	str	r3, [r4, #0]
 800fdf2:	bd38      	pop	{r3, r4, r5, pc}
 800fdf4:	20000f58 	.word	0x20000f58

0800fdf8 <_read_r>:
 800fdf8:	b538      	push	{r3, r4, r5, lr}
 800fdfa:	4d07      	ldr	r5, [pc, #28]	; (800fe18 <_read_r+0x20>)
 800fdfc:	4604      	mov	r4, r0
 800fdfe:	4608      	mov	r0, r1
 800fe00:	4611      	mov	r1, r2
 800fe02:	2200      	movs	r2, #0
 800fe04:	602a      	str	r2, [r5, #0]
 800fe06:	461a      	mov	r2, r3
 800fe08:	f7f4 febc 	bl	8004b84 <_read>
 800fe0c:	1c43      	adds	r3, r0, #1
 800fe0e:	d102      	bne.n	800fe16 <_read_r+0x1e>
 800fe10:	682b      	ldr	r3, [r5, #0]
 800fe12:	b103      	cbz	r3, 800fe16 <_read_r+0x1e>
 800fe14:	6023      	str	r3, [r4, #0]
 800fe16:	bd38      	pop	{r3, r4, r5, pc}
 800fe18:	20000f58 	.word	0x20000f58
 800fe1c:	00000000 	.word	0x00000000

0800fe20 <atan>:
 800fe20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe24:	ec55 4b10 	vmov	r4, r5, d0
 800fe28:	4bc3      	ldr	r3, [pc, #780]	; (8010138 <atan+0x318>)
 800fe2a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800fe2e:	429e      	cmp	r6, r3
 800fe30:	46ab      	mov	fp, r5
 800fe32:	dd18      	ble.n	800fe66 <atan+0x46>
 800fe34:	4bc1      	ldr	r3, [pc, #772]	; (801013c <atan+0x31c>)
 800fe36:	429e      	cmp	r6, r3
 800fe38:	dc01      	bgt.n	800fe3e <atan+0x1e>
 800fe3a:	d109      	bne.n	800fe50 <atan+0x30>
 800fe3c:	b144      	cbz	r4, 800fe50 <atan+0x30>
 800fe3e:	4622      	mov	r2, r4
 800fe40:	462b      	mov	r3, r5
 800fe42:	4620      	mov	r0, r4
 800fe44:	4629      	mov	r1, r5
 800fe46:	f7f2 fff1 	bl	8002e2c <__adddf3>
 800fe4a:	4604      	mov	r4, r0
 800fe4c:	460d      	mov	r5, r1
 800fe4e:	e006      	b.n	800fe5e <atan+0x3e>
 800fe50:	f1bb 0f00 	cmp.w	fp, #0
 800fe54:	f300 8131 	bgt.w	80100ba <atan+0x29a>
 800fe58:	a59b      	add	r5, pc, #620	; (adr r5, 80100c8 <atan+0x2a8>)
 800fe5a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fe5e:	ec45 4b10 	vmov	d0, r4, r5
 800fe62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe66:	4bb6      	ldr	r3, [pc, #728]	; (8010140 <atan+0x320>)
 800fe68:	429e      	cmp	r6, r3
 800fe6a:	dc14      	bgt.n	800fe96 <atan+0x76>
 800fe6c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800fe70:	429e      	cmp	r6, r3
 800fe72:	dc0d      	bgt.n	800fe90 <atan+0x70>
 800fe74:	a396      	add	r3, pc, #600	; (adr r3, 80100d0 <atan+0x2b0>)
 800fe76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe7a:	ee10 0a10 	vmov	r0, s0
 800fe7e:	4629      	mov	r1, r5
 800fe80:	f7f2 ffd4 	bl	8002e2c <__adddf3>
 800fe84:	4baf      	ldr	r3, [pc, #700]	; (8010144 <atan+0x324>)
 800fe86:	2200      	movs	r2, #0
 800fe88:	f7f3 fc16 	bl	80036b8 <__aeabi_dcmpgt>
 800fe8c:	2800      	cmp	r0, #0
 800fe8e:	d1e6      	bne.n	800fe5e <atan+0x3e>
 800fe90:	f04f 3aff 	mov.w	sl, #4294967295
 800fe94:	e02b      	b.n	800feee <atan+0xce>
 800fe96:	f000 f963 	bl	8010160 <fabs>
 800fe9a:	4bab      	ldr	r3, [pc, #684]	; (8010148 <atan+0x328>)
 800fe9c:	429e      	cmp	r6, r3
 800fe9e:	ec55 4b10 	vmov	r4, r5, d0
 800fea2:	f300 80bf 	bgt.w	8010024 <atan+0x204>
 800fea6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800feaa:	429e      	cmp	r6, r3
 800feac:	f300 80a0 	bgt.w	800fff0 <atan+0x1d0>
 800feb0:	ee10 2a10 	vmov	r2, s0
 800feb4:	ee10 0a10 	vmov	r0, s0
 800feb8:	462b      	mov	r3, r5
 800feba:	4629      	mov	r1, r5
 800febc:	f7f2 ffb6 	bl	8002e2c <__adddf3>
 800fec0:	4ba0      	ldr	r3, [pc, #640]	; (8010144 <atan+0x324>)
 800fec2:	2200      	movs	r2, #0
 800fec4:	f7f2 ffb0 	bl	8002e28 <__aeabi_dsub>
 800fec8:	2200      	movs	r2, #0
 800feca:	4606      	mov	r6, r0
 800fecc:	460f      	mov	r7, r1
 800fece:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fed2:	4620      	mov	r0, r4
 800fed4:	4629      	mov	r1, r5
 800fed6:	f7f2 ffa9 	bl	8002e2c <__adddf3>
 800feda:	4602      	mov	r2, r0
 800fedc:	460b      	mov	r3, r1
 800fede:	4630      	mov	r0, r6
 800fee0:	4639      	mov	r1, r7
 800fee2:	f7f3 fa83 	bl	80033ec <__aeabi_ddiv>
 800fee6:	f04f 0a00 	mov.w	sl, #0
 800feea:	4604      	mov	r4, r0
 800feec:	460d      	mov	r5, r1
 800feee:	4622      	mov	r2, r4
 800fef0:	462b      	mov	r3, r5
 800fef2:	4620      	mov	r0, r4
 800fef4:	4629      	mov	r1, r5
 800fef6:	f7f3 f94f 	bl	8003198 <__aeabi_dmul>
 800fefa:	4602      	mov	r2, r0
 800fefc:	460b      	mov	r3, r1
 800fefe:	4680      	mov	r8, r0
 800ff00:	4689      	mov	r9, r1
 800ff02:	f7f3 f949 	bl	8003198 <__aeabi_dmul>
 800ff06:	a374      	add	r3, pc, #464	; (adr r3, 80100d8 <atan+0x2b8>)
 800ff08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff0c:	4606      	mov	r6, r0
 800ff0e:	460f      	mov	r7, r1
 800ff10:	f7f3 f942 	bl	8003198 <__aeabi_dmul>
 800ff14:	a372      	add	r3, pc, #456	; (adr r3, 80100e0 <atan+0x2c0>)
 800ff16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff1a:	f7f2 ff87 	bl	8002e2c <__adddf3>
 800ff1e:	4632      	mov	r2, r6
 800ff20:	463b      	mov	r3, r7
 800ff22:	f7f3 f939 	bl	8003198 <__aeabi_dmul>
 800ff26:	a370      	add	r3, pc, #448	; (adr r3, 80100e8 <atan+0x2c8>)
 800ff28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff2c:	f7f2 ff7e 	bl	8002e2c <__adddf3>
 800ff30:	4632      	mov	r2, r6
 800ff32:	463b      	mov	r3, r7
 800ff34:	f7f3 f930 	bl	8003198 <__aeabi_dmul>
 800ff38:	a36d      	add	r3, pc, #436	; (adr r3, 80100f0 <atan+0x2d0>)
 800ff3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff3e:	f7f2 ff75 	bl	8002e2c <__adddf3>
 800ff42:	4632      	mov	r2, r6
 800ff44:	463b      	mov	r3, r7
 800ff46:	f7f3 f927 	bl	8003198 <__aeabi_dmul>
 800ff4a:	a36b      	add	r3, pc, #428	; (adr r3, 80100f8 <atan+0x2d8>)
 800ff4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff50:	f7f2 ff6c 	bl	8002e2c <__adddf3>
 800ff54:	4632      	mov	r2, r6
 800ff56:	463b      	mov	r3, r7
 800ff58:	f7f3 f91e 	bl	8003198 <__aeabi_dmul>
 800ff5c:	a368      	add	r3, pc, #416	; (adr r3, 8010100 <atan+0x2e0>)
 800ff5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff62:	f7f2 ff63 	bl	8002e2c <__adddf3>
 800ff66:	4642      	mov	r2, r8
 800ff68:	464b      	mov	r3, r9
 800ff6a:	f7f3 f915 	bl	8003198 <__aeabi_dmul>
 800ff6e:	a366      	add	r3, pc, #408	; (adr r3, 8010108 <atan+0x2e8>)
 800ff70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff74:	4680      	mov	r8, r0
 800ff76:	4689      	mov	r9, r1
 800ff78:	4630      	mov	r0, r6
 800ff7a:	4639      	mov	r1, r7
 800ff7c:	f7f3 f90c 	bl	8003198 <__aeabi_dmul>
 800ff80:	a363      	add	r3, pc, #396	; (adr r3, 8010110 <atan+0x2f0>)
 800ff82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff86:	f7f2 ff4f 	bl	8002e28 <__aeabi_dsub>
 800ff8a:	4632      	mov	r2, r6
 800ff8c:	463b      	mov	r3, r7
 800ff8e:	f7f3 f903 	bl	8003198 <__aeabi_dmul>
 800ff92:	a361      	add	r3, pc, #388	; (adr r3, 8010118 <atan+0x2f8>)
 800ff94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff98:	f7f2 ff46 	bl	8002e28 <__aeabi_dsub>
 800ff9c:	4632      	mov	r2, r6
 800ff9e:	463b      	mov	r3, r7
 800ffa0:	f7f3 f8fa 	bl	8003198 <__aeabi_dmul>
 800ffa4:	a35e      	add	r3, pc, #376	; (adr r3, 8010120 <atan+0x300>)
 800ffa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffaa:	f7f2 ff3d 	bl	8002e28 <__aeabi_dsub>
 800ffae:	4632      	mov	r2, r6
 800ffb0:	463b      	mov	r3, r7
 800ffb2:	f7f3 f8f1 	bl	8003198 <__aeabi_dmul>
 800ffb6:	a35c      	add	r3, pc, #368	; (adr r3, 8010128 <atan+0x308>)
 800ffb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffbc:	f7f2 ff34 	bl	8002e28 <__aeabi_dsub>
 800ffc0:	4632      	mov	r2, r6
 800ffc2:	463b      	mov	r3, r7
 800ffc4:	f7f3 f8e8 	bl	8003198 <__aeabi_dmul>
 800ffc8:	4602      	mov	r2, r0
 800ffca:	460b      	mov	r3, r1
 800ffcc:	4640      	mov	r0, r8
 800ffce:	4649      	mov	r1, r9
 800ffd0:	f7f2 ff2c 	bl	8002e2c <__adddf3>
 800ffd4:	4622      	mov	r2, r4
 800ffd6:	462b      	mov	r3, r5
 800ffd8:	f7f3 f8de 	bl	8003198 <__aeabi_dmul>
 800ffdc:	f1ba 3fff 	cmp.w	sl, #4294967295
 800ffe0:	4602      	mov	r2, r0
 800ffe2:	460b      	mov	r3, r1
 800ffe4:	d14b      	bne.n	801007e <atan+0x25e>
 800ffe6:	4620      	mov	r0, r4
 800ffe8:	4629      	mov	r1, r5
 800ffea:	f7f2 ff1d 	bl	8002e28 <__aeabi_dsub>
 800ffee:	e72c      	b.n	800fe4a <atan+0x2a>
 800fff0:	ee10 0a10 	vmov	r0, s0
 800fff4:	4b53      	ldr	r3, [pc, #332]	; (8010144 <atan+0x324>)
 800fff6:	2200      	movs	r2, #0
 800fff8:	4629      	mov	r1, r5
 800fffa:	f7f2 ff15 	bl	8002e28 <__aeabi_dsub>
 800fffe:	4b51      	ldr	r3, [pc, #324]	; (8010144 <atan+0x324>)
 8010000:	4606      	mov	r6, r0
 8010002:	460f      	mov	r7, r1
 8010004:	2200      	movs	r2, #0
 8010006:	4620      	mov	r0, r4
 8010008:	4629      	mov	r1, r5
 801000a:	f7f2 ff0f 	bl	8002e2c <__adddf3>
 801000e:	4602      	mov	r2, r0
 8010010:	460b      	mov	r3, r1
 8010012:	4630      	mov	r0, r6
 8010014:	4639      	mov	r1, r7
 8010016:	f7f3 f9e9 	bl	80033ec <__aeabi_ddiv>
 801001a:	f04f 0a01 	mov.w	sl, #1
 801001e:	4604      	mov	r4, r0
 8010020:	460d      	mov	r5, r1
 8010022:	e764      	b.n	800feee <atan+0xce>
 8010024:	4b49      	ldr	r3, [pc, #292]	; (801014c <atan+0x32c>)
 8010026:	429e      	cmp	r6, r3
 8010028:	da1d      	bge.n	8010066 <atan+0x246>
 801002a:	ee10 0a10 	vmov	r0, s0
 801002e:	4b48      	ldr	r3, [pc, #288]	; (8010150 <atan+0x330>)
 8010030:	2200      	movs	r2, #0
 8010032:	4629      	mov	r1, r5
 8010034:	f7f2 fef8 	bl	8002e28 <__aeabi_dsub>
 8010038:	4b45      	ldr	r3, [pc, #276]	; (8010150 <atan+0x330>)
 801003a:	4606      	mov	r6, r0
 801003c:	460f      	mov	r7, r1
 801003e:	2200      	movs	r2, #0
 8010040:	4620      	mov	r0, r4
 8010042:	4629      	mov	r1, r5
 8010044:	f7f3 f8a8 	bl	8003198 <__aeabi_dmul>
 8010048:	4b3e      	ldr	r3, [pc, #248]	; (8010144 <atan+0x324>)
 801004a:	2200      	movs	r2, #0
 801004c:	f7f2 feee 	bl	8002e2c <__adddf3>
 8010050:	4602      	mov	r2, r0
 8010052:	460b      	mov	r3, r1
 8010054:	4630      	mov	r0, r6
 8010056:	4639      	mov	r1, r7
 8010058:	f7f3 f9c8 	bl	80033ec <__aeabi_ddiv>
 801005c:	f04f 0a02 	mov.w	sl, #2
 8010060:	4604      	mov	r4, r0
 8010062:	460d      	mov	r5, r1
 8010064:	e743      	b.n	800feee <atan+0xce>
 8010066:	462b      	mov	r3, r5
 8010068:	ee10 2a10 	vmov	r2, s0
 801006c:	4939      	ldr	r1, [pc, #228]	; (8010154 <atan+0x334>)
 801006e:	2000      	movs	r0, #0
 8010070:	f7f3 f9bc 	bl	80033ec <__aeabi_ddiv>
 8010074:	f04f 0a03 	mov.w	sl, #3
 8010078:	4604      	mov	r4, r0
 801007a:	460d      	mov	r5, r1
 801007c:	e737      	b.n	800feee <atan+0xce>
 801007e:	4b36      	ldr	r3, [pc, #216]	; (8010158 <atan+0x338>)
 8010080:	4e36      	ldr	r6, [pc, #216]	; (801015c <atan+0x33c>)
 8010082:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8010086:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 801008a:	e9da 2300 	ldrd	r2, r3, [sl]
 801008e:	f7f2 fecb 	bl	8002e28 <__aeabi_dsub>
 8010092:	4622      	mov	r2, r4
 8010094:	462b      	mov	r3, r5
 8010096:	f7f2 fec7 	bl	8002e28 <__aeabi_dsub>
 801009a:	4602      	mov	r2, r0
 801009c:	460b      	mov	r3, r1
 801009e:	e9d6 0100 	ldrd	r0, r1, [r6]
 80100a2:	f7f2 fec1 	bl	8002e28 <__aeabi_dsub>
 80100a6:	f1bb 0f00 	cmp.w	fp, #0
 80100aa:	4604      	mov	r4, r0
 80100ac:	460d      	mov	r5, r1
 80100ae:	f6bf aed6 	bge.w	800fe5e <atan+0x3e>
 80100b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80100b6:	461d      	mov	r5, r3
 80100b8:	e6d1      	b.n	800fe5e <atan+0x3e>
 80100ba:	a51d      	add	r5, pc, #116	; (adr r5, 8010130 <atan+0x310>)
 80100bc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80100c0:	e6cd      	b.n	800fe5e <atan+0x3e>
 80100c2:	bf00      	nop
 80100c4:	f3af 8000 	nop.w
 80100c8:	54442d18 	.word	0x54442d18
 80100cc:	bff921fb 	.word	0xbff921fb
 80100d0:	8800759c 	.word	0x8800759c
 80100d4:	7e37e43c 	.word	0x7e37e43c
 80100d8:	e322da11 	.word	0xe322da11
 80100dc:	3f90ad3a 	.word	0x3f90ad3a
 80100e0:	24760deb 	.word	0x24760deb
 80100e4:	3fa97b4b 	.word	0x3fa97b4b
 80100e8:	a0d03d51 	.word	0xa0d03d51
 80100ec:	3fb10d66 	.word	0x3fb10d66
 80100f0:	c54c206e 	.word	0xc54c206e
 80100f4:	3fb745cd 	.word	0x3fb745cd
 80100f8:	920083ff 	.word	0x920083ff
 80100fc:	3fc24924 	.word	0x3fc24924
 8010100:	5555550d 	.word	0x5555550d
 8010104:	3fd55555 	.word	0x3fd55555
 8010108:	2c6a6c2f 	.word	0x2c6a6c2f
 801010c:	bfa2b444 	.word	0xbfa2b444
 8010110:	52defd9a 	.word	0x52defd9a
 8010114:	3fadde2d 	.word	0x3fadde2d
 8010118:	af749a6d 	.word	0xaf749a6d
 801011c:	3fb3b0f2 	.word	0x3fb3b0f2
 8010120:	fe231671 	.word	0xfe231671
 8010124:	3fbc71c6 	.word	0x3fbc71c6
 8010128:	9998ebc4 	.word	0x9998ebc4
 801012c:	3fc99999 	.word	0x3fc99999
 8010130:	54442d18 	.word	0x54442d18
 8010134:	3ff921fb 	.word	0x3ff921fb
 8010138:	440fffff 	.word	0x440fffff
 801013c:	7ff00000 	.word	0x7ff00000
 8010140:	3fdbffff 	.word	0x3fdbffff
 8010144:	3ff00000 	.word	0x3ff00000
 8010148:	3ff2ffff 	.word	0x3ff2ffff
 801014c:	40038000 	.word	0x40038000
 8010150:	3ff80000 	.word	0x3ff80000
 8010154:	bff00000 	.word	0xbff00000
 8010158:	08013b60 	.word	0x08013b60
 801015c:	08013b40 	.word	0x08013b40

08010160 <fabs>:
 8010160:	ec51 0b10 	vmov	r0, r1, d0
 8010164:	ee10 2a10 	vmov	r2, s0
 8010168:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801016c:	ec43 2b10 	vmov	d0, r2, r3
 8010170:	4770      	bx	lr
	...

08010174 <cosf>:
 8010174:	ee10 3a10 	vmov	r3, s0
 8010178:	b507      	push	{r0, r1, r2, lr}
 801017a:	4a1c      	ldr	r2, [pc, #112]	; (80101ec <cosf+0x78>)
 801017c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010180:	4293      	cmp	r3, r2
 8010182:	dc04      	bgt.n	801018e <cosf+0x1a>
 8010184:	eddf 0a1a 	vldr	s1, [pc, #104]	; 80101f0 <cosf+0x7c>
 8010188:	f001 fd4a 	bl	8011c20 <__kernel_cosf>
 801018c:	e004      	b.n	8010198 <cosf+0x24>
 801018e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8010192:	db04      	blt.n	801019e <cosf+0x2a>
 8010194:	ee30 0a40 	vsub.f32	s0, s0, s0
 8010198:	b003      	add	sp, #12
 801019a:	f85d fb04 	ldr.w	pc, [sp], #4
 801019e:	4668      	mov	r0, sp
 80101a0:	f001 fbfe 	bl	80119a0 <__ieee754_rem_pio2f>
 80101a4:	f000 0003 	and.w	r0, r0, #3
 80101a8:	2801      	cmp	r0, #1
 80101aa:	d007      	beq.n	80101bc <cosf+0x48>
 80101ac:	2802      	cmp	r0, #2
 80101ae:	d00e      	beq.n	80101ce <cosf+0x5a>
 80101b0:	b9a0      	cbnz	r0, 80101dc <cosf+0x68>
 80101b2:	eddd 0a01 	vldr	s1, [sp, #4]
 80101b6:	ed9d 0a00 	vldr	s0, [sp]
 80101ba:	e7e5      	b.n	8010188 <cosf+0x14>
 80101bc:	eddd 0a01 	vldr	s1, [sp, #4]
 80101c0:	ed9d 0a00 	vldr	s0, [sp]
 80101c4:	f002 f816 	bl	80121f4 <__kernel_sinf>
 80101c8:	eeb1 0a40 	vneg.f32	s0, s0
 80101cc:	e7e4      	b.n	8010198 <cosf+0x24>
 80101ce:	eddd 0a01 	vldr	s1, [sp, #4]
 80101d2:	ed9d 0a00 	vldr	s0, [sp]
 80101d6:	f001 fd23 	bl	8011c20 <__kernel_cosf>
 80101da:	e7f5      	b.n	80101c8 <cosf+0x54>
 80101dc:	eddd 0a01 	vldr	s1, [sp, #4]
 80101e0:	ed9d 0a00 	vldr	s0, [sp]
 80101e4:	2001      	movs	r0, #1
 80101e6:	f002 f805 	bl	80121f4 <__kernel_sinf>
 80101ea:	e7d5      	b.n	8010198 <cosf+0x24>
 80101ec:	3f490fd8 	.word	0x3f490fd8
 80101f0:	00000000 	.word	0x00000000

080101f4 <sinf>:
 80101f4:	ee10 3a10 	vmov	r3, s0
 80101f8:	b507      	push	{r0, r1, r2, lr}
 80101fa:	4a1d      	ldr	r2, [pc, #116]	; (8010270 <sinf+0x7c>)
 80101fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010200:	4293      	cmp	r3, r2
 8010202:	dc05      	bgt.n	8010210 <sinf+0x1c>
 8010204:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8010274 <sinf+0x80>
 8010208:	2000      	movs	r0, #0
 801020a:	f001 fff3 	bl	80121f4 <__kernel_sinf>
 801020e:	e004      	b.n	801021a <sinf+0x26>
 8010210:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8010214:	db04      	blt.n	8010220 <sinf+0x2c>
 8010216:	ee30 0a40 	vsub.f32	s0, s0, s0
 801021a:	b003      	add	sp, #12
 801021c:	f85d fb04 	ldr.w	pc, [sp], #4
 8010220:	4668      	mov	r0, sp
 8010222:	f001 fbbd 	bl	80119a0 <__ieee754_rem_pio2f>
 8010226:	f000 0003 	and.w	r0, r0, #3
 801022a:	2801      	cmp	r0, #1
 801022c:	d008      	beq.n	8010240 <sinf+0x4c>
 801022e:	2802      	cmp	r0, #2
 8010230:	d00d      	beq.n	801024e <sinf+0x5a>
 8010232:	b9b0      	cbnz	r0, 8010262 <sinf+0x6e>
 8010234:	eddd 0a01 	vldr	s1, [sp, #4]
 8010238:	ed9d 0a00 	vldr	s0, [sp]
 801023c:	2001      	movs	r0, #1
 801023e:	e7e4      	b.n	801020a <sinf+0x16>
 8010240:	eddd 0a01 	vldr	s1, [sp, #4]
 8010244:	ed9d 0a00 	vldr	s0, [sp]
 8010248:	f001 fcea 	bl	8011c20 <__kernel_cosf>
 801024c:	e7e5      	b.n	801021a <sinf+0x26>
 801024e:	eddd 0a01 	vldr	s1, [sp, #4]
 8010252:	ed9d 0a00 	vldr	s0, [sp]
 8010256:	2001      	movs	r0, #1
 8010258:	f001 ffcc 	bl	80121f4 <__kernel_sinf>
 801025c:	eeb1 0a40 	vneg.f32	s0, s0
 8010260:	e7db      	b.n	801021a <sinf+0x26>
 8010262:	eddd 0a01 	vldr	s1, [sp, #4]
 8010266:	ed9d 0a00 	vldr	s0, [sp]
 801026a:	f001 fcd9 	bl	8011c20 <__kernel_cosf>
 801026e:	e7f5      	b.n	801025c <sinf+0x68>
 8010270:	3f490fd8 	.word	0x3f490fd8
 8010274:	00000000 	.word	0x00000000

08010278 <asin>:
 8010278:	b538      	push	{r3, r4, r5, lr}
 801027a:	ed2d 8b02 	vpush	{d8}
 801027e:	ec55 4b10 	vmov	r4, r5, d0
 8010282:	f000 f93d 	bl	8010500 <__ieee754_asin>
 8010286:	4b16      	ldr	r3, [pc, #88]	; (80102e0 <asin+0x68>)
 8010288:	eeb0 8a40 	vmov.f32	s16, s0
 801028c:	eef0 8a60 	vmov.f32	s17, s1
 8010290:	f993 3000 	ldrsb.w	r3, [r3]
 8010294:	3301      	adds	r3, #1
 8010296:	d01c      	beq.n	80102d2 <asin+0x5a>
 8010298:	4622      	mov	r2, r4
 801029a:	462b      	mov	r3, r5
 801029c:	4620      	mov	r0, r4
 801029e:	4629      	mov	r1, r5
 80102a0:	f7f3 fa14 	bl	80036cc <__aeabi_dcmpun>
 80102a4:	b9a8      	cbnz	r0, 80102d2 <asin+0x5a>
 80102a6:	ec45 4b10 	vmov	d0, r4, r5
 80102aa:	f7ff ff59 	bl	8010160 <fabs>
 80102ae:	4b0d      	ldr	r3, [pc, #52]	; (80102e4 <asin+0x6c>)
 80102b0:	ec51 0b10 	vmov	r0, r1, d0
 80102b4:	2200      	movs	r2, #0
 80102b6:	f7f3 f9ff 	bl	80036b8 <__aeabi_dcmpgt>
 80102ba:	b150      	cbz	r0, 80102d2 <asin+0x5a>
 80102bc:	f7fc fed8 	bl	800d070 <__errno>
 80102c0:	ecbd 8b02 	vpop	{d8}
 80102c4:	2321      	movs	r3, #33	; 0x21
 80102c6:	6003      	str	r3, [r0, #0]
 80102c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80102cc:	4806      	ldr	r0, [pc, #24]	; (80102e8 <asin+0x70>)
 80102ce:	f001 bfe7 	b.w	80122a0 <nan>
 80102d2:	eeb0 0a48 	vmov.f32	s0, s16
 80102d6:	eef0 0a68 	vmov.f32	s1, s17
 80102da:	ecbd 8b02 	vpop	{d8}
 80102de:	bd38      	pop	{r3, r4, r5, pc}
 80102e0:	20000218 	.word	0x20000218
 80102e4:	3ff00000 	.word	0x3ff00000
 80102e8:	080139d0 	.word	0x080139d0

080102ec <atan2>:
 80102ec:	f000 bb1c 	b.w	8010928 <__ieee754_atan2>

080102f0 <pow>:
 80102f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80102f4:	ec59 8b10 	vmov	r8, r9, d0
 80102f8:	ec57 6b11 	vmov	r6, r7, d1
 80102fc:	f000 fbe0 	bl	8010ac0 <__ieee754_pow>
 8010300:	4b4e      	ldr	r3, [pc, #312]	; (801043c <pow+0x14c>)
 8010302:	f993 3000 	ldrsb.w	r3, [r3]
 8010306:	3301      	adds	r3, #1
 8010308:	ec55 4b10 	vmov	r4, r5, d0
 801030c:	d015      	beq.n	801033a <pow+0x4a>
 801030e:	4632      	mov	r2, r6
 8010310:	463b      	mov	r3, r7
 8010312:	4630      	mov	r0, r6
 8010314:	4639      	mov	r1, r7
 8010316:	f7f3 f9d9 	bl	80036cc <__aeabi_dcmpun>
 801031a:	b970      	cbnz	r0, 801033a <pow+0x4a>
 801031c:	4642      	mov	r2, r8
 801031e:	464b      	mov	r3, r9
 8010320:	4640      	mov	r0, r8
 8010322:	4649      	mov	r1, r9
 8010324:	f7f3 f9d2 	bl	80036cc <__aeabi_dcmpun>
 8010328:	2200      	movs	r2, #0
 801032a:	2300      	movs	r3, #0
 801032c:	b148      	cbz	r0, 8010342 <pow+0x52>
 801032e:	4630      	mov	r0, r6
 8010330:	4639      	mov	r1, r7
 8010332:	f7f3 f999 	bl	8003668 <__aeabi_dcmpeq>
 8010336:	2800      	cmp	r0, #0
 8010338:	d17d      	bne.n	8010436 <pow+0x146>
 801033a:	ec45 4b10 	vmov	d0, r4, r5
 801033e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010342:	4640      	mov	r0, r8
 8010344:	4649      	mov	r1, r9
 8010346:	f7f3 f98f 	bl	8003668 <__aeabi_dcmpeq>
 801034a:	b1e0      	cbz	r0, 8010386 <pow+0x96>
 801034c:	2200      	movs	r2, #0
 801034e:	2300      	movs	r3, #0
 8010350:	4630      	mov	r0, r6
 8010352:	4639      	mov	r1, r7
 8010354:	f7f3 f988 	bl	8003668 <__aeabi_dcmpeq>
 8010358:	2800      	cmp	r0, #0
 801035a:	d16c      	bne.n	8010436 <pow+0x146>
 801035c:	ec47 6b10 	vmov	d0, r6, r7
 8010360:	f001 ff90 	bl	8012284 <finite>
 8010364:	2800      	cmp	r0, #0
 8010366:	d0e8      	beq.n	801033a <pow+0x4a>
 8010368:	2200      	movs	r2, #0
 801036a:	2300      	movs	r3, #0
 801036c:	4630      	mov	r0, r6
 801036e:	4639      	mov	r1, r7
 8010370:	f7f3 f984 	bl	800367c <__aeabi_dcmplt>
 8010374:	2800      	cmp	r0, #0
 8010376:	d0e0      	beq.n	801033a <pow+0x4a>
 8010378:	f7fc fe7a 	bl	800d070 <__errno>
 801037c:	2321      	movs	r3, #33	; 0x21
 801037e:	6003      	str	r3, [r0, #0]
 8010380:	2400      	movs	r4, #0
 8010382:	4d2f      	ldr	r5, [pc, #188]	; (8010440 <pow+0x150>)
 8010384:	e7d9      	b.n	801033a <pow+0x4a>
 8010386:	ec45 4b10 	vmov	d0, r4, r5
 801038a:	f001 ff7b 	bl	8012284 <finite>
 801038e:	bbb8      	cbnz	r0, 8010400 <pow+0x110>
 8010390:	ec49 8b10 	vmov	d0, r8, r9
 8010394:	f001 ff76 	bl	8012284 <finite>
 8010398:	b390      	cbz	r0, 8010400 <pow+0x110>
 801039a:	ec47 6b10 	vmov	d0, r6, r7
 801039e:	f001 ff71 	bl	8012284 <finite>
 80103a2:	b368      	cbz	r0, 8010400 <pow+0x110>
 80103a4:	4622      	mov	r2, r4
 80103a6:	462b      	mov	r3, r5
 80103a8:	4620      	mov	r0, r4
 80103aa:	4629      	mov	r1, r5
 80103ac:	f7f3 f98e 	bl	80036cc <__aeabi_dcmpun>
 80103b0:	b160      	cbz	r0, 80103cc <pow+0xdc>
 80103b2:	f7fc fe5d 	bl	800d070 <__errno>
 80103b6:	2321      	movs	r3, #33	; 0x21
 80103b8:	6003      	str	r3, [r0, #0]
 80103ba:	2200      	movs	r2, #0
 80103bc:	2300      	movs	r3, #0
 80103be:	4610      	mov	r0, r2
 80103c0:	4619      	mov	r1, r3
 80103c2:	f7f3 f813 	bl	80033ec <__aeabi_ddiv>
 80103c6:	4604      	mov	r4, r0
 80103c8:	460d      	mov	r5, r1
 80103ca:	e7b6      	b.n	801033a <pow+0x4a>
 80103cc:	f7fc fe50 	bl	800d070 <__errno>
 80103d0:	2322      	movs	r3, #34	; 0x22
 80103d2:	6003      	str	r3, [r0, #0]
 80103d4:	2200      	movs	r2, #0
 80103d6:	2300      	movs	r3, #0
 80103d8:	4640      	mov	r0, r8
 80103da:	4649      	mov	r1, r9
 80103dc:	f7f3 f94e 	bl	800367c <__aeabi_dcmplt>
 80103e0:	2400      	movs	r4, #0
 80103e2:	b158      	cbz	r0, 80103fc <pow+0x10c>
 80103e4:	ec47 6b10 	vmov	d0, r6, r7
 80103e8:	f001 ff62 	bl	80122b0 <rint>
 80103ec:	4632      	mov	r2, r6
 80103ee:	ec51 0b10 	vmov	r0, r1, d0
 80103f2:	463b      	mov	r3, r7
 80103f4:	f7f3 f938 	bl	8003668 <__aeabi_dcmpeq>
 80103f8:	2800      	cmp	r0, #0
 80103fa:	d0c2      	beq.n	8010382 <pow+0x92>
 80103fc:	4d11      	ldr	r5, [pc, #68]	; (8010444 <pow+0x154>)
 80103fe:	e79c      	b.n	801033a <pow+0x4a>
 8010400:	2200      	movs	r2, #0
 8010402:	2300      	movs	r3, #0
 8010404:	4620      	mov	r0, r4
 8010406:	4629      	mov	r1, r5
 8010408:	f7f3 f92e 	bl	8003668 <__aeabi_dcmpeq>
 801040c:	2800      	cmp	r0, #0
 801040e:	d094      	beq.n	801033a <pow+0x4a>
 8010410:	ec49 8b10 	vmov	d0, r8, r9
 8010414:	f001 ff36 	bl	8012284 <finite>
 8010418:	2800      	cmp	r0, #0
 801041a:	d08e      	beq.n	801033a <pow+0x4a>
 801041c:	ec47 6b10 	vmov	d0, r6, r7
 8010420:	f001 ff30 	bl	8012284 <finite>
 8010424:	2800      	cmp	r0, #0
 8010426:	d088      	beq.n	801033a <pow+0x4a>
 8010428:	f7fc fe22 	bl	800d070 <__errno>
 801042c:	2322      	movs	r3, #34	; 0x22
 801042e:	6003      	str	r3, [r0, #0]
 8010430:	2400      	movs	r4, #0
 8010432:	2500      	movs	r5, #0
 8010434:	e781      	b.n	801033a <pow+0x4a>
 8010436:	4d04      	ldr	r5, [pc, #16]	; (8010448 <pow+0x158>)
 8010438:	2400      	movs	r4, #0
 801043a:	e77e      	b.n	801033a <pow+0x4a>
 801043c:	20000218 	.word	0x20000218
 8010440:	fff00000 	.word	0xfff00000
 8010444:	7ff00000 	.word	0x7ff00000
 8010448:	3ff00000 	.word	0x3ff00000

0801044c <acosf>:
 801044c:	b508      	push	{r3, lr}
 801044e:	ed2d 8b02 	vpush	{d8}
 8010452:	eeb0 8a40 	vmov.f32	s16, s0
 8010456:	f001 f909 	bl	801166c <__ieee754_acosf>
 801045a:	4b13      	ldr	r3, [pc, #76]	; (80104a8 <acosf+0x5c>)
 801045c:	f993 3000 	ldrsb.w	r3, [r3]
 8010460:	3301      	adds	r3, #1
 8010462:	eef0 8a40 	vmov.f32	s17, s0
 8010466:	d01a      	beq.n	801049e <acosf+0x52>
 8010468:	eeb4 8a48 	vcmp.f32	s16, s16
 801046c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010470:	d615      	bvs.n	801049e <acosf+0x52>
 8010472:	eeb0 0a48 	vmov.f32	s0, s16
 8010476:	f002 f901 	bl	801267c <fabsf>
 801047a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801047e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8010482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010486:	dd0a      	ble.n	801049e <acosf+0x52>
 8010488:	f7fc fdf2 	bl	800d070 <__errno>
 801048c:	ecbd 8b02 	vpop	{d8}
 8010490:	2321      	movs	r3, #33	; 0x21
 8010492:	6003      	str	r3, [r0, #0]
 8010494:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010498:	4804      	ldr	r0, [pc, #16]	; (80104ac <acosf+0x60>)
 801049a:	f002 b939 	b.w	8012710 <nanf>
 801049e:	eeb0 0a68 	vmov.f32	s0, s17
 80104a2:	ecbd 8b02 	vpop	{d8}
 80104a6:	bd08      	pop	{r3, pc}
 80104a8:	20000218 	.word	0x20000218
 80104ac:	080139d0 	.word	0x080139d0

080104b0 <atan2f>:
 80104b0:	f001 b9d6 	b.w	8011860 <__ieee754_atan2f>

080104b4 <sqrtf>:
 80104b4:	b508      	push	{r3, lr}
 80104b6:	ed2d 8b02 	vpush	{d8}
 80104ba:	eeb0 8a40 	vmov.f32	s16, s0
 80104be:	f001 fbab 	bl	8011c18 <__ieee754_sqrtf>
 80104c2:	4b0d      	ldr	r3, [pc, #52]	; (80104f8 <sqrtf+0x44>)
 80104c4:	f993 3000 	ldrsb.w	r3, [r3]
 80104c8:	3301      	adds	r3, #1
 80104ca:	d011      	beq.n	80104f0 <sqrtf+0x3c>
 80104cc:	eeb4 8a48 	vcmp.f32	s16, s16
 80104d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104d4:	d60c      	bvs.n	80104f0 <sqrtf+0x3c>
 80104d6:	eddf 8a09 	vldr	s17, [pc, #36]	; 80104fc <sqrtf+0x48>
 80104da:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80104de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104e2:	d505      	bpl.n	80104f0 <sqrtf+0x3c>
 80104e4:	f7fc fdc4 	bl	800d070 <__errno>
 80104e8:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80104ec:	2321      	movs	r3, #33	; 0x21
 80104ee:	6003      	str	r3, [r0, #0]
 80104f0:	ecbd 8b02 	vpop	{d8}
 80104f4:	bd08      	pop	{r3, pc}
 80104f6:	bf00      	nop
 80104f8:	20000218 	.word	0x20000218
 80104fc:	00000000 	.word	0x00000000

08010500 <__ieee754_asin>:
 8010500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010504:	ed2d 8b04 	vpush	{d8-d9}
 8010508:	ec55 4b10 	vmov	r4, r5, d0
 801050c:	4bcc      	ldr	r3, [pc, #816]	; (8010840 <__ieee754_asin+0x340>)
 801050e:	b083      	sub	sp, #12
 8010510:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8010514:	4598      	cmp	r8, r3
 8010516:	9501      	str	r5, [sp, #4]
 8010518:	dd35      	ble.n	8010586 <__ieee754_asin+0x86>
 801051a:	ee10 3a10 	vmov	r3, s0
 801051e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8010522:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8010526:	ea58 0303 	orrs.w	r3, r8, r3
 801052a:	d117      	bne.n	801055c <__ieee754_asin+0x5c>
 801052c:	a3aa      	add	r3, pc, #680	; (adr r3, 80107d8 <__ieee754_asin+0x2d8>)
 801052e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010532:	ee10 0a10 	vmov	r0, s0
 8010536:	4629      	mov	r1, r5
 8010538:	f7f2 fe2e 	bl	8003198 <__aeabi_dmul>
 801053c:	a3a8      	add	r3, pc, #672	; (adr r3, 80107e0 <__ieee754_asin+0x2e0>)
 801053e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010542:	4606      	mov	r6, r0
 8010544:	460f      	mov	r7, r1
 8010546:	4620      	mov	r0, r4
 8010548:	4629      	mov	r1, r5
 801054a:	f7f2 fe25 	bl	8003198 <__aeabi_dmul>
 801054e:	4602      	mov	r2, r0
 8010550:	460b      	mov	r3, r1
 8010552:	4630      	mov	r0, r6
 8010554:	4639      	mov	r1, r7
 8010556:	f7f2 fc69 	bl	8002e2c <__adddf3>
 801055a:	e00b      	b.n	8010574 <__ieee754_asin+0x74>
 801055c:	ee10 2a10 	vmov	r2, s0
 8010560:	462b      	mov	r3, r5
 8010562:	ee10 0a10 	vmov	r0, s0
 8010566:	4629      	mov	r1, r5
 8010568:	f7f2 fc5e 	bl	8002e28 <__aeabi_dsub>
 801056c:	4602      	mov	r2, r0
 801056e:	460b      	mov	r3, r1
 8010570:	f7f2 ff3c 	bl	80033ec <__aeabi_ddiv>
 8010574:	4604      	mov	r4, r0
 8010576:	460d      	mov	r5, r1
 8010578:	ec45 4b10 	vmov	d0, r4, r5
 801057c:	b003      	add	sp, #12
 801057e:	ecbd 8b04 	vpop	{d8-d9}
 8010582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010586:	4baf      	ldr	r3, [pc, #700]	; (8010844 <__ieee754_asin+0x344>)
 8010588:	4598      	cmp	r8, r3
 801058a:	dc11      	bgt.n	80105b0 <__ieee754_asin+0xb0>
 801058c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8010590:	f280 80ae 	bge.w	80106f0 <__ieee754_asin+0x1f0>
 8010594:	a394      	add	r3, pc, #592	; (adr r3, 80107e8 <__ieee754_asin+0x2e8>)
 8010596:	e9d3 2300 	ldrd	r2, r3, [r3]
 801059a:	ee10 0a10 	vmov	r0, s0
 801059e:	4629      	mov	r1, r5
 80105a0:	f7f2 fc44 	bl	8002e2c <__adddf3>
 80105a4:	4ba8      	ldr	r3, [pc, #672]	; (8010848 <__ieee754_asin+0x348>)
 80105a6:	2200      	movs	r2, #0
 80105a8:	f7f3 f886 	bl	80036b8 <__aeabi_dcmpgt>
 80105ac:	2800      	cmp	r0, #0
 80105ae:	d1e3      	bne.n	8010578 <__ieee754_asin+0x78>
 80105b0:	ec45 4b10 	vmov	d0, r4, r5
 80105b4:	f7ff fdd4 	bl	8010160 <fabs>
 80105b8:	49a3      	ldr	r1, [pc, #652]	; (8010848 <__ieee754_asin+0x348>)
 80105ba:	ec53 2b10 	vmov	r2, r3, d0
 80105be:	2000      	movs	r0, #0
 80105c0:	f7f2 fc32 	bl	8002e28 <__aeabi_dsub>
 80105c4:	4ba1      	ldr	r3, [pc, #644]	; (801084c <__ieee754_asin+0x34c>)
 80105c6:	2200      	movs	r2, #0
 80105c8:	f7f2 fde6 	bl	8003198 <__aeabi_dmul>
 80105cc:	a388      	add	r3, pc, #544	; (adr r3, 80107f0 <__ieee754_asin+0x2f0>)
 80105ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105d2:	4604      	mov	r4, r0
 80105d4:	460d      	mov	r5, r1
 80105d6:	f7f2 fddf 	bl	8003198 <__aeabi_dmul>
 80105da:	a387      	add	r3, pc, #540	; (adr r3, 80107f8 <__ieee754_asin+0x2f8>)
 80105dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105e0:	f7f2 fc24 	bl	8002e2c <__adddf3>
 80105e4:	4622      	mov	r2, r4
 80105e6:	462b      	mov	r3, r5
 80105e8:	f7f2 fdd6 	bl	8003198 <__aeabi_dmul>
 80105ec:	a384      	add	r3, pc, #528	; (adr r3, 8010800 <__ieee754_asin+0x300>)
 80105ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105f2:	f7f2 fc19 	bl	8002e28 <__aeabi_dsub>
 80105f6:	4622      	mov	r2, r4
 80105f8:	462b      	mov	r3, r5
 80105fa:	f7f2 fdcd 	bl	8003198 <__aeabi_dmul>
 80105fe:	a382      	add	r3, pc, #520	; (adr r3, 8010808 <__ieee754_asin+0x308>)
 8010600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010604:	f7f2 fc12 	bl	8002e2c <__adddf3>
 8010608:	4622      	mov	r2, r4
 801060a:	462b      	mov	r3, r5
 801060c:	f7f2 fdc4 	bl	8003198 <__aeabi_dmul>
 8010610:	a37f      	add	r3, pc, #508	; (adr r3, 8010810 <__ieee754_asin+0x310>)
 8010612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010616:	f7f2 fc07 	bl	8002e28 <__aeabi_dsub>
 801061a:	4622      	mov	r2, r4
 801061c:	462b      	mov	r3, r5
 801061e:	f7f2 fdbb 	bl	8003198 <__aeabi_dmul>
 8010622:	a37d      	add	r3, pc, #500	; (adr r3, 8010818 <__ieee754_asin+0x318>)
 8010624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010628:	f7f2 fc00 	bl	8002e2c <__adddf3>
 801062c:	4622      	mov	r2, r4
 801062e:	462b      	mov	r3, r5
 8010630:	f7f2 fdb2 	bl	8003198 <__aeabi_dmul>
 8010634:	a37a      	add	r3, pc, #488	; (adr r3, 8010820 <__ieee754_asin+0x320>)
 8010636:	e9d3 2300 	ldrd	r2, r3, [r3]
 801063a:	ec41 0b18 	vmov	d8, r0, r1
 801063e:	4620      	mov	r0, r4
 8010640:	4629      	mov	r1, r5
 8010642:	f7f2 fda9 	bl	8003198 <__aeabi_dmul>
 8010646:	a378      	add	r3, pc, #480	; (adr r3, 8010828 <__ieee754_asin+0x328>)
 8010648:	e9d3 2300 	ldrd	r2, r3, [r3]
 801064c:	f7f2 fbec 	bl	8002e28 <__aeabi_dsub>
 8010650:	4622      	mov	r2, r4
 8010652:	462b      	mov	r3, r5
 8010654:	f7f2 fda0 	bl	8003198 <__aeabi_dmul>
 8010658:	a375      	add	r3, pc, #468	; (adr r3, 8010830 <__ieee754_asin+0x330>)
 801065a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801065e:	f7f2 fbe5 	bl	8002e2c <__adddf3>
 8010662:	4622      	mov	r2, r4
 8010664:	462b      	mov	r3, r5
 8010666:	f7f2 fd97 	bl	8003198 <__aeabi_dmul>
 801066a:	a373      	add	r3, pc, #460	; (adr r3, 8010838 <__ieee754_asin+0x338>)
 801066c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010670:	f7f2 fbda 	bl	8002e28 <__aeabi_dsub>
 8010674:	4622      	mov	r2, r4
 8010676:	462b      	mov	r3, r5
 8010678:	f7f2 fd8e 	bl	8003198 <__aeabi_dmul>
 801067c:	4b72      	ldr	r3, [pc, #456]	; (8010848 <__ieee754_asin+0x348>)
 801067e:	2200      	movs	r2, #0
 8010680:	f7f2 fbd4 	bl	8002e2c <__adddf3>
 8010684:	ec45 4b10 	vmov	d0, r4, r5
 8010688:	4606      	mov	r6, r0
 801068a:	460f      	mov	r7, r1
 801068c:	f000 ff3a 	bl	8011504 <__ieee754_sqrt>
 8010690:	4b6f      	ldr	r3, [pc, #444]	; (8010850 <__ieee754_asin+0x350>)
 8010692:	4598      	cmp	r8, r3
 8010694:	ec5b ab10 	vmov	sl, fp, d0
 8010698:	f340 80dc 	ble.w	8010854 <__ieee754_asin+0x354>
 801069c:	4632      	mov	r2, r6
 801069e:	463b      	mov	r3, r7
 80106a0:	ec51 0b18 	vmov	r0, r1, d8
 80106a4:	f7f2 fea2 	bl	80033ec <__aeabi_ddiv>
 80106a8:	4652      	mov	r2, sl
 80106aa:	465b      	mov	r3, fp
 80106ac:	f7f2 fd74 	bl	8003198 <__aeabi_dmul>
 80106b0:	4652      	mov	r2, sl
 80106b2:	465b      	mov	r3, fp
 80106b4:	f7f2 fbba 	bl	8002e2c <__adddf3>
 80106b8:	4602      	mov	r2, r0
 80106ba:	460b      	mov	r3, r1
 80106bc:	f7f2 fbb6 	bl	8002e2c <__adddf3>
 80106c0:	a347      	add	r3, pc, #284	; (adr r3, 80107e0 <__ieee754_asin+0x2e0>)
 80106c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106c6:	f7f2 fbaf 	bl	8002e28 <__aeabi_dsub>
 80106ca:	4602      	mov	r2, r0
 80106cc:	460b      	mov	r3, r1
 80106ce:	a142      	add	r1, pc, #264	; (adr r1, 80107d8 <__ieee754_asin+0x2d8>)
 80106d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80106d4:	f7f2 fba8 	bl	8002e28 <__aeabi_dsub>
 80106d8:	9b01      	ldr	r3, [sp, #4]
 80106da:	2b00      	cmp	r3, #0
 80106dc:	bfdc      	itt	le
 80106de:	4602      	movle	r2, r0
 80106e0:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 80106e4:	4604      	mov	r4, r0
 80106e6:	460d      	mov	r5, r1
 80106e8:	bfdc      	itt	le
 80106ea:	4614      	movle	r4, r2
 80106ec:	461d      	movle	r5, r3
 80106ee:	e743      	b.n	8010578 <__ieee754_asin+0x78>
 80106f0:	ee10 2a10 	vmov	r2, s0
 80106f4:	ee10 0a10 	vmov	r0, s0
 80106f8:	462b      	mov	r3, r5
 80106fa:	4629      	mov	r1, r5
 80106fc:	f7f2 fd4c 	bl	8003198 <__aeabi_dmul>
 8010700:	a33b      	add	r3, pc, #236	; (adr r3, 80107f0 <__ieee754_asin+0x2f0>)
 8010702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010706:	4606      	mov	r6, r0
 8010708:	460f      	mov	r7, r1
 801070a:	f7f2 fd45 	bl	8003198 <__aeabi_dmul>
 801070e:	a33a      	add	r3, pc, #232	; (adr r3, 80107f8 <__ieee754_asin+0x2f8>)
 8010710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010714:	f7f2 fb8a 	bl	8002e2c <__adddf3>
 8010718:	4632      	mov	r2, r6
 801071a:	463b      	mov	r3, r7
 801071c:	f7f2 fd3c 	bl	8003198 <__aeabi_dmul>
 8010720:	a337      	add	r3, pc, #220	; (adr r3, 8010800 <__ieee754_asin+0x300>)
 8010722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010726:	f7f2 fb7f 	bl	8002e28 <__aeabi_dsub>
 801072a:	4632      	mov	r2, r6
 801072c:	463b      	mov	r3, r7
 801072e:	f7f2 fd33 	bl	8003198 <__aeabi_dmul>
 8010732:	a335      	add	r3, pc, #212	; (adr r3, 8010808 <__ieee754_asin+0x308>)
 8010734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010738:	f7f2 fb78 	bl	8002e2c <__adddf3>
 801073c:	4632      	mov	r2, r6
 801073e:	463b      	mov	r3, r7
 8010740:	f7f2 fd2a 	bl	8003198 <__aeabi_dmul>
 8010744:	a332      	add	r3, pc, #200	; (adr r3, 8010810 <__ieee754_asin+0x310>)
 8010746:	e9d3 2300 	ldrd	r2, r3, [r3]
 801074a:	f7f2 fb6d 	bl	8002e28 <__aeabi_dsub>
 801074e:	4632      	mov	r2, r6
 8010750:	463b      	mov	r3, r7
 8010752:	f7f2 fd21 	bl	8003198 <__aeabi_dmul>
 8010756:	a330      	add	r3, pc, #192	; (adr r3, 8010818 <__ieee754_asin+0x318>)
 8010758:	e9d3 2300 	ldrd	r2, r3, [r3]
 801075c:	f7f2 fb66 	bl	8002e2c <__adddf3>
 8010760:	4632      	mov	r2, r6
 8010762:	463b      	mov	r3, r7
 8010764:	f7f2 fd18 	bl	8003198 <__aeabi_dmul>
 8010768:	a32d      	add	r3, pc, #180	; (adr r3, 8010820 <__ieee754_asin+0x320>)
 801076a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801076e:	4680      	mov	r8, r0
 8010770:	4689      	mov	r9, r1
 8010772:	4630      	mov	r0, r6
 8010774:	4639      	mov	r1, r7
 8010776:	f7f2 fd0f 	bl	8003198 <__aeabi_dmul>
 801077a:	a32b      	add	r3, pc, #172	; (adr r3, 8010828 <__ieee754_asin+0x328>)
 801077c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010780:	f7f2 fb52 	bl	8002e28 <__aeabi_dsub>
 8010784:	4632      	mov	r2, r6
 8010786:	463b      	mov	r3, r7
 8010788:	f7f2 fd06 	bl	8003198 <__aeabi_dmul>
 801078c:	a328      	add	r3, pc, #160	; (adr r3, 8010830 <__ieee754_asin+0x330>)
 801078e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010792:	f7f2 fb4b 	bl	8002e2c <__adddf3>
 8010796:	4632      	mov	r2, r6
 8010798:	463b      	mov	r3, r7
 801079a:	f7f2 fcfd 	bl	8003198 <__aeabi_dmul>
 801079e:	a326      	add	r3, pc, #152	; (adr r3, 8010838 <__ieee754_asin+0x338>)
 80107a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107a4:	f7f2 fb40 	bl	8002e28 <__aeabi_dsub>
 80107a8:	4632      	mov	r2, r6
 80107aa:	463b      	mov	r3, r7
 80107ac:	f7f2 fcf4 	bl	8003198 <__aeabi_dmul>
 80107b0:	4b25      	ldr	r3, [pc, #148]	; (8010848 <__ieee754_asin+0x348>)
 80107b2:	2200      	movs	r2, #0
 80107b4:	f7f2 fb3a 	bl	8002e2c <__adddf3>
 80107b8:	4602      	mov	r2, r0
 80107ba:	460b      	mov	r3, r1
 80107bc:	4640      	mov	r0, r8
 80107be:	4649      	mov	r1, r9
 80107c0:	f7f2 fe14 	bl	80033ec <__aeabi_ddiv>
 80107c4:	4622      	mov	r2, r4
 80107c6:	462b      	mov	r3, r5
 80107c8:	f7f2 fce6 	bl	8003198 <__aeabi_dmul>
 80107cc:	4602      	mov	r2, r0
 80107ce:	460b      	mov	r3, r1
 80107d0:	4620      	mov	r0, r4
 80107d2:	4629      	mov	r1, r5
 80107d4:	e6bf      	b.n	8010556 <__ieee754_asin+0x56>
 80107d6:	bf00      	nop
 80107d8:	54442d18 	.word	0x54442d18
 80107dc:	3ff921fb 	.word	0x3ff921fb
 80107e0:	33145c07 	.word	0x33145c07
 80107e4:	3c91a626 	.word	0x3c91a626
 80107e8:	8800759c 	.word	0x8800759c
 80107ec:	7e37e43c 	.word	0x7e37e43c
 80107f0:	0dfdf709 	.word	0x0dfdf709
 80107f4:	3f023de1 	.word	0x3f023de1
 80107f8:	7501b288 	.word	0x7501b288
 80107fc:	3f49efe0 	.word	0x3f49efe0
 8010800:	b5688f3b 	.word	0xb5688f3b
 8010804:	3fa48228 	.word	0x3fa48228
 8010808:	0e884455 	.word	0x0e884455
 801080c:	3fc9c155 	.word	0x3fc9c155
 8010810:	03eb6f7d 	.word	0x03eb6f7d
 8010814:	3fd4d612 	.word	0x3fd4d612
 8010818:	55555555 	.word	0x55555555
 801081c:	3fc55555 	.word	0x3fc55555
 8010820:	b12e9282 	.word	0xb12e9282
 8010824:	3fb3b8c5 	.word	0x3fb3b8c5
 8010828:	1b8d0159 	.word	0x1b8d0159
 801082c:	3fe6066c 	.word	0x3fe6066c
 8010830:	9c598ac8 	.word	0x9c598ac8
 8010834:	40002ae5 	.word	0x40002ae5
 8010838:	1c8a2d4b 	.word	0x1c8a2d4b
 801083c:	40033a27 	.word	0x40033a27
 8010840:	3fefffff 	.word	0x3fefffff
 8010844:	3fdfffff 	.word	0x3fdfffff
 8010848:	3ff00000 	.word	0x3ff00000
 801084c:	3fe00000 	.word	0x3fe00000
 8010850:	3fef3332 	.word	0x3fef3332
 8010854:	ee10 2a10 	vmov	r2, s0
 8010858:	ee10 0a10 	vmov	r0, s0
 801085c:	465b      	mov	r3, fp
 801085e:	4659      	mov	r1, fp
 8010860:	f7f2 fae4 	bl	8002e2c <__adddf3>
 8010864:	4632      	mov	r2, r6
 8010866:	463b      	mov	r3, r7
 8010868:	ec41 0b19 	vmov	d9, r0, r1
 801086c:	ec51 0b18 	vmov	r0, r1, d8
 8010870:	f7f2 fdbc 	bl	80033ec <__aeabi_ddiv>
 8010874:	4602      	mov	r2, r0
 8010876:	460b      	mov	r3, r1
 8010878:	ec51 0b19 	vmov	r0, r1, d9
 801087c:	f7f2 fc8c 	bl	8003198 <__aeabi_dmul>
 8010880:	f04f 0800 	mov.w	r8, #0
 8010884:	4606      	mov	r6, r0
 8010886:	460f      	mov	r7, r1
 8010888:	4642      	mov	r2, r8
 801088a:	465b      	mov	r3, fp
 801088c:	4640      	mov	r0, r8
 801088e:	4659      	mov	r1, fp
 8010890:	f7f2 fc82 	bl	8003198 <__aeabi_dmul>
 8010894:	4602      	mov	r2, r0
 8010896:	460b      	mov	r3, r1
 8010898:	4620      	mov	r0, r4
 801089a:	4629      	mov	r1, r5
 801089c:	f7f2 fac4 	bl	8002e28 <__aeabi_dsub>
 80108a0:	4642      	mov	r2, r8
 80108a2:	4604      	mov	r4, r0
 80108a4:	460d      	mov	r5, r1
 80108a6:	465b      	mov	r3, fp
 80108a8:	4650      	mov	r0, sl
 80108aa:	4659      	mov	r1, fp
 80108ac:	f7f2 fabe 	bl	8002e2c <__adddf3>
 80108b0:	4602      	mov	r2, r0
 80108b2:	460b      	mov	r3, r1
 80108b4:	4620      	mov	r0, r4
 80108b6:	4629      	mov	r1, r5
 80108b8:	f7f2 fd98 	bl	80033ec <__aeabi_ddiv>
 80108bc:	4602      	mov	r2, r0
 80108be:	460b      	mov	r3, r1
 80108c0:	f7f2 fab4 	bl	8002e2c <__adddf3>
 80108c4:	4602      	mov	r2, r0
 80108c6:	460b      	mov	r3, r1
 80108c8:	a113      	add	r1, pc, #76	; (adr r1, 8010918 <__ieee754_asin+0x418>)
 80108ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80108ce:	f7f2 faab 	bl	8002e28 <__aeabi_dsub>
 80108d2:	4602      	mov	r2, r0
 80108d4:	460b      	mov	r3, r1
 80108d6:	4630      	mov	r0, r6
 80108d8:	4639      	mov	r1, r7
 80108da:	f7f2 faa5 	bl	8002e28 <__aeabi_dsub>
 80108de:	4642      	mov	r2, r8
 80108e0:	4604      	mov	r4, r0
 80108e2:	460d      	mov	r5, r1
 80108e4:	465b      	mov	r3, fp
 80108e6:	4640      	mov	r0, r8
 80108e8:	4659      	mov	r1, fp
 80108ea:	f7f2 fa9f 	bl	8002e2c <__adddf3>
 80108ee:	4602      	mov	r2, r0
 80108f0:	460b      	mov	r3, r1
 80108f2:	a10b      	add	r1, pc, #44	; (adr r1, 8010920 <__ieee754_asin+0x420>)
 80108f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80108f8:	f7f2 fa96 	bl	8002e28 <__aeabi_dsub>
 80108fc:	4602      	mov	r2, r0
 80108fe:	460b      	mov	r3, r1
 8010900:	4620      	mov	r0, r4
 8010902:	4629      	mov	r1, r5
 8010904:	f7f2 fa90 	bl	8002e28 <__aeabi_dsub>
 8010908:	4602      	mov	r2, r0
 801090a:	460b      	mov	r3, r1
 801090c:	a104      	add	r1, pc, #16	; (adr r1, 8010920 <__ieee754_asin+0x420>)
 801090e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010912:	e6df      	b.n	80106d4 <__ieee754_asin+0x1d4>
 8010914:	f3af 8000 	nop.w
 8010918:	33145c07 	.word	0x33145c07
 801091c:	3c91a626 	.word	0x3c91a626
 8010920:	54442d18 	.word	0x54442d18
 8010924:	3fe921fb 	.word	0x3fe921fb

08010928 <__ieee754_atan2>:
 8010928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801092c:	ec57 6b11 	vmov	r6, r7, d1
 8010930:	4273      	negs	r3, r6
 8010932:	f8df e184 	ldr.w	lr, [pc, #388]	; 8010ab8 <__ieee754_atan2+0x190>
 8010936:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801093a:	4333      	orrs	r3, r6
 801093c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8010940:	4573      	cmp	r3, lr
 8010942:	ec51 0b10 	vmov	r0, r1, d0
 8010946:	ee11 8a10 	vmov	r8, s2
 801094a:	d80a      	bhi.n	8010962 <__ieee754_atan2+0x3a>
 801094c:	4244      	negs	r4, r0
 801094e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010952:	4304      	orrs	r4, r0
 8010954:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8010958:	4574      	cmp	r4, lr
 801095a:	ee10 9a10 	vmov	r9, s0
 801095e:	468c      	mov	ip, r1
 8010960:	d907      	bls.n	8010972 <__ieee754_atan2+0x4a>
 8010962:	4632      	mov	r2, r6
 8010964:	463b      	mov	r3, r7
 8010966:	f7f2 fa61 	bl	8002e2c <__adddf3>
 801096a:	ec41 0b10 	vmov	d0, r0, r1
 801096e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010972:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8010976:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801097a:	4334      	orrs	r4, r6
 801097c:	d103      	bne.n	8010986 <__ieee754_atan2+0x5e>
 801097e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010982:	f7ff ba4d 	b.w	800fe20 <atan>
 8010986:	17bc      	asrs	r4, r7, #30
 8010988:	f004 0402 	and.w	r4, r4, #2
 801098c:	ea53 0909 	orrs.w	r9, r3, r9
 8010990:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8010994:	d107      	bne.n	80109a6 <__ieee754_atan2+0x7e>
 8010996:	2c02      	cmp	r4, #2
 8010998:	d060      	beq.n	8010a5c <__ieee754_atan2+0x134>
 801099a:	2c03      	cmp	r4, #3
 801099c:	d1e5      	bne.n	801096a <__ieee754_atan2+0x42>
 801099e:	a142      	add	r1, pc, #264	; (adr r1, 8010aa8 <__ieee754_atan2+0x180>)
 80109a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80109a4:	e7e1      	b.n	801096a <__ieee754_atan2+0x42>
 80109a6:	ea52 0808 	orrs.w	r8, r2, r8
 80109aa:	d106      	bne.n	80109ba <__ieee754_atan2+0x92>
 80109ac:	f1bc 0f00 	cmp.w	ip, #0
 80109b0:	da5f      	bge.n	8010a72 <__ieee754_atan2+0x14a>
 80109b2:	a13f      	add	r1, pc, #252	; (adr r1, 8010ab0 <__ieee754_atan2+0x188>)
 80109b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80109b8:	e7d7      	b.n	801096a <__ieee754_atan2+0x42>
 80109ba:	4572      	cmp	r2, lr
 80109bc:	d10f      	bne.n	80109de <__ieee754_atan2+0xb6>
 80109be:	4293      	cmp	r3, r2
 80109c0:	f104 34ff 	add.w	r4, r4, #4294967295
 80109c4:	d107      	bne.n	80109d6 <__ieee754_atan2+0xae>
 80109c6:	2c02      	cmp	r4, #2
 80109c8:	d84c      	bhi.n	8010a64 <__ieee754_atan2+0x13c>
 80109ca:	4b35      	ldr	r3, [pc, #212]	; (8010aa0 <__ieee754_atan2+0x178>)
 80109cc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80109d0:	e9d4 0100 	ldrd	r0, r1, [r4]
 80109d4:	e7c9      	b.n	801096a <__ieee754_atan2+0x42>
 80109d6:	2c02      	cmp	r4, #2
 80109d8:	d848      	bhi.n	8010a6c <__ieee754_atan2+0x144>
 80109da:	4b32      	ldr	r3, [pc, #200]	; (8010aa4 <__ieee754_atan2+0x17c>)
 80109dc:	e7f6      	b.n	80109cc <__ieee754_atan2+0xa4>
 80109de:	4573      	cmp	r3, lr
 80109e0:	d0e4      	beq.n	80109ac <__ieee754_atan2+0x84>
 80109e2:	1a9b      	subs	r3, r3, r2
 80109e4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80109e8:	ea4f 5223 	mov.w	r2, r3, asr #20
 80109ec:	da1e      	bge.n	8010a2c <__ieee754_atan2+0x104>
 80109ee:	2f00      	cmp	r7, #0
 80109f0:	da01      	bge.n	80109f6 <__ieee754_atan2+0xce>
 80109f2:	323c      	adds	r2, #60	; 0x3c
 80109f4:	db1e      	blt.n	8010a34 <__ieee754_atan2+0x10c>
 80109f6:	4632      	mov	r2, r6
 80109f8:	463b      	mov	r3, r7
 80109fa:	f7f2 fcf7 	bl	80033ec <__aeabi_ddiv>
 80109fe:	ec41 0b10 	vmov	d0, r0, r1
 8010a02:	f7ff fbad 	bl	8010160 <fabs>
 8010a06:	f7ff fa0b 	bl	800fe20 <atan>
 8010a0a:	ec51 0b10 	vmov	r0, r1, d0
 8010a0e:	2c01      	cmp	r4, #1
 8010a10:	d013      	beq.n	8010a3a <__ieee754_atan2+0x112>
 8010a12:	2c02      	cmp	r4, #2
 8010a14:	d015      	beq.n	8010a42 <__ieee754_atan2+0x11a>
 8010a16:	2c00      	cmp	r4, #0
 8010a18:	d0a7      	beq.n	801096a <__ieee754_atan2+0x42>
 8010a1a:	a319      	add	r3, pc, #100	; (adr r3, 8010a80 <__ieee754_atan2+0x158>)
 8010a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a20:	f7f2 fa02 	bl	8002e28 <__aeabi_dsub>
 8010a24:	a318      	add	r3, pc, #96	; (adr r3, 8010a88 <__ieee754_atan2+0x160>)
 8010a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a2a:	e014      	b.n	8010a56 <__ieee754_atan2+0x12e>
 8010a2c:	a118      	add	r1, pc, #96	; (adr r1, 8010a90 <__ieee754_atan2+0x168>)
 8010a2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010a32:	e7ec      	b.n	8010a0e <__ieee754_atan2+0xe6>
 8010a34:	2000      	movs	r0, #0
 8010a36:	2100      	movs	r1, #0
 8010a38:	e7e9      	b.n	8010a0e <__ieee754_atan2+0xe6>
 8010a3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010a3e:	4619      	mov	r1, r3
 8010a40:	e793      	b.n	801096a <__ieee754_atan2+0x42>
 8010a42:	a30f      	add	r3, pc, #60	; (adr r3, 8010a80 <__ieee754_atan2+0x158>)
 8010a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a48:	f7f2 f9ee 	bl	8002e28 <__aeabi_dsub>
 8010a4c:	4602      	mov	r2, r0
 8010a4e:	460b      	mov	r3, r1
 8010a50:	a10d      	add	r1, pc, #52	; (adr r1, 8010a88 <__ieee754_atan2+0x160>)
 8010a52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010a56:	f7f2 f9e7 	bl	8002e28 <__aeabi_dsub>
 8010a5a:	e786      	b.n	801096a <__ieee754_atan2+0x42>
 8010a5c:	a10a      	add	r1, pc, #40	; (adr r1, 8010a88 <__ieee754_atan2+0x160>)
 8010a5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010a62:	e782      	b.n	801096a <__ieee754_atan2+0x42>
 8010a64:	a10c      	add	r1, pc, #48	; (adr r1, 8010a98 <__ieee754_atan2+0x170>)
 8010a66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010a6a:	e77e      	b.n	801096a <__ieee754_atan2+0x42>
 8010a6c:	2000      	movs	r0, #0
 8010a6e:	2100      	movs	r1, #0
 8010a70:	e77b      	b.n	801096a <__ieee754_atan2+0x42>
 8010a72:	a107      	add	r1, pc, #28	; (adr r1, 8010a90 <__ieee754_atan2+0x168>)
 8010a74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010a78:	e777      	b.n	801096a <__ieee754_atan2+0x42>
 8010a7a:	bf00      	nop
 8010a7c:	f3af 8000 	nop.w
 8010a80:	33145c07 	.word	0x33145c07
 8010a84:	3ca1a626 	.word	0x3ca1a626
 8010a88:	54442d18 	.word	0x54442d18
 8010a8c:	400921fb 	.word	0x400921fb
 8010a90:	54442d18 	.word	0x54442d18
 8010a94:	3ff921fb 	.word	0x3ff921fb
 8010a98:	54442d18 	.word	0x54442d18
 8010a9c:	3fe921fb 	.word	0x3fe921fb
 8010aa0:	08013b80 	.word	0x08013b80
 8010aa4:	08013b98 	.word	0x08013b98
 8010aa8:	54442d18 	.word	0x54442d18
 8010aac:	c00921fb 	.word	0xc00921fb
 8010ab0:	54442d18 	.word	0x54442d18
 8010ab4:	bff921fb 	.word	0xbff921fb
 8010ab8:	7ff00000 	.word	0x7ff00000
 8010abc:	00000000 	.word	0x00000000

08010ac0 <__ieee754_pow>:
 8010ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ac4:	ed2d 8b06 	vpush	{d8-d10}
 8010ac8:	b08d      	sub	sp, #52	; 0x34
 8010aca:	ed8d 1b02 	vstr	d1, [sp, #8]
 8010ace:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8010ad2:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8010ad6:	ea56 0100 	orrs.w	r1, r6, r0
 8010ada:	ec53 2b10 	vmov	r2, r3, d0
 8010ade:	f000 84d1 	beq.w	8011484 <__ieee754_pow+0x9c4>
 8010ae2:	497f      	ldr	r1, [pc, #508]	; (8010ce0 <__ieee754_pow+0x220>)
 8010ae4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8010ae8:	428c      	cmp	r4, r1
 8010aea:	ee10 8a10 	vmov	r8, s0
 8010aee:	4699      	mov	r9, r3
 8010af0:	dc09      	bgt.n	8010b06 <__ieee754_pow+0x46>
 8010af2:	d103      	bne.n	8010afc <__ieee754_pow+0x3c>
 8010af4:	b97a      	cbnz	r2, 8010b16 <__ieee754_pow+0x56>
 8010af6:	42a6      	cmp	r6, r4
 8010af8:	dd02      	ble.n	8010b00 <__ieee754_pow+0x40>
 8010afa:	e00c      	b.n	8010b16 <__ieee754_pow+0x56>
 8010afc:	428e      	cmp	r6, r1
 8010afe:	dc02      	bgt.n	8010b06 <__ieee754_pow+0x46>
 8010b00:	428e      	cmp	r6, r1
 8010b02:	d110      	bne.n	8010b26 <__ieee754_pow+0x66>
 8010b04:	b178      	cbz	r0, 8010b26 <__ieee754_pow+0x66>
 8010b06:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010b0a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010b0e:	ea54 0308 	orrs.w	r3, r4, r8
 8010b12:	f000 84b7 	beq.w	8011484 <__ieee754_pow+0x9c4>
 8010b16:	4873      	ldr	r0, [pc, #460]	; (8010ce4 <__ieee754_pow+0x224>)
 8010b18:	b00d      	add	sp, #52	; 0x34
 8010b1a:	ecbd 8b06 	vpop	{d8-d10}
 8010b1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b22:	f001 bbbd 	b.w	80122a0 <nan>
 8010b26:	f1b9 0f00 	cmp.w	r9, #0
 8010b2a:	da36      	bge.n	8010b9a <__ieee754_pow+0xda>
 8010b2c:	496e      	ldr	r1, [pc, #440]	; (8010ce8 <__ieee754_pow+0x228>)
 8010b2e:	428e      	cmp	r6, r1
 8010b30:	dc51      	bgt.n	8010bd6 <__ieee754_pow+0x116>
 8010b32:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8010b36:	428e      	cmp	r6, r1
 8010b38:	f340 84af 	ble.w	801149a <__ieee754_pow+0x9da>
 8010b3c:	1531      	asrs	r1, r6, #20
 8010b3e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8010b42:	2914      	cmp	r1, #20
 8010b44:	dd0f      	ble.n	8010b66 <__ieee754_pow+0xa6>
 8010b46:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8010b4a:	fa20 fc01 	lsr.w	ip, r0, r1
 8010b4e:	fa0c f101 	lsl.w	r1, ip, r1
 8010b52:	4281      	cmp	r1, r0
 8010b54:	f040 84a1 	bne.w	801149a <__ieee754_pow+0x9da>
 8010b58:	f00c 0c01 	and.w	ip, ip, #1
 8010b5c:	f1cc 0102 	rsb	r1, ip, #2
 8010b60:	9100      	str	r1, [sp, #0]
 8010b62:	b180      	cbz	r0, 8010b86 <__ieee754_pow+0xc6>
 8010b64:	e059      	b.n	8010c1a <__ieee754_pow+0x15a>
 8010b66:	2800      	cmp	r0, #0
 8010b68:	d155      	bne.n	8010c16 <__ieee754_pow+0x156>
 8010b6a:	f1c1 0114 	rsb	r1, r1, #20
 8010b6e:	fa46 fc01 	asr.w	ip, r6, r1
 8010b72:	fa0c f101 	lsl.w	r1, ip, r1
 8010b76:	42b1      	cmp	r1, r6
 8010b78:	f040 848c 	bne.w	8011494 <__ieee754_pow+0x9d4>
 8010b7c:	f00c 0c01 	and.w	ip, ip, #1
 8010b80:	f1cc 0102 	rsb	r1, ip, #2
 8010b84:	9100      	str	r1, [sp, #0]
 8010b86:	4959      	ldr	r1, [pc, #356]	; (8010cec <__ieee754_pow+0x22c>)
 8010b88:	428e      	cmp	r6, r1
 8010b8a:	d12d      	bne.n	8010be8 <__ieee754_pow+0x128>
 8010b8c:	2f00      	cmp	r7, #0
 8010b8e:	da79      	bge.n	8010c84 <__ieee754_pow+0x1c4>
 8010b90:	4956      	ldr	r1, [pc, #344]	; (8010cec <__ieee754_pow+0x22c>)
 8010b92:	2000      	movs	r0, #0
 8010b94:	f7f2 fc2a 	bl	80033ec <__aeabi_ddiv>
 8010b98:	e016      	b.n	8010bc8 <__ieee754_pow+0x108>
 8010b9a:	2100      	movs	r1, #0
 8010b9c:	9100      	str	r1, [sp, #0]
 8010b9e:	2800      	cmp	r0, #0
 8010ba0:	d13b      	bne.n	8010c1a <__ieee754_pow+0x15a>
 8010ba2:	494f      	ldr	r1, [pc, #316]	; (8010ce0 <__ieee754_pow+0x220>)
 8010ba4:	428e      	cmp	r6, r1
 8010ba6:	d1ee      	bne.n	8010b86 <__ieee754_pow+0xc6>
 8010ba8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8010bac:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8010bb0:	ea53 0308 	orrs.w	r3, r3, r8
 8010bb4:	f000 8466 	beq.w	8011484 <__ieee754_pow+0x9c4>
 8010bb8:	4b4d      	ldr	r3, [pc, #308]	; (8010cf0 <__ieee754_pow+0x230>)
 8010bba:	429c      	cmp	r4, r3
 8010bbc:	dd0d      	ble.n	8010bda <__ieee754_pow+0x11a>
 8010bbe:	2f00      	cmp	r7, #0
 8010bc0:	f280 8464 	bge.w	801148c <__ieee754_pow+0x9cc>
 8010bc4:	2000      	movs	r0, #0
 8010bc6:	2100      	movs	r1, #0
 8010bc8:	ec41 0b10 	vmov	d0, r0, r1
 8010bcc:	b00d      	add	sp, #52	; 0x34
 8010bce:	ecbd 8b06 	vpop	{d8-d10}
 8010bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bd6:	2102      	movs	r1, #2
 8010bd8:	e7e0      	b.n	8010b9c <__ieee754_pow+0xdc>
 8010bda:	2f00      	cmp	r7, #0
 8010bdc:	daf2      	bge.n	8010bc4 <__ieee754_pow+0x104>
 8010bde:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8010be2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010be6:	e7ef      	b.n	8010bc8 <__ieee754_pow+0x108>
 8010be8:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8010bec:	d104      	bne.n	8010bf8 <__ieee754_pow+0x138>
 8010bee:	4610      	mov	r0, r2
 8010bf0:	4619      	mov	r1, r3
 8010bf2:	f7f2 fad1 	bl	8003198 <__aeabi_dmul>
 8010bf6:	e7e7      	b.n	8010bc8 <__ieee754_pow+0x108>
 8010bf8:	493e      	ldr	r1, [pc, #248]	; (8010cf4 <__ieee754_pow+0x234>)
 8010bfa:	428f      	cmp	r7, r1
 8010bfc:	d10d      	bne.n	8010c1a <__ieee754_pow+0x15a>
 8010bfe:	f1b9 0f00 	cmp.w	r9, #0
 8010c02:	db0a      	blt.n	8010c1a <__ieee754_pow+0x15a>
 8010c04:	ec43 2b10 	vmov	d0, r2, r3
 8010c08:	b00d      	add	sp, #52	; 0x34
 8010c0a:	ecbd 8b06 	vpop	{d8-d10}
 8010c0e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c12:	f000 bc77 	b.w	8011504 <__ieee754_sqrt>
 8010c16:	2100      	movs	r1, #0
 8010c18:	9100      	str	r1, [sp, #0]
 8010c1a:	ec43 2b10 	vmov	d0, r2, r3
 8010c1e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010c22:	f7ff fa9d 	bl	8010160 <fabs>
 8010c26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010c2a:	ec51 0b10 	vmov	r0, r1, d0
 8010c2e:	f1b8 0f00 	cmp.w	r8, #0
 8010c32:	d12a      	bne.n	8010c8a <__ieee754_pow+0x1ca>
 8010c34:	b12c      	cbz	r4, 8010c42 <__ieee754_pow+0x182>
 8010c36:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8010cec <__ieee754_pow+0x22c>
 8010c3a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8010c3e:	45e6      	cmp	lr, ip
 8010c40:	d123      	bne.n	8010c8a <__ieee754_pow+0x1ca>
 8010c42:	2f00      	cmp	r7, #0
 8010c44:	da05      	bge.n	8010c52 <__ieee754_pow+0x192>
 8010c46:	4602      	mov	r2, r0
 8010c48:	460b      	mov	r3, r1
 8010c4a:	2000      	movs	r0, #0
 8010c4c:	4927      	ldr	r1, [pc, #156]	; (8010cec <__ieee754_pow+0x22c>)
 8010c4e:	f7f2 fbcd 	bl	80033ec <__aeabi_ddiv>
 8010c52:	f1b9 0f00 	cmp.w	r9, #0
 8010c56:	dab7      	bge.n	8010bc8 <__ieee754_pow+0x108>
 8010c58:	9b00      	ldr	r3, [sp, #0]
 8010c5a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010c5e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010c62:	4323      	orrs	r3, r4
 8010c64:	d108      	bne.n	8010c78 <__ieee754_pow+0x1b8>
 8010c66:	4602      	mov	r2, r0
 8010c68:	460b      	mov	r3, r1
 8010c6a:	4610      	mov	r0, r2
 8010c6c:	4619      	mov	r1, r3
 8010c6e:	f7f2 f8db 	bl	8002e28 <__aeabi_dsub>
 8010c72:	4602      	mov	r2, r0
 8010c74:	460b      	mov	r3, r1
 8010c76:	e78d      	b.n	8010b94 <__ieee754_pow+0xd4>
 8010c78:	9b00      	ldr	r3, [sp, #0]
 8010c7a:	2b01      	cmp	r3, #1
 8010c7c:	d1a4      	bne.n	8010bc8 <__ieee754_pow+0x108>
 8010c7e:	4602      	mov	r2, r0
 8010c80:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010c84:	4610      	mov	r0, r2
 8010c86:	4619      	mov	r1, r3
 8010c88:	e79e      	b.n	8010bc8 <__ieee754_pow+0x108>
 8010c8a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8010c8e:	f10c 35ff 	add.w	r5, ip, #4294967295
 8010c92:	950a      	str	r5, [sp, #40]	; 0x28
 8010c94:	9d00      	ldr	r5, [sp, #0]
 8010c96:	46ac      	mov	ip, r5
 8010c98:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8010c9a:	ea5c 0505 	orrs.w	r5, ip, r5
 8010c9e:	d0e4      	beq.n	8010c6a <__ieee754_pow+0x1aa>
 8010ca0:	4b15      	ldr	r3, [pc, #84]	; (8010cf8 <__ieee754_pow+0x238>)
 8010ca2:	429e      	cmp	r6, r3
 8010ca4:	f340 80fc 	ble.w	8010ea0 <__ieee754_pow+0x3e0>
 8010ca8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8010cac:	429e      	cmp	r6, r3
 8010cae:	4b10      	ldr	r3, [pc, #64]	; (8010cf0 <__ieee754_pow+0x230>)
 8010cb0:	dd07      	ble.n	8010cc2 <__ieee754_pow+0x202>
 8010cb2:	429c      	cmp	r4, r3
 8010cb4:	dc0a      	bgt.n	8010ccc <__ieee754_pow+0x20c>
 8010cb6:	2f00      	cmp	r7, #0
 8010cb8:	da84      	bge.n	8010bc4 <__ieee754_pow+0x104>
 8010cba:	a307      	add	r3, pc, #28	; (adr r3, 8010cd8 <__ieee754_pow+0x218>)
 8010cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cc0:	e795      	b.n	8010bee <__ieee754_pow+0x12e>
 8010cc2:	429c      	cmp	r4, r3
 8010cc4:	dbf7      	blt.n	8010cb6 <__ieee754_pow+0x1f6>
 8010cc6:	4b09      	ldr	r3, [pc, #36]	; (8010cec <__ieee754_pow+0x22c>)
 8010cc8:	429c      	cmp	r4, r3
 8010cca:	dd17      	ble.n	8010cfc <__ieee754_pow+0x23c>
 8010ccc:	2f00      	cmp	r7, #0
 8010cce:	dcf4      	bgt.n	8010cba <__ieee754_pow+0x1fa>
 8010cd0:	e778      	b.n	8010bc4 <__ieee754_pow+0x104>
 8010cd2:	bf00      	nop
 8010cd4:	f3af 8000 	nop.w
 8010cd8:	8800759c 	.word	0x8800759c
 8010cdc:	7e37e43c 	.word	0x7e37e43c
 8010ce0:	7ff00000 	.word	0x7ff00000
 8010ce4:	080139d0 	.word	0x080139d0
 8010ce8:	433fffff 	.word	0x433fffff
 8010cec:	3ff00000 	.word	0x3ff00000
 8010cf0:	3fefffff 	.word	0x3fefffff
 8010cf4:	3fe00000 	.word	0x3fe00000
 8010cf8:	41e00000 	.word	0x41e00000
 8010cfc:	4b64      	ldr	r3, [pc, #400]	; (8010e90 <__ieee754_pow+0x3d0>)
 8010cfe:	2200      	movs	r2, #0
 8010d00:	f7f2 f892 	bl	8002e28 <__aeabi_dsub>
 8010d04:	a356      	add	r3, pc, #344	; (adr r3, 8010e60 <__ieee754_pow+0x3a0>)
 8010d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d0a:	4604      	mov	r4, r0
 8010d0c:	460d      	mov	r5, r1
 8010d0e:	f7f2 fa43 	bl	8003198 <__aeabi_dmul>
 8010d12:	a355      	add	r3, pc, #340	; (adr r3, 8010e68 <__ieee754_pow+0x3a8>)
 8010d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d18:	4606      	mov	r6, r0
 8010d1a:	460f      	mov	r7, r1
 8010d1c:	4620      	mov	r0, r4
 8010d1e:	4629      	mov	r1, r5
 8010d20:	f7f2 fa3a 	bl	8003198 <__aeabi_dmul>
 8010d24:	4b5b      	ldr	r3, [pc, #364]	; (8010e94 <__ieee754_pow+0x3d4>)
 8010d26:	4682      	mov	sl, r0
 8010d28:	468b      	mov	fp, r1
 8010d2a:	2200      	movs	r2, #0
 8010d2c:	4620      	mov	r0, r4
 8010d2e:	4629      	mov	r1, r5
 8010d30:	f7f2 fa32 	bl	8003198 <__aeabi_dmul>
 8010d34:	4602      	mov	r2, r0
 8010d36:	460b      	mov	r3, r1
 8010d38:	a14d      	add	r1, pc, #308	; (adr r1, 8010e70 <__ieee754_pow+0x3b0>)
 8010d3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010d3e:	f7f2 f873 	bl	8002e28 <__aeabi_dsub>
 8010d42:	4622      	mov	r2, r4
 8010d44:	462b      	mov	r3, r5
 8010d46:	f7f2 fa27 	bl	8003198 <__aeabi_dmul>
 8010d4a:	4602      	mov	r2, r0
 8010d4c:	460b      	mov	r3, r1
 8010d4e:	2000      	movs	r0, #0
 8010d50:	4951      	ldr	r1, [pc, #324]	; (8010e98 <__ieee754_pow+0x3d8>)
 8010d52:	f7f2 f869 	bl	8002e28 <__aeabi_dsub>
 8010d56:	4622      	mov	r2, r4
 8010d58:	4680      	mov	r8, r0
 8010d5a:	4689      	mov	r9, r1
 8010d5c:	462b      	mov	r3, r5
 8010d5e:	4620      	mov	r0, r4
 8010d60:	4629      	mov	r1, r5
 8010d62:	f7f2 fa19 	bl	8003198 <__aeabi_dmul>
 8010d66:	4602      	mov	r2, r0
 8010d68:	460b      	mov	r3, r1
 8010d6a:	4640      	mov	r0, r8
 8010d6c:	4649      	mov	r1, r9
 8010d6e:	f7f2 fa13 	bl	8003198 <__aeabi_dmul>
 8010d72:	a341      	add	r3, pc, #260	; (adr r3, 8010e78 <__ieee754_pow+0x3b8>)
 8010d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d78:	f7f2 fa0e 	bl	8003198 <__aeabi_dmul>
 8010d7c:	4602      	mov	r2, r0
 8010d7e:	460b      	mov	r3, r1
 8010d80:	4650      	mov	r0, sl
 8010d82:	4659      	mov	r1, fp
 8010d84:	f7f2 f850 	bl	8002e28 <__aeabi_dsub>
 8010d88:	4602      	mov	r2, r0
 8010d8a:	460b      	mov	r3, r1
 8010d8c:	4680      	mov	r8, r0
 8010d8e:	4689      	mov	r9, r1
 8010d90:	4630      	mov	r0, r6
 8010d92:	4639      	mov	r1, r7
 8010d94:	f7f2 f84a 	bl	8002e2c <__adddf3>
 8010d98:	2400      	movs	r4, #0
 8010d9a:	4632      	mov	r2, r6
 8010d9c:	463b      	mov	r3, r7
 8010d9e:	4620      	mov	r0, r4
 8010da0:	460d      	mov	r5, r1
 8010da2:	f7f2 f841 	bl	8002e28 <__aeabi_dsub>
 8010da6:	4602      	mov	r2, r0
 8010da8:	460b      	mov	r3, r1
 8010daa:	4640      	mov	r0, r8
 8010dac:	4649      	mov	r1, r9
 8010dae:	f7f2 f83b 	bl	8002e28 <__aeabi_dsub>
 8010db2:	9b00      	ldr	r3, [sp, #0]
 8010db4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010db6:	3b01      	subs	r3, #1
 8010db8:	4313      	orrs	r3, r2
 8010dba:	4682      	mov	sl, r0
 8010dbc:	468b      	mov	fp, r1
 8010dbe:	f040 81f1 	bne.w	80111a4 <__ieee754_pow+0x6e4>
 8010dc2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8010e80 <__ieee754_pow+0x3c0>
 8010dc6:	eeb0 8a47 	vmov.f32	s16, s14
 8010dca:	eef0 8a67 	vmov.f32	s17, s15
 8010dce:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010dd2:	2600      	movs	r6, #0
 8010dd4:	4632      	mov	r2, r6
 8010dd6:	463b      	mov	r3, r7
 8010dd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010ddc:	f7f2 f824 	bl	8002e28 <__aeabi_dsub>
 8010de0:	4622      	mov	r2, r4
 8010de2:	462b      	mov	r3, r5
 8010de4:	f7f2 f9d8 	bl	8003198 <__aeabi_dmul>
 8010de8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010dec:	4680      	mov	r8, r0
 8010dee:	4689      	mov	r9, r1
 8010df0:	4650      	mov	r0, sl
 8010df2:	4659      	mov	r1, fp
 8010df4:	f7f2 f9d0 	bl	8003198 <__aeabi_dmul>
 8010df8:	4602      	mov	r2, r0
 8010dfa:	460b      	mov	r3, r1
 8010dfc:	4640      	mov	r0, r8
 8010dfe:	4649      	mov	r1, r9
 8010e00:	f7f2 f814 	bl	8002e2c <__adddf3>
 8010e04:	4632      	mov	r2, r6
 8010e06:	463b      	mov	r3, r7
 8010e08:	4680      	mov	r8, r0
 8010e0a:	4689      	mov	r9, r1
 8010e0c:	4620      	mov	r0, r4
 8010e0e:	4629      	mov	r1, r5
 8010e10:	f7f2 f9c2 	bl	8003198 <__aeabi_dmul>
 8010e14:	460b      	mov	r3, r1
 8010e16:	4604      	mov	r4, r0
 8010e18:	460d      	mov	r5, r1
 8010e1a:	4602      	mov	r2, r0
 8010e1c:	4649      	mov	r1, r9
 8010e1e:	4640      	mov	r0, r8
 8010e20:	f7f2 f804 	bl	8002e2c <__adddf3>
 8010e24:	4b1d      	ldr	r3, [pc, #116]	; (8010e9c <__ieee754_pow+0x3dc>)
 8010e26:	4299      	cmp	r1, r3
 8010e28:	ec45 4b19 	vmov	d9, r4, r5
 8010e2c:	4606      	mov	r6, r0
 8010e2e:	460f      	mov	r7, r1
 8010e30:	468b      	mov	fp, r1
 8010e32:	f340 82fe 	ble.w	8011432 <__ieee754_pow+0x972>
 8010e36:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8010e3a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8010e3e:	4303      	orrs	r3, r0
 8010e40:	f000 81f0 	beq.w	8011224 <__ieee754_pow+0x764>
 8010e44:	a310      	add	r3, pc, #64	; (adr r3, 8010e88 <__ieee754_pow+0x3c8>)
 8010e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e4a:	ec51 0b18 	vmov	r0, r1, d8
 8010e4e:	f7f2 f9a3 	bl	8003198 <__aeabi_dmul>
 8010e52:	a30d      	add	r3, pc, #52	; (adr r3, 8010e88 <__ieee754_pow+0x3c8>)
 8010e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e58:	e6cb      	b.n	8010bf2 <__ieee754_pow+0x132>
 8010e5a:	bf00      	nop
 8010e5c:	f3af 8000 	nop.w
 8010e60:	60000000 	.word	0x60000000
 8010e64:	3ff71547 	.word	0x3ff71547
 8010e68:	f85ddf44 	.word	0xf85ddf44
 8010e6c:	3e54ae0b 	.word	0x3e54ae0b
 8010e70:	55555555 	.word	0x55555555
 8010e74:	3fd55555 	.word	0x3fd55555
 8010e78:	652b82fe 	.word	0x652b82fe
 8010e7c:	3ff71547 	.word	0x3ff71547
 8010e80:	00000000 	.word	0x00000000
 8010e84:	bff00000 	.word	0xbff00000
 8010e88:	8800759c 	.word	0x8800759c
 8010e8c:	7e37e43c 	.word	0x7e37e43c
 8010e90:	3ff00000 	.word	0x3ff00000
 8010e94:	3fd00000 	.word	0x3fd00000
 8010e98:	3fe00000 	.word	0x3fe00000
 8010e9c:	408fffff 	.word	0x408fffff
 8010ea0:	4bd7      	ldr	r3, [pc, #860]	; (8011200 <__ieee754_pow+0x740>)
 8010ea2:	ea03 0309 	and.w	r3, r3, r9
 8010ea6:	2200      	movs	r2, #0
 8010ea8:	b92b      	cbnz	r3, 8010eb6 <__ieee754_pow+0x3f6>
 8010eaa:	4bd6      	ldr	r3, [pc, #856]	; (8011204 <__ieee754_pow+0x744>)
 8010eac:	f7f2 f974 	bl	8003198 <__aeabi_dmul>
 8010eb0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8010eb4:	460c      	mov	r4, r1
 8010eb6:	1523      	asrs	r3, r4, #20
 8010eb8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010ebc:	4413      	add	r3, r2
 8010ebe:	9309      	str	r3, [sp, #36]	; 0x24
 8010ec0:	4bd1      	ldr	r3, [pc, #836]	; (8011208 <__ieee754_pow+0x748>)
 8010ec2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8010ec6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8010eca:	429c      	cmp	r4, r3
 8010ecc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8010ed0:	dd08      	ble.n	8010ee4 <__ieee754_pow+0x424>
 8010ed2:	4bce      	ldr	r3, [pc, #824]	; (801120c <__ieee754_pow+0x74c>)
 8010ed4:	429c      	cmp	r4, r3
 8010ed6:	f340 8163 	ble.w	80111a0 <__ieee754_pow+0x6e0>
 8010eda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010edc:	3301      	adds	r3, #1
 8010ede:	9309      	str	r3, [sp, #36]	; 0x24
 8010ee0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8010ee4:	2400      	movs	r4, #0
 8010ee6:	00e3      	lsls	r3, r4, #3
 8010ee8:	930b      	str	r3, [sp, #44]	; 0x2c
 8010eea:	4bc9      	ldr	r3, [pc, #804]	; (8011210 <__ieee754_pow+0x750>)
 8010eec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010ef0:	ed93 7b00 	vldr	d7, [r3]
 8010ef4:	4629      	mov	r1, r5
 8010ef6:	ec53 2b17 	vmov	r2, r3, d7
 8010efa:	eeb0 8a47 	vmov.f32	s16, s14
 8010efe:	eef0 8a67 	vmov.f32	s17, s15
 8010f02:	4682      	mov	sl, r0
 8010f04:	f7f1 ff90 	bl	8002e28 <__aeabi_dsub>
 8010f08:	4652      	mov	r2, sl
 8010f0a:	4606      	mov	r6, r0
 8010f0c:	460f      	mov	r7, r1
 8010f0e:	462b      	mov	r3, r5
 8010f10:	ec51 0b18 	vmov	r0, r1, d8
 8010f14:	f7f1 ff8a 	bl	8002e2c <__adddf3>
 8010f18:	4602      	mov	r2, r0
 8010f1a:	460b      	mov	r3, r1
 8010f1c:	2000      	movs	r0, #0
 8010f1e:	49bd      	ldr	r1, [pc, #756]	; (8011214 <__ieee754_pow+0x754>)
 8010f20:	f7f2 fa64 	bl	80033ec <__aeabi_ddiv>
 8010f24:	ec41 0b19 	vmov	d9, r0, r1
 8010f28:	4602      	mov	r2, r0
 8010f2a:	460b      	mov	r3, r1
 8010f2c:	4630      	mov	r0, r6
 8010f2e:	4639      	mov	r1, r7
 8010f30:	f7f2 f932 	bl	8003198 <__aeabi_dmul>
 8010f34:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010f38:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010f3c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010f40:	2300      	movs	r3, #0
 8010f42:	9304      	str	r3, [sp, #16]
 8010f44:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8010f48:	46ab      	mov	fp, r5
 8010f4a:	106d      	asrs	r5, r5, #1
 8010f4c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8010f50:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8010f54:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8010f58:	2200      	movs	r2, #0
 8010f5a:	4640      	mov	r0, r8
 8010f5c:	4649      	mov	r1, r9
 8010f5e:	4614      	mov	r4, r2
 8010f60:	461d      	mov	r5, r3
 8010f62:	f7f2 f919 	bl	8003198 <__aeabi_dmul>
 8010f66:	4602      	mov	r2, r0
 8010f68:	460b      	mov	r3, r1
 8010f6a:	4630      	mov	r0, r6
 8010f6c:	4639      	mov	r1, r7
 8010f6e:	f7f1 ff5b 	bl	8002e28 <__aeabi_dsub>
 8010f72:	ec53 2b18 	vmov	r2, r3, d8
 8010f76:	4606      	mov	r6, r0
 8010f78:	460f      	mov	r7, r1
 8010f7a:	4620      	mov	r0, r4
 8010f7c:	4629      	mov	r1, r5
 8010f7e:	f7f1 ff53 	bl	8002e28 <__aeabi_dsub>
 8010f82:	4602      	mov	r2, r0
 8010f84:	460b      	mov	r3, r1
 8010f86:	4650      	mov	r0, sl
 8010f88:	4659      	mov	r1, fp
 8010f8a:	f7f1 ff4d 	bl	8002e28 <__aeabi_dsub>
 8010f8e:	4642      	mov	r2, r8
 8010f90:	464b      	mov	r3, r9
 8010f92:	f7f2 f901 	bl	8003198 <__aeabi_dmul>
 8010f96:	4602      	mov	r2, r0
 8010f98:	460b      	mov	r3, r1
 8010f9a:	4630      	mov	r0, r6
 8010f9c:	4639      	mov	r1, r7
 8010f9e:	f7f1 ff43 	bl	8002e28 <__aeabi_dsub>
 8010fa2:	ec53 2b19 	vmov	r2, r3, d9
 8010fa6:	f7f2 f8f7 	bl	8003198 <__aeabi_dmul>
 8010faa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010fae:	ec41 0b18 	vmov	d8, r0, r1
 8010fb2:	4610      	mov	r0, r2
 8010fb4:	4619      	mov	r1, r3
 8010fb6:	f7f2 f8ef 	bl	8003198 <__aeabi_dmul>
 8010fba:	a37d      	add	r3, pc, #500	; (adr r3, 80111b0 <__ieee754_pow+0x6f0>)
 8010fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fc0:	4604      	mov	r4, r0
 8010fc2:	460d      	mov	r5, r1
 8010fc4:	f7f2 f8e8 	bl	8003198 <__aeabi_dmul>
 8010fc8:	a37b      	add	r3, pc, #492	; (adr r3, 80111b8 <__ieee754_pow+0x6f8>)
 8010fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fce:	f7f1 ff2d 	bl	8002e2c <__adddf3>
 8010fd2:	4622      	mov	r2, r4
 8010fd4:	462b      	mov	r3, r5
 8010fd6:	f7f2 f8df 	bl	8003198 <__aeabi_dmul>
 8010fda:	a379      	add	r3, pc, #484	; (adr r3, 80111c0 <__ieee754_pow+0x700>)
 8010fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fe0:	f7f1 ff24 	bl	8002e2c <__adddf3>
 8010fe4:	4622      	mov	r2, r4
 8010fe6:	462b      	mov	r3, r5
 8010fe8:	f7f2 f8d6 	bl	8003198 <__aeabi_dmul>
 8010fec:	a376      	add	r3, pc, #472	; (adr r3, 80111c8 <__ieee754_pow+0x708>)
 8010fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ff2:	f7f1 ff1b 	bl	8002e2c <__adddf3>
 8010ff6:	4622      	mov	r2, r4
 8010ff8:	462b      	mov	r3, r5
 8010ffa:	f7f2 f8cd 	bl	8003198 <__aeabi_dmul>
 8010ffe:	a374      	add	r3, pc, #464	; (adr r3, 80111d0 <__ieee754_pow+0x710>)
 8011000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011004:	f7f1 ff12 	bl	8002e2c <__adddf3>
 8011008:	4622      	mov	r2, r4
 801100a:	462b      	mov	r3, r5
 801100c:	f7f2 f8c4 	bl	8003198 <__aeabi_dmul>
 8011010:	a371      	add	r3, pc, #452	; (adr r3, 80111d8 <__ieee754_pow+0x718>)
 8011012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011016:	f7f1 ff09 	bl	8002e2c <__adddf3>
 801101a:	4622      	mov	r2, r4
 801101c:	4606      	mov	r6, r0
 801101e:	460f      	mov	r7, r1
 8011020:	462b      	mov	r3, r5
 8011022:	4620      	mov	r0, r4
 8011024:	4629      	mov	r1, r5
 8011026:	f7f2 f8b7 	bl	8003198 <__aeabi_dmul>
 801102a:	4602      	mov	r2, r0
 801102c:	460b      	mov	r3, r1
 801102e:	4630      	mov	r0, r6
 8011030:	4639      	mov	r1, r7
 8011032:	f7f2 f8b1 	bl	8003198 <__aeabi_dmul>
 8011036:	4642      	mov	r2, r8
 8011038:	4604      	mov	r4, r0
 801103a:	460d      	mov	r5, r1
 801103c:	464b      	mov	r3, r9
 801103e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011042:	f7f1 fef3 	bl	8002e2c <__adddf3>
 8011046:	ec53 2b18 	vmov	r2, r3, d8
 801104a:	f7f2 f8a5 	bl	8003198 <__aeabi_dmul>
 801104e:	4622      	mov	r2, r4
 8011050:	462b      	mov	r3, r5
 8011052:	f7f1 feeb 	bl	8002e2c <__adddf3>
 8011056:	4642      	mov	r2, r8
 8011058:	4682      	mov	sl, r0
 801105a:	468b      	mov	fp, r1
 801105c:	464b      	mov	r3, r9
 801105e:	4640      	mov	r0, r8
 8011060:	4649      	mov	r1, r9
 8011062:	f7f2 f899 	bl	8003198 <__aeabi_dmul>
 8011066:	4b6c      	ldr	r3, [pc, #432]	; (8011218 <__ieee754_pow+0x758>)
 8011068:	2200      	movs	r2, #0
 801106a:	4606      	mov	r6, r0
 801106c:	460f      	mov	r7, r1
 801106e:	f7f1 fedd 	bl	8002e2c <__adddf3>
 8011072:	4652      	mov	r2, sl
 8011074:	465b      	mov	r3, fp
 8011076:	f7f1 fed9 	bl	8002e2c <__adddf3>
 801107a:	9c04      	ldr	r4, [sp, #16]
 801107c:	460d      	mov	r5, r1
 801107e:	4622      	mov	r2, r4
 8011080:	460b      	mov	r3, r1
 8011082:	4640      	mov	r0, r8
 8011084:	4649      	mov	r1, r9
 8011086:	f7f2 f887 	bl	8003198 <__aeabi_dmul>
 801108a:	4b63      	ldr	r3, [pc, #396]	; (8011218 <__ieee754_pow+0x758>)
 801108c:	4680      	mov	r8, r0
 801108e:	4689      	mov	r9, r1
 8011090:	2200      	movs	r2, #0
 8011092:	4620      	mov	r0, r4
 8011094:	4629      	mov	r1, r5
 8011096:	f7f1 fec7 	bl	8002e28 <__aeabi_dsub>
 801109a:	4632      	mov	r2, r6
 801109c:	463b      	mov	r3, r7
 801109e:	f7f1 fec3 	bl	8002e28 <__aeabi_dsub>
 80110a2:	4602      	mov	r2, r0
 80110a4:	460b      	mov	r3, r1
 80110a6:	4650      	mov	r0, sl
 80110a8:	4659      	mov	r1, fp
 80110aa:	f7f1 febd 	bl	8002e28 <__aeabi_dsub>
 80110ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80110b2:	f7f2 f871 	bl	8003198 <__aeabi_dmul>
 80110b6:	4622      	mov	r2, r4
 80110b8:	4606      	mov	r6, r0
 80110ba:	460f      	mov	r7, r1
 80110bc:	462b      	mov	r3, r5
 80110be:	ec51 0b18 	vmov	r0, r1, d8
 80110c2:	f7f2 f869 	bl	8003198 <__aeabi_dmul>
 80110c6:	4602      	mov	r2, r0
 80110c8:	460b      	mov	r3, r1
 80110ca:	4630      	mov	r0, r6
 80110cc:	4639      	mov	r1, r7
 80110ce:	f7f1 fead 	bl	8002e2c <__adddf3>
 80110d2:	4606      	mov	r6, r0
 80110d4:	460f      	mov	r7, r1
 80110d6:	4602      	mov	r2, r0
 80110d8:	460b      	mov	r3, r1
 80110da:	4640      	mov	r0, r8
 80110dc:	4649      	mov	r1, r9
 80110de:	f7f1 fea5 	bl	8002e2c <__adddf3>
 80110e2:	9c04      	ldr	r4, [sp, #16]
 80110e4:	a33e      	add	r3, pc, #248	; (adr r3, 80111e0 <__ieee754_pow+0x720>)
 80110e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110ea:	4620      	mov	r0, r4
 80110ec:	460d      	mov	r5, r1
 80110ee:	f7f2 f853 	bl	8003198 <__aeabi_dmul>
 80110f2:	4642      	mov	r2, r8
 80110f4:	ec41 0b18 	vmov	d8, r0, r1
 80110f8:	464b      	mov	r3, r9
 80110fa:	4620      	mov	r0, r4
 80110fc:	4629      	mov	r1, r5
 80110fe:	f7f1 fe93 	bl	8002e28 <__aeabi_dsub>
 8011102:	4602      	mov	r2, r0
 8011104:	460b      	mov	r3, r1
 8011106:	4630      	mov	r0, r6
 8011108:	4639      	mov	r1, r7
 801110a:	f7f1 fe8d 	bl	8002e28 <__aeabi_dsub>
 801110e:	a336      	add	r3, pc, #216	; (adr r3, 80111e8 <__ieee754_pow+0x728>)
 8011110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011114:	f7f2 f840 	bl	8003198 <__aeabi_dmul>
 8011118:	a335      	add	r3, pc, #212	; (adr r3, 80111f0 <__ieee754_pow+0x730>)
 801111a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801111e:	4606      	mov	r6, r0
 8011120:	460f      	mov	r7, r1
 8011122:	4620      	mov	r0, r4
 8011124:	4629      	mov	r1, r5
 8011126:	f7f2 f837 	bl	8003198 <__aeabi_dmul>
 801112a:	4602      	mov	r2, r0
 801112c:	460b      	mov	r3, r1
 801112e:	4630      	mov	r0, r6
 8011130:	4639      	mov	r1, r7
 8011132:	f7f1 fe7b 	bl	8002e2c <__adddf3>
 8011136:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011138:	4b38      	ldr	r3, [pc, #224]	; (801121c <__ieee754_pow+0x75c>)
 801113a:	4413      	add	r3, r2
 801113c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011140:	f7f1 fe74 	bl	8002e2c <__adddf3>
 8011144:	4682      	mov	sl, r0
 8011146:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011148:	468b      	mov	fp, r1
 801114a:	f7f1 ffbb 	bl	80030c4 <__aeabi_i2d>
 801114e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011150:	4b33      	ldr	r3, [pc, #204]	; (8011220 <__ieee754_pow+0x760>)
 8011152:	4413      	add	r3, r2
 8011154:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011158:	4606      	mov	r6, r0
 801115a:	460f      	mov	r7, r1
 801115c:	4652      	mov	r2, sl
 801115e:	465b      	mov	r3, fp
 8011160:	ec51 0b18 	vmov	r0, r1, d8
 8011164:	f7f1 fe62 	bl	8002e2c <__adddf3>
 8011168:	4642      	mov	r2, r8
 801116a:	464b      	mov	r3, r9
 801116c:	f7f1 fe5e 	bl	8002e2c <__adddf3>
 8011170:	4632      	mov	r2, r6
 8011172:	463b      	mov	r3, r7
 8011174:	f7f1 fe5a 	bl	8002e2c <__adddf3>
 8011178:	9c04      	ldr	r4, [sp, #16]
 801117a:	4632      	mov	r2, r6
 801117c:	463b      	mov	r3, r7
 801117e:	4620      	mov	r0, r4
 8011180:	460d      	mov	r5, r1
 8011182:	f7f1 fe51 	bl	8002e28 <__aeabi_dsub>
 8011186:	4642      	mov	r2, r8
 8011188:	464b      	mov	r3, r9
 801118a:	f7f1 fe4d 	bl	8002e28 <__aeabi_dsub>
 801118e:	ec53 2b18 	vmov	r2, r3, d8
 8011192:	f7f1 fe49 	bl	8002e28 <__aeabi_dsub>
 8011196:	4602      	mov	r2, r0
 8011198:	460b      	mov	r3, r1
 801119a:	4650      	mov	r0, sl
 801119c:	4659      	mov	r1, fp
 801119e:	e606      	b.n	8010dae <__ieee754_pow+0x2ee>
 80111a0:	2401      	movs	r4, #1
 80111a2:	e6a0      	b.n	8010ee6 <__ieee754_pow+0x426>
 80111a4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80111f8 <__ieee754_pow+0x738>
 80111a8:	e60d      	b.n	8010dc6 <__ieee754_pow+0x306>
 80111aa:	bf00      	nop
 80111ac:	f3af 8000 	nop.w
 80111b0:	4a454eef 	.word	0x4a454eef
 80111b4:	3fca7e28 	.word	0x3fca7e28
 80111b8:	93c9db65 	.word	0x93c9db65
 80111bc:	3fcd864a 	.word	0x3fcd864a
 80111c0:	a91d4101 	.word	0xa91d4101
 80111c4:	3fd17460 	.word	0x3fd17460
 80111c8:	518f264d 	.word	0x518f264d
 80111cc:	3fd55555 	.word	0x3fd55555
 80111d0:	db6fabff 	.word	0xdb6fabff
 80111d4:	3fdb6db6 	.word	0x3fdb6db6
 80111d8:	33333303 	.word	0x33333303
 80111dc:	3fe33333 	.word	0x3fe33333
 80111e0:	e0000000 	.word	0xe0000000
 80111e4:	3feec709 	.word	0x3feec709
 80111e8:	dc3a03fd 	.word	0xdc3a03fd
 80111ec:	3feec709 	.word	0x3feec709
 80111f0:	145b01f5 	.word	0x145b01f5
 80111f4:	be3e2fe0 	.word	0xbe3e2fe0
 80111f8:	00000000 	.word	0x00000000
 80111fc:	3ff00000 	.word	0x3ff00000
 8011200:	7ff00000 	.word	0x7ff00000
 8011204:	43400000 	.word	0x43400000
 8011208:	0003988e 	.word	0x0003988e
 801120c:	000bb679 	.word	0x000bb679
 8011210:	08013bb0 	.word	0x08013bb0
 8011214:	3ff00000 	.word	0x3ff00000
 8011218:	40080000 	.word	0x40080000
 801121c:	08013bd0 	.word	0x08013bd0
 8011220:	08013bc0 	.word	0x08013bc0
 8011224:	a3b5      	add	r3, pc, #724	; (adr r3, 80114fc <__ieee754_pow+0xa3c>)
 8011226:	e9d3 2300 	ldrd	r2, r3, [r3]
 801122a:	4640      	mov	r0, r8
 801122c:	4649      	mov	r1, r9
 801122e:	f7f1 fdfd 	bl	8002e2c <__adddf3>
 8011232:	4622      	mov	r2, r4
 8011234:	ec41 0b1a 	vmov	d10, r0, r1
 8011238:	462b      	mov	r3, r5
 801123a:	4630      	mov	r0, r6
 801123c:	4639      	mov	r1, r7
 801123e:	f7f1 fdf3 	bl	8002e28 <__aeabi_dsub>
 8011242:	4602      	mov	r2, r0
 8011244:	460b      	mov	r3, r1
 8011246:	ec51 0b1a 	vmov	r0, r1, d10
 801124a:	f7f2 fa35 	bl	80036b8 <__aeabi_dcmpgt>
 801124e:	2800      	cmp	r0, #0
 8011250:	f47f adf8 	bne.w	8010e44 <__ieee754_pow+0x384>
 8011254:	4aa4      	ldr	r2, [pc, #656]	; (80114e8 <__ieee754_pow+0xa28>)
 8011256:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801125a:	4293      	cmp	r3, r2
 801125c:	f340 810b 	ble.w	8011476 <__ieee754_pow+0x9b6>
 8011260:	151b      	asrs	r3, r3, #20
 8011262:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8011266:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801126a:	fa4a f303 	asr.w	r3, sl, r3
 801126e:	445b      	add	r3, fp
 8011270:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8011274:	4e9d      	ldr	r6, [pc, #628]	; (80114ec <__ieee754_pow+0xa2c>)
 8011276:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801127a:	4116      	asrs	r6, r2
 801127c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8011280:	2000      	movs	r0, #0
 8011282:	ea23 0106 	bic.w	r1, r3, r6
 8011286:	f1c2 0214 	rsb	r2, r2, #20
 801128a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801128e:	fa4a fa02 	asr.w	sl, sl, r2
 8011292:	f1bb 0f00 	cmp.w	fp, #0
 8011296:	4602      	mov	r2, r0
 8011298:	460b      	mov	r3, r1
 801129a:	4620      	mov	r0, r4
 801129c:	4629      	mov	r1, r5
 801129e:	bfb8      	it	lt
 80112a0:	f1ca 0a00 	rsblt	sl, sl, #0
 80112a4:	f7f1 fdc0 	bl	8002e28 <__aeabi_dsub>
 80112a8:	ec41 0b19 	vmov	d9, r0, r1
 80112ac:	4642      	mov	r2, r8
 80112ae:	464b      	mov	r3, r9
 80112b0:	ec51 0b19 	vmov	r0, r1, d9
 80112b4:	f7f1 fdba 	bl	8002e2c <__adddf3>
 80112b8:	2400      	movs	r4, #0
 80112ba:	a379      	add	r3, pc, #484	; (adr r3, 80114a0 <__ieee754_pow+0x9e0>)
 80112bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112c0:	4620      	mov	r0, r4
 80112c2:	460d      	mov	r5, r1
 80112c4:	f7f1 ff68 	bl	8003198 <__aeabi_dmul>
 80112c8:	ec53 2b19 	vmov	r2, r3, d9
 80112cc:	4606      	mov	r6, r0
 80112ce:	460f      	mov	r7, r1
 80112d0:	4620      	mov	r0, r4
 80112d2:	4629      	mov	r1, r5
 80112d4:	f7f1 fda8 	bl	8002e28 <__aeabi_dsub>
 80112d8:	4602      	mov	r2, r0
 80112da:	460b      	mov	r3, r1
 80112dc:	4640      	mov	r0, r8
 80112de:	4649      	mov	r1, r9
 80112e0:	f7f1 fda2 	bl	8002e28 <__aeabi_dsub>
 80112e4:	a370      	add	r3, pc, #448	; (adr r3, 80114a8 <__ieee754_pow+0x9e8>)
 80112e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112ea:	f7f1 ff55 	bl	8003198 <__aeabi_dmul>
 80112ee:	a370      	add	r3, pc, #448	; (adr r3, 80114b0 <__ieee754_pow+0x9f0>)
 80112f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112f4:	4680      	mov	r8, r0
 80112f6:	4689      	mov	r9, r1
 80112f8:	4620      	mov	r0, r4
 80112fa:	4629      	mov	r1, r5
 80112fc:	f7f1 ff4c 	bl	8003198 <__aeabi_dmul>
 8011300:	4602      	mov	r2, r0
 8011302:	460b      	mov	r3, r1
 8011304:	4640      	mov	r0, r8
 8011306:	4649      	mov	r1, r9
 8011308:	f7f1 fd90 	bl	8002e2c <__adddf3>
 801130c:	4604      	mov	r4, r0
 801130e:	460d      	mov	r5, r1
 8011310:	4602      	mov	r2, r0
 8011312:	460b      	mov	r3, r1
 8011314:	4630      	mov	r0, r6
 8011316:	4639      	mov	r1, r7
 8011318:	f7f1 fd88 	bl	8002e2c <__adddf3>
 801131c:	4632      	mov	r2, r6
 801131e:	463b      	mov	r3, r7
 8011320:	4680      	mov	r8, r0
 8011322:	4689      	mov	r9, r1
 8011324:	f7f1 fd80 	bl	8002e28 <__aeabi_dsub>
 8011328:	4602      	mov	r2, r0
 801132a:	460b      	mov	r3, r1
 801132c:	4620      	mov	r0, r4
 801132e:	4629      	mov	r1, r5
 8011330:	f7f1 fd7a 	bl	8002e28 <__aeabi_dsub>
 8011334:	4642      	mov	r2, r8
 8011336:	4606      	mov	r6, r0
 8011338:	460f      	mov	r7, r1
 801133a:	464b      	mov	r3, r9
 801133c:	4640      	mov	r0, r8
 801133e:	4649      	mov	r1, r9
 8011340:	f7f1 ff2a 	bl	8003198 <__aeabi_dmul>
 8011344:	a35c      	add	r3, pc, #368	; (adr r3, 80114b8 <__ieee754_pow+0x9f8>)
 8011346:	e9d3 2300 	ldrd	r2, r3, [r3]
 801134a:	4604      	mov	r4, r0
 801134c:	460d      	mov	r5, r1
 801134e:	f7f1 ff23 	bl	8003198 <__aeabi_dmul>
 8011352:	a35b      	add	r3, pc, #364	; (adr r3, 80114c0 <__ieee754_pow+0xa00>)
 8011354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011358:	f7f1 fd66 	bl	8002e28 <__aeabi_dsub>
 801135c:	4622      	mov	r2, r4
 801135e:	462b      	mov	r3, r5
 8011360:	f7f1 ff1a 	bl	8003198 <__aeabi_dmul>
 8011364:	a358      	add	r3, pc, #352	; (adr r3, 80114c8 <__ieee754_pow+0xa08>)
 8011366:	e9d3 2300 	ldrd	r2, r3, [r3]
 801136a:	f7f1 fd5f 	bl	8002e2c <__adddf3>
 801136e:	4622      	mov	r2, r4
 8011370:	462b      	mov	r3, r5
 8011372:	f7f1 ff11 	bl	8003198 <__aeabi_dmul>
 8011376:	a356      	add	r3, pc, #344	; (adr r3, 80114d0 <__ieee754_pow+0xa10>)
 8011378:	e9d3 2300 	ldrd	r2, r3, [r3]
 801137c:	f7f1 fd54 	bl	8002e28 <__aeabi_dsub>
 8011380:	4622      	mov	r2, r4
 8011382:	462b      	mov	r3, r5
 8011384:	f7f1 ff08 	bl	8003198 <__aeabi_dmul>
 8011388:	a353      	add	r3, pc, #332	; (adr r3, 80114d8 <__ieee754_pow+0xa18>)
 801138a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801138e:	f7f1 fd4d 	bl	8002e2c <__adddf3>
 8011392:	4622      	mov	r2, r4
 8011394:	462b      	mov	r3, r5
 8011396:	f7f1 feff 	bl	8003198 <__aeabi_dmul>
 801139a:	4602      	mov	r2, r0
 801139c:	460b      	mov	r3, r1
 801139e:	4640      	mov	r0, r8
 80113a0:	4649      	mov	r1, r9
 80113a2:	f7f1 fd41 	bl	8002e28 <__aeabi_dsub>
 80113a6:	4604      	mov	r4, r0
 80113a8:	460d      	mov	r5, r1
 80113aa:	4602      	mov	r2, r0
 80113ac:	460b      	mov	r3, r1
 80113ae:	4640      	mov	r0, r8
 80113b0:	4649      	mov	r1, r9
 80113b2:	f7f1 fef1 	bl	8003198 <__aeabi_dmul>
 80113b6:	2200      	movs	r2, #0
 80113b8:	ec41 0b19 	vmov	d9, r0, r1
 80113bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80113c0:	4620      	mov	r0, r4
 80113c2:	4629      	mov	r1, r5
 80113c4:	f7f1 fd30 	bl	8002e28 <__aeabi_dsub>
 80113c8:	4602      	mov	r2, r0
 80113ca:	460b      	mov	r3, r1
 80113cc:	ec51 0b19 	vmov	r0, r1, d9
 80113d0:	f7f2 f80c 	bl	80033ec <__aeabi_ddiv>
 80113d4:	4632      	mov	r2, r6
 80113d6:	4604      	mov	r4, r0
 80113d8:	460d      	mov	r5, r1
 80113da:	463b      	mov	r3, r7
 80113dc:	4640      	mov	r0, r8
 80113de:	4649      	mov	r1, r9
 80113e0:	f7f1 feda 	bl	8003198 <__aeabi_dmul>
 80113e4:	4632      	mov	r2, r6
 80113e6:	463b      	mov	r3, r7
 80113e8:	f7f1 fd20 	bl	8002e2c <__adddf3>
 80113ec:	4602      	mov	r2, r0
 80113ee:	460b      	mov	r3, r1
 80113f0:	4620      	mov	r0, r4
 80113f2:	4629      	mov	r1, r5
 80113f4:	f7f1 fd18 	bl	8002e28 <__aeabi_dsub>
 80113f8:	4642      	mov	r2, r8
 80113fa:	464b      	mov	r3, r9
 80113fc:	f7f1 fd14 	bl	8002e28 <__aeabi_dsub>
 8011400:	460b      	mov	r3, r1
 8011402:	4602      	mov	r2, r0
 8011404:	493a      	ldr	r1, [pc, #232]	; (80114f0 <__ieee754_pow+0xa30>)
 8011406:	2000      	movs	r0, #0
 8011408:	f7f1 fd0e 	bl	8002e28 <__aeabi_dsub>
 801140c:	e9cd 0100 	strd	r0, r1, [sp]
 8011410:	9b01      	ldr	r3, [sp, #4]
 8011412:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8011416:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801141a:	da2f      	bge.n	801147c <__ieee754_pow+0x9bc>
 801141c:	4650      	mov	r0, sl
 801141e:	ed9d 0b00 	vldr	d0, [sp]
 8011422:	f000 ffd1 	bl	80123c8 <scalbn>
 8011426:	ec51 0b10 	vmov	r0, r1, d0
 801142a:	ec53 2b18 	vmov	r2, r3, d8
 801142e:	f7ff bbe0 	b.w	8010bf2 <__ieee754_pow+0x132>
 8011432:	4b30      	ldr	r3, [pc, #192]	; (80114f4 <__ieee754_pow+0xa34>)
 8011434:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8011438:	429e      	cmp	r6, r3
 801143a:	f77f af0b 	ble.w	8011254 <__ieee754_pow+0x794>
 801143e:	4b2e      	ldr	r3, [pc, #184]	; (80114f8 <__ieee754_pow+0xa38>)
 8011440:	440b      	add	r3, r1
 8011442:	4303      	orrs	r3, r0
 8011444:	d00b      	beq.n	801145e <__ieee754_pow+0x99e>
 8011446:	a326      	add	r3, pc, #152	; (adr r3, 80114e0 <__ieee754_pow+0xa20>)
 8011448:	e9d3 2300 	ldrd	r2, r3, [r3]
 801144c:	ec51 0b18 	vmov	r0, r1, d8
 8011450:	f7f1 fea2 	bl	8003198 <__aeabi_dmul>
 8011454:	a322      	add	r3, pc, #136	; (adr r3, 80114e0 <__ieee754_pow+0xa20>)
 8011456:	e9d3 2300 	ldrd	r2, r3, [r3]
 801145a:	f7ff bbca 	b.w	8010bf2 <__ieee754_pow+0x132>
 801145e:	4622      	mov	r2, r4
 8011460:	462b      	mov	r3, r5
 8011462:	f7f1 fce1 	bl	8002e28 <__aeabi_dsub>
 8011466:	4642      	mov	r2, r8
 8011468:	464b      	mov	r3, r9
 801146a:	f7f2 f91b 	bl	80036a4 <__aeabi_dcmpge>
 801146e:	2800      	cmp	r0, #0
 8011470:	f43f aef0 	beq.w	8011254 <__ieee754_pow+0x794>
 8011474:	e7e7      	b.n	8011446 <__ieee754_pow+0x986>
 8011476:	f04f 0a00 	mov.w	sl, #0
 801147a:	e717      	b.n	80112ac <__ieee754_pow+0x7ec>
 801147c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011480:	4619      	mov	r1, r3
 8011482:	e7d2      	b.n	801142a <__ieee754_pow+0x96a>
 8011484:	491a      	ldr	r1, [pc, #104]	; (80114f0 <__ieee754_pow+0xa30>)
 8011486:	2000      	movs	r0, #0
 8011488:	f7ff bb9e 	b.w	8010bc8 <__ieee754_pow+0x108>
 801148c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011490:	f7ff bb9a 	b.w	8010bc8 <__ieee754_pow+0x108>
 8011494:	9000      	str	r0, [sp, #0]
 8011496:	f7ff bb76 	b.w	8010b86 <__ieee754_pow+0xc6>
 801149a:	2100      	movs	r1, #0
 801149c:	f7ff bb60 	b.w	8010b60 <__ieee754_pow+0xa0>
 80114a0:	00000000 	.word	0x00000000
 80114a4:	3fe62e43 	.word	0x3fe62e43
 80114a8:	fefa39ef 	.word	0xfefa39ef
 80114ac:	3fe62e42 	.word	0x3fe62e42
 80114b0:	0ca86c39 	.word	0x0ca86c39
 80114b4:	be205c61 	.word	0xbe205c61
 80114b8:	72bea4d0 	.word	0x72bea4d0
 80114bc:	3e663769 	.word	0x3e663769
 80114c0:	c5d26bf1 	.word	0xc5d26bf1
 80114c4:	3ebbbd41 	.word	0x3ebbbd41
 80114c8:	af25de2c 	.word	0xaf25de2c
 80114cc:	3f11566a 	.word	0x3f11566a
 80114d0:	16bebd93 	.word	0x16bebd93
 80114d4:	3f66c16c 	.word	0x3f66c16c
 80114d8:	5555553e 	.word	0x5555553e
 80114dc:	3fc55555 	.word	0x3fc55555
 80114e0:	c2f8f359 	.word	0xc2f8f359
 80114e4:	01a56e1f 	.word	0x01a56e1f
 80114e8:	3fe00000 	.word	0x3fe00000
 80114ec:	000fffff 	.word	0x000fffff
 80114f0:	3ff00000 	.word	0x3ff00000
 80114f4:	4090cbff 	.word	0x4090cbff
 80114f8:	3f6f3400 	.word	0x3f6f3400
 80114fc:	652b82fe 	.word	0x652b82fe
 8011500:	3c971547 	.word	0x3c971547

08011504 <__ieee754_sqrt>:
 8011504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011508:	ec55 4b10 	vmov	r4, r5, d0
 801150c:	4e56      	ldr	r6, [pc, #344]	; (8011668 <__ieee754_sqrt+0x164>)
 801150e:	43ae      	bics	r6, r5
 8011510:	ee10 0a10 	vmov	r0, s0
 8011514:	ee10 3a10 	vmov	r3, s0
 8011518:	4629      	mov	r1, r5
 801151a:	462a      	mov	r2, r5
 801151c:	d110      	bne.n	8011540 <__ieee754_sqrt+0x3c>
 801151e:	ee10 2a10 	vmov	r2, s0
 8011522:	462b      	mov	r3, r5
 8011524:	f7f1 fe38 	bl	8003198 <__aeabi_dmul>
 8011528:	4602      	mov	r2, r0
 801152a:	460b      	mov	r3, r1
 801152c:	4620      	mov	r0, r4
 801152e:	4629      	mov	r1, r5
 8011530:	f7f1 fc7c 	bl	8002e2c <__adddf3>
 8011534:	4604      	mov	r4, r0
 8011536:	460d      	mov	r5, r1
 8011538:	ec45 4b10 	vmov	d0, r4, r5
 801153c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011540:	2d00      	cmp	r5, #0
 8011542:	dc10      	bgt.n	8011566 <__ieee754_sqrt+0x62>
 8011544:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011548:	4330      	orrs	r0, r6
 801154a:	d0f5      	beq.n	8011538 <__ieee754_sqrt+0x34>
 801154c:	b15d      	cbz	r5, 8011566 <__ieee754_sqrt+0x62>
 801154e:	ee10 2a10 	vmov	r2, s0
 8011552:	462b      	mov	r3, r5
 8011554:	ee10 0a10 	vmov	r0, s0
 8011558:	f7f1 fc66 	bl	8002e28 <__aeabi_dsub>
 801155c:	4602      	mov	r2, r0
 801155e:	460b      	mov	r3, r1
 8011560:	f7f1 ff44 	bl	80033ec <__aeabi_ddiv>
 8011564:	e7e6      	b.n	8011534 <__ieee754_sqrt+0x30>
 8011566:	1509      	asrs	r1, r1, #20
 8011568:	d076      	beq.n	8011658 <__ieee754_sqrt+0x154>
 801156a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801156e:	07ce      	lsls	r6, r1, #31
 8011570:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8011574:	bf5e      	ittt	pl
 8011576:	0fda      	lsrpl	r2, r3, #31
 8011578:	005b      	lslpl	r3, r3, #1
 801157a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801157e:	0fda      	lsrs	r2, r3, #31
 8011580:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8011584:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8011588:	2000      	movs	r0, #0
 801158a:	106d      	asrs	r5, r5, #1
 801158c:	005b      	lsls	r3, r3, #1
 801158e:	f04f 0e16 	mov.w	lr, #22
 8011592:	4684      	mov	ip, r0
 8011594:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011598:	eb0c 0401 	add.w	r4, ip, r1
 801159c:	4294      	cmp	r4, r2
 801159e:	bfde      	ittt	le
 80115a0:	1b12      	suble	r2, r2, r4
 80115a2:	eb04 0c01 	addle.w	ip, r4, r1
 80115a6:	1840      	addle	r0, r0, r1
 80115a8:	0052      	lsls	r2, r2, #1
 80115aa:	f1be 0e01 	subs.w	lr, lr, #1
 80115ae:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80115b2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80115b6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80115ba:	d1ed      	bne.n	8011598 <__ieee754_sqrt+0x94>
 80115bc:	4671      	mov	r1, lr
 80115be:	2720      	movs	r7, #32
 80115c0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80115c4:	4562      	cmp	r2, ip
 80115c6:	eb04 060e 	add.w	r6, r4, lr
 80115ca:	dc02      	bgt.n	80115d2 <__ieee754_sqrt+0xce>
 80115cc:	d113      	bne.n	80115f6 <__ieee754_sqrt+0xf2>
 80115ce:	429e      	cmp	r6, r3
 80115d0:	d811      	bhi.n	80115f6 <__ieee754_sqrt+0xf2>
 80115d2:	2e00      	cmp	r6, #0
 80115d4:	eb06 0e04 	add.w	lr, r6, r4
 80115d8:	da43      	bge.n	8011662 <__ieee754_sqrt+0x15e>
 80115da:	f1be 0f00 	cmp.w	lr, #0
 80115de:	db40      	blt.n	8011662 <__ieee754_sqrt+0x15e>
 80115e0:	f10c 0801 	add.w	r8, ip, #1
 80115e4:	eba2 020c 	sub.w	r2, r2, ip
 80115e8:	429e      	cmp	r6, r3
 80115ea:	bf88      	it	hi
 80115ec:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80115f0:	1b9b      	subs	r3, r3, r6
 80115f2:	4421      	add	r1, r4
 80115f4:	46c4      	mov	ip, r8
 80115f6:	0052      	lsls	r2, r2, #1
 80115f8:	3f01      	subs	r7, #1
 80115fa:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80115fe:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8011602:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011606:	d1dd      	bne.n	80115c4 <__ieee754_sqrt+0xc0>
 8011608:	4313      	orrs	r3, r2
 801160a:	d006      	beq.n	801161a <__ieee754_sqrt+0x116>
 801160c:	1c4c      	adds	r4, r1, #1
 801160e:	bf13      	iteet	ne
 8011610:	3101      	addne	r1, #1
 8011612:	3001      	addeq	r0, #1
 8011614:	4639      	moveq	r1, r7
 8011616:	f021 0101 	bicne.w	r1, r1, #1
 801161a:	1043      	asrs	r3, r0, #1
 801161c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8011620:	0849      	lsrs	r1, r1, #1
 8011622:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8011626:	07c2      	lsls	r2, r0, #31
 8011628:	bf48      	it	mi
 801162a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801162e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8011632:	460c      	mov	r4, r1
 8011634:	463d      	mov	r5, r7
 8011636:	e77f      	b.n	8011538 <__ieee754_sqrt+0x34>
 8011638:	0ada      	lsrs	r2, r3, #11
 801163a:	3815      	subs	r0, #21
 801163c:	055b      	lsls	r3, r3, #21
 801163e:	2a00      	cmp	r2, #0
 8011640:	d0fa      	beq.n	8011638 <__ieee754_sqrt+0x134>
 8011642:	02d7      	lsls	r7, r2, #11
 8011644:	d50a      	bpl.n	801165c <__ieee754_sqrt+0x158>
 8011646:	f1c1 0420 	rsb	r4, r1, #32
 801164a:	fa23 f404 	lsr.w	r4, r3, r4
 801164e:	1e4d      	subs	r5, r1, #1
 8011650:	408b      	lsls	r3, r1
 8011652:	4322      	orrs	r2, r4
 8011654:	1b41      	subs	r1, r0, r5
 8011656:	e788      	b.n	801156a <__ieee754_sqrt+0x66>
 8011658:	4608      	mov	r0, r1
 801165a:	e7f0      	b.n	801163e <__ieee754_sqrt+0x13a>
 801165c:	0052      	lsls	r2, r2, #1
 801165e:	3101      	adds	r1, #1
 8011660:	e7ef      	b.n	8011642 <__ieee754_sqrt+0x13e>
 8011662:	46e0      	mov	r8, ip
 8011664:	e7be      	b.n	80115e4 <__ieee754_sqrt+0xe0>
 8011666:	bf00      	nop
 8011668:	7ff00000 	.word	0x7ff00000

0801166c <__ieee754_acosf>:
 801166c:	b508      	push	{r3, lr}
 801166e:	ee10 3a10 	vmov	r3, s0
 8011672:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8011676:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 801167a:	ed2d 8b0c 	vpush	{d8-d13}
 801167e:	d10a      	bne.n	8011696 <__ieee754_acosf+0x2a>
 8011680:	ed9f 0a66 	vldr	s0, [pc, #408]	; 801181c <__ieee754_acosf+0x1b0>
 8011684:	ed9f 8a66 	vldr	s16, [pc, #408]	; 8011820 <__ieee754_acosf+0x1b4>
 8011688:	2b00      	cmp	r3, #0
 801168a:	bfd8      	it	le
 801168c:	eeb0 0a48 	vmovle.f32	s0, s16
 8011690:	ecbd 8b0c 	vpop	{d8-d13}
 8011694:	bd08      	pop	{r3, pc}
 8011696:	dd04      	ble.n	80116a2 <__ieee754_acosf+0x36>
 8011698:	ee30 8a40 	vsub.f32	s16, s0, s0
 801169c:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80116a0:	e7f6      	b.n	8011690 <__ieee754_acosf+0x24>
 80116a2:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 80116a6:	da3e      	bge.n	8011726 <__ieee754_acosf+0xba>
 80116a8:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 80116ac:	f340 80b3 	ble.w	8011816 <__ieee754_acosf+0x1aa>
 80116b0:	ee60 7a00 	vmul.f32	s15, s0, s0
 80116b4:	eddf 6a5b 	vldr	s13, [pc, #364]	; 8011824 <__ieee754_acosf+0x1b8>
 80116b8:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8011828 <__ieee754_acosf+0x1bc>
 80116bc:	ed9f 6a5b 	vldr	s12, [pc, #364]	; 801182c <__ieee754_acosf+0x1c0>
 80116c0:	ed9f 8a5b 	vldr	s16, [pc, #364]	; 8011830 <__ieee754_acosf+0x1c4>
 80116c4:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80116c8:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8011834 <__ieee754_acosf+0x1c8>
 80116cc:	eee7 6a27 	vfma.f32	s13, s14, s15
 80116d0:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8011838 <__ieee754_acosf+0x1cc>
 80116d4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80116d8:	eddf 6a58 	vldr	s13, [pc, #352]	; 801183c <__ieee754_acosf+0x1d0>
 80116dc:	eee7 6a27 	vfma.f32	s13, s14, s15
 80116e0:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8011840 <__ieee754_acosf+0x1d4>
 80116e4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80116e8:	eddf 6a56 	vldr	s13, [pc, #344]	; 8011844 <__ieee754_acosf+0x1d8>
 80116ec:	eea7 6aa6 	vfma.f32	s12, s15, s13
 80116f0:	eddf 6a55 	vldr	s13, [pc, #340]	; 8011848 <__ieee754_acosf+0x1dc>
 80116f4:	eee6 6a27 	vfma.f32	s13, s12, s15
 80116f8:	ed9f 6a54 	vldr	s12, [pc, #336]	; 801184c <__ieee754_acosf+0x1e0>
 80116fc:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8011700:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011704:	eee6 6a27 	vfma.f32	s13, s12, s15
 8011708:	ee27 7a27 	vmul.f32	s14, s14, s15
 801170c:	eef0 7a66 	vmov.f32	s15, s13
 8011710:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8011714:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8011850 <__ieee754_acosf+0x1e4>
 8011718:	eea0 8a66 	vfms.f32	s16, s0, s13
 801171c:	ee30 0a48 	vsub.f32	s0, s0, s16
 8011720:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8011724:	e7b4      	b.n	8011690 <__ieee754_acosf+0x24>
 8011726:	2b00      	cmp	r3, #0
 8011728:	eddf da3e 	vldr	s27, [pc, #248]	; 8011824 <__ieee754_acosf+0x1b8>
 801172c:	eddf ca3e 	vldr	s25, [pc, #248]	; 8011828 <__ieee754_acosf+0x1bc>
 8011730:	ed9f ca40 	vldr	s24, [pc, #256]	; 8011834 <__ieee754_acosf+0x1c8>
 8011734:	eddf ba40 	vldr	s23, [pc, #256]	; 8011838 <__ieee754_acosf+0x1cc>
 8011738:	ed9f ba40 	vldr	s22, [pc, #256]	; 801183c <__ieee754_acosf+0x1d0>
 801173c:	eddf 8a40 	vldr	s17, [pc, #256]	; 8011840 <__ieee754_acosf+0x1d4>
 8011740:	ed9f da40 	vldr	s26, [pc, #256]	; 8011844 <__ieee754_acosf+0x1d8>
 8011744:	eddf aa39 	vldr	s21, [pc, #228]	; 801182c <__ieee754_acosf+0x1c0>
 8011748:	ed9f aa3f 	vldr	s20, [pc, #252]	; 8011848 <__ieee754_acosf+0x1dc>
 801174c:	eddf 9a3f 	vldr	s19, [pc, #252]	; 801184c <__ieee754_acosf+0x1e0>
 8011750:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8011754:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8011758:	da28      	bge.n	80117ac <__ieee754_acosf+0x140>
 801175a:	ee30 0a09 	vadd.f32	s0, s0, s18
 801175e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011762:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8011766:	eee0 aa0d 	vfma.f32	s21, s0, s26
 801176a:	eeac ca80 	vfma.f32	s24, s25, s0
 801176e:	eeaa aa80 	vfma.f32	s20, s21, s0
 8011772:	eeec ba00 	vfma.f32	s23, s24, s0
 8011776:	eeea 9a00 	vfma.f32	s19, s20, s0
 801177a:	eeab ba80 	vfma.f32	s22, s23, s0
 801177e:	eea9 9a80 	vfma.f32	s18, s19, s0
 8011782:	eeeb 8a00 	vfma.f32	s17, s22, s0
 8011786:	ee68 8a80 	vmul.f32	s17, s17, s0
 801178a:	f000 fa45 	bl	8011c18 <__ieee754_sqrtf>
 801178e:	ee88 7a89 	vdiv.f32	s14, s17, s18
 8011792:	eddf 7a30 	vldr	s15, [pc, #192]	; 8011854 <__ieee754_acosf+0x1e8>
 8011796:	eee0 7a07 	vfma.f32	s15, s0, s14
 801179a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801179e:	ee77 7a80 	vadd.f32	s15, s15, s0
 80117a2:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8011858 <__ieee754_acosf+0x1ec>
 80117a6:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80117aa:	e771      	b.n	8011690 <__ieee754_acosf+0x24>
 80117ac:	ee39 8a40 	vsub.f32	s16, s18, s0
 80117b0:	ee28 8a27 	vmul.f32	s16, s16, s15
 80117b4:	eeb0 0a48 	vmov.f32	s0, s16
 80117b8:	f000 fa2e 	bl	8011c18 <__ieee754_sqrtf>
 80117bc:	eee8 ca2d 	vfma.f32	s25, s16, s27
 80117c0:	eee8 aa0d 	vfma.f32	s21, s16, s26
 80117c4:	eeac ca88 	vfma.f32	s24, s25, s16
 80117c8:	eeaa aa88 	vfma.f32	s20, s21, s16
 80117cc:	eeec ba08 	vfma.f32	s23, s24, s16
 80117d0:	ee10 3a10 	vmov	r3, s0
 80117d4:	eeab ba88 	vfma.f32	s22, s23, s16
 80117d8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80117dc:	f023 030f 	bic.w	r3, r3, #15
 80117e0:	eeea 9a08 	vfma.f32	s19, s20, s16
 80117e4:	ee07 3a90 	vmov	s15, r3
 80117e8:	eeeb 8a08 	vfma.f32	s17, s22, s16
 80117ec:	eeb0 6a48 	vmov.f32	s12, s16
 80117f0:	eea7 6ae7 	vfms.f32	s12, s15, s15
 80117f4:	eea9 9a88 	vfma.f32	s18, s19, s16
 80117f8:	ee70 6a27 	vadd.f32	s13, s0, s15
 80117fc:	ee68 8a88 	vmul.f32	s17, s17, s16
 8011800:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8011804:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8011808:	eea0 7a26 	vfma.f32	s14, s0, s13
 801180c:	ee37 0a87 	vadd.f32	s0, s15, s14
 8011810:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011814:	e73c      	b.n	8011690 <__ieee754_acosf+0x24>
 8011816:	ed9f 0a11 	vldr	s0, [pc, #68]	; 801185c <__ieee754_acosf+0x1f0>
 801181a:	e739      	b.n	8011690 <__ieee754_acosf+0x24>
 801181c:	00000000 	.word	0x00000000
 8011820:	40490fdb 	.word	0x40490fdb
 8011824:	3811ef08 	.word	0x3811ef08
 8011828:	3a4f7f04 	.word	0x3a4f7f04
 801182c:	bf303361 	.word	0xbf303361
 8011830:	33a22168 	.word	0x33a22168
 8011834:	bd241146 	.word	0xbd241146
 8011838:	3e4e0aa8 	.word	0x3e4e0aa8
 801183c:	bea6b090 	.word	0xbea6b090
 8011840:	3e2aaaab 	.word	0x3e2aaaab
 8011844:	3d9dc62e 	.word	0x3d9dc62e
 8011848:	4001572d 	.word	0x4001572d
 801184c:	c019d139 	.word	0xc019d139
 8011850:	3fc90fda 	.word	0x3fc90fda
 8011854:	b3a22168 	.word	0xb3a22168
 8011858:	40490fda 	.word	0x40490fda
 801185c:	3fc90fdb 	.word	0x3fc90fdb

08011860 <__ieee754_atan2f>:
 8011860:	ee10 2a90 	vmov	r2, s1
 8011864:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8011868:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801186c:	b510      	push	{r4, lr}
 801186e:	eef0 7a40 	vmov.f32	s15, s0
 8011872:	dc06      	bgt.n	8011882 <__ieee754_atan2f+0x22>
 8011874:	ee10 0a10 	vmov	r0, s0
 8011878:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801187c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011880:	dd04      	ble.n	801188c <__ieee754_atan2f+0x2c>
 8011882:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8011886:	eeb0 0a67 	vmov.f32	s0, s15
 801188a:	bd10      	pop	{r4, pc}
 801188c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8011890:	d103      	bne.n	801189a <__ieee754_atan2f+0x3a>
 8011892:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011896:	f000 be1d 	b.w	80124d4 <atanf>
 801189a:	1794      	asrs	r4, r2, #30
 801189c:	f004 0402 	and.w	r4, r4, #2
 80118a0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80118a4:	b943      	cbnz	r3, 80118b8 <__ieee754_atan2f+0x58>
 80118a6:	2c02      	cmp	r4, #2
 80118a8:	d05e      	beq.n	8011968 <__ieee754_atan2f+0x108>
 80118aa:	ed9f 7a34 	vldr	s14, [pc, #208]	; 801197c <__ieee754_atan2f+0x11c>
 80118ae:	2c03      	cmp	r4, #3
 80118b0:	bf08      	it	eq
 80118b2:	eef0 7a47 	vmoveq.f32	s15, s14
 80118b6:	e7e6      	b.n	8011886 <__ieee754_atan2f+0x26>
 80118b8:	b941      	cbnz	r1, 80118cc <__ieee754_atan2f+0x6c>
 80118ba:	eddf 7a31 	vldr	s15, [pc, #196]	; 8011980 <__ieee754_atan2f+0x120>
 80118be:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8011984 <__ieee754_atan2f+0x124>
 80118c2:	2800      	cmp	r0, #0
 80118c4:	bfb8      	it	lt
 80118c6:	eef0 7a40 	vmovlt.f32	s15, s0
 80118ca:	e7dc      	b.n	8011886 <__ieee754_atan2f+0x26>
 80118cc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80118d0:	d110      	bne.n	80118f4 <__ieee754_atan2f+0x94>
 80118d2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80118d6:	f104 34ff 	add.w	r4, r4, #4294967295
 80118da:	d107      	bne.n	80118ec <__ieee754_atan2f+0x8c>
 80118dc:	2c02      	cmp	r4, #2
 80118de:	d846      	bhi.n	801196e <__ieee754_atan2f+0x10e>
 80118e0:	4b29      	ldr	r3, [pc, #164]	; (8011988 <__ieee754_atan2f+0x128>)
 80118e2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80118e6:	edd4 7a00 	vldr	s15, [r4]
 80118ea:	e7cc      	b.n	8011886 <__ieee754_atan2f+0x26>
 80118ec:	2c02      	cmp	r4, #2
 80118ee:	d841      	bhi.n	8011974 <__ieee754_atan2f+0x114>
 80118f0:	4b26      	ldr	r3, [pc, #152]	; (801198c <__ieee754_atan2f+0x12c>)
 80118f2:	e7f6      	b.n	80118e2 <__ieee754_atan2f+0x82>
 80118f4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80118f8:	d0df      	beq.n	80118ba <__ieee754_atan2f+0x5a>
 80118fa:	1a5b      	subs	r3, r3, r1
 80118fc:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8011900:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8011904:	da1a      	bge.n	801193c <__ieee754_atan2f+0xdc>
 8011906:	2a00      	cmp	r2, #0
 8011908:	da01      	bge.n	801190e <__ieee754_atan2f+0xae>
 801190a:	313c      	adds	r1, #60	; 0x3c
 801190c:	db19      	blt.n	8011942 <__ieee754_atan2f+0xe2>
 801190e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8011912:	f000 feb3 	bl	801267c <fabsf>
 8011916:	f000 fddd 	bl	80124d4 <atanf>
 801191a:	eef0 7a40 	vmov.f32	s15, s0
 801191e:	2c01      	cmp	r4, #1
 8011920:	d012      	beq.n	8011948 <__ieee754_atan2f+0xe8>
 8011922:	2c02      	cmp	r4, #2
 8011924:	d017      	beq.n	8011956 <__ieee754_atan2f+0xf6>
 8011926:	2c00      	cmp	r4, #0
 8011928:	d0ad      	beq.n	8011886 <__ieee754_atan2f+0x26>
 801192a:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8011990 <__ieee754_atan2f+0x130>
 801192e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8011932:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8011994 <__ieee754_atan2f+0x134>
 8011936:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801193a:	e7a4      	b.n	8011886 <__ieee754_atan2f+0x26>
 801193c:	eddf 7a10 	vldr	s15, [pc, #64]	; 8011980 <__ieee754_atan2f+0x120>
 8011940:	e7ed      	b.n	801191e <__ieee754_atan2f+0xbe>
 8011942:	eddf 7a15 	vldr	s15, [pc, #84]	; 8011998 <__ieee754_atan2f+0x138>
 8011946:	e7ea      	b.n	801191e <__ieee754_atan2f+0xbe>
 8011948:	ee17 3a90 	vmov	r3, s15
 801194c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011950:	ee07 3a90 	vmov	s15, r3
 8011954:	e797      	b.n	8011886 <__ieee754_atan2f+0x26>
 8011956:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8011990 <__ieee754_atan2f+0x130>
 801195a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801195e:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8011994 <__ieee754_atan2f+0x134>
 8011962:	ee70 7a67 	vsub.f32	s15, s0, s15
 8011966:	e78e      	b.n	8011886 <__ieee754_atan2f+0x26>
 8011968:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8011994 <__ieee754_atan2f+0x134>
 801196c:	e78b      	b.n	8011886 <__ieee754_atan2f+0x26>
 801196e:	eddf 7a0b 	vldr	s15, [pc, #44]	; 801199c <__ieee754_atan2f+0x13c>
 8011972:	e788      	b.n	8011886 <__ieee754_atan2f+0x26>
 8011974:	eddf 7a08 	vldr	s15, [pc, #32]	; 8011998 <__ieee754_atan2f+0x138>
 8011978:	e785      	b.n	8011886 <__ieee754_atan2f+0x26>
 801197a:	bf00      	nop
 801197c:	c0490fdb 	.word	0xc0490fdb
 8011980:	3fc90fdb 	.word	0x3fc90fdb
 8011984:	bfc90fdb 	.word	0xbfc90fdb
 8011988:	08013be0 	.word	0x08013be0
 801198c:	08013bec 	.word	0x08013bec
 8011990:	33bbbd2e 	.word	0x33bbbd2e
 8011994:	40490fdb 	.word	0x40490fdb
 8011998:	00000000 	.word	0x00000000
 801199c:	3f490fdb 	.word	0x3f490fdb

080119a0 <__ieee754_rem_pio2f>:
 80119a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80119a2:	ee10 6a10 	vmov	r6, s0
 80119a6:	4b8e      	ldr	r3, [pc, #568]	; (8011be0 <__ieee754_rem_pio2f+0x240>)
 80119a8:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80119ac:	429d      	cmp	r5, r3
 80119ae:	b087      	sub	sp, #28
 80119b0:	eef0 7a40 	vmov.f32	s15, s0
 80119b4:	4604      	mov	r4, r0
 80119b6:	dc05      	bgt.n	80119c4 <__ieee754_rem_pio2f+0x24>
 80119b8:	2300      	movs	r3, #0
 80119ba:	ed80 0a00 	vstr	s0, [r0]
 80119be:	6043      	str	r3, [r0, #4]
 80119c0:	2000      	movs	r0, #0
 80119c2:	e01a      	b.n	80119fa <__ieee754_rem_pio2f+0x5a>
 80119c4:	4b87      	ldr	r3, [pc, #540]	; (8011be4 <__ieee754_rem_pio2f+0x244>)
 80119c6:	429d      	cmp	r5, r3
 80119c8:	dc46      	bgt.n	8011a58 <__ieee754_rem_pio2f+0xb8>
 80119ca:	2e00      	cmp	r6, #0
 80119cc:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8011be8 <__ieee754_rem_pio2f+0x248>
 80119d0:	4b86      	ldr	r3, [pc, #536]	; (8011bec <__ieee754_rem_pio2f+0x24c>)
 80119d2:	f025 050f 	bic.w	r5, r5, #15
 80119d6:	dd1f      	ble.n	8011a18 <__ieee754_rem_pio2f+0x78>
 80119d8:	429d      	cmp	r5, r3
 80119da:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80119de:	d00e      	beq.n	80119fe <__ieee754_rem_pio2f+0x5e>
 80119e0:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8011bf0 <__ieee754_rem_pio2f+0x250>
 80119e4:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80119e8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80119ec:	ed80 0a00 	vstr	s0, [r0]
 80119f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80119f4:	2001      	movs	r0, #1
 80119f6:	edc4 7a01 	vstr	s15, [r4, #4]
 80119fa:	b007      	add	sp, #28
 80119fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80119fe:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8011bf4 <__ieee754_rem_pio2f+0x254>
 8011a02:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8011bf8 <__ieee754_rem_pio2f+0x258>
 8011a06:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8011a0a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8011a0e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011a12:	edc0 6a00 	vstr	s13, [r0]
 8011a16:	e7eb      	b.n	80119f0 <__ieee754_rem_pio2f+0x50>
 8011a18:	429d      	cmp	r5, r3
 8011a1a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8011a1e:	d00e      	beq.n	8011a3e <__ieee754_rem_pio2f+0x9e>
 8011a20:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8011bf0 <__ieee754_rem_pio2f+0x250>
 8011a24:	ee37 0a87 	vadd.f32	s0, s15, s14
 8011a28:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8011a2c:	ed80 0a00 	vstr	s0, [r0]
 8011a30:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011a34:	f04f 30ff 	mov.w	r0, #4294967295
 8011a38:	edc4 7a01 	vstr	s15, [r4, #4]
 8011a3c:	e7dd      	b.n	80119fa <__ieee754_rem_pio2f+0x5a>
 8011a3e:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8011bf4 <__ieee754_rem_pio2f+0x254>
 8011a42:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8011bf8 <__ieee754_rem_pio2f+0x258>
 8011a46:	ee77 7a80 	vadd.f32	s15, s15, s0
 8011a4a:	ee77 6a87 	vadd.f32	s13, s15, s14
 8011a4e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011a52:	edc0 6a00 	vstr	s13, [r0]
 8011a56:	e7eb      	b.n	8011a30 <__ieee754_rem_pio2f+0x90>
 8011a58:	4b68      	ldr	r3, [pc, #416]	; (8011bfc <__ieee754_rem_pio2f+0x25c>)
 8011a5a:	429d      	cmp	r5, r3
 8011a5c:	dc72      	bgt.n	8011b44 <__ieee754_rem_pio2f+0x1a4>
 8011a5e:	f000 fe0d 	bl	801267c <fabsf>
 8011a62:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8011c00 <__ieee754_rem_pio2f+0x260>
 8011a66:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8011a6a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8011a6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011a72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8011a76:	ee17 0a90 	vmov	r0, s15
 8011a7a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8011be8 <__ieee754_rem_pio2f+0x248>
 8011a7e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8011a82:	281f      	cmp	r0, #31
 8011a84:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8011bf0 <__ieee754_rem_pio2f+0x250>
 8011a88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011a8c:	eeb1 6a47 	vneg.f32	s12, s14
 8011a90:	ee70 6a67 	vsub.f32	s13, s0, s15
 8011a94:	ee16 2a90 	vmov	r2, s13
 8011a98:	dc1c      	bgt.n	8011ad4 <__ieee754_rem_pio2f+0x134>
 8011a9a:	495a      	ldr	r1, [pc, #360]	; (8011c04 <__ieee754_rem_pio2f+0x264>)
 8011a9c:	1e47      	subs	r7, r0, #1
 8011a9e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8011aa2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8011aa6:	428b      	cmp	r3, r1
 8011aa8:	d014      	beq.n	8011ad4 <__ieee754_rem_pio2f+0x134>
 8011aaa:	6022      	str	r2, [r4, #0]
 8011aac:	ed94 7a00 	vldr	s14, [r4]
 8011ab0:	ee30 0a47 	vsub.f32	s0, s0, s14
 8011ab4:	2e00      	cmp	r6, #0
 8011ab6:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011aba:	ed84 0a01 	vstr	s0, [r4, #4]
 8011abe:	da9c      	bge.n	80119fa <__ieee754_rem_pio2f+0x5a>
 8011ac0:	eeb1 7a47 	vneg.f32	s14, s14
 8011ac4:	eeb1 0a40 	vneg.f32	s0, s0
 8011ac8:	ed84 7a00 	vstr	s14, [r4]
 8011acc:	ed84 0a01 	vstr	s0, [r4, #4]
 8011ad0:	4240      	negs	r0, r0
 8011ad2:	e792      	b.n	80119fa <__ieee754_rem_pio2f+0x5a>
 8011ad4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8011ad8:	15eb      	asrs	r3, r5, #23
 8011ada:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8011ade:	2d08      	cmp	r5, #8
 8011ae0:	dde3      	ble.n	8011aaa <__ieee754_rem_pio2f+0x10a>
 8011ae2:	eddf 7a44 	vldr	s15, [pc, #272]	; 8011bf4 <__ieee754_rem_pio2f+0x254>
 8011ae6:	eef0 6a40 	vmov.f32	s13, s0
 8011aea:	eee6 6a27 	vfma.f32	s13, s12, s15
 8011aee:	ee30 0a66 	vsub.f32	s0, s0, s13
 8011af2:	eea6 0a27 	vfma.f32	s0, s12, s15
 8011af6:	eddf 7a40 	vldr	s15, [pc, #256]	; 8011bf8 <__ieee754_rem_pio2f+0x258>
 8011afa:	ee97 0a27 	vfnms.f32	s0, s14, s15
 8011afe:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8011b02:	eef0 7a40 	vmov.f32	s15, s0
 8011b06:	ee15 2a90 	vmov	r2, s11
 8011b0a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8011b0e:	1a5b      	subs	r3, r3, r1
 8011b10:	2b19      	cmp	r3, #25
 8011b12:	dc04      	bgt.n	8011b1e <__ieee754_rem_pio2f+0x17e>
 8011b14:	edc4 5a00 	vstr	s11, [r4]
 8011b18:	eeb0 0a66 	vmov.f32	s0, s13
 8011b1c:	e7c6      	b.n	8011aac <__ieee754_rem_pio2f+0x10c>
 8011b1e:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8011c08 <__ieee754_rem_pio2f+0x268>
 8011b22:	eeb0 0a66 	vmov.f32	s0, s13
 8011b26:	eea6 0a25 	vfma.f32	s0, s12, s11
 8011b2a:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8011b2e:	eddf 6a37 	vldr	s13, [pc, #220]	; 8011c0c <__ieee754_rem_pio2f+0x26c>
 8011b32:	eee6 7a25 	vfma.f32	s15, s12, s11
 8011b36:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8011b3a:	ee30 7a67 	vsub.f32	s14, s0, s15
 8011b3e:	ed84 7a00 	vstr	s14, [r4]
 8011b42:	e7b3      	b.n	8011aac <__ieee754_rem_pio2f+0x10c>
 8011b44:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8011b48:	db06      	blt.n	8011b58 <__ieee754_rem_pio2f+0x1b8>
 8011b4a:	ee70 7a40 	vsub.f32	s15, s0, s0
 8011b4e:	edc0 7a01 	vstr	s15, [r0, #4]
 8011b52:	edc0 7a00 	vstr	s15, [r0]
 8011b56:	e733      	b.n	80119c0 <__ieee754_rem_pio2f+0x20>
 8011b58:	15ea      	asrs	r2, r5, #23
 8011b5a:	3a86      	subs	r2, #134	; 0x86
 8011b5c:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8011b60:	ee07 3a90 	vmov	s15, r3
 8011b64:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8011b68:	eddf 6a29 	vldr	s13, [pc, #164]	; 8011c10 <__ieee754_rem_pio2f+0x270>
 8011b6c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011b70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011b74:	ed8d 7a03 	vstr	s14, [sp, #12]
 8011b78:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011b7c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8011b80:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011b84:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011b88:	ed8d 7a04 	vstr	s14, [sp, #16]
 8011b8c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011b90:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b98:	edcd 7a05 	vstr	s15, [sp, #20]
 8011b9c:	d11e      	bne.n	8011bdc <__ieee754_rem_pio2f+0x23c>
 8011b9e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8011ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ba6:	bf14      	ite	ne
 8011ba8:	2302      	movne	r3, #2
 8011baa:	2301      	moveq	r3, #1
 8011bac:	4919      	ldr	r1, [pc, #100]	; (8011c14 <__ieee754_rem_pio2f+0x274>)
 8011bae:	9101      	str	r1, [sp, #4]
 8011bb0:	2102      	movs	r1, #2
 8011bb2:	9100      	str	r1, [sp, #0]
 8011bb4:	a803      	add	r0, sp, #12
 8011bb6:	4621      	mov	r1, r4
 8011bb8:	f000 f892 	bl	8011ce0 <__kernel_rem_pio2f>
 8011bbc:	2e00      	cmp	r6, #0
 8011bbe:	f6bf af1c 	bge.w	80119fa <__ieee754_rem_pio2f+0x5a>
 8011bc2:	edd4 7a00 	vldr	s15, [r4]
 8011bc6:	eef1 7a67 	vneg.f32	s15, s15
 8011bca:	edc4 7a00 	vstr	s15, [r4]
 8011bce:	edd4 7a01 	vldr	s15, [r4, #4]
 8011bd2:	eef1 7a67 	vneg.f32	s15, s15
 8011bd6:	edc4 7a01 	vstr	s15, [r4, #4]
 8011bda:	e779      	b.n	8011ad0 <__ieee754_rem_pio2f+0x130>
 8011bdc:	2303      	movs	r3, #3
 8011bde:	e7e5      	b.n	8011bac <__ieee754_rem_pio2f+0x20c>
 8011be0:	3f490fd8 	.word	0x3f490fd8
 8011be4:	4016cbe3 	.word	0x4016cbe3
 8011be8:	3fc90f80 	.word	0x3fc90f80
 8011bec:	3fc90fd0 	.word	0x3fc90fd0
 8011bf0:	37354443 	.word	0x37354443
 8011bf4:	37354400 	.word	0x37354400
 8011bf8:	2e85a308 	.word	0x2e85a308
 8011bfc:	43490f80 	.word	0x43490f80
 8011c00:	3f22f984 	.word	0x3f22f984
 8011c04:	08013bf8 	.word	0x08013bf8
 8011c08:	2e85a300 	.word	0x2e85a300
 8011c0c:	248d3132 	.word	0x248d3132
 8011c10:	43800000 	.word	0x43800000
 8011c14:	08013c78 	.word	0x08013c78

08011c18 <__ieee754_sqrtf>:
 8011c18:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8011c1c:	4770      	bx	lr
	...

08011c20 <__kernel_cosf>:
 8011c20:	ee10 3a10 	vmov	r3, s0
 8011c24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011c28:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8011c2c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8011c30:	da05      	bge.n	8011c3e <__kernel_cosf+0x1e>
 8011c32:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8011c36:	ee17 2a90 	vmov	r2, s15
 8011c3a:	2a00      	cmp	r2, #0
 8011c3c:	d03d      	beq.n	8011cba <__kernel_cosf+0x9a>
 8011c3e:	ee60 5a00 	vmul.f32	s11, s0, s0
 8011c42:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8011cc0 <__kernel_cosf+0xa0>
 8011c46:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8011cc4 <__kernel_cosf+0xa4>
 8011c4a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8011cc8 <__kernel_cosf+0xa8>
 8011c4e:	4a1f      	ldr	r2, [pc, #124]	; (8011ccc <__kernel_cosf+0xac>)
 8011c50:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8011c54:	4293      	cmp	r3, r2
 8011c56:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8011cd0 <__kernel_cosf+0xb0>
 8011c5a:	eee7 7a25 	vfma.f32	s15, s14, s11
 8011c5e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8011cd4 <__kernel_cosf+0xb4>
 8011c62:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8011c66:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8011cd8 <__kernel_cosf+0xb8>
 8011c6a:	eee7 7a25 	vfma.f32	s15, s14, s11
 8011c6e:	eeb0 7a66 	vmov.f32	s14, s13
 8011c72:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8011c76:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8011c7a:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8011c7e:	ee67 6a25 	vmul.f32	s13, s14, s11
 8011c82:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8011c86:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8011c8a:	dc04      	bgt.n	8011c96 <__kernel_cosf+0x76>
 8011c8c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8011c90:	ee36 0a47 	vsub.f32	s0, s12, s14
 8011c94:	4770      	bx	lr
 8011c96:	4a11      	ldr	r2, [pc, #68]	; (8011cdc <__kernel_cosf+0xbc>)
 8011c98:	4293      	cmp	r3, r2
 8011c9a:	bfda      	itte	le
 8011c9c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8011ca0:	ee06 3a90 	vmovle	s13, r3
 8011ca4:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8011ca8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011cac:	ee36 0a66 	vsub.f32	s0, s12, s13
 8011cb0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011cb4:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011cb8:	4770      	bx	lr
 8011cba:	eeb0 0a46 	vmov.f32	s0, s12
 8011cbe:	4770      	bx	lr
 8011cc0:	ad47d74e 	.word	0xad47d74e
 8011cc4:	310f74f6 	.word	0x310f74f6
 8011cc8:	3d2aaaab 	.word	0x3d2aaaab
 8011ccc:	3e999999 	.word	0x3e999999
 8011cd0:	b493f27c 	.word	0xb493f27c
 8011cd4:	37d00d01 	.word	0x37d00d01
 8011cd8:	bab60b61 	.word	0xbab60b61
 8011cdc:	3f480000 	.word	0x3f480000

08011ce0 <__kernel_rem_pio2f>:
 8011ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ce4:	ed2d 8b04 	vpush	{d8-d9}
 8011ce8:	b0d7      	sub	sp, #348	; 0x15c
 8011cea:	4616      	mov	r6, r2
 8011cec:	4698      	mov	r8, r3
 8011cee:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8011cf0:	4bbb      	ldr	r3, [pc, #748]	; (8011fe0 <__kernel_rem_pio2f+0x300>)
 8011cf2:	9001      	str	r0, [sp, #4]
 8011cf4:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8011cf8:	1d33      	adds	r3, r6, #4
 8011cfa:	460d      	mov	r5, r1
 8011cfc:	f108 39ff 	add.w	r9, r8, #4294967295
 8011d00:	db29      	blt.n	8011d56 <__kernel_rem_pio2f+0x76>
 8011d02:	1ef1      	subs	r1, r6, #3
 8011d04:	bf48      	it	mi
 8011d06:	1d31      	addmi	r1, r6, #4
 8011d08:	10c9      	asrs	r1, r1, #3
 8011d0a:	1c4c      	adds	r4, r1, #1
 8011d0c:	00e3      	lsls	r3, r4, #3
 8011d0e:	9302      	str	r3, [sp, #8]
 8011d10:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8011d12:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8011ff0 <__kernel_rem_pio2f+0x310>
 8011d16:	eba1 0009 	sub.w	r0, r1, r9
 8011d1a:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 8011d1e:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 8011d22:	eb07 0c09 	add.w	ip, r7, r9
 8011d26:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 8011d2a:	2300      	movs	r3, #0
 8011d2c:	4563      	cmp	r3, ip
 8011d2e:	dd14      	ble.n	8011d5a <__kernel_rem_pio2f+0x7a>
 8011d30:	ab1a      	add	r3, sp, #104	; 0x68
 8011d32:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8011d36:	46cc      	mov	ip, r9
 8011d38:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 8011d3c:	f1c8 0b01 	rsb	fp, r8, #1
 8011d40:	eb0b 020c 	add.w	r2, fp, ip
 8011d44:	4297      	cmp	r7, r2
 8011d46:	db27      	blt.n	8011d98 <__kernel_rem_pio2f+0xb8>
 8011d48:	f8dd e004 	ldr.w	lr, [sp, #4]
 8011d4c:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8011ff0 <__kernel_rem_pio2f+0x310>
 8011d50:	4618      	mov	r0, r3
 8011d52:	2200      	movs	r2, #0
 8011d54:	e016      	b.n	8011d84 <__kernel_rem_pio2f+0xa4>
 8011d56:	2100      	movs	r1, #0
 8011d58:	e7d7      	b.n	8011d0a <__kernel_rem_pio2f+0x2a>
 8011d5a:	42d8      	cmn	r0, r3
 8011d5c:	bf5d      	ittte	pl
 8011d5e:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 8011d62:	ee07 2a90 	vmovpl	s15, r2
 8011d66:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8011d6a:	eef0 7a47 	vmovmi.f32	s15, s14
 8011d6e:	ecea 7a01 	vstmia	sl!, {s15}
 8011d72:	3301      	adds	r3, #1
 8011d74:	e7da      	b.n	8011d2c <__kernel_rem_pio2f+0x4c>
 8011d76:	ecfe 6a01 	vldmia	lr!, {s13}
 8011d7a:	ed90 7a00 	vldr	s14, [r0]
 8011d7e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011d82:	3201      	adds	r2, #1
 8011d84:	454a      	cmp	r2, r9
 8011d86:	f1a0 0004 	sub.w	r0, r0, #4
 8011d8a:	ddf4      	ble.n	8011d76 <__kernel_rem_pio2f+0x96>
 8011d8c:	ecea 7a01 	vstmia	sl!, {s15}
 8011d90:	3304      	adds	r3, #4
 8011d92:	f10c 0c01 	add.w	ip, ip, #1
 8011d96:	e7d3      	b.n	8011d40 <__kernel_rem_pio2f+0x60>
 8011d98:	ab06      	add	r3, sp, #24
 8011d9a:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8011d9e:	9304      	str	r3, [sp, #16]
 8011da0:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8011da2:	eddf 8a92 	vldr	s17, [pc, #584]	; 8011fec <__kernel_rem_pio2f+0x30c>
 8011da6:	ed9f 9a90 	vldr	s18, [pc, #576]	; 8011fe8 <__kernel_rem_pio2f+0x308>
 8011daa:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8011dae:	9303      	str	r3, [sp, #12]
 8011db0:	46ba      	mov	sl, r7
 8011db2:	ab56      	add	r3, sp, #344	; 0x158
 8011db4:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8011db8:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8011dbc:	ab06      	add	r3, sp, #24
 8011dbe:	4618      	mov	r0, r3
 8011dc0:	4652      	mov	r2, sl
 8011dc2:	2a00      	cmp	r2, #0
 8011dc4:	dc51      	bgt.n	8011e6a <__kernel_rem_pio2f+0x18a>
 8011dc6:	4620      	mov	r0, r4
 8011dc8:	9305      	str	r3, [sp, #20]
 8011dca:	f000 fca7 	bl	801271c <scalbnf>
 8011dce:	eeb0 8a40 	vmov.f32	s16, s0
 8011dd2:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8011dd6:	ee28 0a00 	vmul.f32	s0, s16, s0
 8011dda:	f000 fc57 	bl	801268c <floorf>
 8011dde:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8011de2:	eea0 8a67 	vfms.f32	s16, s0, s15
 8011de6:	2c00      	cmp	r4, #0
 8011de8:	9b05      	ldr	r3, [sp, #20]
 8011dea:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8011dee:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8011df2:	edcd 7a00 	vstr	s15, [sp]
 8011df6:	ee38 8a40 	vsub.f32	s16, s16, s0
 8011dfa:	dd4b      	ble.n	8011e94 <__kernel_rem_pio2f+0x1b4>
 8011dfc:	f10a 3cff 	add.w	ip, sl, #4294967295
 8011e00:	aa06      	add	r2, sp, #24
 8011e02:	f1c4 0e08 	rsb	lr, r4, #8
 8011e06:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8011e0a:	ee17 1a90 	vmov	r1, s15
 8011e0e:	fa42 f00e 	asr.w	r0, r2, lr
 8011e12:	4401      	add	r1, r0
 8011e14:	9100      	str	r1, [sp, #0]
 8011e16:	fa00 f00e 	lsl.w	r0, r0, lr
 8011e1a:	a906      	add	r1, sp, #24
 8011e1c:	1a12      	subs	r2, r2, r0
 8011e1e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8011e22:	f1c4 0007 	rsb	r0, r4, #7
 8011e26:	fa42 fb00 	asr.w	fp, r2, r0
 8011e2a:	f1bb 0f00 	cmp.w	fp, #0
 8011e2e:	dd43      	ble.n	8011eb8 <__kernel_rem_pio2f+0x1d8>
 8011e30:	9a00      	ldr	r2, [sp, #0]
 8011e32:	f04f 0e00 	mov.w	lr, #0
 8011e36:	3201      	adds	r2, #1
 8011e38:	9200      	str	r2, [sp, #0]
 8011e3a:	4670      	mov	r0, lr
 8011e3c:	45f2      	cmp	sl, lr
 8011e3e:	dc6c      	bgt.n	8011f1a <__kernel_rem_pio2f+0x23a>
 8011e40:	2c00      	cmp	r4, #0
 8011e42:	dd04      	ble.n	8011e4e <__kernel_rem_pio2f+0x16e>
 8011e44:	2c01      	cmp	r4, #1
 8011e46:	d079      	beq.n	8011f3c <__kernel_rem_pio2f+0x25c>
 8011e48:	2c02      	cmp	r4, #2
 8011e4a:	f000 8082 	beq.w	8011f52 <__kernel_rem_pio2f+0x272>
 8011e4e:	f1bb 0f02 	cmp.w	fp, #2
 8011e52:	d131      	bne.n	8011eb8 <__kernel_rem_pio2f+0x1d8>
 8011e54:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8011e58:	ee30 8a48 	vsub.f32	s16, s0, s16
 8011e5c:	b360      	cbz	r0, 8011eb8 <__kernel_rem_pio2f+0x1d8>
 8011e5e:	4620      	mov	r0, r4
 8011e60:	f000 fc5c 	bl	801271c <scalbnf>
 8011e64:	ee38 8a40 	vsub.f32	s16, s16, s0
 8011e68:	e026      	b.n	8011eb8 <__kernel_rem_pio2f+0x1d8>
 8011e6a:	ee60 7a28 	vmul.f32	s15, s0, s17
 8011e6e:	3a01      	subs	r2, #1
 8011e70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011e74:	a942      	add	r1, sp, #264	; 0x108
 8011e76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011e7a:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8011e7e:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8011e82:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8011e86:	eca0 0a01 	vstmia	r0!, {s0}
 8011e8a:	ed9c 0a00 	vldr	s0, [ip]
 8011e8e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8011e92:	e796      	b.n	8011dc2 <__kernel_rem_pio2f+0xe2>
 8011e94:	d107      	bne.n	8011ea6 <__kernel_rem_pio2f+0x1c6>
 8011e96:	f10a 32ff 	add.w	r2, sl, #4294967295
 8011e9a:	a906      	add	r1, sp, #24
 8011e9c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8011ea0:	ea4f 2b22 	mov.w	fp, r2, asr #8
 8011ea4:	e7c1      	b.n	8011e2a <__kernel_rem_pio2f+0x14a>
 8011ea6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8011eaa:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8011eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011eb2:	da2f      	bge.n	8011f14 <__kernel_rem_pio2f+0x234>
 8011eb4:	f04f 0b00 	mov.w	fp, #0
 8011eb8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8011ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ec0:	f040 8098 	bne.w	8011ff4 <__kernel_rem_pio2f+0x314>
 8011ec4:	f10a 33ff 	add.w	r3, sl, #4294967295
 8011ec8:	469c      	mov	ip, r3
 8011eca:	2200      	movs	r2, #0
 8011ecc:	45bc      	cmp	ip, r7
 8011ece:	da48      	bge.n	8011f62 <__kernel_rem_pio2f+0x282>
 8011ed0:	2a00      	cmp	r2, #0
 8011ed2:	d05f      	beq.n	8011f94 <__kernel_rem_pio2f+0x2b4>
 8011ed4:	aa06      	add	r2, sp, #24
 8011ed6:	3c08      	subs	r4, #8
 8011ed8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8011edc:	2900      	cmp	r1, #0
 8011ede:	d07d      	beq.n	8011fdc <__kernel_rem_pio2f+0x2fc>
 8011ee0:	4620      	mov	r0, r4
 8011ee2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8011ee6:	9301      	str	r3, [sp, #4]
 8011ee8:	f000 fc18 	bl	801271c <scalbnf>
 8011eec:	9b01      	ldr	r3, [sp, #4]
 8011eee:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8011fec <__kernel_rem_pio2f+0x30c>
 8011ef2:	4619      	mov	r1, r3
 8011ef4:	2900      	cmp	r1, #0
 8011ef6:	f280 80af 	bge.w	8012058 <__kernel_rem_pio2f+0x378>
 8011efa:	4618      	mov	r0, r3
 8011efc:	2400      	movs	r4, #0
 8011efe:	2800      	cmp	r0, #0
 8011f00:	f2c0 80d0 	blt.w	80120a4 <__kernel_rem_pio2f+0x3c4>
 8011f04:	a942      	add	r1, sp, #264	; 0x108
 8011f06:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 8011f0a:	4a36      	ldr	r2, [pc, #216]	; (8011fe4 <__kernel_rem_pio2f+0x304>)
 8011f0c:	eddf 7a38 	vldr	s15, [pc, #224]	; 8011ff0 <__kernel_rem_pio2f+0x310>
 8011f10:	2100      	movs	r1, #0
 8011f12:	e0bb      	b.n	801208c <__kernel_rem_pio2f+0x3ac>
 8011f14:	f04f 0b02 	mov.w	fp, #2
 8011f18:	e78a      	b.n	8011e30 <__kernel_rem_pio2f+0x150>
 8011f1a:	681a      	ldr	r2, [r3, #0]
 8011f1c:	b948      	cbnz	r0, 8011f32 <__kernel_rem_pio2f+0x252>
 8011f1e:	b11a      	cbz	r2, 8011f28 <__kernel_rem_pio2f+0x248>
 8011f20:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8011f24:	601a      	str	r2, [r3, #0]
 8011f26:	2201      	movs	r2, #1
 8011f28:	f10e 0e01 	add.w	lr, lr, #1
 8011f2c:	3304      	adds	r3, #4
 8011f2e:	4610      	mov	r0, r2
 8011f30:	e784      	b.n	8011e3c <__kernel_rem_pio2f+0x15c>
 8011f32:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8011f36:	601a      	str	r2, [r3, #0]
 8011f38:	4602      	mov	r2, r0
 8011f3a:	e7f5      	b.n	8011f28 <__kernel_rem_pio2f+0x248>
 8011f3c:	f10a 3cff 	add.w	ip, sl, #4294967295
 8011f40:	ab06      	add	r3, sp, #24
 8011f42:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8011f46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011f4a:	aa06      	add	r2, sp, #24
 8011f4c:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 8011f50:	e77d      	b.n	8011e4e <__kernel_rem_pio2f+0x16e>
 8011f52:	f10a 3cff 	add.w	ip, sl, #4294967295
 8011f56:	ab06      	add	r3, sp, #24
 8011f58:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8011f5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011f60:	e7f3      	b.n	8011f4a <__kernel_rem_pio2f+0x26a>
 8011f62:	a906      	add	r1, sp, #24
 8011f64:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 8011f68:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011f6c:	4302      	orrs	r2, r0
 8011f6e:	e7ad      	b.n	8011ecc <__kernel_rem_pio2f+0x1ec>
 8011f70:	3001      	adds	r0, #1
 8011f72:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011f76:	2a00      	cmp	r2, #0
 8011f78:	d0fa      	beq.n	8011f70 <__kernel_rem_pio2f+0x290>
 8011f7a:	a91a      	add	r1, sp, #104	; 0x68
 8011f7c:	eb0a 0208 	add.w	r2, sl, r8
 8011f80:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8011f84:	f10a 0301 	add.w	r3, sl, #1
 8011f88:	eb0a 0100 	add.w	r1, sl, r0
 8011f8c:	4299      	cmp	r1, r3
 8011f8e:	da04      	bge.n	8011f9a <__kernel_rem_pio2f+0x2ba>
 8011f90:	468a      	mov	sl, r1
 8011f92:	e70e      	b.n	8011db2 <__kernel_rem_pio2f+0xd2>
 8011f94:	9b04      	ldr	r3, [sp, #16]
 8011f96:	2001      	movs	r0, #1
 8011f98:	e7eb      	b.n	8011f72 <__kernel_rem_pio2f+0x292>
 8011f9a:	9803      	ldr	r0, [sp, #12]
 8011f9c:	f8dd c004 	ldr.w	ip, [sp, #4]
 8011fa0:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8011fa4:	9000      	str	r0, [sp, #0]
 8011fa6:	ee07 0a90 	vmov	s15, r0
 8011faa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011fae:	2000      	movs	r0, #0
 8011fb0:	ece2 7a01 	vstmia	r2!, {s15}
 8011fb4:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8011ff0 <__kernel_rem_pio2f+0x310>
 8011fb8:	4696      	mov	lr, r2
 8011fba:	4548      	cmp	r0, r9
 8011fbc:	dd06      	ble.n	8011fcc <__kernel_rem_pio2f+0x2ec>
 8011fbe:	a842      	add	r0, sp, #264	; 0x108
 8011fc0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8011fc4:	edc0 7a00 	vstr	s15, [r0]
 8011fc8:	3301      	adds	r3, #1
 8011fca:	e7df      	b.n	8011f8c <__kernel_rem_pio2f+0x2ac>
 8011fcc:	ecfc 6a01 	vldmia	ip!, {s13}
 8011fd0:	ed3e 7a01 	vldmdb	lr!, {s14}
 8011fd4:	3001      	adds	r0, #1
 8011fd6:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011fda:	e7ee      	b.n	8011fba <__kernel_rem_pio2f+0x2da>
 8011fdc:	3b01      	subs	r3, #1
 8011fde:	e779      	b.n	8011ed4 <__kernel_rem_pio2f+0x1f4>
 8011fe0:	08013fbc 	.word	0x08013fbc
 8011fe4:	08013f90 	.word	0x08013f90
 8011fe8:	43800000 	.word	0x43800000
 8011fec:	3b800000 	.word	0x3b800000
 8011ff0:	00000000 	.word	0x00000000
 8011ff4:	9b02      	ldr	r3, [sp, #8]
 8011ff6:	eeb0 0a48 	vmov.f32	s0, s16
 8011ffa:	1b98      	subs	r0, r3, r6
 8011ffc:	f000 fb8e 	bl	801271c <scalbnf>
 8012000:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8011fe8 <__kernel_rem_pio2f+0x308>
 8012004:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8012008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801200c:	db1b      	blt.n	8012046 <__kernel_rem_pio2f+0x366>
 801200e:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8011fec <__kernel_rem_pio2f+0x30c>
 8012012:	ee60 7a27 	vmul.f32	s15, s0, s15
 8012016:	aa06      	add	r2, sp, #24
 8012018:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801201c:	a906      	add	r1, sp, #24
 801201e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012022:	3408      	adds	r4, #8
 8012024:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8012028:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801202c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8012030:	ee10 3a10 	vmov	r3, s0
 8012034:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8012038:	ee17 2a90 	vmov	r2, s15
 801203c:	f10a 0301 	add.w	r3, sl, #1
 8012040:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8012044:	e74c      	b.n	8011ee0 <__kernel_rem_pio2f+0x200>
 8012046:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801204a:	aa06      	add	r2, sp, #24
 801204c:	ee10 3a10 	vmov	r3, s0
 8012050:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8012054:	4653      	mov	r3, sl
 8012056:	e743      	b.n	8011ee0 <__kernel_rem_pio2f+0x200>
 8012058:	aa42      	add	r2, sp, #264	; 0x108
 801205a:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 801205e:	aa06      	add	r2, sp, #24
 8012060:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8012064:	9201      	str	r2, [sp, #4]
 8012066:	ee07 2a90 	vmov	s15, r2
 801206a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801206e:	3901      	subs	r1, #1
 8012070:	ee67 7a80 	vmul.f32	s15, s15, s0
 8012074:	ee20 0a07 	vmul.f32	s0, s0, s14
 8012078:	edc0 7a00 	vstr	s15, [r0]
 801207c:	e73a      	b.n	8011ef4 <__kernel_rem_pio2f+0x214>
 801207e:	ecf2 6a01 	vldmia	r2!, {s13}
 8012082:	ecb6 7a01 	vldmia	r6!, {s14}
 8012086:	eee6 7a87 	vfma.f32	s15, s13, s14
 801208a:	3101      	adds	r1, #1
 801208c:	42b9      	cmp	r1, r7
 801208e:	dc01      	bgt.n	8012094 <__kernel_rem_pio2f+0x3b4>
 8012090:	428c      	cmp	r4, r1
 8012092:	daf4      	bge.n	801207e <__kernel_rem_pio2f+0x39e>
 8012094:	aa56      	add	r2, sp, #344	; 0x158
 8012096:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 801209a:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 801209e:	3801      	subs	r0, #1
 80120a0:	3401      	adds	r4, #1
 80120a2:	e72c      	b.n	8011efe <__kernel_rem_pio2f+0x21e>
 80120a4:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80120a6:	2a02      	cmp	r2, #2
 80120a8:	dc0a      	bgt.n	80120c0 <__kernel_rem_pio2f+0x3e0>
 80120aa:	2a00      	cmp	r2, #0
 80120ac:	dc61      	bgt.n	8012172 <__kernel_rem_pio2f+0x492>
 80120ae:	d03c      	beq.n	801212a <__kernel_rem_pio2f+0x44a>
 80120b0:	9b00      	ldr	r3, [sp, #0]
 80120b2:	f003 0007 	and.w	r0, r3, #7
 80120b6:	b057      	add	sp, #348	; 0x15c
 80120b8:	ecbd 8b04 	vpop	{d8-d9}
 80120bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120c0:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80120c2:	2a03      	cmp	r2, #3
 80120c4:	d1f4      	bne.n	80120b0 <__kernel_rem_pio2f+0x3d0>
 80120c6:	aa2e      	add	r2, sp, #184	; 0xb8
 80120c8:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80120cc:	4608      	mov	r0, r1
 80120ce:	461c      	mov	r4, r3
 80120d0:	2c00      	cmp	r4, #0
 80120d2:	f1a0 0004 	sub.w	r0, r0, #4
 80120d6:	dc59      	bgt.n	801218c <__kernel_rem_pio2f+0x4ac>
 80120d8:	4618      	mov	r0, r3
 80120da:	2801      	cmp	r0, #1
 80120dc:	f1a1 0104 	sub.w	r1, r1, #4
 80120e0:	dc64      	bgt.n	80121ac <__kernel_rem_pio2f+0x4cc>
 80120e2:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 8011ff0 <__kernel_rem_pio2f+0x310>
 80120e6:	2b01      	cmp	r3, #1
 80120e8:	dc70      	bgt.n	80121cc <__kernel_rem_pio2f+0x4ec>
 80120ea:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 80120ee:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 80120f2:	f1bb 0f00 	cmp.w	fp, #0
 80120f6:	d172      	bne.n	80121de <__kernel_rem_pio2f+0x4fe>
 80120f8:	edc5 6a00 	vstr	s13, [r5]
 80120fc:	ed85 7a01 	vstr	s14, [r5, #4]
 8012100:	edc5 7a02 	vstr	s15, [r5, #8]
 8012104:	e7d4      	b.n	80120b0 <__kernel_rem_pio2f+0x3d0>
 8012106:	aa2e      	add	r2, sp, #184	; 0xb8
 8012108:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801210c:	ed91 7a00 	vldr	s14, [r1]
 8012110:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012114:	3b01      	subs	r3, #1
 8012116:	2b00      	cmp	r3, #0
 8012118:	daf5      	bge.n	8012106 <__kernel_rem_pio2f+0x426>
 801211a:	f1bb 0f00 	cmp.w	fp, #0
 801211e:	d001      	beq.n	8012124 <__kernel_rem_pio2f+0x444>
 8012120:	eef1 7a67 	vneg.f32	s15, s15
 8012124:	edc5 7a00 	vstr	s15, [r5]
 8012128:	e7c2      	b.n	80120b0 <__kernel_rem_pio2f+0x3d0>
 801212a:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8011ff0 <__kernel_rem_pio2f+0x310>
 801212e:	e7f2      	b.n	8012116 <__kernel_rem_pio2f+0x436>
 8012130:	aa2e      	add	r2, sp, #184	; 0xb8
 8012132:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8012136:	edd0 7a00 	vldr	s15, [r0]
 801213a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801213e:	3901      	subs	r1, #1
 8012140:	2900      	cmp	r1, #0
 8012142:	daf5      	bge.n	8012130 <__kernel_rem_pio2f+0x450>
 8012144:	f1bb 0f00 	cmp.w	fp, #0
 8012148:	d017      	beq.n	801217a <__kernel_rem_pio2f+0x49a>
 801214a:	eef1 7a47 	vneg.f32	s15, s14
 801214e:	edc5 7a00 	vstr	s15, [r5]
 8012152:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8012156:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801215a:	a82f      	add	r0, sp, #188	; 0xbc
 801215c:	2101      	movs	r1, #1
 801215e:	428b      	cmp	r3, r1
 8012160:	da0e      	bge.n	8012180 <__kernel_rem_pio2f+0x4a0>
 8012162:	f1bb 0f00 	cmp.w	fp, #0
 8012166:	d001      	beq.n	801216c <__kernel_rem_pio2f+0x48c>
 8012168:	eef1 7a67 	vneg.f32	s15, s15
 801216c:	edc5 7a01 	vstr	s15, [r5, #4]
 8012170:	e79e      	b.n	80120b0 <__kernel_rem_pio2f+0x3d0>
 8012172:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 8011ff0 <__kernel_rem_pio2f+0x310>
 8012176:	4619      	mov	r1, r3
 8012178:	e7e2      	b.n	8012140 <__kernel_rem_pio2f+0x460>
 801217a:	eef0 7a47 	vmov.f32	s15, s14
 801217e:	e7e6      	b.n	801214e <__kernel_rem_pio2f+0x46e>
 8012180:	ecb0 7a01 	vldmia	r0!, {s14}
 8012184:	3101      	adds	r1, #1
 8012186:	ee77 7a87 	vadd.f32	s15, s15, s14
 801218a:	e7e8      	b.n	801215e <__kernel_rem_pio2f+0x47e>
 801218c:	edd0 7a00 	vldr	s15, [r0]
 8012190:	edd0 6a01 	vldr	s13, [r0, #4]
 8012194:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8012198:	3c01      	subs	r4, #1
 801219a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801219e:	ed80 7a00 	vstr	s14, [r0]
 80121a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80121a6:	edc0 7a01 	vstr	s15, [r0, #4]
 80121aa:	e791      	b.n	80120d0 <__kernel_rem_pio2f+0x3f0>
 80121ac:	edd1 7a00 	vldr	s15, [r1]
 80121b0:	edd1 6a01 	vldr	s13, [r1, #4]
 80121b4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80121b8:	3801      	subs	r0, #1
 80121ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80121be:	ed81 7a00 	vstr	s14, [r1]
 80121c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80121c6:	edc1 7a01 	vstr	s15, [r1, #4]
 80121ca:	e786      	b.n	80120da <__kernel_rem_pio2f+0x3fa>
 80121cc:	aa2e      	add	r2, sp, #184	; 0xb8
 80121ce:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80121d2:	ed91 7a00 	vldr	s14, [r1]
 80121d6:	3b01      	subs	r3, #1
 80121d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80121dc:	e783      	b.n	80120e6 <__kernel_rem_pio2f+0x406>
 80121de:	eef1 6a66 	vneg.f32	s13, s13
 80121e2:	eeb1 7a47 	vneg.f32	s14, s14
 80121e6:	edc5 6a00 	vstr	s13, [r5]
 80121ea:	ed85 7a01 	vstr	s14, [r5, #4]
 80121ee:	eef1 7a67 	vneg.f32	s15, s15
 80121f2:	e785      	b.n	8012100 <__kernel_rem_pio2f+0x420>

080121f4 <__kernel_sinf>:
 80121f4:	ee10 3a10 	vmov	r3, s0
 80121f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80121fc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8012200:	da04      	bge.n	801220c <__kernel_sinf+0x18>
 8012202:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8012206:	ee17 3a90 	vmov	r3, s15
 801220a:	b35b      	cbz	r3, 8012264 <__kernel_sinf+0x70>
 801220c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8012210:	eddf 7a15 	vldr	s15, [pc, #84]	; 8012268 <__kernel_sinf+0x74>
 8012214:	ed9f 6a15 	vldr	s12, [pc, #84]	; 801226c <__kernel_sinf+0x78>
 8012218:	eea7 6a27 	vfma.f32	s12, s14, s15
 801221c:	eddf 7a14 	vldr	s15, [pc, #80]	; 8012270 <__kernel_sinf+0x7c>
 8012220:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012224:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8012274 <__kernel_sinf+0x80>
 8012228:	eea7 6a87 	vfma.f32	s12, s15, s14
 801222c:	eddf 7a12 	vldr	s15, [pc, #72]	; 8012278 <__kernel_sinf+0x84>
 8012230:	ee60 6a07 	vmul.f32	s13, s0, s14
 8012234:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012238:	b930      	cbnz	r0, 8012248 <__kernel_sinf+0x54>
 801223a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 801227c <__kernel_sinf+0x88>
 801223e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012242:	eea6 0a26 	vfma.f32	s0, s12, s13
 8012246:	4770      	bx	lr
 8012248:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801224c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8012250:	eee0 7a86 	vfma.f32	s15, s1, s12
 8012254:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8012258:	eddf 7a09 	vldr	s15, [pc, #36]	; 8012280 <__kernel_sinf+0x8c>
 801225c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8012260:	ee30 0a60 	vsub.f32	s0, s0, s1
 8012264:	4770      	bx	lr
 8012266:	bf00      	nop
 8012268:	2f2ec9d3 	.word	0x2f2ec9d3
 801226c:	b2d72f34 	.word	0xb2d72f34
 8012270:	3638ef1b 	.word	0x3638ef1b
 8012274:	b9500d01 	.word	0xb9500d01
 8012278:	3c088889 	.word	0x3c088889
 801227c:	be2aaaab 	.word	0xbe2aaaab
 8012280:	3e2aaaab 	.word	0x3e2aaaab

08012284 <finite>:
 8012284:	b082      	sub	sp, #8
 8012286:	ed8d 0b00 	vstr	d0, [sp]
 801228a:	9801      	ldr	r0, [sp, #4]
 801228c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8012290:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8012294:	0fc0      	lsrs	r0, r0, #31
 8012296:	b002      	add	sp, #8
 8012298:	4770      	bx	lr
 801229a:	0000      	movs	r0, r0
 801229c:	0000      	movs	r0, r0
	...

080122a0 <nan>:
 80122a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80122a8 <nan+0x8>
 80122a4:	4770      	bx	lr
 80122a6:	bf00      	nop
 80122a8:	00000000 	.word	0x00000000
 80122ac:	7ff80000 	.word	0x7ff80000

080122b0 <rint>:
 80122b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80122b2:	ec51 0b10 	vmov	r0, r1, d0
 80122b6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80122ba:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80122be:	2e13      	cmp	r6, #19
 80122c0:	ee10 4a10 	vmov	r4, s0
 80122c4:	460b      	mov	r3, r1
 80122c6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80122ca:	dc58      	bgt.n	801237e <rint+0xce>
 80122cc:	2e00      	cmp	r6, #0
 80122ce:	da2b      	bge.n	8012328 <rint+0x78>
 80122d0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80122d4:	4302      	orrs	r2, r0
 80122d6:	d023      	beq.n	8012320 <rint+0x70>
 80122d8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80122dc:	4302      	orrs	r2, r0
 80122de:	4254      	negs	r4, r2
 80122e0:	4314      	orrs	r4, r2
 80122e2:	0c4b      	lsrs	r3, r1, #17
 80122e4:	0b24      	lsrs	r4, r4, #12
 80122e6:	045b      	lsls	r3, r3, #17
 80122e8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80122ec:	ea44 0103 	orr.w	r1, r4, r3
 80122f0:	4b32      	ldr	r3, [pc, #200]	; (80123bc <rint+0x10c>)
 80122f2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80122f6:	e9d3 6700 	ldrd	r6, r7, [r3]
 80122fa:	4602      	mov	r2, r0
 80122fc:	460b      	mov	r3, r1
 80122fe:	4630      	mov	r0, r6
 8012300:	4639      	mov	r1, r7
 8012302:	f7f0 fd93 	bl	8002e2c <__adddf3>
 8012306:	e9cd 0100 	strd	r0, r1, [sp]
 801230a:	463b      	mov	r3, r7
 801230c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012310:	4632      	mov	r2, r6
 8012312:	f7f0 fd89 	bl	8002e28 <__aeabi_dsub>
 8012316:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801231a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801231e:	4639      	mov	r1, r7
 8012320:	ec41 0b10 	vmov	d0, r0, r1
 8012324:	b003      	add	sp, #12
 8012326:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012328:	4a25      	ldr	r2, [pc, #148]	; (80123c0 <rint+0x110>)
 801232a:	4132      	asrs	r2, r6
 801232c:	ea01 0702 	and.w	r7, r1, r2
 8012330:	4307      	orrs	r7, r0
 8012332:	d0f5      	beq.n	8012320 <rint+0x70>
 8012334:	0851      	lsrs	r1, r2, #1
 8012336:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 801233a:	4314      	orrs	r4, r2
 801233c:	d00c      	beq.n	8012358 <rint+0xa8>
 801233e:	ea23 0201 	bic.w	r2, r3, r1
 8012342:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012346:	2e13      	cmp	r6, #19
 8012348:	fa43 f606 	asr.w	r6, r3, r6
 801234c:	bf0c      	ite	eq
 801234e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8012352:	2400      	movne	r4, #0
 8012354:	ea42 0306 	orr.w	r3, r2, r6
 8012358:	4918      	ldr	r1, [pc, #96]	; (80123bc <rint+0x10c>)
 801235a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801235e:	4622      	mov	r2, r4
 8012360:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012364:	4620      	mov	r0, r4
 8012366:	4629      	mov	r1, r5
 8012368:	f7f0 fd60 	bl	8002e2c <__adddf3>
 801236c:	e9cd 0100 	strd	r0, r1, [sp]
 8012370:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012374:	4622      	mov	r2, r4
 8012376:	462b      	mov	r3, r5
 8012378:	f7f0 fd56 	bl	8002e28 <__aeabi_dsub>
 801237c:	e7d0      	b.n	8012320 <rint+0x70>
 801237e:	2e33      	cmp	r6, #51	; 0x33
 8012380:	dd07      	ble.n	8012392 <rint+0xe2>
 8012382:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012386:	d1cb      	bne.n	8012320 <rint+0x70>
 8012388:	ee10 2a10 	vmov	r2, s0
 801238c:	f7f0 fd4e 	bl	8002e2c <__adddf3>
 8012390:	e7c6      	b.n	8012320 <rint+0x70>
 8012392:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8012396:	f04f 36ff 	mov.w	r6, #4294967295
 801239a:	40d6      	lsrs	r6, r2
 801239c:	4230      	tst	r0, r6
 801239e:	d0bf      	beq.n	8012320 <rint+0x70>
 80123a0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 80123a4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 80123a8:	bf1f      	itttt	ne
 80123aa:	ea24 0101 	bicne.w	r1, r4, r1
 80123ae:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80123b2:	fa44 f202 	asrne.w	r2, r4, r2
 80123b6:	ea41 0402 	orrne.w	r4, r1, r2
 80123ba:	e7cd      	b.n	8012358 <rint+0xa8>
 80123bc:	08013fc8 	.word	0x08013fc8
 80123c0:	000fffff 	.word	0x000fffff
 80123c4:	00000000 	.word	0x00000000

080123c8 <scalbn>:
 80123c8:	b570      	push	{r4, r5, r6, lr}
 80123ca:	ec55 4b10 	vmov	r4, r5, d0
 80123ce:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80123d2:	4606      	mov	r6, r0
 80123d4:	462b      	mov	r3, r5
 80123d6:	b99a      	cbnz	r2, 8012400 <scalbn+0x38>
 80123d8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80123dc:	4323      	orrs	r3, r4
 80123de:	d036      	beq.n	801244e <scalbn+0x86>
 80123e0:	4b39      	ldr	r3, [pc, #228]	; (80124c8 <scalbn+0x100>)
 80123e2:	4629      	mov	r1, r5
 80123e4:	ee10 0a10 	vmov	r0, s0
 80123e8:	2200      	movs	r2, #0
 80123ea:	f7f0 fed5 	bl	8003198 <__aeabi_dmul>
 80123ee:	4b37      	ldr	r3, [pc, #220]	; (80124cc <scalbn+0x104>)
 80123f0:	429e      	cmp	r6, r3
 80123f2:	4604      	mov	r4, r0
 80123f4:	460d      	mov	r5, r1
 80123f6:	da10      	bge.n	801241a <scalbn+0x52>
 80123f8:	a32b      	add	r3, pc, #172	; (adr r3, 80124a8 <scalbn+0xe0>)
 80123fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123fe:	e03a      	b.n	8012476 <scalbn+0xae>
 8012400:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8012404:	428a      	cmp	r2, r1
 8012406:	d10c      	bne.n	8012422 <scalbn+0x5a>
 8012408:	ee10 2a10 	vmov	r2, s0
 801240c:	4620      	mov	r0, r4
 801240e:	4629      	mov	r1, r5
 8012410:	f7f0 fd0c 	bl	8002e2c <__adddf3>
 8012414:	4604      	mov	r4, r0
 8012416:	460d      	mov	r5, r1
 8012418:	e019      	b.n	801244e <scalbn+0x86>
 801241a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801241e:	460b      	mov	r3, r1
 8012420:	3a36      	subs	r2, #54	; 0x36
 8012422:	4432      	add	r2, r6
 8012424:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8012428:	428a      	cmp	r2, r1
 801242a:	dd08      	ble.n	801243e <scalbn+0x76>
 801242c:	2d00      	cmp	r5, #0
 801242e:	a120      	add	r1, pc, #128	; (adr r1, 80124b0 <scalbn+0xe8>)
 8012430:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012434:	da1c      	bge.n	8012470 <scalbn+0xa8>
 8012436:	a120      	add	r1, pc, #128	; (adr r1, 80124b8 <scalbn+0xf0>)
 8012438:	e9d1 0100 	ldrd	r0, r1, [r1]
 801243c:	e018      	b.n	8012470 <scalbn+0xa8>
 801243e:	2a00      	cmp	r2, #0
 8012440:	dd08      	ble.n	8012454 <scalbn+0x8c>
 8012442:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012446:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801244a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801244e:	ec45 4b10 	vmov	d0, r4, r5
 8012452:	bd70      	pop	{r4, r5, r6, pc}
 8012454:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012458:	da19      	bge.n	801248e <scalbn+0xc6>
 801245a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801245e:	429e      	cmp	r6, r3
 8012460:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8012464:	dd0a      	ble.n	801247c <scalbn+0xb4>
 8012466:	a112      	add	r1, pc, #72	; (adr r1, 80124b0 <scalbn+0xe8>)
 8012468:	e9d1 0100 	ldrd	r0, r1, [r1]
 801246c:	2b00      	cmp	r3, #0
 801246e:	d1e2      	bne.n	8012436 <scalbn+0x6e>
 8012470:	a30f      	add	r3, pc, #60	; (adr r3, 80124b0 <scalbn+0xe8>)
 8012472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012476:	f7f0 fe8f 	bl	8003198 <__aeabi_dmul>
 801247a:	e7cb      	b.n	8012414 <scalbn+0x4c>
 801247c:	a10a      	add	r1, pc, #40	; (adr r1, 80124a8 <scalbn+0xe0>)
 801247e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012482:	2b00      	cmp	r3, #0
 8012484:	d0b8      	beq.n	80123f8 <scalbn+0x30>
 8012486:	a10e      	add	r1, pc, #56	; (adr r1, 80124c0 <scalbn+0xf8>)
 8012488:	e9d1 0100 	ldrd	r0, r1, [r1]
 801248c:	e7b4      	b.n	80123f8 <scalbn+0x30>
 801248e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012492:	3236      	adds	r2, #54	; 0x36
 8012494:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012498:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801249c:	4620      	mov	r0, r4
 801249e:	4b0c      	ldr	r3, [pc, #48]	; (80124d0 <scalbn+0x108>)
 80124a0:	2200      	movs	r2, #0
 80124a2:	e7e8      	b.n	8012476 <scalbn+0xae>
 80124a4:	f3af 8000 	nop.w
 80124a8:	c2f8f359 	.word	0xc2f8f359
 80124ac:	01a56e1f 	.word	0x01a56e1f
 80124b0:	8800759c 	.word	0x8800759c
 80124b4:	7e37e43c 	.word	0x7e37e43c
 80124b8:	8800759c 	.word	0x8800759c
 80124bc:	fe37e43c 	.word	0xfe37e43c
 80124c0:	c2f8f359 	.word	0xc2f8f359
 80124c4:	81a56e1f 	.word	0x81a56e1f
 80124c8:	43500000 	.word	0x43500000
 80124cc:	ffff3cb0 	.word	0xffff3cb0
 80124d0:	3c900000 	.word	0x3c900000

080124d4 <atanf>:
 80124d4:	b538      	push	{r3, r4, r5, lr}
 80124d6:	ee10 5a10 	vmov	r5, s0
 80124da:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80124de:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 80124e2:	eef0 7a40 	vmov.f32	s15, s0
 80124e6:	db10      	blt.n	801250a <atanf+0x36>
 80124e8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80124ec:	dd04      	ble.n	80124f8 <atanf+0x24>
 80124ee:	ee70 7a00 	vadd.f32	s15, s0, s0
 80124f2:	eeb0 0a67 	vmov.f32	s0, s15
 80124f6:	bd38      	pop	{r3, r4, r5, pc}
 80124f8:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8012630 <atanf+0x15c>
 80124fc:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8012634 <atanf+0x160>
 8012500:	2d00      	cmp	r5, #0
 8012502:	bfd8      	it	le
 8012504:	eef0 7a40 	vmovle.f32	s15, s0
 8012508:	e7f3      	b.n	80124f2 <atanf+0x1e>
 801250a:	4b4b      	ldr	r3, [pc, #300]	; (8012638 <atanf+0x164>)
 801250c:	429c      	cmp	r4, r3
 801250e:	dc10      	bgt.n	8012532 <atanf+0x5e>
 8012510:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8012514:	da0a      	bge.n	801252c <atanf+0x58>
 8012516:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801263c <atanf+0x168>
 801251a:	ee30 7a07 	vadd.f32	s14, s0, s14
 801251e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012522:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8012526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801252a:	dce2      	bgt.n	80124f2 <atanf+0x1e>
 801252c:	f04f 33ff 	mov.w	r3, #4294967295
 8012530:	e013      	b.n	801255a <atanf+0x86>
 8012532:	f000 f8a3 	bl	801267c <fabsf>
 8012536:	4b42      	ldr	r3, [pc, #264]	; (8012640 <atanf+0x16c>)
 8012538:	429c      	cmp	r4, r3
 801253a:	dc4f      	bgt.n	80125dc <atanf+0x108>
 801253c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8012540:	429c      	cmp	r4, r3
 8012542:	dc41      	bgt.n	80125c8 <atanf+0xf4>
 8012544:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8012548:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801254c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8012550:	2300      	movs	r3, #0
 8012552:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012556:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801255a:	1c5a      	adds	r2, r3, #1
 801255c:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8012560:	eddf 5a38 	vldr	s11, [pc, #224]	; 8012644 <atanf+0x170>
 8012564:	ed9f 6a38 	vldr	s12, [pc, #224]	; 8012648 <atanf+0x174>
 8012568:	ed9f 5a38 	vldr	s10, [pc, #224]	; 801264c <atanf+0x178>
 801256c:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8012650 <atanf+0x17c>
 8012570:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8012574:	eea7 6a25 	vfma.f32	s12, s14, s11
 8012578:	eddf 5a36 	vldr	s11, [pc, #216]	; 8012654 <atanf+0x180>
 801257c:	eee6 5a07 	vfma.f32	s11, s12, s14
 8012580:	ed9f 6a35 	vldr	s12, [pc, #212]	; 8012658 <atanf+0x184>
 8012584:	eea5 6a87 	vfma.f32	s12, s11, s14
 8012588:	eddf 5a34 	vldr	s11, [pc, #208]	; 801265c <atanf+0x188>
 801258c:	eee6 5a07 	vfma.f32	s11, s12, s14
 8012590:	ed9f 6a33 	vldr	s12, [pc, #204]	; 8012660 <atanf+0x18c>
 8012594:	eea5 6a87 	vfma.f32	s12, s11, s14
 8012598:	eddf 5a32 	vldr	s11, [pc, #200]	; 8012664 <atanf+0x190>
 801259c:	eee7 5a05 	vfma.f32	s11, s14, s10
 80125a0:	ed9f 5a31 	vldr	s10, [pc, #196]	; 8012668 <atanf+0x194>
 80125a4:	eea5 5a87 	vfma.f32	s10, s11, s14
 80125a8:	eddf 5a30 	vldr	s11, [pc, #192]	; 801266c <atanf+0x198>
 80125ac:	eee5 5a07 	vfma.f32	s11, s10, s14
 80125b0:	eea5 0a87 	vfma.f32	s0, s11, s14
 80125b4:	ee20 0a07 	vmul.f32	s0, s0, s14
 80125b8:	eea6 0a26 	vfma.f32	s0, s12, s13
 80125bc:	ee27 0a80 	vmul.f32	s0, s15, s0
 80125c0:	d121      	bne.n	8012606 <atanf+0x132>
 80125c2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80125c6:	e794      	b.n	80124f2 <atanf+0x1e>
 80125c8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80125cc:	ee30 7a67 	vsub.f32	s14, s0, s15
 80125d0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80125d4:	2301      	movs	r3, #1
 80125d6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80125da:	e7be      	b.n	801255a <atanf+0x86>
 80125dc:	4b24      	ldr	r3, [pc, #144]	; (8012670 <atanf+0x19c>)
 80125de:	429c      	cmp	r4, r3
 80125e0:	dc0b      	bgt.n	80125fa <atanf+0x126>
 80125e2:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80125e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80125ea:	eea0 7a27 	vfma.f32	s14, s0, s15
 80125ee:	2302      	movs	r3, #2
 80125f0:	ee70 6a67 	vsub.f32	s13, s0, s15
 80125f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80125f8:	e7af      	b.n	801255a <atanf+0x86>
 80125fa:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80125fe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012602:	2303      	movs	r3, #3
 8012604:	e7a9      	b.n	801255a <atanf+0x86>
 8012606:	4a1b      	ldr	r2, [pc, #108]	; (8012674 <atanf+0x1a0>)
 8012608:	491b      	ldr	r1, [pc, #108]	; (8012678 <atanf+0x1a4>)
 801260a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801260e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8012612:	ed93 7a00 	vldr	s14, [r3]
 8012616:	ee30 0a47 	vsub.f32	s0, s0, s14
 801261a:	2d00      	cmp	r5, #0
 801261c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8012620:	ed92 0a00 	vldr	s0, [r2]
 8012624:	ee70 7a67 	vsub.f32	s15, s0, s15
 8012628:	bfb8      	it	lt
 801262a:	eef1 7a67 	vneglt.f32	s15, s15
 801262e:	e760      	b.n	80124f2 <atanf+0x1e>
 8012630:	3fc90fdb 	.word	0x3fc90fdb
 8012634:	bfc90fdb 	.word	0xbfc90fdb
 8012638:	3edfffff 	.word	0x3edfffff
 801263c:	7149f2ca 	.word	0x7149f2ca
 8012640:	3f97ffff 	.word	0x3f97ffff
 8012644:	3c8569d7 	.word	0x3c8569d7
 8012648:	3d4bda59 	.word	0x3d4bda59
 801264c:	bd15a221 	.word	0xbd15a221
 8012650:	be4ccccd 	.word	0xbe4ccccd
 8012654:	3d886b35 	.word	0x3d886b35
 8012658:	3dba2e6e 	.word	0x3dba2e6e
 801265c:	3e124925 	.word	0x3e124925
 8012660:	3eaaaaab 	.word	0x3eaaaaab
 8012664:	bd6ef16b 	.word	0xbd6ef16b
 8012668:	bd9d8795 	.word	0xbd9d8795
 801266c:	bde38e38 	.word	0xbde38e38
 8012670:	401bffff 	.word	0x401bffff
 8012674:	08013fd8 	.word	0x08013fd8
 8012678:	08013fe8 	.word	0x08013fe8

0801267c <fabsf>:
 801267c:	ee10 3a10 	vmov	r3, s0
 8012680:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012684:	ee00 3a10 	vmov	s0, r3
 8012688:	4770      	bx	lr
	...

0801268c <floorf>:
 801268c:	ee10 3a10 	vmov	r3, s0
 8012690:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8012694:	3a7f      	subs	r2, #127	; 0x7f
 8012696:	2a16      	cmp	r2, #22
 8012698:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801269c:	dc2a      	bgt.n	80126f4 <floorf+0x68>
 801269e:	2a00      	cmp	r2, #0
 80126a0:	da11      	bge.n	80126c6 <floorf+0x3a>
 80126a2:	eddf 7a18 	vldr	s15, [pc, #96]	; 8012704 <floorf+0x78>
 80126a6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80126aa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80126ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126b2:	dd05      	ble.n	80126c0 <floorf+0x34>
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	da23      	bge.n	8012700 <floorf+0x74>
 80126b8:	4a13      	ldr	r2, [pc, #76]	; (8012708 <floorf+0x7c>)
 80126ba:	2900      	cmp	r1, #0
 80126bc:	bf18      	it	ne
 80126be:	4613      	movne	r3, r2
 80126c0:	ee00 3a10 	vmov	s0, r3
 80126c4:	4770      	bx	lr
 80126c6:	4911      	ldr	r1, [pc, #68]	; (801270c <floorf+0x80>)
 80126c8:	4111      	asrs	r1, r2
 80126ca:	420b      	tst	r3, r1
 80126cc:	d0fa      	beq.n	80126c4 <floorf+0x38>
 80126ce:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8012704 <floorf+0x78>
 80126d2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80126d6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80126da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126de:	ddef      	ble.n	80126c0 <floorf+0x34>
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	bfbe      	ittt	lt
 80126e4:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80126e8:	fa40 f202 	asrlt.w	r2, r0, r2
 80126ec:	189b      	addlt	r3, r3, r2
 80126ee:	ea23 0301 	bic.w	r3, r3, r1
 80126f2:	e7e5      	b.n	80126c0 <floorf+0x34>
 80126f4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80126f8:	d3e4      	bcc.n	80126c4 <floorf+0x38>
 80126fa:	ee30 0a00 	vadd.f32	s0, s0, s0
 80126fe:	4770      	bx	lr
 8012700:	2300      	movs	r3, #0
 8012702:	e7dd      	b.n	80126c0 <floorf+0x34>
 8012704:	7149f2ca 	.word	0x7149f2ca
 8012708:	bf800000 	.word	0xbf800000
 801270c:	007fffff 	.word	0x007fffff

08012710 <nanf>:
 8012710:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012718 <nanf+0x8>
 8012714:	4770      	bx	lr
 8012716:	bf00      	nop
 8012718:	7fc00000 	.word	0x7fc00000

0801271c <scalbnf>:
 801271c:	ee10 3a10 	vmov	r3, s0
 8012720:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8012724:	d025      	beq.n	8012772 <scalbnf+0x56>
 8012726:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801272a:	d302      	bcc.n	8012732 <scalbnf+0x16>
 801272c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012730:	4770      	bx	lr
 8012732:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8012736:	d122      	bne.n	801277e <scalbnf+0x62>
 8012738:	4b2a      	ldr	r3, [pc, #168]	; (80127e4 <scalbnf+0xc8>)
 801273a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80127e8 <scalbnf+0xcc>
 801273e:	4298      	cmp	r0, r3
 8012740:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012744:	db16      	blt.n	8012774 <scalbnf+0x58>
 8012746:	ee10 3a10 	vmov	r3, s0
 801274a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801274e:	3a19      	subs	r2, #25
 8012750:	4402      	add	r2, r0
 8012752:	2afe      	cmp	r2, #254	; 0xfe
 8012754:	dd15      	ble.n	8012782 <scalbnf+0x66>
 8012756:	ee10 3a10 	vmov	r3, s0
 801275a:	eddf 7a24 	vldr	s15, [pc, #144]	; 80127ec <scalbnf+0xd0>
 801275e:	eddf 6a24 	vldr	s13, [pc, #144]	; 80127f0 <scalbnf+0xd4>
 8012762:	2b00      	cmp	r3, #0
 8012764:	eeb0 7a67 	vmov.f32	s14, s15
 8012768:	bfb8      	it	lt
 801276a:	eef0 7a66 	vmovlt.f32	s15, s13
 801276e:	ee27 0a27 	vmul.f32	s0, s14, s15
 8012772:	4770      	bx	lr
 8012774:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80127f4 <scalbnf+0xd8>
 8012778:	ee20 0a27 	vmul.f32	s0, s0, s15
 801277c:	4770      	bx	lr
 801277e:	0dd2      	lsrs	r2, r2, #23
 8012780:	e7e6      	b.n	8012750 <scalbnf+0x34>
 8012782:	2a00      	cmp	r2, #0
 8012784:	dd06      	ble.n	8012794 <scalbnf+0x78>
 8012786:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801278a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801278e:	ee00 3a10 	vmov	s0, r3
 8012792:	4770      	bx	lr
 8012794:	f112 0f16 	cmn.w	r2, #22
 8012798:	da1a      	bge.n	80127d0 <scalbnf+0xb4>
 801279a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801279e:	4298      	cmp	r0, r3
 80127a0:	ee10 3a10 	vmov	r3, s0
 80127a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80127a8:	dd0a      	ble.n	80127c0 <scalbnf+0xa4>
 80127aa:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80127ec <scalbnf+0xd0>
 80127ae:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80127f0 <scalbnf+0xd4>
 80127b2:	eef0 7a40 	vmov.f32	s15, s0
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	bf18      	it	ne
 80127ba:	eeb0 0a47 	vmovne.f32	s0, s14
 80127be:	e7db      	b.n	8012778 <scalbnf+0x5c>
 80127c0:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80127f4 <scalbnf+0xd8>
 80127c4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80127f8 <scalbnf+0xdc>
 80127c8:	eef0 7a40 	vmov.f32	s15, s0
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	e7f3      	b.n	80127b8 <scalbnf+0x9c>
 80127d0:	3219      	adds	r2, #25
 80127d2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80127d6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80127da:	eddf 7a08 	vldr	s15, [pc, #32]	; 80127fc <scalbnf+0xe0>
 80127de:	ee07 3a10 	vmov	s14, r3
 80127e2:	e7c4      	b.n	801276e <scalbnf+0x52>
 80127e4:	ffff3cb0 	.word	0xffff3cb0
 80127e8:	4c000000 	.word	0x4c000000
 80127ec:	7149f2ca 	.word	0x7149f2ca
 80127f0:	f149f2ca 	.word	0xf149f2ca
 80127f4:	0da24260 	.word	0x0da24260
 80127f8:	8da24260 	.word	0x8da24260
 80127fc:	33000000 	.word	0x33000000

08012800 <_init>:
 8012800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012802:	bf00      	nop
 8012804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012806:	bc08      	pop	{r3}
 8012808:	469e      	mov	lr, r3
 801280a:	4770      	bx	lr

0801280c <_fini>:
 801280c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801280e:	bf00      	nop
 8012810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012812:	bc08      	pop	{r3}
 8012814:	469e      	mov	lr, r3
 8012816:	4770      	bx	lr
